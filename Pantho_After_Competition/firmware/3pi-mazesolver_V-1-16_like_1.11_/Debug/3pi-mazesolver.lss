
3pi-mazesolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00002b48  00002bdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026d  0080014a  0080014a  00002c26  2**0
                  ALLOC
  3 .stab         00006624  00000000  00000000  00002c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008bbc  00000000  00000000  0000924c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00011e08  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  00011e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000018b8  00000000  00000000  00011f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007a9  00000000  00000000  00013800  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001100  00000000  00000000  00013fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000284  00000000  00000000  000150ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000537  00000000  00000000  00015330  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c87  00000000  00000000  00015867  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f0  00000000  00000000  000164ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__dtors_end>
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      24:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__vector_9>
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      34:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__vector_13>
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      50:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <go>:
      76:	4c 31 36 20 63 64 65 67 72 65 67 34 00              L16 cdegreg4.

00000083 <welcome>:
      83:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000008d <demo_name_line2>:
      8d:	73 6f 6c 76 65 72 00                                solver.

00000094 <demo_name_line1>:
      94:	4d 61 7a 65 00                                      Maze.

00000099 <welcome_line2>:
      99:	33 f7 20 52 6f 62 6f 74 00                          3. Robot.

000000a2 <welcome_line1>:
      a2:	20 50 6f 6c 6f 6c 75 00                              Pololu.

000000aa <__ctors_start>:
      aa:	57 0e       	add	r5, r23

000000ac <__ctors_end>:
      ac:	58 0e       	add	r5, r24

000000ae <__dtors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	d8 e0       	ldi	r29, 0x08	; 8
      b6:	de bf       	out	0x3e, r29	; 62
      b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
      ba:	11 e0       	ldi	r17, 0x01	; 1
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	e8 e4       	ldi	r30, 0x48	; 72
      c2:	fb e2       	ldi	r31, 0x2B	; 43
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
      c6:	05 90       	lpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	aa 34       	cpi	r26, 0x4A	; 74
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
      d0:	23 e0       	ldi	r18, 0x03	; 3
      d2:	aa e4       	ldi	r26, 0x4A	; 74
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a7 3b       	cpi	r26, 0xB7	; 183
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>

000000e0 <__do_global_ctors>:
      e0:	10 e0       	ldi	r17, 0x00	; 0
      e2:	cc ea       	ldi	r28, 0xAC	; 172
      e4:	d0 e0       	ldi	r29, 0x00	; 0
      e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_global_ctors+0x10>
      e8:	22 97       	sbiw	r28, 0x02	; 2
      ea:	fe 01       	movw	r30, r28
      ec:	0e 94 4d 14 	call	0x289a	; 0x289a <__tablejump__>
      f0:	ca 3a       	cpi	r28, 0xAA	; 170
      f2:	d1 07       	cpc	r29, r17
      f4:	c9 f7       	brne	.-14     	; 0xe8 <__do_global_ctors+0x8>
      f6:	0e 94 44 02 	call	0x488	; 0x488 <main>
      fa:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__do_global_dtors>

000000fe <__bad_interrupt>:
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <load_custom_characters>:

// This function loads custom characters into the LCD.  Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	88 e6       	ldi	r24, 0x68	; 104
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 0e 0b 	call	0x161c	; 0x161c <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
     10c:	61 e0       	ldi	r22, 0x01	; 1
     10e:	89 e6       	ldi	r24, 0x69	; 105
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 0e 0b 	call	0x161c	; 0x161c <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
     116:	62 e0       	ldi	r22, 0x02	; 2
     118:	8a e6       	ldi	r24, 0x6A	; 106
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 0e 0b 	call	0x161c	; 0x161c <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     120:	63 e0       	ldi	r22, 0x03	; 3
     122:	8b e6       	ldi	r24, 0x6B	; 107
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 0e 0b 	call	0x161c	; 0x161c <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     12a:	64 e0       	ldi	r22, 0x04	; 4
     12c:	8c e6       	ldi	r24, 0x6C	; 108
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 0e 0b 	call	0x161c	; 0x161c <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     134:	65 e0       	ldi	r22, 0x05	; 5
     136:	8d e6       	ldi	r24, 0x6D	; 109
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 0e 0b 	call	0x161c	; 0x161c <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     13e:	66 e0       	ldi	r22, 0x06	; 6
     140:	8e e6       	ldi	r24, 0x6E	; 110
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 0e 0b 	call	0x161c	; 0x161c <lcd_load_custom_character>
	clear(); // the LCD must be cleared for the characters to take effect
     148:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <clear>

0000014c <display_readings>:
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	2a 97       	sbiw	r28, 0x0a	; 10
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
     16c:	8c 01       	movw	r16, r24
	unsigned char i;

	for(i=0;i<5;i++) {
     16e:	d1 2c       	mov	r13, r1
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     170:	8a e0       	ldi	r24, 0x0A	; 10
     172:	c8 2e       	mov	r12, r24

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     174:	95 e6       	ldi	r25, 0x65	; 101
     176:	e9 2e       	mov	r14, r25
     178:	f1 2c       	mov	r15, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     17a:	e1 e3       	ldi	r30, 0x31	; 49
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	de 01       	movw	r26, r28
     180:	11 96       	adiw	r26, 0x01	; 1
     182:	8c 2d       	mov	r24, r12
     184:	01 90       	ld	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	8a 95       	dec	r24
     18a:	e1 f7       	brne	.-8      	; 0x184 <display_readings+0x38>

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     18c:	f8 01       	movw	r30, r16
     18e:	81 91       	ld	r24, Z+
     190:	91 91       	ld	r25, Z+
     192:	8f 01       	movw	r16, r30
     194:	b7 01       	movw	r22, r14
     196:	0e 94 a0 13 	call	0x2740	; 0x2740 <__udivmodhi4>
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	8c 0f       	add	r24, r28
     1a0:	9d 1f       	adc	r25, r29
     1a2:	68 0f       	add	r22, r24
     1a4:	79 1f       	adc	r23, r25

		// Display the bar graph character.
		print_character(c);
     1a6:	fb 01       	movw	r30, r22
     1a8:	80 81       	ld	r24, Z
     1aa:	0e 94 11 0b 	call	0x1622	; 0x1622 <print_character>
// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     1ae:	d3 94       	inc	r13
     1b0:	f5 e0       	ldi	r31, 0x05	; 5
     1b2:	df 12       	cpse	r13, r31
     1b4:	e2 cf       	rjmp	.-60     	; 0x17a <display_readings+0x2e>
		char c = display_characters[calibrated_values[i]/101];

		// Display the bar graph character.
		print_character(c);
	}
}
     1b6:	2a 96       	adiw	r28, 0x0a	; 10
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	08 95       	ret

000001d4 <follow_segment>:
#include <pololu/3pi.h>

void follow_segment(int max)
{
     1d4:	2f 92       	push	r2
     1d6:	3f 92       	push	r3
     1d8:	4f 92       	push	r4
     1da:	5f 92       	push	r5
     1dc:	6f 92       	push	r6
     1de:	7f 92       	push	r7
     1e0:	8f 92       	push	r8
     1e2:	9f 92       	push	r9
     1e4:	af 92       	push	r10
     1e6:	bf 92       	push	r11
     1e8:	cf 92       	push	r12
     1ea:	df 92       	push	r13
     1ec:	ef 92       	push	r14
     1ee:	ff 92       	push	r15
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	2a 97       	sbiw	r28, 0x0a	; 10
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
     208:	8c 01       	movw	r16, r24
	int last_proportional = 0;
	long integral=0;
     20a:	c1 2c       	mov	r12, r1
     20c:	d1 2c       	mov	r13, r1
     20e:	76 01       	movw	r14, r12
#include <pololu/3pi.h>

void follow_segment(int max)
{
	int last_proportional = 0;
     210:	21 2c       	mov	r2, r1
     212:	31 2c       	mov	r3, r1
		int derivative = proportional - last_proportional;
		integral += proportional;

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     214:	50 e1       	ldi	r21, 0x10	; 16
     216:	45 2e       	mov	r4, r21
     218:	57 e2       	ldi	r21, 0x27	; 39
     21a:	55 2e       	mov	r5, r21
     21c:	61 2c       	mov	r6, r1
     21e:	71 2c       	mov	r7, r1

		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
     220:	88 24       	eor	r8, r8
     222:	99 24       	eor	r9, r9
     224:	88 1a       	sub	r8, r24
     226:	99 0a       	sbc	r9, r25
	long integral=0;

	while(1)
	{
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	ce 01       	movw	r24, r28
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <read_line>

		int proportional = ((int)position) - 2000;
     232:	80 5d       	subi	r24, 0xD0	; 208
     234:	97 40       	sbci	r25, 0x07	; 7
     236:	5c 01       	movw	r10, r24

		int derivative = proportional - last_proportional;
		integral += proportional;
     238:	aa 27       	eor	r26, r26
     23a:	97 fd       	sbrc	r25, 7
     23c:	a0 95       	com	r26
     23e:	ba 2f       	mov	r27, r26
     240:	c8 0e       	add	r12, r24
     242:	d9 1e       	adc	r13, r25
     244:	ea 1e       	adc	r14, r26
     246:	fb 1e       	adc	r15, r27

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     248:	c7 01       	movw	r24, r14
     24a:	b6 01       	movw	r22, r12
     24c:	a3 01       	movw	r20, r6
     24e:	92 01       	movw	r18, r4
     250:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__divmodsi4>
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);

		int proportional = ((int)position) - 2000;

		int derivative = proportional - last_proportional;
     254:	b5 01       	movw	r22, r10
     256:	62 19       	sub	r22, r2
     258:	73 09       	sbc	r23, r3
		integral += proportional;

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     25a:	cb 01       	movw	r24, r22
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	86 0f       	add	r24, r22
     262:	97 1f       	adc	r25, r23
     264:	97 fd       	sbrc	r25, 7
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	fc 01       	movw	r30, r24
     26a:	f5 95       	asr	r31
     26c:	e7 95       	ror	r30
     26e:	e2 0f       	add	r30, r18
     270:	f3 1f       	adc	r31, r19
     272:	c5 01       	movw	r24, r10
     274:	64 e1       	ldi	r22, 0x14	; 20
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	0e 94 b4 13 	call	0x2768	; 0x2768 <__divmodhi4>
     27c:	e6 0f       	add	r30, r22
     27e:	f7 1f       	adc	r31, r23
     280:	0e 17       	cp	r16, r30
     282:	1f 07       	cpc	r17, r31
     284:	0c f4       	brge	.+2      	; 0x288 <follow_segment+0xb4>
     286:	f8 01       	movw	r30, r16
     288:	cf 01       	movw	r24, r30
     28a:	e8 15       	cp	r30, r8
     28c:	f9 05       	cpc	r31, r9
     28e:	0c f4       	brge	.+2      	; 0x292 <follow_segment+0xbe>
     290:	c4 01       	movw	r24, r8
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
     292:	b8 01       	movw	r22, r16
		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
		
		if(power_difference < 0)
     294:	97 ff       	sbrs	r25, 7
     296:	03 c0       	rjmp	.+6      	; 0x29e <follow_segment+0xca>
			set_motors(max+power_difference,max);
     298:	80 0f       	add	r24, r16
     29a:	91 1f       	adc	r25, r17
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <follow_segment+0xd0>
		else
			set_motors(max,max-power_difference);
     29e:	68 1b       	sub	r22, r24
     2a0:	79 0b       	sbc	r23, r25
     2a2:	c8 01       	movw	r24, r16
     2a4:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>

		if(sensors[1] < 100 && sensors[2] < 100 && sensors[3] < 100)
     2a8:	8b 81       	ldd	r24, Y+3	; 0x03
     2aa:	9c 81       	ldd	r25, Y+4	; 0x04
     2ac:	84 36       	cpi	r24, 0x64	; 100
     2ae:	91 05       	cpc	r25, r1
     2b0:	50 f4       	brcc	.+20     	; 0x2c6 <follow_segment+0xf2>
     2b2:	8d 81       	ldd	r24, Y+5	; 0x05
     2b4:	9e 81       	ldd	r25, Y+6	; 0x06
     2b6:	84 36       	cpi	r24, 0x64	; 100
     2b8:	91 05       	cpc	r25, r1
     2ba:	28 f4       	brcc	.+10     	; 0x2c6 <follow_segment+0xf2>
     2bc:	8f 81       	ldd	r24, Y+7	; 0x07
     2be:	98 85       	ldd	r25, Y+8	; 0x08
     2c0:	84 36       	cpi	r24, 0x64	; 100
     2c2:	91 05       	cpc	r25, r1
     2c4:	60 f0       	brcs	.+24     	; 0x2de <follow_segment+0x10a>
		{
			return;
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ca:	89 3c       	cpi	r24, 0xC9	; 201
     2cc:	91 05       	cpc	r25, r1
     2ce:	38 f4       	brcc	.+14     	; 0x2de <follow_segment+0x10a>
     2d0:	89 85       	ldd	r24, Y+9	; 0x09
     2d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     2d4:	89 3c       	cpi	r24, 0xC9	; 201
     2d6:	91 05       	cpc	r25, r1
     2d8:	10 f4       	brcc	.+4      	; 0x2de <follow_segment+0x10a>
		int proportional = ((int)position) - 2000;

		int derivative = proportional - last_proportional;
		integral += proportional;

		last_proportional = proportional;
     2da:	15 01       	movw	r2, r10
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
		{
			return;
		}
	}
     2dc:	a5 cf       	rjmp	.-182    	; 0x228 <follow_segment+0x54>
     2de:	2a 96       	adiw	r28, 0x0a	; 10
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	df 90       	pop	r13
     2f8:	cf 90       	pop	r12
     2fa:	bf 90       	pop	r11
     2fc:	af 90       	pop	r10
     2fe:	9f 90       	pop	r9
     300:	8f 90       	pop	r8
     302:	7f 90       	pop	r7
     304:	6f 90       	pop	r6
     306:	5f 90       	pop	r5
     308:	4f 90       	pop	r4
     30a:	3f 90       	pop	r3
     30c:	2f 90       	pop	r2
     30e:	08 95       	ret

00000310 <initialize>:

const char welcome[] PROGMEM = ">g32>>c32";
const char go[] PROGMEM = "L16 cdegreg4";

void initialize()
{
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	2a 97       	sbiw	r28, 0x0a	; 10
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
	unsigned int counter; 
	unsigned int sensors[5]; 
	
	pololu_3pi_init(2000);
     328:	80 ed       	ldi	r24, 0xD0	; 208
     32a:	97 e0       	ldi	r25, 0x07	; 7
     32c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <pololu_3pi_init>
	load_custom_characters();
     330:	0e 94 81 00 	call	0x102	; 0x102 <load_custom_characters>
	
	print_from_program_space(welcome_line1);
     334:	82 ea       	ldi	r24, 0xA2	; 162
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 b6 0b 	call	0x176c	; 0x176c <print_from_program_space>
	lcd_goto_xy(0,1);
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	0e 94 36 0c 	call	0x186c	; 0x186c <lcd_goto_xy>
	print_from_program_space(welcome_line2);
     344:	89 e9       	ldi	r24, 0x99	; 153
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 b6 0b 	call	0x176c	; 0x176c <print_from_program_space>
	play_from_program_space(welcome);
     34c:	83 e8       	ldi	r24, 0x83	; 131
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 4b 0a 	call	0x1496	; 0x1496 <play_from_program_space>
	delay_ms(1000);
     354:	88 ee       	ldi	r24, 0xE8	; 232
     356:	93 e0       	ldi	r25, 0x03	; 3
     358:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>

	clear();
     35c:	0e 94 8e 0b 	call	0x171c	; 0x171c <clear>
	print_from_program_space(demo_name_line1);
     360:	84 e9       	ldi	r24, 0x94	; 148
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 b6 0b 	call	0x176c	; 0x176c <print_from_program_space>
	lcd_goto_xy(0,1);
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	0e 94 36 0c 	call	0x186c	; 0x186c <lcd_goto_xy>
	print_from_program_space(demo_name_line2);
     370:	8d e8       	ldi	r24, 0x8D	; 141
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 b6 0b 	call	0x176c	; 0x176c <print_from_program_space>
	delay_ms(1000);
     378:	88 ee       	ldi	r24, 0xE8	; 232
     37a:	93 e0       	ldi	r25, 0x03	; 3
		print_long(bat);
		print("mV");
		lcd_goto_xy(0,1);
		print("Press B");

		delay_ms(100);
     37c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
	print_from_program_space(demo_name_line1);
	lcd_goto_xy(0,1);
	print_from_program_space(demo_name_line2);
	delay_ms(1000);

	while(!button_is_pressed(BUTTON_B))
     380:	80 e1       	ldi	r24, 0x10	; 16
     382:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <button_is_pressed>
     386:	81 11       	cpse	r24, r1
     388:	1b c0       	rjmp	.+54     	; 0x3c0 <initialize+0xb0>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     38a:	0e 94 09 07 	call	0xe12	; 0xe12 <read_battery_millivolts_3pi>
     38e:	8c 01       	movw	r16, r24
	{
		int bat = read_battery_millivolts();

		clear();
     390:	0e 94 8e 0b 	call	0x171c	; 0x171c <clear>
		print_long(bat);
     394:	b8 01       	movw	r22, r16
     396:	88 27       	eor	r24, r24
     398:	77 fd       	sbrc	r23, 7
     39a:	80 95       	com	r24
     39c:	98 2f       	mov	r25, r24
     39e:	0e 94 13 0c 	call	0x1826	; 0x1826 <print_long>
		print("mV");
     3a2:	8b e3       	ldi	r24, 0x3B	; 59
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 a5 0b 	call	0x174a	; 0x174a <print>
		lcd_goto_xy(0,1);
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 36 0c 	call	0x186c	; 0x186c <lcd_goto_xy>
		print("Press B");
     3b2:	8e e3       	ldi	r24, 0x3E	; 62
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	0e 94 a5 0b 	call	0x174a	; 0x174a <print>

		delay_ms(100);
     3ba:	84 e6       	ldi	r24, 0x64	; 100
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	de cf       	rjmp	.-68     	; 0x37c <initialize+0x6c>
	}

	wait_for_button_release(BUTTON_B);
     3c0:	80 e1       	ldi	r24, 0x10	; 16
     3c2:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <wait_for_button_release>
	delay_ms(1000);
     3c6:	88 ee       	ldi	r24, 0xE8	; 232
     3c8:	93 e0       	ldi	r25, 0x03	; 3
     3ca:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
     3ce:	0c ee       	ldi	r16, 0xEC	; 236
     3d0:	1f ef       	ldi	r17, 0xFF	; 255

	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     3d2:	08 32       	cpi	r16, 0x28	; 40
     3d4:	11 05       	cpc	r17, r1
     3d6:	28 f0       	brcs	.+10     	; 0x3e2 <initialize+0xd2>
			set_motors(40,-40);
     3d8:	68 ed       	ldi	r22, 0xD8	; 216
     3da:	7f ef       	ldi	r23, 0xFF	; 255
     3dc:	88 e2       	ldi	r24, 0x28	; 40
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <initialize+0xda>
		else
			set_motors(-40,40);
     3e2:	68 e2       	ldi	r22, 0x28	; 40
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	88 ed       	ldi	r24, 0xD8	; 216
     3e8:	9f ef       	ldi	r25, 0xFF	; 255
     3ea:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <calibrate_line_sensors>
		delay_ms(20);
     3f4:	84 e1       	ldi	r24, 0x14	; 20
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
     3fc:	0f 5f       	subi	r16, 0xFF	; 255
     3fe:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	for(counter=0;counter<80;counter++)
     400:	0c 33       	cpi	r16, 0x3C	; 60
     402:	11 05       	cpc	r17, r1
     404:	31 f7       	brne	.-52     	; 0x3d2 <initialize+0xc2>
		else
			set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	set_motors(0,0);
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>

	while(!button_is_pressed(BUTTON_B))
     412:	80 e1       	ldi	r24, 0x10	; 16
     414:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <button_is_pressed>
     418:	81 11       	cpse	r24, r1
     41a:	1a c0       	rjmp	.+52     	; 0x450 <initialize+0x140>
	{
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <read_line>
     426:	8c 01       	movw	r16, r24

		clear();
     428:	0e 94 8e 0b 	call	0x171c	; 0x171c <clear>
		print_long(position);
     42c:	b8 01       	movw	r22, r16
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 13 0c 	call	0x1826	; 0x1826 <print_long>
		lcd_goto_xy(0,1);
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	0e 94 36 0c 	call	0x186c	; 0x186c <lcd_goto_xy>
		display_readings(sensors);
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	0e 94 a6 00 	call	0x14c	; 0x14c <display_readings>

		delay_ms(100);
     446:	84 e6       	ldi	r24, 0x64	; 100
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
     44e:	e1 cf       	rjmp	.-62     	; 0x412 <initialize+0x102>
	}
	wait_for_button_release(BUTTON_B);
     450:	80 e1       	ldi	r24, 0x10	; 16
     452:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <wait_for_button_release>

	clear();
     456:	0e 94 8e 0b 	call	0x171c	; 0x171c <clear>

	print("Go!");		
     45a:	86 e4       	ldi	r24, 0x46	; 70
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 a5 0b 	call	0x174a	; 0x174a <print>

	play_from_program_space(go);
     462:	86 e7       	ldi	r24, 0x76	; 118
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 4b 0a 	call	0x1496	; 0x1496 <play_from_program_space>
	while(is_playing());
     46a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <is_playing>
     46e:	81 11       	cpse	r24, r1
     470:	fc cf       	rjmp	.-8      	; 0x46a <initialize+0x15a>
}
     472:	2a 96       	adiw	r28, 0x0a	; 10
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	08 95       	ret

00000488 <main>:


int main()
{
	initialize();//3pi initialization
     488:	0e 94 88 01 	call	0x310	; 0x310 <initialize>
	
	maze_solve(170); //std 160
     48c:	8a ea       	ldi	r24, 0xAA	; 170
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 51 03 	call	0x6a2	; 0x6a2 <maze_solve>
     494:	ff cf       	rjmp	.-2      	; 0x494 <main+0xc>

00000496 <sensor_data>:
uint16_t  node_number = 0;



uint8_t sensor_data(void)
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	2a 97       	sbiw	r28, 0x0a	; 10
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5], edge_th = 400, line_th = 300;
	uint8_t sn_dta = 0x00;
	read_line(sensors,IR_EMITTERS_ON);
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	ce 01       	movw	r24, r28
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <read_line>
	if (sensors[0] > edge_th)	sn_dta |= (1<<4);
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	81 39       	cpi	r24, 0x91	; 145
     4ba:	91 40       	sbci	r25, 0x01	; 1
     4bc:	10 f0       	brcs	.+4      	; 0x4c2 <sensor_data+0x2c>
     4be:	80 e1       	ldi	r24, 0x10	; 16
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <sensor_data+0x2e>
	else						sn_dta &= ~(1<<4);
     4c2:	80 e0       	ldi	r24, 0x00	; 0
	if (sensors[1] > line_th)	sn_dta |= (1<<3);
     4c4:	2b 81       	ldd	r18, Y+3	; 0x03
     4c6:	3c 81       	ldd	r19, Y+4	; 0x04
     4c8:	2d 32       	cpi	r18, 0x2D	; 45
     4ca:	31 40       	sbci	r19, 0x01	; 1
     4cc:	10 f0       	brcs	.+4      	; 0x4d2 <sensor_data+0x3c>
     4ce:	88 60       	ori	r24, 0x08	; 8
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <sensor_data+0x3e>
	else						sn_dta &= ~(1<<3);
     4d2:	87 7f       	andi	r24, 0xF7	; 247
	if (sensors[2] > line_th)	sn_dta |= (1<<2);
     4d4:	2d 81       	ldd	r18, Y+5	; 0x05
     4d6:	3e 81       	ldd	r19, Y+6	; 0x06
     4d8:	2d 32       	cpi	r18, 0x2D	; 45
     4da:	31 40       	sbci	r19, 0x01	; 1
     4dc:	10 f0       	brcs	.+4      	; 0x4e2 <sensor_data+0x4c>
     4de:	84 60       	ori	r24, 0x04	; 4
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <sensor_data+0x4e>
	else						sn_dta &= ~(1<<2);
     4e2:	8b 7f       	andi	r24, 0xFB	; 251
	if (sensors[3] > line_th)	sn_dta |= (1<<1);
     4e4:	2f 81       	ldd	r18, Y+7	; 0x07
     4e6:	38 85       	ldd	r19, Y+8	; 0x08
     4e8:	2d 32       	cpi	r18, 0x2D	; 45
     4ea:	31 40       	sbci	r19, 0x01	; 1
     4ec:	10 f0       	brcs	.+4      	; 0x4f2 <sensor_data+0x5c>
     4ee:	82 60       	ori	r24, 0x02	; 2
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <sensor_data+0x5e>
	else						sn_dta &= ~(1<<1);
     4f2:	8d 7f       	andi	r24, 0xFD	; 253
	if (sensors[4] > edge_th)	sn_dta |= (1<<0);
     4f4:	29 85       	ldd	r18, Y+9	; 0x09
     4f6:	3a 85       	ldd	r19, Y+10	; 0x0a
     4f8:	21 39       	cpi	r18, 0x91	; 145
     4fa:	31 40       	sbci	r19, 0x01	; 1
     4fc:	10 f0       	brcs	.+4      	; 0x502 <sensor_data+0x6c>
     4fe:	81 60       	ori	r24, 0x01	; 1
     500:	01 c0       	rjmp	.+2      	; 0x504 <sensor_data+0x6e>
	else						sn_dta &= ~(1<<0);
     502:	8e 7f       	andi	r24, 0xFE	; 254
	
	return sn_dta;
}
     504:	2a 96       	adiw	r28, 0x0a	; 10
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <sensor_data_verified>:

uint8_t sensor_data_verified(void)
{
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
void time_reset(void);

// This is inline for efficiency:
static inline void delay_us(unsigned int microseconds)
{
  __asm__ volatile (
     51c:	c4 e1       	ldi	r28, 0x14	; 20
     51e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t snsr_data;
re_data:
	snsr_data = sensor_data();
     520:	0e 94 4b 02 	call	0x496	; 0x496 <sensor_data>
     524:	18 2f       	mov	r17, r24
     526:	fe 01       	movw	r30, r28
     528:	6f 93       	push	r22
     52a:	64 e0       	ldi	r22, 0x04	; 4
     52c:	6a 95       	dec	r22
     52e:	f1 f7       	brne	.-4      	; 0x52c <sensor_data_verified+0x16>
     530:	6f 91       	pop	r22
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	c9 f7       	brne	.-14     	; 0x528 <sensor_data_verified+0x12>
	delay_us(20);
	if (snsr_data == sensor_data())
     536:	0e 94 4b 02 	call	0x496	; 0x496 <sensor_data>
     53a:	18 13       	cpse	r17, r24
     53c:	f1 cf       	rjmp	.-30     	; 0x520 <sensor_data_verified+0xa>
	{
		return snsr_data;
	}
	else goto re_data;
}
     53e:	81 2f       	mov	r24, r17
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	08 95       	ret

00000548 <process_u>:


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
			{
				directions_solved[i-1] = 's';
     54c:	43 e7       	ldi	r20, 0x73	; 115
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'r';
     54e:	52 e7       	ldi	r21, 0x72	; 114
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
			{
				directions_solved[i-1] = 'l';
     550:	6c e6       	ldi	r22, 0x6C	; 108


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     552:	dc 01       	movw	r26, r24
     554:	a1 54       	subi	r26, 0x41	; 65
     556:	be 4f       	sbci	r27, 0xFE	; 254
     558:	2c 91       	ld	r18, X
     55a:	22 23       	and	r18, r18
     55c:	e1 f1       	breq	.+120    	; 0x5d6 <process_u+0x8e>
	{
		if (directions_solved[i] == 'u')
     55e:	25 37       	cpi	r18, 0x75	; 117
     560:	c1 f5       	brne	.+112    	; 0x5d2 <process_u+0x8a>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
     562:	fc 01       	movw	r30, r24
     564:	e2 54       	subi	r30, 0x42	; 66
     566:	fe 4f       	sbci	r31, 0xFE	; 254
     568:	30 81       	ld	r19, Z
     56a:	32 37       	cpi	r19, 0x72	; 114
     56c:	29 f4       	brne	.+10     	; 0x578 <process_u+0x30>
     56e:	11 96       	adiw	r26, 0x01	; 1
     570:	3c 91       	ld	r19, X
     572:	33 37       	cpi	r19, 0x73	; 115
     574:	81 f4       	brne	.+32     	; 0x596 <process_u+0x4e>
     576:	06 c0       	rjmp	.+12     	; 0x584 <process_u+0x3c>
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
     578:	33 37       	cpi	r19, 0x73	; 115
     57a:	31 f4       	brne	.+12     	; 0x588 <process_u+0x40>
     57c:	11 96       	adiw	r26, 0x01	; 1
     57e:	3c 91       	ld	r19, X
     580:	32 37       	cpi	r19, 0x72	; 114
     582:	a1 f4       	brne	.+40     	; 0x5ac <process_u+0x64>
			{
				directions_solved[i-1] = 'l';
     584:	60 83       	st	Z, r22
     586:	19 c0       	rjmp	.+50     	; 0x5ba <process_u+0x72>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'r')
     588:	3c 36       	cpi	r19, 0x6C	; 108
     58a:	b9 f4       	brne	.+46     	; 0x5ba <process_u+0x72>
     58c:	11 96       	adiw	r26, 0x01	; 1
     58e:	3c 91       	ld	r19, X
     590:	32 37       	cpi	r19, 0x72	; 114
     592:	31 f4       	brne	.+12     	; 0x5a0 <process_u+0x58>
     594:	11 c0       	rjmp	.+34     	; 0x5b8 <process_u+0x70>
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'r')
     596:	32 37       	cpi	r19, 0x72	; 114
     598:	39 f0       	breq	.+14     	; 0x5a8 <process_u+0x60>
			{
				directions_solved[i-1] = 's';
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'l')
     59a:	3c 36       	cpi	r19, 0x6C	; 108
     59c:	71 f4       	brne	.+28     	; 0x5ba <process_u+0x72>
     59e:	0c c0       	rjmp	.+24     	; 0x5b8 <process_u+0x70>
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
     5a0:	33 37       	cpi	r19, 0x73	; 115
     5a2:	31 f0       	breq	.+12     	; 0x5b0 <process_u+0x68>
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
     5a4:	3c 36       	cpi	r19, 0x6C	; 108
     5a6:	49 f4       	brne	.+18     	; 0x5ba <process_u+0x72>
			{
				directions_solved[i-1] = 's';
     5a8:	40 83       	st	Z, r20
     5aa:	07 c0       	rjmp	.+14     	; 0x5ba <process_u+0x72>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'l')
     5ac:	3c 36       	cpi	r19, 0x6C	; 108
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <process_u+0x6c>
			{
				directions_solved[i-1] = 'r';
     5b0:	50 83       	st	Z, r21
     5b2:	03 c0       	rjmp	.+6      	; 0x5ba <process_u+0x72>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
     5b4:	33 37       	cpi	r19, 0x73	; 115
     5b6:	09 f4       	brne	.+2      	; 0x5ba <process_u+0x72>
			{
				directions_solved[i-1] = 'u';
     5b8:	20 83       	st	Z, r18
     5ba:	fc 01       	movw	r30, r24
     5bc:	e1 54       	subi	r30, 0x41	; 65
     5be:	fe 4f       	sbci	r31, 0xFE	; 254
			}

			
			while (directions_solved[i+2])
     5c0:	22 81       	ldd	r18, Z+2	; 0x02
     5c2:	22 23       	and	r18, r18
     5c4:	19 f0       	breq	.+6      	; 0x5cc <process_u+0x84>
			{
				directions_solved[i] = directions_solved[i+2];
     5c6:	20 83       	st	Z, r18
				i++;
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	f7 cf       	rjmp	.-18     	; 0x5ba <process_u+0x72>
			}
			directions_solved[i] = '\0';
     5cc:	10 82       	st	Z, r1
			i=0;
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	be cf       	rjmp	.-132    	; 0x552 <process_u+0xa>
			}
			directions_solved[i] = '\0';
			i=0;
		}
	}
}
     5d6:	08 95       	ret

000005d8 <process_array>:
		}
	}
}

void process_array(void)
{
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
     5e0:	8f eb       	ldi	r24, 0xBF	; 191
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <strrev>
     5e8:	ef eb       	ldi	r30, 0xBF	; 191
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
		{
			directions_solved[i] = 'r';
		}
		else if (directions_solved[i] == 'r')
		{
			directions_solved[i] = 'l';
     5ec:	9c e6       	ldi	r25, 0x6C	; 108
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'l')
		{
			directions_solved[i] = 'r';
     5ee:	22 e7       	ldi	r18, 0x72	; 114
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
	
	for (i=0;directions_solved[i];i++)
     5f0:	80 81       	ld	r24, Z
     5f2:	88 23       	and	r24, r24
     5f4:	49 f0       	breq	.+18     	; 0x608 <process_array+0x30>
	{
		if (directions_solved[i] == 'l')
     5f6:	8c 36       	cpi	r24, 0x6C	; 108
     5f8:	11 f4       	brne	.+4      	; 0x5fe <process_array+0x26>
		{
			directions_solved[i] = 'r';
     5fa:	20 83       	st	Z, r18
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <process_array+0x2c>
		}
		else if (directions_solved[i] == 'r')
     5fe:	82 37       	cpi	r24, 0x72	; 114
     600:	09 f4       	brne	.+2      	; 0x604 <process_array+0x2c>
		{
			directions_solved[i] = 'l';
     602:	90 83       	st	Z, r25
     604:	31 96       	adiw	r30, 0x01	; 1
     606:	f4 cf       	rjmp	.-24     	; 0x5f0 <process_array+0x18>
		}
	}
	
	while(1)
	{
		length_sln_prev = strlen(directions_solved);
     608:	0f eb       	ldi	r16, 0xBF	; 191
     60a:	11 e0       	ldi	r17, 0x01	; 1
     60c:	e8 01       	movw	r28, r16
     60e:	09 90       	ld	r0, Y+
     610:	00 20       	and	r0, r0
     612:	e9 f7       	brne	.-6      	; 0x60e <process_array+0x36>
     614:	21 97       	sbiw	r28, 0x01	; 1
     616:	cf 5b       	subi	r28, 0xBF	; 191
     618:	d1 40       	sbci	r29, 0x01	; 1
		
		process_u();
     61a:	0e 94 a4 02 	call	0x548	; 0x548 <process_u>
		
		//process_loop();
		
		if (length_sln_prev == strlen(directions_solved))
     61e:	f8 01       	movw	r30, r16
     620:	01 90       	ld	r0, Z+
     622:	00 20       	and	r0, r0
     624:	e9 f7       	brne	.-6      	; 0x620 <process_array+0x48>
     626:	31 97       	sbiw	r30, 0x01	; 1
     628:	ef 5b       	subi	r30, 0xBF	; 191
     62a:	f1 40       	sbci	r31, 0x01	; 1
     62c:	ce 17       	cp	r28, r30
     62e:	df 07       	cpc	r29, r31
     630:	69 f7       	brne	.-38     	; 0x60c <process_array+0x34>
		{
			break;
		}
	}
}
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret

0000063c <evaluate_direction>:


void evaluate_direction(uint16_t speed)
{
     63c:	bc 01       	movw	r22, r24
	char evaluation = 0;
	evaluation = directions_solved[node_number];
     63e:	80 91 bd 01 	lds	r24, 0x01BD
     642:	90 91 be 01 	lds	r25, 0x01BE
     646:	fc 01       	movw	r30, r24
     648:	e1 54       	subi	r30, 0x41	; 65
     64a:	fe 4f       	sbci	r31, 0xFE	; 254
     64c:	20 81       	ld	r18, Z
	node_number = node_number + 1;
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	90 93 be 01 	sts	0x01BE, r25
     654:	80 93 bd 01 	sts	0x01BD, r24
	
	if (evaluation == 's')
     658:	23 37       	cpi	r18, 0x73	; 115
     65a:	11 f4       	brne	.+4      	; 0x660 <evaluate_direction+0x24>
	{
		turn('S',speed);
     65c:	83 e5       	ldi	r24, 0x53	; 83
     65e:	0b c0       	rjmp	.+22     	; 0x676 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'u')
     660:	25 37       	cpi	r18, 0x75	; 117
     662:	11 f4       	brne	.+4      	; 0x668 <evaluate_direction+0x2c>
	{
		turn('U',speed);
     664:	85 e5       	ldi	r24, 0x55	; 85
     666:	07 c0       	rjmp	.+14     	; 0x676 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'l')
     668:	2c 36       	cpi	r18, 0x6C	; 108
     66a:	11 f4       	brne	.+4      	; 0x670 <evaluate_direction+0x34>
	{
		turn('L',speed);
     66c:	8c e4       	ldi	r24, 0x4C	; 76
     66e:	03 c0       	rjmp	.+6      	; 0x676 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'r')
     670:	22 37       	cpi	r18, 0x72	; 114
     672:	19 f4       	brne	.+6      	; 0x67a <evaluate_direction+0x3e>
	{
		turn('R',speed);
     674:	82 e5       	ldi	r24, 0x52	; 82
     676:	0c 94 c3 04 	jmp	0x986	; 0x986 <turn>
	}
	else
	{
		set_motors(0,0);
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
     686:	ff cf       	rjmp	.-2      	; 0x686 <evaluate_direction+0x4a>

00000688 <destination_operation>:
}


void destination_operation(int speed)
{
	directions_solved[node_number] = '\0';
     688:	e0 91 bd 01 	lds	r30, 0x01BD
     68c:	f0 91 be 01 	lds	r31, 0x01BE
     690:	e1 54       	subi	r30, 0x41	; 65
     692:	fe 4f       	sbci	r31, 0xFE	; 254
     694:	10 82       	st	Z, r1
	turn('D',speed);
     696:	bc 01       	movw	r22, r24
     698:	84 e4       	ldi	r24, 0x44	; 68
     69a:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
	process_array();
     69e:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <process_array>

000006a2 <maze_solve>:
}


void maze_solve(int speed)
{
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	1f 92       	push	r1
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	3c 01       	movw	r6, r24
	uint16_t destination = 0;
	const signed int speed_node = 100;
	char sensor_data_hold = 0, Right_trigged = 0, Left_trigged = 0, Forward_trigged = 0; 
     6ae:	a1 2c       	mov	r10, r1
     6b0:	91 2c       	mov	r9, r1
     6b2:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
			}
		}
		else if (sensor_data_hold == 0b00000) //-100
		{	
			directions_solved[node_number] = 'u';
     6b4:	85 e7       	ldi	r24, 0x75	; 117
     6b6:	e8 2e       	mov	r14, r24
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 'l';
     6b8:	9c e6       	ldi	r25, 0x6C	; 108
     6ba:	f9 2e       	mov	r15, r25
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 's';
     6bc:	23 e7       	ldi	r18, 0x73	; 115
     6be:	d2 2e       	mov	r13, r18
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
			{
				directions_solved[node_number] = 'r';
     6c0:	32 e7       	ldi	r19, 0x72	; 114
     6c2:	c3 2e       	mov	r12, r19
//****** Explore the path *****************************************************************************
///////////////////////////////////////////////////////////////////////////////////////////////////////

	while(1)
	{
		follow_segment(speed);
     6c4:	c3 01       	movw	r24, r6
     6c6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>
		
		sensor_data_hold = sensor_data_verified();
     6ca:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     6ce:	28 2f       	mov	r18, r24
		
		if(sensor_data_hold & 0b10000)  //left trigging 
     6d0:	84 ff       	sbrs	r24, 4
     6d2:	6e c0       	rjmp	.+220    	; 0x7b0 <maze_solve+0x10e>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     6d4:	64 e6       	ldi	r22, 0x64	; 100
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	84 e6       	ldi	r24, 0x64	; 100
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	29 83       	std	Y+1, r18	; 0x01
     6de:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
			destination = 0;
     6e2:	00 e0       	ldi	r16, 0x00	; 0
     6e4:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     6e6:	29 81       	ldd	r18, Y+1	; 0x01
     6e8:	21 71       	andi	r18, 0x11	; 17
     6ea:	c1 f0       	breq	.+48     	; 0x71c <maze_solve+0x7a>
			{
				sensor_data_hold = sensor_data_verified();
     6ec:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     6f0:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b00001) && (Right_trigged == 0))
     6f2:	80 ff       	sbrs	r24, 0
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <maze_solve+0x5c>
     6f6:	b1 10       	cpse	r11, r1
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <maze_solve+0x5c>
				{
					Right_trigged=1;
     6fa:	bb 24       	eor	r11, r11
     6fc:	b3 94       	inc	r11
				}
				if (sensor_data_hold == 0b11111)
     6fe:	2f 31       	cpi	r18, 0x1F	; 31
     700:	99 f7       	brne	.-26     	; 0x6e8 <maze_solve+0x46>
				{
					destination = destination + 1;
     702:	0f 5f       	subi	r16, 0xFF	; 255
     704:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     706:	03 33       	cpi	r16, 0x33	; 51
     708:	11 05       	cpc	r17, r1
     70a:	70 f3       	brcs	.-36     	; 0x6e8 <maze_solve+0x46>
					{
						destination = 0x00;
						destination_operation(speed);
     70c:	c3 01       	movw	r24, r6
     70e:	0e 94 44 03 	call	0x688	; 0x688 <destination_operation>
	//****** Follow the Solved path************************************************************************
	///////////////////////////////////////////////////////////////////////////////////////////////////////

solv_maze:

node_number = 0x00;
     712:	10 92 be 01 	sts	0x01BE, r1
     716:	10 92 bd 01 	sts	0x01BD, r1
     71a:	e0 c0       	rjmp	.+448    	; 0x8dc <maze_solve+0x23a>
						goto solv_maze;
					}
				}
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
     71c:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
			if (sensor_data_hold & 0b00100)
     720:	82 fd       	sbrc	r24, 2
     722:	1d c1       	rjmp	.+570    	; 0x95e <__stack+0x5f>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     724:	b1 10       	cpse	r11, r1
     726:	16 c0       	rjmp	.+44     	; 0x754 <maze_solve+0xb2>
     728:	a1 10       	cpse	r10, r1
     72a:	10 c0       	rjmp	.+32     	; 0x74c <maze_solve+0xaa>
			{
				directions_solved[node_number] = 'l';
     72c:	80 91 bd 01 	lds	r24, 0x01BD
     730:	90 91 be 01 	lds	r25, 0x01BE
     734:	fc 01       	movw	r30, r24
     736:	e1 54       	subi	r30, 0x41	; 65
     738:	fe 4f       	sbci	r31, 0xFE	; 254
     73a:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	90 93 be 01 	sts	0x01BE, r25
     742:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     746:	b3 01       	movw	r22, r6
     748:	8c e4       	ldi	r24, 0x4C	; 76
     74a:	bb c0       	rjmp	.+374    	; 0x8c2 <maze_solve+0x220>
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	a8 12       	cpse	r10, r24
     750:	b9 cf       	rjmp	.-142    	; 0x6c4 <maze_solve+0x22>
     752:	1b c0       	rjmp	.+54     	; 0x78a <maze_solve+0xe8>
				node_number = node_number + 1;
				turn('L',speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     754:	e1 e0       	ldi	r30, 0x01	; 1
     756:	be 12       	cpse	r11, r30
     758:	b5 cf       	rjmp	.-150    	; 0x6c4 <maze_solve+0x22>
     75a:	a1 10       	cpse	r10, r1
     75c:	13 c0       	rjmp	.+38     	; 0x784 <maze_solve+0xe2>
			{
				directions_solved[node_number] = 'l';
     75e:	80 91 bd 01 	lds	r24, 0x01BD
     762:	90 91 be 01 	lds	r25, 0x01BE
     766:	fc 01       	movw	r30, r24
     768:	e1 54       	subi	r30, 0x41	; 65
     76a:	fe 4f       	sbci	r31, 0xFE	; 254
     76c:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 be 01 	sts	0x01BE, r25
     774:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     778:	b3 01       	movw	r22, r6
     77a:	8c e4       	ldi	r24, 0x4C	; 76
     77c:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
				Right_trigged = 0;
     780:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
     782:	a0 cf       	rjmp	.-192    	; 0x6c4 <maze_solve+0x22>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
     784:	f1 e0       	ldi	r31, 0x01	; 1
     786:	af 12       	cpse	r10, r31
     788:	9d cf       	rjmp	.-198    	; 0x6c4 <maze_solve+0x22>
			{
				directions_solved[node_number] = 'l';
     78a:	80 91 bd 01 	lds	r24, 0x01BD
     78e:	90 91 be 01 	lds	r25, 0x01BE
     792:	fc 01       	movw	r30, r24
     794:	e1 54       	subi	r30, 0x41	; 65
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	90 93 be 01 	sts	0x01BE, r25
     7a0:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     7a4:	b3 01       	movw	r22, r6
     7a6:	8c e4       	ldi	r24, 0x4C	; 76
     7a8:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
				Right_trigged = 0;
				Forward_trigged = 0;
     7ac:	a1 2c       	mov	r10, r1
     7ae:	e8 cf       	rjmp	.-48     	; 0x780 <maze_solve+0xde>
			}
		}
		else if (sensor_data_hold & 0b00001) //right trigging
     7b0:	80 ff       	sbrs	r24, 0
     7b2:	76 c0       	rjmp	.+236    	; 0x8a0 <maze_solve+0x1fe>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     7b4:	64 e6       	ldi	r22, 0x64	; 100
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	84 e6       	ldi	r24, 0x64	; 100
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	29 83       	std	Y+1, r18	; 0x01
     7be:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
			destination = 0;
     7c2:	00 e0       	ldi	r16, 0x00	; 0
     7c4:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     7c6:	29 81       	ldd	r18, Y+1	; 0x01
     7c8:	21 71       	andi	r18, 0x11	; 17
     7ca:	89 f0       	breq	.+34     	; 0x7ee <maze_solve+0x14c>
			{
				sensor_data_hold = sensor_data_verified();
     7cc:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     7d0:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b10000) && (Left_trigged == 0))
     7d2:	84 ff       	sbrs	r24, 4
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <maze_solve+0x13c>
     7d6:	91 10       	cpse	r9, r1
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <maze_solve+0x13c>
				{
					Left_trigged=1;
     7da:	99 24       	eor	r9, r9
     7dc:	93 94       	inc	r9
				}
				if (sensor_data_hold == 0b11111)
     7de:	2f 31       	cpi	r18, 0x1F	; 31
     7e0:	99 f7       	brne	.-26     	; 0x7c8 <maze_solve+0x126>
				{
					destination = destination + 1;
     7e2:	0f 5f       	subi	r16, 0xFF	; 255
     7e4:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     7e6:	03 33       	cpi	r16, 0x33	; 51
     7e8:	11 05       	cpc	r17, r1
     7ea:	70 f3       	brcs	.-36     	; 0x7c8 <maze_solve+0x126>
     7ec:	8f cf       	rjmp	.-226    	; 0x70c <maze_solve+0x6a>
						goto solv_maze;
					}
				}
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
     7ee:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
			if (sensor_data_hold & 0b00100)
     7f2:	82 fd       	sbrc	r24, 2
     7f4:	b8 c0       	rjmp	.+368    	; 0x966 <__stack+0x67>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     7f6:	91 10       	cpse	r9, r1
     7f8:	25 c0       	rjmp	.+74     	; 0x844 <maze_solve+0x1a2>
     7fa:	a1 10       	cpse	r10, r1
     7fc:	10 c0       	rjmp	.+32     	; 0x81e <maze_solve+0x17c>
			{
				directions_solved[node_number] = 'r';
     7fe:	80 91 bd 01 	lds	r24, 0x01BD
     802:	90 91 be 01 	lds	r25, 0x01BE
     806:	fc 01       	movw	r30, r24
     808:	e1 54       	subi	r30, 0x41	; 65
     80a:	fe 4f       	sbci	r31, 0xFE	; 254
     80c:	c0 82       	st	Z, r12
				node_number = node_number + 1;
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	90 93 be 01 	sts	0x01BE, r25
     814:	80 93 bd 01 	sts	0x01BD, r24
				turn('R',speed);
     818:	b3 01       	movw	r22, r6
     81a:	82 e5       	ldi	r24, 0x52	; 82
     81c:	52 c0       	rjmp	.+164    	; 0x8c2 <maze_solve+0x220>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	a8 12       	cpse	r10, r24
     822:	50 cf       	rjmp	.-352    	; 0x6c4 <maze_solve+0x22>
			{
				directions_solved[node_number] = 's';
     824:	80 91 bd 01 	lds	r24, 0x01BD
     828:	90 91 be 01 	lds	r25, 0x01BE
     82c:	fc 01       	movw	r30, r24
     82e:	e1 54       	subi	r30, 0x41	; 65
     830:	fe 4f       	sbci	r31, 0xFE	; 254
     832:	d0 82       	st	Z, r13
				node_number = node_number + 1;
     834:	01 96       	adiw	r24, 0x01	; 1
     836:	90 93 be 01 	sts	0x01BE, r25
     83a:	80 93 bd 01 	sts	0x01BD, r24
				turn('S',speed);
     83e:	b3 01       	movw	r22, r6
     840:	83 e5       	ldi	r24, 0x53	; 83
     842:	29 c0       	rjmp	.+82     	; 0x896 <maze_solve+0x1f4>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     844:	e1 e0       	ldi	r30, 0x01	; 1
     846:	9e 12       	cpse	r9, r30
     848:	3d cf       	rjmp	.-390    	; 0x6c4 <maze_solve+0x22>
     84a:	a1 10       	cpse	r10, r1
     84c:	12 c0       	rjmp	.+36     	; 0x872 <maze_solve+0x1d0>
			{
				directions_solved[node_number] = 'l';
     84e:	80 91 bd 01 	lds	r24, 0x01BD
     852:	90 91 be 01 	lds	r25, 0x01BE
     856:	fc 01       	movw	r30, r24
     858:	e1 54       	subi	r30, 0x41	; 65
     85a:	fe 4f       	sbci	r31, 0xFE	; 254
     85c:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	90 93 be 01 	sts	0x01BE, r25
     864:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     868:	b3 01       	movw	r22, r6
     86a:	8c e4       	ldi	r24, 0x4C	; 76
     86c:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
     870:	15 c0       	rjmp	.+42     	; 0x89c <maze_solve+0x1fa>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	af 12       	cpse	r10, r31
     876:	26 cf       	rjmp	.-436    	; 0x6c4 <maze_solve+0x22>
			{
				directions_solved[node_number] = 'l';
     878:	80 91 bd 01 	lds	r24, 0x01BD
     87c:	90 91 be 01 	lds	r25, 0x01BE
     880:	fc 01       	movw	r30, r24
     882:	e1 54       	subi	r30, 0x41	; 65
     884:	fe 4f       	sbci	r31, 0xFE	; 254
     886:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	90 93 be 01 	sts	0x01BE, r25
     88e:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     892:	b3 01       	movw	r22, r6
     894:	8c e4       	ldi	r24, 0x4C	; 76
     896:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
				Left_trigged = 0;
				Forward_trigged = 0;
     89a:	a1 2c       	mov	r10, r1
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 'l';
				node_number = node_number + 1;
				turn('L',speed);
				Left_trigged = 0;
     89c:	91 2c       	mov	r9, r1
     89e:	12 cf       	rjmp	.-476    	; 0x6c4 <maze_solve+0x22>
				Forward_trigged = 0;
			}
		}
		else if (sensor_data_hold == 0b00000) //-100
     8a0:	81 11       	cpse	r24, r1
     8a2:	10 cf       	rjmp	.-480    	; 0x6c4 <maze_solve+0x22>
		{	
			directions_solved[node_number] = 'u';
     8a4:	80 91 bd 01 	lds	r24, 0x01BD
     8a8:	90 91 be 01 	lds	r25, 0x01BE
     8ac:	fc 01       	movw	r30, r24
     8ae:	e1 54       	subi	r30, 0x41	; 65
     8b0:	fe 4f       	sbci	r31, 0xFE	; 254
     8b2:	e0 82       	st	Z, r14
			node_number = node_number + 1;
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	90 93 be 01 	sts	0x01BE, r25
     8ba:	80 93 bd 01 	sts	0x01BD, r24
			turn('U',speed);
     8be:	b3 01       	movw	r22, r6
     8c0:	85 e5       	ldi	r24, 0x55	; 85
     8c2:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
     8c6:	fe ce       	rjmp	.-516    	; 0x6c4 <maze_solve+0x22>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
			destination = 0;
			while (sensor_data_hold & 0b10001)
			{
				sensor_data_hold = sensor_data_verified();
     8c8:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     8cc:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b00001) && (Right_trigged == 0))
				{
					Right_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
     8ce:	8f 31       	cpi	r24, 0x1F	; 31
     8d0:	c1 f0       	breq	.+48     	; 0x902 <__stack+0x3>
		
		if(sensor_data_hold & 0b10000)  //left trigging 
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
			destination = 0;
			while (sensor_data_hold & 0b10001)
     8d2:	21 71       	andi	r18, 0x11	; 17
     8d4:	c9 f7       	brne	.-14     	; 0x8c8 <maze_solve+0x226>
						set_motors(0,0);
						while(1);
					}
				}
			}
			evaluate_direction(speed);
     8d6:	c3 01       	movw	r24, r6
     8d8:	0e 94 1e 03 	call	0x63c	; 0x63c <evaluate_direction>

node_number = 0x00;

	while(1)
	{
		follow_segment(speed);
     8dc:	c3 01       	movw	r24, r6
     8de:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>
		
		sensor_data_hold = sensor_data_verified();
     8e2:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     8e6:	28 2f       	mov	r18, r24
		
		if(sensor_data_hold & 0b10000)  //left trigging 
     8e8:	84 ff       	sbrs	r24, 4
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__stack+0x1b>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     8ec:	64 e6       	ldi	r22, 0x64	; 100
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	84 e6       	ldi	r24, 0x64	; 100
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	29 83       	std	Y+1, r18	; 0x01
     8f6:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
			destination = 0;
     8fa:	00 e0       	ldi	r16, 0x00	; 0
     8fc:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     8fe:	29 81       	ldd	r18, Y+1	; 0x01
     900:	e8 cf       	rjmp	.-48     	; 0x8d2 <maze_solve+0x230>
				{
					Right_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
				{
					destination = destination + 1;
     902:	0f 5f       	subi	r16, 0xFF	; 255
     904:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     906:	03 33       	cpi	r16, 0x33	; 51
     908:	11 05       	cpc	r17, r1
     90a:	18 f3       	brcs	.-58     	; 0x8d2 <maze_solve+0x230>
					{
						set_motors(0,0);
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
     918:	ff cf       	rjmp	.-2      	; 0x918 <__stack+0x19>
					}
				}
			}
			evaluate_direction(speed);
		}
		else if (sensor_data_hold & 0b00001) //right trigging
     91a:	80 ff       	sbrs	r24, 0
     91c:	1d c0       	rjmp	.+58     	; 0x958 <__stack+0x59>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     91e:	64 e6       	ldi	r22, 0x64	; 100
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	84 e6       	ldi	r24, 0x64	; 100
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	29 83       	std	Y+1, r18	; 0x01
     928:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
			destination = 0;
     92c:	00 e0       	ldi	r16, 0x00	; 0
     92e:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     930:	29 81       	ldd	r18, Y+1	; 0x01
     932:	21 71       	andi	r18, 0x11	; 17
     934:	81 f2       	breq	.-96     	; 0x8d6 <maze_solve+0x234>
			{
				sensor_data_hold = sensor_data_verified();
     936:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     93a:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b10000) && (Left_trigged == 0))
				{
					Left_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
     93c:	8f 31       	cpi	r24, 0x1F	; 31
     93e:	c9 f7       	brne	.-14     	; 0x932 <__stack+0x33>
				{
					destination = destination + 1;
     940:	0f 5f       	subi	r16, 0xFF	; 255
     942:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     944:	03 33       	cpi	r16, 0x33	; 51
     946:	11 05       	cpc	r17, r1
     948:	a0 f3       	brcs	.-24     	; 0x932 <__stack+0x33>
					{
						set_motors(0,0);
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
     956:	ff cf       	rjmp	.-2      	; 0x956 <__stack+0x57>
					}
				}
			}
			evaluate_direction(speed);
		}
		else if (sensor_data_hold == 0b00000) //-100
     958:	81 11       	cpse	r24, r1
     95a:	c0 cf       	rjmp	.-128    	; 0x8dc <maze_solve+0x23a>
     95c:	bc cf       	rjmp	.-136    	; 0x8d6 <maze_solve+0x234>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     95e:	bb 20       	and	r11, r11
     960:	09 f4       	brne	.+2      	; 0x964 <__stack+0x65>
     962:	13 cf       	rjmp	.-474    	; 0x78a <maze_solve+0xe8>
     964:	04 c0       	rjmp	.+8      	; 0x96e <__stack+0x6f>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     966:	99 20       	and	r9, r9
     968:	09 f4       	brne	.+2      	; 0x96c <__stack+0x6d>
     96a:	5c cf       	rjmp	.-328    	; 0x824 <maze_solve+0x182>
     96c:	05 c0       	rjmp	.+10     	; 0x978 <__stack+0x79>
				node_number = node_number + 1;
				turn('L',speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	b8 16       	cp	r11, r24
     972:	09 f4       	brne	.+2      	; 0x976 <__stack+0x77>
     974:	0a cf       	rjmp	.-492    	; 0x78a <maze_solve+0xe8>
     976:	04 c0       	rjmp	.+8      	; 0x980 <__stack+0x81>
				node_number = node_number + 1;
				turn('S',speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     978:	e1 e0       	ldi	r30, 0x01	; 1
     97a:	9e 16       	cp	r9, r30
     97c:	09 f4       	brne	.+2      	; 0x980 <__stack+0x81>
     97e:	7c cf       	rjmp	.-264    	; 0x878 <maze_solve+0x1d6>
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
			if (sensor_data_hold & 0b00100)
			{
				Forward_trigged = 1;
     980:	aa 24       	eor	r10, r10
     982:	a3 94       	inc	r10
     984:	9f ce       	rjmp	.-706    	; 0x6c4 <maze_solve+0x22>

00000986 <turn>:

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
	
	if (dir == 'L')
     986:	8c 34       	cpi	r24, 0x4C	; 76
     988:	09 f0       	breq	.+2      	; 0x98c <turn+0x6>
     98a:	41 c0       	rjmp	.+130    	; 0xa0e <turn+0x88>
	{
		delay_ms(17); //25
     98c:	81 e1       	ldi	r24, 0x11	; 17
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(0,0);
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(10);
     9a0:	8a e0       	ldi	r24, 0x0A	; 10
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(-200,-200);
     9a8:	68 e3       	ldi	r22, 0x38	; 56
     9aa:	7f ef       	ldi	r23, 0xFF	; 255
     9ac:	88 e3       	ldi	r24, 0x38	; 56
     9ae:	9f ef       	ldi	r25, 0xFF	; 255
     9b0:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(10);
     9b4:	8a e0       	ldi	r24, 0x0A	; 10
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(0,0);
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(20);
     9c8:	84 e1       	ldi	r24, 0x14	; 20
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		
		set_motors(-90,90);
     9d0:	6a e5       	ldi	r22, 0x5A	; 90
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	86 ea       	ldi	r24, 0xA6	; 166
     9d6:	9f ef       	ldi	r25, 0xFF	; 255
     9d8:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     9dc:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(20);
		
		set_motors(-90,90);
		
		while(!(sensor_data_save & 0b10000))
     9de:	84 fd       	sbrc	r24, 4
     9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <turn+0x62>
		{
			sensor_data_save = sensor_data_verified();
     9e2:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     9e6:	fb cf       	rjmp	.-10     	; 0x9de <turn+0x58>
		}
		while(sensor_data_save & 0b10000)
     9e8:	84 ff       	sbrs	r24, 4
     9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <turn+0x6c>
		{
			sensor_data_save = sensor_data_verified();
     9ec:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     9f0:	fb cf       	rjmp	.-10     	; 0x9e8 <turn+0x62>
		}
		while(!(sensor_data_save & 0b00010))
     9f2:	81 fd       	sbrc	r24, 1
     9f4:	03 c0       	rjmp	.+6      	; 0x9fc <turn+0x76>
		{
			sensor_data_save = sensor_data_verified();
     9f6:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     9fa:	fb cf       	rjmp	.-10     	; 0x9f2 <turn+0x6c>
		}
		
		set_motors(0,0);
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(1); //30
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	9e c0       	rjmp	.+316    	; 0xb4a <turn+0x1c4>
		delay_ms(20);
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);
	}
	else if (dir == 'R')
     a0e:	82 35       	cpi	r24, 0x52	; 82
     a10:	09 f0       	breq	.+2      	; 0xa14 <turn+0x8e>
     a12:	55 c0       	rjmp	.+170    	; 0xabe <turn+0x138>
	{
		delay_ms(17);  //25
     a14:	81 e1       	ldi	r24, 0x11	; 17
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(0,0);
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(10);
     a28:	8a e0       	ldi	r24, 0x0A	; 10
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(-200,-200);
     a30:	68 e3       	ldi	r22, 0x38	; 56
     a32:	7f ef       	ldi	r23, 0xFF	; 255
     a34:	88 e3       	ldi	r24, 0x38	; 56
     a36:	9f ef       	ldi	r25, 0xFF	; 255
     a38:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(10);
     a3c:	8a e0       	ldi	r24, 0x0A	; 10
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(0,0);
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(20);
     a50:	84 e1       	ldi	r24, 0x14	; 20
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		
		set_motors(90,-90);
     a58:	66 ea       	ldi	r22, 0xA6	; 166
     a5a:	7f ef       	ldi	r23, 0xFF	; 255
     a5c:	8a e5       	ldi	r24, 0x5A	; 90
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     a64:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(20);
		
		set_motors(90,-90);
		
		while(!(sensor_data_save & 0b00001))
     a66:	80 fd       	sbrc	r24, 0
     a68:	03 c0       	rjmp	.+6      	; 0xa70 <turn+0xea>
		{
			sensor_data_save = sensor_data_verified();
     a6a:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     a6e:	fb cf       	rjmp	.-10     	; 0xa66 <turn+0xe0>
		}
		while(sensor_data_save & 0b00001)
     a70:	80 ff       	sbrs	r24, 0
     a72:	03 c0       	rjmp	.+6      	; 0xa7a <turn+0xf4>
		{
			sensor_data_save = sensor_data_verified();
     a74:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     a78:	fb cf       	rjmp	.-10     	; 0xa70 <turn+0xea>
		}
		while(!(sensor_data_save & 0b01000))
     a7a:	83 fd       	sbrc	r24, 3
     a7c:	03 c0       	rjmp	.+6      	; 0xa84 <turn+0xfe>
		{
			sensor_data_save = sensor_data_verified();
     a7e:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     a82:	fb cf       	rjmp	.-10     	; 0xa7a <turn+0xf4>
		}
		//delay_ms(7); // external 
		set_motors(0,0);
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(1);//30
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(-100,100);
     a98:	64 e6       	ldi	r22, 0x64	; 100
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	8c e9       	ldi	r24, 0x9C	; 156
     a9e:	9f ef       	ldi	r25, 0xFF	; 255
     aa0:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(10);
     aa4:	8a e0       	ldi	r24, 0x0A	; 10
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(0,0);
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(20);
     ab8:	84 e1       	ldi	r24, 0x14	; 20
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	b7 c0       	rjmp	.+366    	; 0xc2c <turn+0x2a6>
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);

	}
	else if (dir == 'S')
     abe:	83 35       	cpi	r24, 0x53	; 83
     ac0:	09 f4       	brne	.+2      	; 0xac4 <turn+0x13e>
     ac2:	b6 c0       	rjmp	.+364    	; 0xc30 <turn+0x2aa>
		//delay_ms(10);
		//set_motors(0,0);
		//delay_ms(50);
		////follow_segment(speed);
	}
	else if (dir == 'U')
     ac4:	85 35       	cpi	r24, 0x55	; 85
     ac6:	09 f0       	breq	.+2      	; 0xaca <turn+0x144>
     ac8:	47 c0       	rjmp	.+142    	; 0xb58 <turn+0x1d2>
	{
		delay_ms(25);
     aca:	89 e1       	ldi	r24, 0x19	; 25
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(0,0);
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(10);
     ade:	8a e0       	ldi	r24, 0x0A	; 10
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(-200,-200);
     ae6:	68 e3       	ldi	r22, 0x38	; 56
     ae8:	7f ef       	ldi	r23, 0xFF	; 255
     aea:	88 e3       	ldi	r24, 0x38	; 56
     aec:	9f ef       	ldi	r25, 0xFF	; 255
     aee:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(10);
     af2:	8a e0       	ldi	r24, 0x0A	; 10
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(0,0);
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(20);
     b06:	84 e1       	ldi	r24, 0x14	; 20
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		
		set_motors(-90,90);
     b0e:	6a e5       	ldi	r22, 0x5A	; 90
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	86 ea       	ldi	r24, 0xA6	; 166
     b14:	9f ef       	ldi	r25, 0xFF	; 255
     b16:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     b1a:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(20);
		
		set_motors(-90,90);
		
		while(!(sensor_data_save & 0b10000))
     b1c:	84 fd       	sbrc	r24, 4
     b1e:	03 c0       	rjmp	.+6      	; 0xb26 <turn+0x1a0>
		{
			sensor_data_save = sensor_data_verified();
     b20:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b24:	fb cf       	rjmp	.-10     	; 0xb1c <turn+0x196>
		}
		while(sensor_data_save & 0b10000)
     b26:	84 ff       	sbrs	r24, 4
     b28:	03 c0       	rjmp	.+6      	; 0xb30 <turn+0x1aa>
		{
			sensor_data_save = sensor_data_verified();
     b2a:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b2e:	fb cf       	rjmp	.-10     	; 0xb26 <turn+0x1a0>
		}
		while(!(sensor_data_save & 0b00010))
     b30:	81 fd       	sbrc	r24, 1
     b32:	03 c0       	rjmp	.+6      	; 0xb3a <turn+0x1b4>
		{
			sensor_data_save = sensor_data_verified();
     b34:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b38:	fb cf       	rjmp	.-10     	; 0xb30 <turn+0x1aa>
		}
		
		set_motors(0,0);
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(10);//30
     b46:	8a e0       	ldi	r24, 0x0A	; 10
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(100,-100);
     b4e:	6c e9       	ldi	r22, 0x9C	; 156
     b50:	7f ef       	ldi	r23, 0xFF	; 255
     b52:	84 e6       	ldi	r24, 0x64	; 100
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a4 cf       	rjmp	.-184    	; 0xaa0 <turn+0x11a>
		delay_ms(20);
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);
	}
	else if (dir == 'D')
     b58:	84 34       	cpi	r24, 0x44	; 68
     b5a:	09 f0       	breq	.+2      	; 0xb5e <turn+0x1d8>
     b5c:	69 c0       	rjmp	.+210    	; 0xc30 <turn+0x2aa>
	{
		uint16_t sensor_data_hold;
		set_motors(0,0);
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		//delay_ms(50);
		//set_motors(-100,-100);
		//delay_ms(50);
		//set_motors(0,0);
		//process_array();
		delay_ms(200);
     b6a:	88 ec       	ldi	r24, 0xC8	; 200
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(-50,-50);
     b72:	6e ec       	ldi	r22, 0xCE	; 206
     b74:	7f ef       	ldi	r23, 0xFF	; 255
     b76:	8e ec       	ldi	r24, 0xCE	; 206
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		sensor_data_hold = sensor_data_verified();
		while((sensor_data_hold & 0b10001) == 0b10001)
		{
			sensor_data_hold = sensor_data_verified();
     b7e:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b82:	90 e0       	ldi	r25, 0x00	; 0
		//set_motors(0,0);
		//process_array();
		delay_ms(200);
		set_motors(-50,-50);
		sensor_data_hold = sensor_data_verified();
		while((sensor_data_hold & 0b10001) == 0b10001)
     b84:	81 71       	andi	r24, 0x11	; 17
     b86:	99 27       	eor	r25, r25
     b88:	41 97       	sbiw	r24, 0x11	; 17
     b8a:	c9 f3       	breq	.-14     	; 0xb7e <turn+0x1f8>
		{
			sensor_data_hold = sensor_data_verified();
		}
		set_motors(0,0);
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(50);
     b98:	82 e3       	ldi	r24, 0x32	; 50
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(50,50);
     ba0:	62 e3       	ldi	r22, 0x32	; 50
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	82 e3       	ldi	r24, 0x32	; 50
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(150);
     bac:	86 e9       	ldi	r24, 0x96	; 150
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		//set_motors(-100,-100);
		//delay_ms(50);
		set_motors(0,0);
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(50);
     bc0:	82 e3       	ldi	r24, 0x32	; 50
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(-60,60);
     bc8:	6c e3       	ldi	r22, 0x3C	; 60
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	84 ec       	ldi	r24, 0xC4	; 196
     bce:	9f ef       	ldi	r25, 0xFF	; 255
     bd0:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(50);
     bd4:	82 e3       	ldi	r24, 0x32	; 50
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		while((sensor_data_verified() & 0b10000) != 0x00);
     bdc:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     be0:	84 fd       	sbrc	r24, 4
     be2:	fc cf       	rjmp	.-8      	; 0xbdc <turn+0x256>
		while((sensor_data_verified() & 0b10000) != 0b10000);
     be4:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     be8:	84 ff       	sbrs	r24, 4
     bea:	fc cf       	rjmp	.-8      	; 0xbe4 <turn+0x25e>
		while((sensor_data_verified() & 0b00010) != 0b00010);
     bec:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     bf0:	81 ff       	sbrs	r24, 1
     bf2:	fc cf       	rjmp	.-8      	; 0xbec <turn+0x266>
		////while(sensor_data() & (3<<3)) != (3<<3));
		//delay_ms(20);
		//set_motors(0,0);
		//delay_ms(50);
		
		set_motors(0,0);
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(20); //30
     c00:	84 e1       	ldi	r24, 0x14	; 20
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(100,-100);
     c08:	6c e9       	ldi	r22, 0x9C	; 156
     c0a:	7f ef       	ldi	r23, 0xFF	; 255
     c0c:	84 e6       	ldi	r24, 0x64	; 100
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(10);
     c14:	8a e0       	ldi	r24, 0x0A	; 10
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
		set_motors(0,0);
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <set_motors>
		delay_ms(50);
     c28:	82 e3       	ldi	r24, 0x32	; 50
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <delay_ms>
     c30:	08 95       	ret

00000c32 <_ZN15OrangutanAnalog7setModeEh>:
     c32:	88 23       	and	r24, r24
     c34:	21 f4       	brne	.+8      	; 0xc3e <_ZN15OrangutanAnalog7setModeEh+0xc>
     c36:	80 91 7c 00 	lds	r24, 0x007C
     c3a:	8f 7d       	andi	r24, 0xDF	; 223
     c3c:	03 c0       	rjmp	.+6      	; 0xc44 <_ZN15OrangutanAnalog7setModeEh+0x12>
     c3e:	80 91 7c 00 	lds	r24, 0x007C
     c42:	80 62       	ori	r24, 0x20	; 32
     c44:	80 93 7c 00 	sts	0x007C, r24
     c48:	08 95       	ret

00000c4a <_ZN15OrangutanAnalog7getModeEv>:
     c4a:	80 91 7c 00 	lds	r24, 0x007C
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	25 e0       	ldi	r18, 0x05	; 5
     c52:	95 95       	asr	r25
     c54:	87 95       	ror	r24
     c56:	2a 95       	dec	r18
     c58:	e1 f7       	brne	.-8      	; 0xc52 <_ZN15OrangutanAnalog7getModeEv+0x8>
     c5a:	81 70       	andi	r24, 0x01	; 1
     c5c:	08 95       	ret

00000c5e <_ZN15OrangutanAnalog12isConvertingEv>:
     c5e:	80 91 7a 00 	lds	r24, 0x007A
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	36 e0       	ldi	r19, 0x06	; 6
     c66:	95 95       	asr	r25
     c68:	87 95       	ror	r24
     c6a:	3a 95       	dec	r19
     c6c:	e1 f7       	brne	.-8      	; 0xc66 <_ZN15OrangutanAnalog12isConvertingEv+0x8>
     c6e:	81 70       	andi	r24, 0x01	; 1
     c70:	08 95       	ret

00000c72 <_ZN15OrangutanAnalog16conversionResultEv>:
     c72:	0e 94 25 06 	call	0xc4a	; 0xc4a <_ZN15OrangutanAnalog7getModeEv>
     c76:	88 23       	and	r24, r24
     c78:	21 f0       	breq	.+8      	; 0xc82 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     c7a:	20 91 79 00 	lds	r18, 0x0079
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <_ZN15OrangutanAnalog16conversionResultEv+0x18>
     c82:	20 91 78 00 	lds	r18, 0x0078
     c86:	30 91 79 00 	lds	r19, 0x0079
     c8a:	c9 01       	movw	r24, r18
     c8c:	08 95       	ret

00000c8e <_ZN15OrangutanAnalog15startConversionEhh>:
     c8e:	80 32       	cpi	r24, 0x20	; 32
     c90:	b0 f4       	brcc	.+44     	; 0xcbe <_ZN15OrangutanAnalog15startConversionEhh+0x30>
     c92:	97 e8       	ldi	r25, 0x87	; 135
     c94:	90 93 7a 00 	sts	0x007A, r25
     c98:	90 91 7c 00 	lds	r25, 0x007C
     c9c:	29 2f       	mov	r18, r25
     c9e:	20 64       	ori	r18, 0x40	; 64
     ca0:	66 23       	and	r22, r22
     ca2:	11 f0       	breq	.+4      	; 0xca8 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     ca4:	90 6c       	ori	r25, 0xC0	; 192
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <_ZN15OrangutanAnalog15startConversionEhh+0x1e>
     ca8:	92 2f       	mov	r25, r18
     caa:	9f 77       	andi	r25, 0x7F	; 127
     cac:	90 7e       	andi	r25, 0xE0	; 224
     cae:	98 2b       	or	r25, r24
     cb0:	90 93 7c 00 	sts	0x007C, r25
     cb4:	80 91 7a 00 	lds	r24, 0x007A
     cb8:	80 64       	ori	r24, 0x40	; 64
     cba:	80 93 7a 00 	sts	0x007A, r24
     cbe:	08 95       	ret

00000cc0 <_ZN15OrangutanAnalog11readAverageEhj>:
     cc0:	a0 e0       	ldi	r26, 0x00	; 0
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e6 e6       	ldi	r30, 0x66	; 102
     cc6:	f6 e0       	ldi	r31, 0x06	; 6
     cc8:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__prologue_saves__+0x14>
     ccc:	6b 01       	movw	r12, r22
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN15OrangutanAnalog15startConversionEhh>
     cd4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN15OrangutanAnalog12isConvertingEv>
     cd8:	88 23       	and	r24, r24
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     cdc:	e6 01       	movw	r28, r12
     cde:	ee 24       	eor	r14, r14
     ce0:	ff 24       	eor	r15, r15
     ce2:	87 01       	movw	r16, r14
     ce4:	80 91 7a 00 	lds	r24, 0x007A
     ce8:	80 64       	ori	r24, 0x40	; 64
     cea:	80 93 7a 00 	sts	0x007A, r24
     cee:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN15OrangutanAnalog12isConvertingEv>
     cf2:	88 23       	and	r24, r24
     cf4:	e1 f7       	brne	.-8      	; 0xcee <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     cf6:	0e 94 39 06 	call	0xc72	; 0xc72 <_ZN15OrangutanAnalog16conversionResultEv>
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e8 0e       	add	r14, r24
     d00:	f9 1e       	adc	r15, r25
     d02:	0a 1f       	adc	r16, r26
     d04:	1b 1f       	adc	r17, r27
     d06:	21 97       	sbiw	r28, 0x01	; 1
     d08:	69 f7       	brne	.-38     	; 0xce4 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     d0a:	c6 01       	movw	r24, r12
     d0c:	96 95       	lsr	r25
     d0e:	87 95       	ror	r24
     d10:	20 e4       	ldi	r18, 0x40	; 64
     d12:	c2 16       	cp	r12, r18
     d14:	d1 04       	cpc	r13, r1
     d16:	40 f4       	brcc	.+16     	; 0xd28 <_ZN15OrangutanAnalog11readAverageEhj+0x68>
     d18:	8e 0d       	add	r24, r14
     d1a:	9f 1d       	adc	r25, r15
     d1c:	6c 2d       	mov	r22, r12
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	0e 94 a0 13 	call	0x2740	; 0x2740 <__udivmodhi4>
     d24:	cb 01       	movw	r24, r22
     d26:	0d c0       	rjmp	.+26     	; 0xd42 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     d28:	bc 01       	movw	r22, r24
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	6e 0d       	add	r22, r14
     d30:	7f 1d       	adc	r23, r15
     d32:	80 1f       	adc	r24, r16
     d34:	91 1f       	adc	r25, r17
     d36:	96 01       	movw	r18, r12
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	0e 94 c8 13 	call	0x2790	; 0x2790 <__udivmodsi4>
     d40:	c9 01       	movw	r24, r18
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	e8 e0       	ldi	r30, 0x08	; 8
     d48:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <__epilogue_restores__+0x14>

00000d4c <_ZN15OrangutanAnalog12toMillivoltsEj>:
     d4c:	a3 e0       	ldi	r26, 0x03	; 3
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	ec ea       	ldi	r30, 0xAC	; 172
     d52:	f6 e0       	ldi	r31, 0x06	; 6
     d54:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__prologue_saves__+0x1e>
     d58:	bc 01       	movw	r22, r24
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	20 91 00 01 	lds	r18, 0x0100
     d62:	30 91 01 01 	lds	r19, 0x0101
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	0e 94 84 13 	call	0x2708	; 0x2708 <__mulsi3>
     d6e:	18 2f       	mov	r17, r24
     d70:	69 83       	std	Y+1, r22	; 0x01
     d72:	7a 83       	std	Y+2, r23	; 0x02
     d74:	9b 83       	std	Y+3, r25	; 0x03
     d76:	0e 94 25 06 	call	0xc4a	; 0xc4a <_ZN15OrangutanAnalog7getModeEv>
     d7a:	69 81       	ldd	r22, Y+1	; 0x01
     d7c:	7a 81       	ldd	r23, Y+2	; 0x02
     d7e:	9b 81       	ldd	r25, Y+3	; 0x03
     d80:	88 23       	and	r24, r24
     d82:	71 f0       	breq	.+28     	; 0xda0 <_ZN15OrangutanAnalog12toMillivoltsEj+0x54>
     d84:	9b 01       	movw	r18, r22
     d86:	41 2f       	mov	r20, r17
     d88:	59 2f       	mov	r21, r25
     d8a:	ca 01       	movw	r24, r20
     d8c:	b9 01       	movw	r22, r18
     d8e:	61 58       	subi	r22, 0x81	; 129
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	8f 4f       	sbci	r24, 0xFF	; 255
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	2f ef       	ldi	r18, 0xFF	; 255
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	0d c0       	rjmp	.+26     	; 0xdba <_ZN15OrangutanAnalog12toMillivoltsEj+0x6e>
     da0:	9b 01       	movw	r18, r22
     da2:	41 2f       	mov	r20, r17
     da4:	59 2f       	mov	r21, r25
     da6:	ca 01       	movw	r24, r20
     da8:	b9 01       	movw	r22, r18
     daa:	61 50       	subi	r22, 0x01	; 1
     dac:	7e 4f       	sbci	r23, 0xFE	; 254
     dae:	8f 4f       	sbci	r24, 0xFF	; 255
     db0:	9f 4f       	sbci	r25, 0xFF	; 255
     db2:	2f ef       	ldi	r18, 0xFF	; 255
     db4:	33 e0       	ldi	r19, 0x03	; 3
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	0e 94 c8 13 	call	0x2790	; 0x2790 <__udivmodsi4>
     dbe:	c9 01       	movw	r24, r18
     dc0:	23 96       	adiw	r28, 0x03	; 3
     dc2:	e3 e0       	ldi	r30, 0x03	; 3
     dc4:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__epilogue_restores__+0x1e>

00000dc8 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     dc8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZN15OrangutanAnalog11readAverageEhj>
     dcc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <_ZN15OrangutanAnalog12toMillivoltsEj>
     dd0:	08 95       	ret

00000dd2 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	0e 94 25 06 	call	0xc4a	; 0xc4a <_ZN15OrangutanAnalog7getModeEv>
     ddc:	18 2f       	mov	r17, r24
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN15OrangutanAnalog7setModeEh>
     de4:	86 e0       	ldi	r24, 0x06	; 6
     de6:	6a e0       	ldi	r22, 0x0A	; 10
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     dee:	ec 01       	movw	r28, r24
     df0:	81 2f       	mov	r24, r17
     df2:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN15OrangutanAnalog7setModeEh>
     df6:	9e 01       	movw	r18, r28
     df8:	22 0f       	add	r18, r18
     dfa:	33 1f       	adc	r19, r19
     dfc:	2c 0f       	add	r18, r28
     dfe:	3d 1f       	adc	r19, r29
     e00:	2f 5f       	subi	r18, 0xFF	; 255
     e02:	3f 4f       	sbci	r19, 0xFF	; 255
     e04:	36 95       	lsr	r19
     e06:	27 95       	ror	r18
     e08:	c9 01       	movw	r24, r18
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	08 95       	ret

00000e12 <read_battery_millivolts_3pi>:
     e12:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     e16:	08 95       	ret

00000e18 <_ZL16currentCharacterv>:
     e18:	90 91 4f 01 	lds	r25, 0x014F
     e1c:	e0 91 4b 01 	lds	r30, 0x014B
     e20:	f0 91 4c 01 	lds	r31, 0x014C
     e24:	99 23       	and	r25, r25
     e26:	11 f0       	breq	.+4      	; 0xe2c <_ZL16currentCharacterv+0x14>
     e28:	84 91       	lpm	r24, Z
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <_ZL16currentCharacterv+0x16>
     e2c:	80 81       	ld	r24, Z
     e2e:	28 2f       	mov	r18, r24
     e30:	21 54       	subi	r18, 0x41	; 65
     e32:	2a 31       	cpi	r18, 0x1A	; 26
     e34:	10 f4       	brcc	.+4      	; 0xe3a <_ZL16currentCharacterv+0x22>
     e36:	80 5e       	subi	r24, 0xE0	; 224
     e38:	08 95       	ret
     e3a:	80 32       	cpi	r24, 0x20	; 32
     e3c:	71 f4       	brne	.+28     	; 0xe5a <_ZL16currentCharacterv+0x42>
     e3e:	20 91 4b 01 	lds	r18, 0x014B
     e42:	30 91 4c 01 	lds	r19, 0x014C
     e46:	a9 01       	movw	r20, r18
     e48:	4f 5f       	subi	r20, 0xFF	; 255
     e4a:	5f 4f       	sbci	r21, 0xFF	; 255
     e4c:	50 93 4c 01 	sts	0x014C, r21
     e50:	40 93 4b 01 	sts	0x014B, r20
     e54:	21 15       	cp	r18, r1
     e56:	31 05       	cpc	r19, r1
     e58:	09 f7       	brne	.-62     	; 0xe1c <_ZL16currentCharacterv+0x4>
     e5a:	08 95       	ret

00000e5c <_ZL9getNumberv>:
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZL16currentCharacterv>
     e68:	c0 e0       	ldi	r28, 0x00	; 0
     e6a:	d0 e0       	ldi	r29, 0x00	; 0
     e6c:	1b c0       	rjmp	.+54     	; 0xea4 <_ZL9getNumberv+0x48>
     e6e:	9e 01       	movw	r18, r28
     e70:	22 0f       	add	r18, r18
     e72:	33 1f       	adc	r19, r19
     e74:	93 e0       	ldi	r25, 0x03	; 3
     e76:	cc 0f       	add	r28, r28
     e78:	dd 1f       	adc	r29, r29
     e7a:	9a 95       	dec	r25
     e7c:	e1 f7       	brne	.-8      	; 0xe76 <_ZL9getNumberv+0x1a>
     e7e:	c2 0f       	add	r28, r18
     e80:	d3 1f       	adc	r29, r19
     e82:	99 27       	eor	r25, r25
     e84:	87 fd       	sbrc	r24, 7
     e86:	90 95       	com	r25
     e88:	c8 0f       	add	r28, r24
     e8a:	d9 1f       	adc	r29, r25
     e8c:	e0 97       	sbiw	r28, 0x30	; 48
     e8e:	80 91 4b 01 	lds	r24, 0x014B
     e92:	90 91 4c 01 	lds	r25, 0x014C
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	90 93 4c 01 	sts	0x014C, r25
     e9c:	80 93 4b 01 	sts	0x014B, r24
     ea0:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZL16currentCharacterv>
     ea4:	98 2f       	mov	r25, r24
     ea6:	90 53       	subi	r25, 0x30	; 48
     ea8:	9a 30       	cpi	r25, 0x0A	; 10
     eaa:	08 f3       	brcs	.-62     	; 0xe6e <_ZL9getNumberv+0x12>
     eac:	ce 01       	movw	r24, r28
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	08 95       	ret

00000eb8 <_ZN15OrangutanBuzzer5init2Ev>:
     eb8:	10 92 6f 00 	sts	0x006F, r1
     ebc:	83 e2       	ldi	r24, 0x23	; 35
     ebe:	80 93 80 00 	sts	0x0080, r24
     ec2:	81 e1       	ldi	r24, 0x11	; 17
     ec4:	80 93 81 00 	sts	0x0081, r24
     ec8:	10 92 82 00 	sts	0x0082, r1
     ecc:	80 e1       	ldi	r24, 0x10	; 16
     ece:	97 e2       	ldi	r25, 0x27	; 39
     ed0:	90 93 89 00 	sts	0x0089, r25
     ed4:	80 93 88 00 	sts	0x0088, r24
     ed8:	10 92 8b 00 	sts	0x008B, r1
     edc:	10 92 8a 00 	sts	0x008A, r1
     ee0:	22 9a       	sbi	0x04, 2	; 4
     ee2:	78 94       	sei
     ee4:	08 95       	ret

00000ee6 <_ZN15OrangutanBuzzer4initEv>:
     ee6:	80 91 4a 01 	lds	r24, 0x014A
     eea:	88 23       	and	r24, r24
     eec:	29 f4       	brne	.+10     	; 0xef8 <_ZN15OrangutanBuzzer4initEv+0x12>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	80 93 4a 01 	sts	0x014A, r24
     ef4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <_ZN15OrangutanBuzzer5init2Ev>
     ef8:	08 95       	ret

00000efa <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     efa:	a0 e0       	ldi	r26, 0x00	; 0
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e3 e8       	ldi	r30, 0x83	; 131
     f00:	f7 e0       	ldi	r31, 0x07	; 7
     f02:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__prologue_saves__+0xc>
     f06:	8c 01       	movw	r16, r24
     f08:	5b 01       	movw	r10, r22
     f0a:	e4 2e       	mov	r14, r20
     f0c:	0e 94 73 07 	call	0xee6	; 0xee6 <_ZN15OrangutanBuzzer4initEv>
     f10:	10 92 02 01 	sts	0x0102, r1
     f14:	17 ff       	sbrs	r17, 7
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x26>
     f18:	1f 77       	andi	r17, 0x7F	; 127
     f1a:	aa e0       	ldi	r26, 0x0A	; 10
     f1c:	fa 2e       	mov	r15, r26
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
     f20:	ff 24       	eor	r15, r15
     f22:	f3 94       	inc	r15
     f24:	c0 90 81 00 	lds	r12, 0x0081
     f28:	dd 24       	eor	r13, r13
     f2a:	28 ef       	ldi	r18, 0xF8	; 248
     f2c:	c2 22       	and	r12, r18
     f2e:	dd 24       	eor	r13, r13
     f30:	88 ec       	ldi	r24, 0xC8	; 200
     f32:	3f 2d       	mov	r19, r15
     f34:	38 9f       	mul	r19, r24
     f36:	c0 01       	movw	r24, r0
     f38:	11 24       	eor	r1, r1
     f3a:	80 17       	cp	r24, r16
     f3c:	91 07       	cpc	r25, r17
     f3e:	d8 f4       	brcc	.+54     	; 0xf76 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x7c>
     f40:	e8 01       	movw	r28, r16
     f42:	67 e2       	ldi	r22, 0x27	; 39
     f44:	01 31       	cpi	r16, 0x11	; 17
     f46:	16 07       	cpc	r17, r22
     f48:	10 f0       	brcs	.+4      	; 0xf4e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x54>
     f4a:	c0 e1       	ldi	r28, 0x10	; 16
     f4c:	d7 e2       	ldi	r29, 0x27	; 39
     f4e:	be 01       	movw	r22, r28
     f50:	76 95       	lsr	r23
     f52:	67 95       	ror	r22
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	60 58       	subi	r22, 0x80	; 128
     f5a:	79 46       	sbci	r23, 0x69	; 105
     f5c:	87 46       	sbci	r24, 0x67	; 103
     f5e:	9f 4f       	sbci	r25, 0xFF	; 255
     f60:	9e 01       	movw	r18, r28
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	0e 94 c8 13 	call	0x2790	; 0x2790 <__udivmodsi4>
     f6a:	89 01       	movw	r16, r18
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	c8 2a       	or	r12, r24
     f72:	d9 2a       	or	r13, r25
     f74:	2c c0       	rjmp	.+88     	; 0xfce <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd4>
     f76:	98 e2       	ldi	r25, 0x28	; 40
     f78:	f9 9e       	mul	r15, r25
     f7a:	90 2d       	mov	r25, r0
     f7c:	11 24       	eor	r1, r1
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	89 2e       	mov	r8, r25
     f82:	e4 01       	movw	r28, r8
     f84:	4e 01       	movw	r8, r28
     f86:	98 2e       	mov	r9, r24
     f88:	e4 01       	movw	r28, r8
     f8a:	80 16       	cp	r8, r16
     f8c:	91 06       	cpc	r9, r17
     f8e:	08 f4       	brcc	.+2      	; 0xf92 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x98>
     f90:	e8 01       	movw	r28, r16
     f92:	be 01       	movw	r22, r28
     f94:	76 95       	lsr	r23
     f96:	67 95       	ror	r22
     f98:	9e 01       	movw	r18, r28
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	8f 2d       	mov	r24, r15
     fa0:	8a 30       	cpi	r24, 0x0A	; 10
     fa2:	39 f4       	brne	.+14     	; 0xfb2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb8>
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	60 5e       	subi	r22, 0xE0	; 224
     faa:	73 44       	sbci	r23, 0x43	; 67
     fac:	81 44       	sbci	r24, 0x41	; 65
     fae:	9f 4f       	sbci	r25, 0xFF	; 255
     fb0:	06 c0       	rjmp	.+12     	; 0xfbe <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc4>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	60 53       	subi	r22, 0x30	; 48
     fb8:	7d 4e       	sbci	r23, 0xED	; 237
     fba:	8c 4e       	sbci	r24, 0xEC	; 236
     fbc:	9f 4f       	sbci	r25, 0xFF	; 255
     fbe:	0e 94 c8 13 	call	0x2790	; 0x2790 <__udivmodsi4>
     fc2:	89 01       	movw	r16, r18
     fc4:	52 e0       	ldi	r21, 0x02	; 2
     fc6:	85 2e       	mov	r8, r21
     fc8:	91 2c       	mov	r9, r1
     fca:	c8 28       	or	r12, r8
     fcc:	d9 28       	or	r13, r9
     fce:	2f 2d       	mov	r18, r15
     fd0:	2a 30       	cpi	r18, 0x0A	; 10
     fd2:	39 f4       	brne	.+14     	; 0xfe2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe8>
     fd4:	ce 01       	movw	r24, r28
     fd6:	05 96       	adiw	r24, 0x05	; 5
     fd8:	6a e0       	ldi	r22, 0x0A	; 10
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	0e 94 a0 13 	call	0x2740	; 0x2740 <__udivmodhi4>
     fe0:	eb 01       	movw	r28, r22
     fe2:	33 e0       	ldi	r19, 0x03	; 3
     fe4:	c8 3e       	cpi	r28, 0xE8	; 232
     fe6:	d3 07       	cpc	r29, r19
     fe8:	79 f0       	breq	.+30     	; 0x1008 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x10e>
     fea:	be 01       	movw	r22, r28
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	95 01       	movw	r18, r10
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	0e 94 84 13 	call	0x2708	; 0x2708 <__mulsi3>
     ffa:	28 ee       	ldi	r18, 0xE8	; 232
     ffc:	33 e0       	ldi	r19, 0x03	; 3
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__divmodsi4>
    1006:	01 c0       	rjmp	.+2      	; 0x100a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1008:	95 01       	movw	r18, r10
    100a:	10 92 6f 00 	sts	0x006F, r1
    100e:	c0 92 81 00 	sts	0x0081, r12
    1012:	10 93 89 00 	sts	0x0089, r17
    1016:	00 93 88 00 	sts	0x0088, r16
    101a:	40 91 88 00 	lds	r20, 0x0088
    101e:	50 91 89 00 	lds	r21, 0x0089
    1022:	6e 2d       	mov	r22, r14
    1024:	60 31       	cpi	r22, 0x10	; 16
    1026:	08 f0       	brcs	.+2      	; 0x102a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1028:	6f e0       	ldi	r22, 0x0F	; 15
    102a:	80 e1       	ldi	r24, 0x10	; 16
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	86 1b       	sub	r24, r22
    1030:	91 09       	sbc	r25, r1
    1032:	ba 01       	movw	r22, r20
    1034:	02 c0       	rjmp	.+4      	; 0x103a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1036:	76 95       	lsr	r23
    1038:	67 95       	ror	r22
    103a:	8a 95       	dec	r24
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    103e:	70 93 8b 00 	sts	0x008B, r23
    1042:	60 93 8a 00 	sts	0x008A, r22
    1046:	30 93 52 01 	sts	0x0152, r19
    104a:	20 93 51 01 	sts	0x0151, r18
    104e:	86 b3       	in	r24, 0x16	; 22
    1050:	8f ef       	ldi	r24, 0xFF	; 255
    1052:	86 bb       	out	0x16, r24	; 22
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	80 93 6f 00 	sts	0x006F, r24
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	ec e0       	ldi	r30, 0x0C	; 12
    1060:	0c 94 36 14 	jmp	0x286c	; 0x286c <__epilogue_restores__+0xc>

00001064 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1064:	9b 01       	movw	r18, r22
    1066:	8f 3f       	cpi	r24, 0xFF	; 255
    1068:	11 f0       	breq	.+4      	; 0x106e <_ZN15OrangutanBuzzer8playNoteEhjh+0xa>
    106a:	44 23       	and	r20, r20
    106c:	29 f4       	brne	.+10     	; 0x1078 <_ZN15OrangutanBuzzer8playNoteEhjh+0x14>
    106e:	88 ee       	ldi	r24, 0xE8	; 232
    1070:	93 e0       	ldi	r25, 0x03	; 3
    1072:	b9 01       	movw	r22, r18
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	49 c0       	rjmp	.+146    	; 0x110a <_ZN15OrangutanBuzzer8playNoteEhjh+0xa6>
    1078:	81 31       	cpi	r24, 0x11	; 17
    107a:	30 f0       	brcs	.+12     	; 0x1088 <_ZN15OrangutanBuzzer8playNoteEhjh+0x24>
    107c:	58 2f       	mov	r21, r24
    107e:	50 51       	subi	r21, 0x10	; 16
    1080:	50 36       	cpi	r21, 0x60	; 96
    1082:	18 f0       	brcs	.+6      	; 0x108a <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    1084:	5f e5       	ldi	r21, 0x5F	; 95
    1086:	01 c0       	rjmp	.+2      	; 0x108a <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	85 2f       	mov	r24, r21
    108c:	6c e0       	ldi	r22, 0x0C	; 12
    108e:	0e 94 94 13 	call	0x2728	; 0x2728 <__udivmodqi4>
    1092:	a8 2f       	mov	r26, r24
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e4 ef       	ldi	r30, 0xF4	; 244
    1098:	ff ef       	ldi	r31, 0xFF	; 255
    109a:	ae 9f       	mul	r26, r30
    109c:	b0 01       	movw	r22, r0
    109e:	af 9f       	mul	r26, r31
    10a0:	70 0d       	add	r23, r0
    10a2:	be 9f       	mul	r27, r30
    10a4:	70 0d       	add	r23, r0
    10a6:	11 24       	eor	r1, r1
    10a8:	65 0f       	add	r22, r21
    10aa:	71 1d       	adc	r23, r1
    10ac:	6c 30       	cpi	r22, 0x0C	; 12
    10ae:	71 05       	cpc	r23, r1
    10b0:	40 f4       	brcc	.+16     	; 0x10c2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5e>
    10b2:	fb 01       	movw	r30, r22
    10b4:	ee 0f       	add	r30, r30
    10b6:	ff 1f       	adc	r31, r31
    10b8:	e4 5f       	subi	r30, 0xF4	; 244
    10ba:	fe 4f       	sbci	r31, 0xFE	; 254
    10bc:	60 81       	ld	r22, Z
    10be:	71 81       	ldd	r23, Z+1	; 0x01
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	87 30       	cpi	r24, 0x07	; 7
    10c8:	81 f0       	breq	.+32     	; 0x10ea <_ZN15OrangutanBuzzer8playNoteEhjh+0x86>
    10ca:	08 2e       	mov	r0, r24
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6e>
    10ce:	66 0f       	add	r22, r22
    10d0:	77 1f       	adc	r23, r23
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <_ZN15OrangutanBuzzer8playNoteEhjh+0x6a>
    10d6:	82 30       	cpi	r24, 0x02	; 2
    10d8:	28 f0       	brcs	.+10     	; 0x10e4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x80>
    10da:	cb 01       	movw	r24, r22
    10dc:	05 96       	adiw	r24, 0x05	; 5
    10de:	6a e0       	ldi	r22, 0x0A	; 10
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	0c c0       	rjmp	.+24     	; 0x10fc <_ZN15OrangutanBuzzer8playNoteEhjh+0x98>
    10e4:	60 50       	subi	r22, 0x00	; 0
    10e6:	70 48       	sbci	r23, 0x80	; 128
    10e8:	0b c0       	rjmp	.+22     	; 0x1100 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    10ea:	cb 01       	movw	r24, r22
    10ec:	b6 e0       	ldi	r27, 0x06	; 6
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	ba 95       	dec	r27
    10f4:	e1 f7       	brne	.-8      	; 0x10ee <_ZN15OrangutanBuzzer8playNoteEhjh+0x8a>
    10f6:	02 96       	adiw	r24, 0x02	; 2
    10f8:	65 e0       	ldi	r22, 0x05	; 5
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	0e 94 a0 13 	call	0x2740	; 0x2740 <__udivmodhi4>
    1100:	40 31       	cpi	r20, 0x10	; 16
    1102:	08 f0       	brcs	.+2      	; 0x1106 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa2>
    1104:	4f e0       	ldi	r20, 0x0F	; 15
    1106:	cb 01       	movw	r24, r22
    1108:	b9 01       	movw	r22, r18
    110a:	0e 94 7d 07 	call	0xefa	; 0xefa <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    110e:	08 95       	ret

00001110 <_ZL8nextNotev>:
    1110:	a0 e0       	ldi	r26, 0x00	; 0
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	ee e8       	ldi	r30, 0x8E	; 142
    1116:	f8 e0       	ldi	r31, 0x08	; 8
    1118:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__prologue_saves__+0xa>
    111c:	b0 90 03 01 	lds	r11, 0x0103
    1120:	80 91 4d 01 	lds	r24, 0x014D
    1124:	88 23       	and	r24, r24
    1126:	61 f0       	breq	.+24     	; 0x1140 <_ZL8nextNotev+0x30>
    1128:	60 91 4e 01 	lds	r22, 0x014E
    112c:	66 23       	and	r22, r22
    112e:	41 f0       	breq	.+16     	; 0x1140 <_ZL8nextNotev+0x30>
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	0e 94 32 08 	call	0x1064	; 0x1064 <_ZN15OrangutanBuzzer8playNoteEhjh>
    113a:	10 92 4e 01 	sts	0x014E, r1
    113e:	34 c1       	rjmp	.+616    	; 0x13a8 <_ZL8nextNotev+0x298>
    1140:	c0 ec       	ldi	r28, 0xC0	; 192
    1142:	dd e5       	ldi	r29, 0x5D	; 93
    1144:	aa 24       	eor	r10, r10
    1146:	a3 94       	inc	r10
    1148:	14 e0       	ldi	r17, 0x04	; 4
    114a:	71 2e       	mov	r7, r17
    114c:	00 ed       	ldi	r16, 0xD0	; 208
    114e:	17 e0       	ldi	r17, 0x07	; 7
    1150:	b4 e0       	ldi	r27, 0x04	; 4
    1152:	eb 2e       	mov	r14, r27
    1154:	f1 2c       	mov	r15, r1
    1156:	a4 ef       	ldi	r26, 0xF4	; 244
    1158:	ca 2e       	mov	r12, r26
    115a:	a1 e0       	ldi	r26, 0x01	; 1
    115c:	da 2e       	mov	r13, r26
    115e:	ff e0       	ldi	r31, 0x0F	; 15
    1160:	8f 2e       	mov	r8, r31
    1162:	91 2c       	mov	r9, r1
    1164:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZL16currentCharacterv>
    1168:	20 91 4b 01 	lds	r18, 0x014B
    116c:	30 91 4c 01 	lds	r19, 0x014C
    1170:	2f 5f       	subi	r18, 0xFF	; 255
    1172:	3f 4f       	sbci	r19, 0xFF	; 255
    1174:	30 93 4c 01 	sts	0x014C, r19
    1178:	20 93 4b 01 	sts	0x014B, r18
    117c:	86 36       	cpi	r24, 0x66	; 102
    117e:	f1 f1       	breq	.+124    	; 0x11fc <_ZL8nextNotev+0xec>
    1180:	87 36       	cpi	r24, 0x67	; 103
    1182:	cc f4       	brge	.+50     	; 0x11b6 <_ZL8nextNotev+0xa6>
    1184:	82 36       	cpi	r24, 0x62	; 98
    1186:	09 f4       	brne	.+2      	; 0x118a <_ZL8nextNotev+0x7a>
    1188:	af c0       	rjmp	.+350    	; 0x12e8 <_ZL8nextNotev+0x1d8>
    118a:	83 36       	cpi	r24, 0x63	; 99
    118c:	7c f4       	brge	.+30     	; 0x11ac <_ZL8nextNotev+0x9c>
    118e:	8e 33       	cpi	r24, 0x3E	; 62
    1190:	49 f1       	breq	.+82     	; 0x11e4 <_ZL8nextNotev+0xd4>
    1192:	8f 33       	cpi	r24, 0x3F	; 63
    1194:	3c f4       	brge	.+14     	; 0x11a4 <_ZL8nextNotev+0x94>
    1196:	81 32       	cpi	r24, 0x21	; 33
    1198:	09 f4       	brne	.+2      	; 0x119c <_ZL8nextNotev+0x8c>
    119a:	87 c0       	rjmp	.+270    	; 0x12aa <_ZL8nextNotev+0x19a>
    119c:	8c 33       	cpi	r24, 0x3C	; 60
    119e:	09 f0       	breq	.+2      	; 0x11a2 <_ZL8nextNotev+0x92>
    11a0:	9b c0       	rjmp	.+310    	; 0x12d8 <_ZL8nextNotev+0x1c8>
    11a2:	22 c0       	rjmp	.+68     	; 0x11e8 <_ZL8nextNotev+0xd8>
    11a4:	81 36       	cpi	r24, 0x61	; 97
    11a6:	09 f0       	breq	.+2      	; 0x11aa <_ZL8nextNotev+0x9a>
    11a8:	97 c0       	rjmp	.+302    	; 0x12d8 <_ZL8nextNotev+0x1c8>
    11aa:	9b c0       	rjmp	.+310    	; 0x12e2 <_ZL8nextNotev+0x1d2>
    11ac:	84 36       	cpi	r24, 0x64	; 100
    11ae:	01 f1       	breq	.+64     	; 0x11f0 <_ZL8nextNotev+0xe0>
    11b0:	85 36       	cpi	r24, 0x65	; 101
    11b2:	0c f5       	brge	.+66     	; 0x11f6 <_ZL8nextNotev+0xe6>
    11b4:	1b c0       	rjmp	.+54     	; 0x11ec <_ZL8nextNotev+0xdc>
    11b6:	8f 36       	cpi	r24, 0x6F	; 111
    11b8:	09 f4       	brne	.+2      	; 0x11bc <_ZL8nextNotev+0xac>
    11ba:	47 c0       	rjmp	.+142    	; 0x124a <_ZL8nextNotev+0x13a>
    11bc:	80 37       	cpi	r24, 0x70	; 112
    11be:	44 f4       	brge	.+16     	; 0x11d0 <_ZL8nextNotev+0xc0>
    11c0:	8c 36       	cpi	r24, 0x6C	; 108
    11c2:	11 f1       	breq	.+68     	; 0x1208 <_ZL8nextNotev+0xf8>
    11c4:	8d 36       	cpi	r24, 0x6D	; 109
    11c6:	61 f1       	breq	.+88     	; 0x1220 <_ZL8nextNotev+0x110>
    11c8:	87 36       	cpi	r24, 0x67	; 103
    11ca:	09 f0       	breq	.+2      	; 0x11ce <_ZL8nextNotev+0xbe>
    11cc:	85 c0       	rjmp	.+266    	; 0x12d8 <_ZL8nextNotev+0x1c8>
    11ce:	19 c0       	rjmp	.+50     	; 0x1202 <_ZL8nextNotev+0xf2>
    11d0:	84 37       	cpi	r24, 0x74	; 116
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <_ZL8nextNotev+0xc6>
    11d4:	44 c0       	rjmp	.+136    	; 0x125e <_ZL8nextNotev+0x14e>
    11d6:	86 37       	cpi	r24, 0x76	; 118
    11d8:	09 f4       	brne	.+2      	; 0x11dc <_ZL8nextNotev+0xcc>
    11da:	60 c0       	rjmp	.+192    	; 0x129c <_ZL8nextNotev+0x18c>
    11dc:	82 37       	cpi	r24, 0x72	; 114
    11de:	09 f0       	breq	.+2      	; 0x11e2 <_ZL8nextNotev+0xd2>
    11e0:	7b c0       	rjmp	.+246    	; 0x12d8 <_ZL8nextNotev+0x1c8>
    11e2:	39 c0       	rjmp	.+114    	; 0x1256 <_ZL8nextNotev+0x146>
    11e4:	b3 94       	inc	r11
    11e6:	be cf       	rjmp	.-132    	; 0x1164 <_ZL8nextNotev+0x54>
    11e8:	ba 94       	dec	r11
    11ea:	bc cf       	rjmp	.-136    	; 0x1164 <_ZL8nextNotev+0x54>
    11ec:	ee 24       	eor	r14, r14
    11ee:	35 c0       	rjmp	.+106    	; 0x125a <_ZL8nextNotev+0x14a>
    11f0:	ee 24       	eor	r14, r14
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	7b c0       	rjmp	.+246    	; 0x12ec <_ZL8nextNotev+0x1dc>
    11f6:	ee 24       	eor	r14, r14
    11f8:	84 e0       	ldi	r24, 0x04	; 4
    11fa:	78 c0       	rjmp	.+240    	; 0x12ec <_ZL8nextNotev+0x1dc>
    11fc:	ee 24       	eor	r14, r14
    11fe:	85 e0       	ldi	r24, 0x05	; 5
    1200:	75 c0       	rjmp	.+234    	; 0x12ec <_ZL8nextNotev+0x1dc>
    1202:	ee 24       	eor	r14, r14
    1204:	87 e0       	ldi	r24, 0x07	; 7
    1206:	72 c0       	rjmp	.+228    	; 0x12ec <_ZL8nextNotev+0x1dc>
    1208:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZL9getNumberv>
    120c:	bc 01       	movw	r22, r24
    120e:	90 93 05 01 	sts	0x0105, r25
    1212:	80 93 04 01 	sts	0x0104, r24
    1216:	80 91 06 01 	lds	r24, 0x0106
    121a:	90 91 07 01 	lds	r25, 0x0107
    121e:	37 c0       	rjmp	.+110    	; 0x128e <_ZL8nextNotev+0x17e>
    1220:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZL16currentCharacterv>
    1224:	8c 36       	cpi	r24, 0x6C	; 108
    1226:	19 f4       	brne	.+6      	; 0x122e <_ZL8nextNotev+0x11e>
    1228:	10 92 4d 01 	sts	0x014D, r1
    122c:	04 c0       	rjmp	.+8      	; 0x1236 <_ZL8nextNotev+0x126>
    122e:	a0 92 4d 01 	sts	0x014D, r10
    1232:	10 92 4e 01 	sts	0x014E, r1
    1236:	80 91 4b 01 	lds	r24, 0x014B
    123a:	90 91 4c 01 	lds	r25, 0x014C
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	90 93 4c 01 	sts	0x014C, r25
    1244:	80 93 4b 01 	sts	0x014B, r24
    1248:	8d cf       	rjmp	.-230    	; 0x1164 <_ZL8nextNotev+0x54>
    124a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZL9getNumberv>
    124e:	b8 2e       	mov	r11, r24
    1250:	80 93 03 01 	sts	0x0103, r24
    1254:	87 cf       	rjmp	.-242    	; 0x1164 <_ZL8nextNotev+0x54>
    1256:	ee 24       	eor	r14, r14
    1258:	e3 94       	inc	r14
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	47 c0       	rjmp	.+142    	; 0x12ec <_ZL8nextNotev+0x1dc>
    125e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZL9getNumberv>
    1262:	bc 01       	movw	r22, r24
    1264:	ce 01       	movw	r24, r28
    1266:	0e 94 a0 13 	call	0x2740	; 0x2740 <__udivmodhi4>
    126a:	cb 01       	movw	r24, r22
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	53 e0       	ldi	r21, 0x03	; 3
    1272:	66 0f       	add	r22, r22
    1274:	77 1f       	adc	r23, r23
    1276:	5a 95       	dec	r21
    1278:	e1 f7       	brne	.-8      	; 0x1272 <_ZL8nextNotev+0x162>
    127a:	86 0f       	add	r24, r22
    127c:	97 1f       	adc	r25, r23
    127e:	90 93 07 01 	sts	0x0107, r25
    1282:	80 93 06 01 	sts	0x0106, r24
    1286:	60 91 04 01 	lds	r22, 0x0104
    128a:	70 91 05 01 	lds	r23, 0x0105
    128e:	0e 94 a0 13 	call	0x2740	; 0x2740 <__udivmodhi4>
    1292:	70 93 09 01 	sts	0x0109, r23
    1296:	60 93 08 01 	sts	0x0108, r22
    129a:	64 cf       	rjmp	.-312    	; 0x1164 <_ZL8nextNotev+0x54>
    129c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZL9getNumberv>
    12a0:	90 93 0b 01 	sts	0x010B, r25
    12a4:	80 93 0a 01 	sts	0x010A, r24
    12a8:	5d cf       	rjmp	.-326    	; 0x1164 <_ZL8nextNotev+0x54>
    12aa:	70 92 03 01 	sts	0x0103, r7
    12ae:	10 93 07 01 	sts	0x0107, r17
    12b2:	00 93 06 01 	sts	0x0106, r16
    12b6:	f0 92 05 01 	sts	0x0105, r15
    12ba:	e0 92 04 01 	sts	0x0104, r14
    12be:	d0 92 09 01 	sts	0x0109, r13
    12c2:	c0 92 08 01 	sts	0x0108, r12
    12c6:	90 92 0b 01 	sts	0x010B, r9
    12ca:	80 92 0a 01 	sts	0x010A, r8
    12ce:	10 92 4d 01 	sts	0x014D, r1
    12d2:	44 e0       	ldi	r20, 0x04	; 4
    12d4:	b4 2e       	mov	r11, r20
    12d6:	46 cf       	rjmp	.-372    	; 0x1164 <_ZL8nextNotev+0x54>
    12d8:	10 92 4c 01 	sts	0x014C, r1
    12dc:	10 92 4b 01 	sts	0x014B, r1
    12e0:	63 c0       	rjmp	.+198    	; 0x13a8 <_ZL8nextNotev+0x298>
    12e2:	ee 24       	eor	r14, r14
    12e4:	89 e0       	ldi	r24, 0x09	; 9
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <_ZL8nextNotev+0x1dc>
    12e8:	ee 24       	eor	r14, r14
    12ea:	8b e0       	ldi	r24, 0x0B	; 11
    12ec:	9c e0       	ldi	r25, 0x0C	; 12
    12ee:	b9 9e       	mul	r11, r25
    12f0:	b0 2c       	mov	r11, r0
    12f2:	11 24       	eor	r1, r1
    12f4:	b8 0e       	add	r11, r24
    12f6:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZL16currentCharacterv>
    12fa:	8b 32       	cpi	r24, 0x2B	; 43
    12fc:	11 f0       	breq	.+4      	; 0x1302 <_ZL8nextNotev+0x1f2>
    12fe:	83 32       	cpi	r24, 0x23	; 35
    1300:	b9 f4       	brne	.+46     	; 0x1330 <_ZL8nextNotev+0x220>
    1302:	80 91 4b 01 	lds	r24, 0x014B
    1306:	90 91 4c 01 	lds	r25, 0x014C
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	90 93 4c 01 	sts	0x014C, r25
    1310:	80 93 4b 01 	sts	0x014B, r24
    1314:	b3 94       	inc	r11
    1316:	ef cf       	rjmp	.-34     	; 0x12f6 <_ZL8nextNotev+0x1e6>
    1318:	80 91 4b 01 	lds	r24, 0x014B
    131c:	90 91 4c 01 	lds	r25, 0x014C
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	90 93 4c 01 	sts	0x014C, r25
    1326:	80 93 4b 01 	sts	0x014B, r24
    132a:	ba 94       	dec	r11
    132c:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZL16currentCharacterv>
    1330:	8d 32       	cpi	r24, 0x2D	; 45
    1332:	91 f3       	breq	.-28     	; 0x1318 <_ZL8nextNotev+0x208>
    1334:	c0 91 08 01 	lds	r28, 0x0108
    1338:	d0 91 09 01 	lds	r29, 0x0109
    133c:	81 53       	subi	r24, 0x31	; 49
    133e:	88 30       	cpi	r24, 0x08	; 8
    1340:	58 f4       	brcc	.+22     	; 0x1358 <_ZL8nextNotev+0x248>
    1342:	c0 91 06 01 	lds	r28, 0x0106
    1346:	d0 91 07 01 	lds	r29, 0x0107
    134a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZL9getNumberv>
    134e:	bc 01       	movw	r22, r24
    1350:	ce 01       	movw	r24, r28
    1352:	0e 94 a0 13 	call	0x2740	; 0x2740 <__udivmodhi4>
    1356:	eb 01       	movw	r28, r22
    1358:	8e 01       	movw	r16, r28
    135a:	0b c0       	rjmp	.+22     	; 0x1372 <_ZL8nextNotev+0x262>
    135c:	80 91 4b 01 	lds	r24, 0x014B
    1360:	90 91 4c 01 	lds	r25, 0x014C
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	90 93 4c 01 	sts	0x014C, r25
    136a:	80 93 4b 01 	sts	0x014B, r24
    136e:	c0 0f       	add	r28, r16
    1370:	d1 1f       	adc	r29, r17
    1372:	16 95       	lsr	r17
    1374:	07 95       	ror	r16
    1376:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZL16currentCharacterv>
    137a:	8e 32       	cpi	r24, 0x2E	; 46
    137c:	79 f3       	breq	.-34     	; 0x135c <_ZL8nextNotev+0x24c>
    137e:	80 91 4d 01 	lds	r24, 0x014D
    1382:	88 23       	and	r24, r24
    1384:	39 f0       	breq	.+14     	; 0x1394 <_ZL8nextNotev+0x284>
    1386:	ce 01       	movw	r24, r28
    1388:	96 95       	lsr	r25
    138a:	87 95       	ror	r24
    138c:	80 93 4e 01 	sts	0x014E, r24
    1390:	c8 1b       	sub	r28, r24
    1392:	d1 09       	sbc	r29, r1
    1394:	ee 20       	and	r14, r14
    1396:	11 f0       	breq	.+4      	; 0x139c <_ZL8nextNotev+0x28c>
    1398:	bb 24       	eor	r11, r11
    139a:	ba 94       	dec	r11
    139c:	8b 2d       	mov	r24, r11
    139e:	be 01       	movw	r22, r28
    13a0:	40 91 0a 01 	lds	r20, 0x010A
    13a4:	0e 94 32 08 	call	0x1064	; 0x1064 <_ZN15OrangutanBuzzer8playNoteEhjh>
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	ed e0       	ldi	r30, 0x0D	; 13
    13ae:	0c 94 35 14 	jmp	0x286a	; 0x286a <__epilogue_restores__+0xa>

000013b2 <__vector_13>:
    13b2:	1f 92       	push	r1
    13b4:	0f 92       	push	r0
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	0f 92       	push	r0
    13ba:	11 24       	eor	r1, r1
    13bc:	2f 93       	push	r18
    13be:	3f 93       	push	r19
    13c0:	4f 93       	push	r20
    13c2:	5f 93       	push	r21
    13c4:	6f 93       	push	r22
    13c6:	7f 93       	push	r23
    13c8:	8f 93       	push	r24
    13ca:	9f 93       	push	r25
    13cc:	af 93       	push	r26
    13ce:	bf 93       	push	r27
    13d0:	ef 93       	push	r30
    13d2:	ff 93       	push	r31
    13d4:	80 91 51 01 	lds	r24, 0x0151
    13d8:	90 91 52 01 	lds	r25, 0x0152
    13dc:	9c 01       	movw	r18, r24
    13de:	21 50       	subi	r18, 0x01	; 1
    13e0:	30 40       	sbci	r19, 0x00	; 0
    13e2:	30 93 52 01 	sts	0x0152, r19
    13e6:	20 93 51 01 	sts	0x0151, r18
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	11 f5       	brne	.+68     	; 0x1432 <__vector_13+0x80>
    13ee:	10 92 6f 00 	sts	0x006F, r1
    13f2:	78 94       	sei
    13f4:	80 91 81 00 	lds	r24, 0x0081
    13f8:	88 7f       	andi	r24, 0xF8	; 248
    13fa:	81 60       	ori	r24, 0x01	; 1
    13fc:	80 93 81 00 	sts	0x0081, r24
    1400:	80 e1       	ldi	r24, 0x10	; 16
    1402:	97 e2       	ldi	r25, 0x27	; 39
    1404:	90 93 89 00 	sts	0x0089, r25
    1408:	80 93 88 00 	sts	0x0088, r24
    140c:	10 92 8b 00 	sts	0x008B, r1
    1410:	10 92 8a 00 	sts	0x008A, r1
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	80 93 02 01 	sts	0x0102, r24
    141a:	80 91 4b 01 	lds	r24, 0x014B
    141e:	90 91 4c 01 	lds	r25, 0x014C
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	31 f0       	breq	.+12     	; 0x1432 <__vector_13+0x80>
    1426:	80 91 50 01 	lds	r24, 0x0150
    142a:	88 23       	and	r24, r24
    142c:	11 f4       	brne	.+4      	; 0x1432 <__vector_13+0x80>
    142e:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZL8nextNotev>
    1432:	ff 91       	pop	r31
    1434:	ef 91       	pop	r30
    1436:	bf 91       	pop	r27
    1438:	af 91       	pop	r26
    143a:	9f 91       	pop	r25
    143c:	8f 91       	pop	r24
    143e:	7f 91       	pop	r23
    1440:	6f 91       	pop	r22
    1442:	5f 91       	pop	r21
    1444:	4f 91       	pop	r20
    1446:	3f 91       	pop	r19
    1448:	2f 91       	pop	r18
    144a:	0f 90       	pop	r0
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	0f 90       	pop	r0
    1450:	1f 90       	pop	r1
    1452:	18 95       	reti

00001454 <_ZN15OrangutanBuzzer9isPlayingEv>:
    1454:	80 91 02 01 	lds	r24, 0x0102
    1458:	88 23       	and	r24, r24
    145a:	51 f0       	breq	.+20     	; 0x1470 <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	20 91 4b 01 	lds	r18, 0x014B
    1462:	30 91 4c 01 	lds	r19, 0x014C
    1466:	21 15       	cp	r18, r1
    1468:	31 05       	cpc	r19, r1
    146a:	19 f4       	brne	.+6      	; 0x1472 <_ZN15OrangutanBuzzer9isPlayingEv+0x1e>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	08 95       	ret
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	08 95       	ret

00001474 <is_playing>:
    1474:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN15OrangutanBuzzer9isPlayingEv>
    1478:	08 95       	ret

0000147a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    147a:	10 92 6f 00 	sts	0x006F, r1
    147e:	90 93 4c 01 	sts	0x014C, r25
    1482:	80 93 4b 01 	sts	0x014B, r24
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 93 4f 01 	sts	0x014F, r24
    148c:	10 92 4e 01 	sts	0x014E, r1
    1490:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZL8nextNotev>
    1494:	08 95       	ret

00001496 <play_from_program_space>:
    1496:	0e 94 3d 0a 	call	0x147a	; 0x147a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    149a:	08 95       	ret

0000149c <delayMicroseconds.clone.0>:
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	6f 93       	push	r22
    14a2:	64 e0       	ldi	r22, 0x04	; 4
    14a4:	6a 95       	dec	r22
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <delayMicroseconds.clone.0+0x8>
    14a8:	6f 91       	pop	r22
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	c9 f7       	brne	.-14     	; 0x14a0 <delayMicroseconds.clone.0+0x4>
    14ae:	08 95       	ret

000014b0 <_ZN12OrangutanLCD8busyWaitEv>:
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	1a b1       	in	r17, 0x0a	; 10
    14ba:	57 98       	cbi	0x0a, 7	; 10
    14bc:	5a 98       	cbi	0x0b, 2	; 11
    14be:	28 9a       	sbi	0x05, 0	; 5
    14c0:	c0 e0       	ldi	r28, 0x00	; 0
    14c2:	d0 e0       	ldi	r29, 0x00	; 0
    14c4:	0e 94 4e 0a 	call	0x149c	; 0x149c <delayMicroseconds.clone.0>
    14c8:	5c 9a       	sbi	0x0b, 4	; 11
    14ca:	0e 94 4e 0a 	call	0x149c	; 0x149c <delayMicroseconds.clone.0>
    14ce:	09 b1       	in	r16, 0x09	; 9
    14d0:	5c 98       	cbi	0x0b, 4	; 11
    14d2:	0e 94 4e 0a 	call	0x149c	; 0x149c <delayMicroseconds.clone.0>
    14d6:	5c 9a       	sbi	0x0b, 4	; 11
    14d8:	0e 94 4e 0a 	call	0x149c	; 0x149c <delayMicroseconds.clone.0>
    14dc:	5c 98       	cbi	0x0b, 4	; 11
    14de:	07 ff       	sbrs	r16, 7
    14e0:	11 c0       	rjmp	.+34     	; 0x1504 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    14e2:	24 96       	adiw	r28, 0x04	; 4
    14e4:	9e 01       	movw	r18, r28
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	80 91 57 01 	lds	r24, 0x0157
    14ee:	90 91 58 01 	lds	r25, 0x0158
    14f2:	a0 91 59 01 	lds	r26, 0x0159
    14f6:	b0 91 5a 01 	lds	r27, 0x015A
    14fa:	28 17       	cp	r18, r24
    14fc:	39 07       	cpc	r19, r25
    14fe:	4a 07       	cpc	r20, r26
    1500:	5b 07       	cpc	r21, r27
    1502:	00 f3       	brcs	.-64     	; 0x14c4 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1504:	1a b9       	out	0x0a, r17	; 10
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	08 95       	ret

00001510 <_ZN12OrangutanLCD8sendDataEh>:
    1510:	65 b1       	in	r22, 0x05	; 5
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	ac 01       	movw	r20, r24
    1516:	41 70       	andi	r20, 0x01	; 1
    1518:	50 70       	andi	r21, 0x00	; 0
    151a:	44 0f       	add	r20, r20
    151c:	55 1f       	adc	r21, r21
    151e:	9c 01       	movw	r18, r24
    1520:	26 70       	andi	r18, 0x06	; 6
    1522:	30 70       	andi	r19, 0x00	; 0
    1524:	53 e0       	ldi	r21, 0x03	; 3
    1526:	22 0f       	add	r18, r18
    1528:	33 1f       	adc	r19, r19
    152a:	5a 95       	dec	r21
    152c:	e1 f7       	brne	.-8      	; 0x1526 <_ZN12OrangutanLCD8sendDataEh+0x16>
    152e:	24 2b       	or	r18, r20
    1530:	6d 7c       	andi	r22, 0xCD	; 205
    1532:	26 2b       	or	r18, r22
    1534:	25 b9       	out	0x05, r18	; 5
    1536:	2b b1       	in	r18, 0x0b	; 11
    1538:	88 70       	andi	r24, 0x08	; 8
    153a:	90 70       	andi	r25, 0x00	; 0
    153c:	34 e0       	ldi	r19, 0x04	; 4
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	3a 95       	dec	r19
    1544:	e1 f7       	brne	.-8      	; 0x153e <_ZN12OrangutanLCD8sendDataEh+0x2e>
    1546:	2f 77       	andi	r18, 0x7F	; 127
    1548:	28 2b       	or	r18, r24
    154a:	2b b9       	out	0x0b, r18	; 11
    154c:	5c 9a       	sbi	0x0b, 4	; 11
    154e:	0e 94 4e 0a 	call	0x149c	; 0x149c <delayMicroseconds.clone.0>
    1552:	5c 98       	cbi	0x0b, 4	; 11
    1554:	0e 94 4e 0a 	call	0x149c	; 0x149c <delayMicroseconds.clone.0>
    1558:	08 95       	ret

0000155a <_ZN12OrangutanLCD4sendEhhh>:
    155a:	a2 e0       	ldi	r26, 0x02	; 2
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e3 eb       	ldi	r30, 0xB3	; 179
    1560:	fa e0       	ldi	r31, 0x0A	; 10
    1562:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__prologue_saves__+0x16>
    1566:	18 2f       	mov	r17, r24
    1568:	4a 83       	std	Y+2, r20	; 0x02
    156a:	69 83       	std	Y+1, r22	; 0x01
    156c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <_ZN12OrangutanLCD4initEv>
    1570:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_ZN12OrangutanLCD8busyWaitEv>
    1574:	f4 b0       	in	r15, 0x04	; 4
    1576:	05 b1       	in	r16, 0x05	; 5
    1578:	da b0       	in	r13, 0x0a	; 10
    157a:	eb b0       	in	r14, 0x0b	; 11
    157c:	28 98       	cbi	0x05, 0	; 5
    157e:	69 81       	ldd	r22, Y+1	; 0x01
    1580:	4a 81       	ldd	r20, Y+2	; 0x02
    1582:	66 23       	and	r22, r22
    1584:	11 f0       	breq	.+4      	; 0x158a <_ZN12OrangutanLCD4sendEhhh+0x30>
    1586:	5a 9a       	sbi	0x0b, 2	; 11
    1588:	01 c0       	rjmp	.+2      	; 0x158c <_ZN12OrangutanLCD4sendEhhh+0x32>
    158a:	5a 98       	cbi	0x0b, 2	; 11
    158c:	84 b1       	in	r24, 0x04	; 4
    158e:	82 63       	ori	r24, 0x32	; 50
    1590:	84 b9       	out	0x04, r24	; 4
    1592:	57 9a       	sbi	0x0a, 7	; 10
    1594:	41 30       	cpi	r20, 0x01	; 1
    1596:	29 f0       	breq	.+10     	; 0x15a2 <_ZN12OrangutanLCD4sendEhhh+0x48>
    1598:	81 2f       	mov	r24, r17
    159a:	82 95       	swap	r24
    159c:	8f 70       	andi	r24, 0x0F	; 15
    159e:	0e 94 88 0a 	call	0x1510	; 0x1510 <_ZN12OrangutanLCD8sendDataEh>
    15a2:	81 2f       	mov	r24, r17
    15a4:	8f 70       	andi	r24, 0x0F	; 15
    15a6:	0e 94 88 0a 	call	0x1510	; 0x1510 <_ZN12OrangutanLCD8sendDataEh>
    15aa:	da b8       	out	0x0a, r13	; 10
    15ac:	eb b8       	out	0x0b, r14	; 11
    15ae:	f4 b8       	out	0x04, r15	; 4
    15b0:	05 b9       	out	0x05, r16	; 5
    15b2:	22 96       	adiw	r28, 0x02	; 2
    15b4:	e7 e0       	ldi	r30, 0x07	; 7
    15b6:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__epilogue_restores__+0x16>

000015ba <_ZN12OrangutanLCD8send_cmdEh>:
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	42 e0       	ldi	r20, 0x02	; 2
    15be:	0e 94 ad 0a 	call	0x155a	; 0x155a <_ZN12OrangutanLCD4sendEhhh>
    15c2:	08 95       	ret

000015c4 <_ZN12OrangutanLCD9send_dataEh>:
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	42 e0       	ldi	r20, 0x02	; 2
    15c8:	0e 94 ad 0a 	call	0x155a	; 0x155a <_ZN12OrangutanLCD4sendEhhh>
    15cc:	08 95       	ret

000015ce <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	1f 93       	push	r17
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	0f 92       	push	r0
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	66 0f       	add	r22, r22
    15e0:	66 0f       	add	r22, r22
    15e2:	66 0f       	add	r22, r22
    15e4:	48 2f       	mov	r20, r24
    15e6:	59 2f       	mov	r21, r25
    15e8:	7a 01       	movw	r14, r20
    15ea:	10 e0       	ldi	r17, 0x00	; 0
    15ec:	81 2f       	mov	r24, r17
    15ee:	86 0f       	add	r24, r22
    15f0:	80 64       	ori	r24, 0x40	; 64
    15f2:	69 83       	std	Y+1, r22	; 0x01
    15f4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN12OrangutanLCD8send_cmdEh>
    15f8:	f7 01       	movw	r30, r14
    15fa:	84 91       	lpm	r24, Z
    15fc:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN12OrangutanLCD9send_dataEh>
    1600:	1f 5f       	subi	r17, 0xFF	; 255
    1602:	08 94       	sec
    1604:	e1 1c       	adc	r14, r1
    1606:	f1 1c       	adc	r15, r1
    1608:	69 81       	ldd	r22, Y+1	; 0x01
    160a:	18 30       	cpi	r17, 0x08	; 8
    160c:	79 f7       	brne	.-34     	; 0x15ec <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x1e>
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	1f 91       	pop	r17
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	08 95       	ret

0000161c <lcd_load_custom_character>:
    161c:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    1620:	08 95       	ret

00001622 <print_character>:
    1622:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN12OrangutanLCD9send_dataEh>
    1626:	08 95       	ret

00001628 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	41 e0       	ldi	r20, 0x01	; 1
    162c:	0e 94 ad 0a 	call	0x155a	; 0x155a <_ZN12OrangutanLCD4sendEhhh>
    1630:	08 95       	ret

00001632 <_ZN12OrangutanLCD5init2Ev>:
    1632:	80 e1       	ldi	r24, 0x10	; 16
    1634:	97 e2       	ldi	r25, 0x27	; 39
    1636:	a0 e0       	ldi	r26, 0x00	; 0
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	80 93 57 01 	sts	0x0157, r24
    163e:	90 93 58 01 	sts	0x0158, r25
    1642:	a0 93 59 01 	sts	0x0159, r26
    1646:	b0 93 5a 01 	sts	0x015A, r27
    164a:	52 9a       	sbi	0x0a, 2	; 10
    164c:	20 9a       	sbi	0x04, 0	; 4
    164e:	54 9a       	sbi	0x0a, 4	; 10
    1650:	8e e1       	ldi	r24, 0x1E	; 30
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
    1658:	83 e0       	ldi	r24, 0x03	; 3
    165a:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    165e:	86 e0       	ldi	r24, 0x06	; 6
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
    1666:	83 e0       	ldi	r24, 0x03	; 3
    1668:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    166c:	82 e0       	ldi	r24, 0x02	; 2
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
    1674:	83 e0       	ldi	r24, 0x03	; 3
    1676:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1688:	82 e0       	ldi	r24, 0x02	; 2
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
    1690:	88 e2       	ldi	r24, 0x28	; 40
    1692:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN12OrangutanLCD8send_cmdEh>
    1696:	88 e0       	ldi	r24, 0x08	; 8
    1698:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN12OrangutanLCD8send_cmdEh>
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN12OrangutanLCD8send_cmdEh>
    16a2:	86 e0       	ldi	r24, 0x06	; 6
    16a4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN12OrangutanLCD8send_cmdEh>
    16a8:	8c e0       	ldi	r24, 0x0C	; 12
    16aa:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN12OrangutanLCD8send_cmdEh>
    16ae:	08 95       	ret

000016b0 <_ZN12OrangutanLCD4initEv>:
    16b0:	80 91 5b 01 	lds	r24, 0x015B
    16b4:	88 23       	and	r24, r24
    16b6:	29 f4       	brne	.+10     	; 0x16c2 <_ZN12OrangutanLCD4initEv+0x12>
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	80 93 5b 01 	sts	0x015B, r24
    16be:	0e 94 19 0b 	call	0x1632	; 0x1632 <_ZN12OrangutanLCD5init2Ev>
    16c2:	08 95       	ret

000016c4 <_ZN12OrangutanLCD5clearEv>:
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN12OrangutanLCD8send_cmdEh>
    16ca:	80 91 53 01 	lds	r24, 0x0153
    16ce:	90 91 54 01 	lds	r25, 0x0154
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	11 f1       	breq	.+68     	; 0x171a <_ZN12OrangutanLCD5clearEv+0x56>
    16d6:	a0 e0       	ldi	r26, 0x00	; 0
    16d8:	b0 e2       	ldi	r27, 0x20	; 32
    16da:	08 c0       	rjmp	.+16     	; 0x16ec <_ZN12OrangutanLCD5clearEv+0x28>
    16dc:	e0 91 53 01 	lds	r30, 0x0153
    16e0:	f0 91 54 01 	lds	r31, 0x0154
    16e4:	e2 0f       	add	r30, r18
    16e6:	f3 1f       	adc	r31, r19
    16e8:	b0 83       	st	Z, r27
    16ea:	af 5f       	subi	r26, 0xFF	; 255
    16ec:	2a 2f       	mov	r18, r26
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	80 91 24 01 	lds	r24, 0x0124
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	60 91 25 01 	lds	r22, 0x0125
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	86 9f       	mul	r24, r22
    1700:	a0 01       	movw	r20, r0
    1702:	87 9f       	mul	r24, r23
    1704:	50 0d       	add	r21, r0
    1706:	96 9f       	mul	r25, r22
    1708:	50 0d       	add	r21, r0
    170a:	11 24       	eor	r1, r1
    170c:	24 17       	cp	r18, r20
    170e:	35 07       	cpc	r19, r21
    1710:	2c f3       	brlt	.-54     	; 0x16dc <_ZN12OrangutanLCD5clearEv+0x18>
    1712:	10 92 56 01 	sts	0x0156, r1
    1716:	10 92 55 01 	sts	0x0155, r1
    171a:	08 95       	ret

0000171c <clear>:
    171c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <_ZN12OrangutanLCD5clearEv>
    1720:	08 95       	ret

00001722 <_ZN12OrangutanLCD5printEPKc>:
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	e8 2e       	mov	r14, r24
    172c:	e7 01       	movw	r28, r14
    172e:	7e 01       	movw	r14, r28
    1730:	f9 2e       	mov	r15, r25
    1732:	e7 01       	movw	r28, r14
    1734:	02 c0       	rjmp	.+4      	; 0x173a <_ZN12OrangutanLCD5printEPKc+0x18>
    1736:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN12OrangutanLCD9send_dataEh>
    173a:	89 91       	ld	r24, Y+
    173c:	88 23       	and	r24, r24
    173e:	d9 f7       	brne	.-10     	; 0x1736 <_ZN12OrangutanLCD5printEPKc+0x14>
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	08 95       	ret

0000174a <print>:
    174a:	0e 94 91 0b 	call	0x1722	; 0x1722 <_ZN12OrangutanLCD5printEPKc>
    174e:	08 95       	ret

00001750 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	ec 01       	movw	r28, r24
    1756:	03 c0       	rjmp	.+6      	; 0x175e <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    1758:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN12OrangutanLCD9send_dataEh>
    175c:	21 96       	adiw	r28, 0x01	; 1
    175e:	fe 01       	movw	r30, r28
    1760:	84 91       	lpm	r24, Z
    1762:	88 23       	and	r24, r24
    1764:	c9 f7       	brne	.-14     	; 0x1758 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	08 95       	ret

0000176c <print_from_program_space>:
    176c:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    1770:	08 95       	ret

00001772 <_ZN12OrangutanLCD5printEm>:
    1772:	aa e0       	ldi	r26, 0x0A	; 10
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	ef eb       	ldi	r30, 0xBF	; 191
    1778:	fb e0       	ldi	r31, 0x0B	; 11
    177a:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__prologue_saves__+0x10>
    177e:	9b 01       	movw	r18, r22
    1780:	ac 01       	movw	r20, r24
    1782:	1a e0       	ldi	r17, 0x0A	; 10
    1784:	ea e0       	ldi	r30, 0x0A	; 10
    1786:	ce 2e       	mov	r12, r30
    1788:	d1 2c       	mov	r13, r1
    178a:	e1 2c       	mov	r14, r1
    178c:	f1 2c       	mov	r15, r1
    178e:	5e 01       	movw	r10, r28
    1790:	08 94       	sec
    1792:	a1 1c       	adc	r10, r1
    1794:	b1 1c       	adc	r11, r1
    1796:	02 2f       	mov	r16, r18
    1798:	ca 01       	movw	r24, r20
    179a:	b9 01       	movw	r22, r18
    179c:	a7 01       	movw	r20, r14
    179e:	96 01       	movw	r18, r12
    17a0:	0e 94 c8 13 	call	0x2790	; 0x2790 <__udivmodsi4>
    17a4:	11 50       	subi	r17, 0x01	; 1
    17a6:	f5 01       	movw	r30, r10
    17a8:	e1 0f       	add	r30, r17
    17aa:	f1 1d       	adc	r31, r1
    17ac:	00 5d       	subi	r16, 0xD0	; 208
    17ae:	92 2f       	mov	r25, r18
    17b0:	99 0f       	add	r25, r25
    17b2:	89 2f       	mov	r24, r25
    17b4:	88 0f       	add	r24, r24
    17b6:	88 0f       	add	r24, r24
    17b8:	89 0f       	add	r24, r25
    17ba:	08 1b       	sub	r16, r24
    17bc:	00 83       	st	Z, r16
    17be:	21 15       	cp	r18, r1
    17c0:	31 05       	cpc	r19, r1
    17c2:	41 05       	cpc	r20, r1
    17c4:	51 05       	cpc	r21, r1
    17c6:	39 f7       	brne	.-50     	; 0x1796 <_ZN12OrangutanLCD5printEm+0x24>
    17c8:	08 c0       	rjmp	.+16     	; 0x17da <_ZN12OrangutanLCD5printEm+0x68>
    17ca:	f6 01       	movw	r30, r12
    17cc:	e1 0f       	add	r30, r17
    17ce:	f1 1d       	adc	r31, r1
    17d0:	80 81       	ld	r24, Z
    17d2:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN12OrangutanLCD9send_dataEh>
    17d6:	1f 5f       	subi	r17, 0xFF	; 255
    17d8:	04 c0       	rjmp	.+8      	; 0x17e2 <_ZN12OrangutanLCD5printEm+0x70>
    17da:	6e 01       	movw	r12, r28
    17dc:	08 94       	sec
    17de:	c1 1c       	adc	r12, r1
    17e0:	d1 1c       	adc	r13, r1
    17e2:	1a 30       	cpi	r17, 0x0A	; 10
    17e4:	90 f3       	brcs	.-28     	; 0x17ca <_ZN12OrangutanLCD5printEm+0x58>
    17e6:	2a 96       	adiw	r28, 0x0a	; 10
    17e8:	ea e0       	ldi	r30, 0x0A	; 10
    17ea:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__epilogue_restores__+0x10>

000017ee <_ZN12OrangutanLCD5printEl>:
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	7b 01       	movw	r14, r22
    17f8:	8c 01       	movw	r16, r24
    17fa:	97 ff       	sbrs	r25, 7
    17fc:	0b c0       	rjmp	.+22     	; 0x1814 <_ZN12OrangutanLCD5printEl+0x26>
    17fe:	10 95       	com	r17
    1800:	00 95       	com	r16
    1802:	f0 94       	com	r15
    1804:	e0 94       	com	r14
    1806:	e1 1c       	adc	r14, r1
    1808:	f1 1c       	adc	r15, r1
    180a:	01 1d       	adc	r16, r1
    180c:	11 1d       	adc	r17, r1
    180e:	8d e2       	ldi	r24, 0x2D	; 45
    1810:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN12OrangutanLCD9send_dataEh>
    1814:	c8 01       	movw	r24, r16
    1816:	b7 01       	movw	r22, r14
    1818:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_ZN12OrangutanLCD5printEm>
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	08 95       	ret

00001826 <print_long>:
    1826:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <_ZN12OrangutanLCD5printEl>
    182a:	08 95       	ret

0000182c <_ZN12OrangutanLCD6gotoXYEhh>:
    182c:	a5 e0       	ldi	r26, 0x05	; 5
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	ec e1       	ldi	r30, 0x1C	; 28
    1832:	fc e0       	ldi	r31, 0x0C	; 12
    1834:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__prologue_saves__+0x1e>
    1838:	18 2f       	mov	r17, r24
    183a:	80 e8       	ldi	r24, 0x80	; 128
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	80 ec       	ldi	r24, 0xC0	; 192
    1840:	8a 83       	std	Y+2, r24	; 0x02
    1842:	84 e9       	ldi	r24, 0x94	; 148
    1844:	8b 83       	std	Y+3, r24	; 0x03
    1846:	84 ed       	ldi	r24, 0xD4	; 212
    1848:	8c 83       	std	Y+4, r24	; 0x04
    184a:	fe 01       	movw	r30, r28
    184c:	e6 0f       	add	r30, r22
    184e:	f1 1d       	adc	r31, r1
    1850:	81 81       	ldd	r24, Z+1	; 0x01
    1852:	81 0f       	add	r24, r17
    1854:	6d 83       	std	Y+5, r22	; 0x05
    1856:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZN12OrangutanLCD8send_cmdEh>
    185a:	10 93 56 01 	sts	0x0156, r17
    185e:	6d 81       	ldd	r22, Y+5	; 0x05
    1860:	60 93 55 01 	sts	0x0155, r22
    1864:	25 96       	adiw	r28, 0x05	; 5
    1866:	e3 e0       	ldi	r30, 0x03	; 3
    1868:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__epilogue_restores__+0x1e>

0000186c <lcd_goto_xy>:
    186c:	0e 94 16 0c 	call	0x182c	; 0x182c <_ZN12OrangutanLCD6gotoXYEhh>
    1870:	08 95       	ret

00001872 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    1872:	fc 01       	movw	r30, r24
    1874:	11 82       	std	Z+1, r1	; 0x01
    1876:	10 82       	st	Z, r1
    1878:	13 82       	std	Z+3, r1	; 0x03
    187a:	12 82       	std	Z+2, r1	; 0x02
    187c:	15 82       	std	Z+5, r1	; 0x05
    187e:	14 82       	std	Z+4, r1	; 0x04
    1880:	16 82       	std	Z+6, r1	; 0x06
    1882:	68 30       	cpi	r22, 0x08	; 8
    1884:	68 f4       	brcc	.+26     	; 0x18a0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    1886:	89 e2       	ldi	r24, 0x29	; 41
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	91 83       	std	Z+1, r25	; 0x01
    188c:	80 83       	st	Z, r24
    188e:	8b e2       	ldi	r24, 0x2B	; 43
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	93 83       	std	Z+3, r25	; 0x03
    1894:	82 83       	std	Z+2, r24	; 0x02
    1896:	8a e2       	ldi	r24, 0x2A	; 42
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	95 83       	std	Z+5, r25	; 0x05
    189c:	84 83       	std	Z+4, r24	; 0x04
    189e:	11 c0       	rjmp	.+34     	; 0x18c2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x50>
    18a0:	6e 30       	cpi	r22, 0x0E	; 14
    18a2:	c0 f4       	brcc	.+48     	; 0x18d4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x62>
    18a4:	83 e2       	ldi	r24, 0x23	; 35
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	80 83       	st	Z, r24
    18ac:	85 e2       	ldi	r24, 0x25	; 37
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	93 83       	std	Z+3, r25	; 0x03
    18b2:	82 83       	std	Z+2, r24	; 0x02
    18b4:	84 e2       	ldi	r24, 0x24	; 36
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	95 83       	std	Z+5, r25	; 0x05
    18ba:	84 83       	std	Z+4, r24	; 0x04
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	68 50       	subi	r22, 0x08	; 8
    18c0:	70 40       	sbci	r23, 0x00	; 0
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x5a>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	6a 95       	dec	r22
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x56>
    18d0:	86 83       	std	Z+6, r24	; 0x06
    18d2:	08 95       	ret
    18d4:	65 31       	cpi	r22, 0x15	; 21
    18d6:	b8 f4       	brcc	.+46     	; 0x1906 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x94>
    18d8:	86 e2       	ldi	r24, 0x26	; 38
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	80 83       	st	Z, r24
    18e0:	88 e2       	ldi	r24, 0x28	; 40
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	93 83       	std	Z+3, r25	; 0x03
    18e6:	82 83       	std	Z+2, r24	; 0x02
    18e8:	87 e2       	ldi	r24, 0x27	; 39
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	95 83       	std	Z+5, r25	; 0x05
    18ee:	84 83       	std	Z+4, r24	; 0x04
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	6e 50       	subi	r22, 0x0E	; 14
    18f4:	70 40       	sbci	r23, 0x00	; 0
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8e>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	6a 95       	dec	r22
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8a>
    1904:	86 83       	std	Z+6, r24	; 0x06
    1906:	08 95       	ret

00001908 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>:
    1908:	fc 01       	movw	r30, r24
    190a:	a4 81       	ldd	r26, Z+4	; 0x04
    190c:	b5 81       	ldd	r27, Z+5	; 0x05
    190e:	86 81       	ldd	r24, Z+6	; 0x06
    1910:	66 23       	and	r22, r22
    1912:	21 f0       	breq	.+8      	; 0x191c <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh+0x14>
    1914:	9c 91       	ld	r25, X
    1916:	98 2b       	or	r25, r24
    1918:	9c 93       	st	X, r25
    191a:	08 95       	ret
    191c:	9c 91       	ld	r25, X
    191e:	80 95       	com	r24
    1920:	89 23       	and	r24, r25
    1922:	8c 93       	st	X, r24
    1924:	08 95       	ret

00001926 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>:
    1926:	fc 01       	movw	r30, r24
    1928:	6f 3f       	cpi	r22, 0xFF	; 255
    192a:	31 f4       	brne	.+12     	; 0x1938 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x12>
    192c:	a2 81       	ldd	r26, Z+2	; 0x02
    192e:	b3 81       	ldd	r27, Z+3	; 0x03
    1930:	8c 91       	ld	r24, X
    1932:	96 81       	ldd	r25, Z+6	; 0x06
    1934:	89 27       	eor	r24, r25
    1936:	0c c0       	rjmp	.+24     	; 0x1950 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x2a>
    1938:	a2 81       	ldd	r26, Z+2	; 0x02
    193a:	b3 81       	ldd	r27, Z+3	; 0x03
    193c:	86 81       	ldd	r24, Z+6	; 0x06
    193e:	66 23       	and	r22, r22
    1940:	21 f0       	breq	.+8      	; 0x194a <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x24>
    1942:	9c 91       	ld	r25, X
    1944:	98 2b       	or	r25, r24
    1946:	9c 93       	st	X, r25
    1948:	08 95       	ret
    194a:	9c 91       	ld	r25, X
    194c:	80 95       	com	r24
    194e:	89 23       	and	r24, r25
    1950:	8c 93       	st	X, r24
    1952:	08 95       	ret

00001954 <_ZN16OrangutanDigital9setOutputEhh>:
    1954:	a7 e0       	ldi	r26, 0x07	; 7
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e0 eb       	ldi	r30, 0xB0	; 176
    195a:	fc e0       	ldi	r31, 0x0C	; 12
    195c:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__prologue_saves__+0x1a>
    1960:	28 2f       	mov	r18, r24
    1962:	f6 2e       	mov	r15, r22
    1964:	8e 01       	movw	r16, r28
    1966:	0f 5f       	subi	r16, 0xFF	; 255
    1968:	1f 4f       	sbci	r17, 0xFF	; 255
    196a:	c8 01       	movw	r24, r16
    196c:	62 2f       	mov	r22, r18
    196e:	0e 94 39 0c 	call	0x1872	; 0x1872 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1972:	c8 01       	movw	r24, r16
    1974:	6f 2d       	mov	r22, r15
    1976:	0e 94 93 0c 	call	0x1926	; 0x1926 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>
    197a:	c8 01       	movw	r24, r16
    197c:	61 e0       	ldi	r22, 0x01	; 1
    197e:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>
    1982:	27 96       	adiw	r28, 0x07	; 7
    1984:	e5 e0       	ldi	r30, 0x05	; 5
    1986:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__epilogue_restores__+0x1a>

0000198a <_ZN15OrangutanMotors5init2Ev>:
    198a:	e0 eb       	ldi	r30, 0xB0	; 176
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	83 ef       	ldi	r24, 0xF3	; 243
    1990:	80 83       	st	Z, r24
    1992:	80 81       	ld	r24, Z
    1994:	84 bd       	out	0x24, r24	; 36
    1996:	e1 eb       	ldi	r30, 0xB1	; 177
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	82 e0       	ldi	r24, 0x02	; 2
    199c:	80 83       	st	Z, r24
    199e:	80 81       	ld	r24, Z
    19a0:	85 bd       	out	0x25, r24	; 37
    19a2:	e4 eb       	ldi	r30, 0xB4	; 180
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	10 82       	st	Z, r1
    19a8:	80 81       	ld	r24, Z
    19aa:	e3 eb       	ldi	r30, 0xB3	; 179
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 83       	st	Z, r24
    19b0:	80 81       	ld	r24, Z
    19b2:	88 bd       	out	0x28, r24	; 40
    19b4:	88 b5       	in	r24, 0x28	; 40
    19b6:	87 bd       	out	0x27, r24	; 39
    19b8:	86 e0       	ldi	r24, 0x06	; 6
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN16OrangutanDigital9setOutputEhh>
    19c0:	85 e0       	ldi	r24, 0x05	; 5
    19c2:	60 e0       	ldi	r22, 0x00	; 0
    19c4:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN16OrangutanDigital9setOutputEhh>
    19c8:	8b e0       	ldi	r24, 0x0B	; 11
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN16OrangutanDigital9setOutputEhh>
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	60 e0       	ldi	r22, 0x00	; 0
    19d4:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN16OrangutanDigital9setOutputEhh>
    19d8:	08 95       	ret

000019da <_ZN15OrangutanMotors4initEv>:
    19da:	80 91 5c 01 	lds	r24, 0x015C
    19de:	88 23       	and	r24, r24
    19e0:	29 f4       	brne	.+10     	; 0x19ec <_ZN15OrangutanMotors4initEv+0x12>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	80 93 5c 01 	sts	0x015C, r24
    19e8:	0e 94 c5 0c 	call	0x198a	; 0x198a <_ZN15OrangutanMotors5init2Ev>
    19ec:	08 95       	ret

000019ee <_ZN15OrangutanMotors10setM1SpeedEi>:
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	ec 01       	movw	r28, r24
    19f4:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN15OrangutanMotors4initEv>
    19f8:	d7 ff       	sbrs	r29, 7
    19fa:	05 c0       	rjmp	.+10     	; 0x1a06 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    19fc:	d0 95       	com	r29
    19fe:	c1 95       	neg	r28
    1a00:	df 4f       	sbci	r29, 0xFF	; 255
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	01 c0       	rjmp	.+2      	; 0x1a08 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	cf 3f       	cpi	r28, 0xFF	; 255
    1a0a:	d1 05       	cpc	r29, r1
    1a0c:	19 f0       	breq	.+6      	; 0x1a14 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1a0e:	14 f0       	brlt	.+4      	; 0x1a14 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1a10:	cf ef       	ldi	r28, 0xFF	; 255
    1a12:	d0 e0       	ldi	r29, 0x00	; 0
    1a14:	88 23       	and	r24, r24
    1a16:	19 f0       	breq	.+6      	; 0x1a1e <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1a18:	18 bc       	out	0x28, r1	; 40
    1a1a:	c7 bd       	out	0x27, r28	; 39
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1a1e:	c8 bd       	out	0x28, r28	; 40
    1a20:	17 bc       	out	0x27, r1	; 39
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	08 95       	ret

00001a28 <_ZN15OrangutanMotors10setM2SpeedEi>:
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	ec 01       	movw	r28, r24
    1a2e:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN15OrangutanMotors4initEv>
    1a32:	d7 ff       	sbrs	r29, 7
    1a34:	05 c0       	rjmp	.+10     	; 0x1a40 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1a36:	d0 95       	com	r29
    1a38:	c1 95       	neg	r28
    1a3a:	df 4f       	sbci	r29, 0xFF	; 255
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	01 c0       	rjmp	.+2      	; 0x1a42 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	cf 3f       	cpi	r28, 0xFF	; 255
    1a44:	d1 05       	cpc	r29, r1
    1a46:	19 f0       	breq	.+6      	; 0x1a4e <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1a48:	14 f0       	brlt	.+4      	; 0x1a4e <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1a4a:	cf ef       	ldi	r28, 0xFF	; 255
    1a4c:	d0 e0       	ldi	r29, 0x00	; 0
    1a4e:	88 23       	and	r24, r24
    1a50:	29 f0       	breq	.+10     	; 0x1a5c <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1a52:	10 92 b4 00 	sts	0x00B4, r1
    1a56:	c0 93 b3 00 	sts	0x00B3, r28
    1a5a:	04 c0       	rjmp	.+8      	; 0x1a64 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1a5c:	c0 93 b4 00 	sts	0x00B4, r28
    1a60:	10 92 b3 00 	sts	0x00B3, r1
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	08 95       	ret

00001a6a <_ZN15OrangutanMotors9setSpeedsEii>:
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	eb 01       	movw	r28, r22
    1a70:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN15OrangutanMotors10setM1SpeedEi>
    1a74:	ce 01       	movw	r24, r28
    1a76:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN15OrangutanMotors10setM2SpeedEi>
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	08 95       	ret

00001a80 <set_motors>:
    1a80:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN15OrangutanMotors9setSpeedsEii>
    1a84:	08 95       	ret

00001a86 <_ZN20OrangutanPushbuttons5init2Ev>:
    1a86:	84 b1       	in	r24, 0x04	; 4
    1a88:	8d 7c       	andi	r24, 0xCD	; 205
    1a8a:	84 b9       	out	0x04, r24	; 4
    1a8c:	85 b1       	in	r24, 0x05	; 5
    1a8e:	82 63       	ori	r24, 0x32	; 50
    1a90:	85 b9       	out	0x05, r24	; 5
    1a92:	85 e0       	ldi	r24, 0x05	; 5
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	6f 93       	push	r22
    1a98:	64 e0       	ldi	r22, 0x04	; 4
    1a9a:	6a 95       	dec	r22
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1a9e:	6f 91       	pop	r22
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	c9 f7       	brne	.-14     	; 0x1a96 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1aa4:	08 95       	ret

00001aa6 <_ZN20OrangutanPushbuttons4initEv>:
    1aa6:	80 91 5d 01 	lds	r24, 0x015D
    1aaa:	88 23       	and	r24, r24
    1aac:	29 f4       	brne	.+10     	; 0x1ab8 <_ZN20OrangutanPushbuttons4initEv+0x12>
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	80 93 5d 01 	sts	0x015D, r24
    1ab4:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <_ZN20OrangutanPushbuttons5init2Ev>
    1ab8:	08 95       	ret

00001aba <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1aba:	1f 93       	push	r17
    1abc:	18 2f       	mov	r17, r24
    1abe:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <_ZN20OrangutanPushbuttons4initEv>
    1ac2:	83 b1       	in	r24, 0x03	; 3
    1ac4:	81 23       	and	r24, r17
    1ac6:	e9 f3       	breq	.-6      	; 0x1ac2 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1ac8:	8a e0       	ldi	r24, 0x0A	; 10
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <delay_ms>
    1ad0:	83 b1       	in	r24, 0x03	; 3
    1ad2:	81 23       	and	r24, r17
    1ad4:	b1 f3       	breq	.-20     	; 0x1ac2 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1ad6:	83 b1       	in	r24, 0x03	; 3
    1ad8:	81 23       	and	r24, r17
    1ada:	1f 91       	pop	r17
    1adc:	08 95       	ret

00001ade <wait_for_button_release>:
    1ade:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    1ae2:	08 95       	ret

00001ae4 <_ZN20OrangutanPushbuttons9isPressedEh>:
    1ae4:	a1 e0       	ldi	r26, 0x01	; 1
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e8 e7       	ldi	r30, 0x78	; 120
    1aea:	fd e0       	ldi	r31, 0x0D	; 13
    1aec:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__prologue_saves__+0x20>
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <_ZN20OrangutanPushbuttons4initEv>
    1af6:	93 b1       	in	r25, 0x03	; 3
    1af8:	90 95       	com	r25
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	89 23       	and	r24, r25
    1afe:	21 96       	adiw	r28, 0x01	; 1
    1b00:	e2 e0       	ldi	r30, 0x02	; 2
    1b02:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__+0x20>

00001b06 <button_is_pressed>:
    1b06:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_ZN20OrangutanPushbuttons9isPressedEh>
    1b0a:	08 95       	ret

00001b0c <_ZN13OrangutanTime17delayMicrosecondsEj>:
    1b0c:	6f 93       	push	r22
    1b0e:	64 e0       	ldi	r22, 0x04	; 4
    1b10:	6a 95       	dec	r22
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
    1b14:	6f 91       	pop	r22
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	c9 f7       	brne	.-14     	; 0x1b0c <_ZN13OrangutanTime17delayMicrosecondsEj>
    1b1a:	08 95       	ret

00001b1c <__vector_9>:
    1b1c:	2f 92       	push	r2
    1b1e:	8f 93       	push	r24
    1b20:	9f 93       	push	r25
    1b22:	2f b6       	in	r2, 0x3f	; 63
    1b24:	80 91 6b 01 	lds	r24, 0x016B
    1b28:	90 91 6c 01 	lds	r25, 0x016C
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	80 93 6b 01 	sts	0x016B, r24
    1b32:	90 93 6c 01 	sts	0x016C, r25
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	80 91 6d 01 	lds	r24, 0x016D
    1b3c:	89 1f       	adc	r24, r25
    1b3e:	80 93 6d 01 	sts	0x016D, r24
    1b42:	90 91 73 01 	lds	r25, 0x0173
    1b46:	9c 5f       	subi	r25, 0xFC	; 252
    1b48:	90 93 73 01 	sts	0x0173, r25
    1b4c:	80 91 72 01 	lds	r24, 0x0172
    1b50:	80 51       	subi	r24, 0x10	; 16
    1b52:	97 42       	sbci	r25, 0x27	; 39
    1b54:	c0 f0       	brcs	.+48     	; 0x1b86 <end>
    1b56:	90 93 73 01 	sts	0x0173, r25
    1b5a:	80 93 72 01 	sts	0x0172, r24
    1b5e:	80 91 6e 01 	lds	r24, 0x016E
    1b62:	90 91 6f 01 	lds	r25, 0x016F
    1b66:	01 96       	adiw	r24, 0x01	; 1
    1b68:	80 93 6e 01 	sts	0x016E, r24
    1b6c:	90 93 6f 01 	sts	0x016F, r25
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	80 91 70 01 	lds	r24, 0x0170
    1b76:	89 1f       	adc	r24, r25
    1b78:	80 93 70 01 	sts	0x0170, r24
    1b7c:	80 91 71 01 	lds	r24, 0x0171
    1b80:	89 1f       	adc	r24, r25
    1b82:	80 93 71 01 	sts	0x0171, r24

00001b86 <end>:
    1b86:	2f be       	out	0x3f, r2	; 63
    1b88:	9f 91       	pop	r25
    1b8a:	8f 91       	pop	r24
    1b8c:	2f 90       	pop	r2
    1b8e:	18 95       	reti

00001b90 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	ec 01       	movw	r28, r24
    1b96:	05 c0       	rjmp	.+10     	; 0x1ba2 <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
    1b98:	88 ee       	ldi	r24, 0xE8	; 232
    1b9a:	93 e0       	ldi	r25, 0x03	; 3
    1b9c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <_ZN13OrangutanTime17delayMicrosecondsEj>
    1ba0:	21 97       	sbiw	r28, 0x01	; 1
    1ba2:	20 97       	sbiw	r28, 0x00	; 0
    1ba4:	c9 f7       	brne	.-14     	; 0x1b98 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	08 95       	ret

00001bac <delay_ms>:
    1bac:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <_ZN13OrangutanTime17delayMillisecondsEj>
    1bb0:	08 95       	ret

00001bb2 <_ZN13OrangutanTime5init2Ev>:
    1bb2:	e0 e7       	ldi	r30, 0x70	; 112
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	8e 7f       	andi	r24, 0xFE	; 254
    1bba:	80 83       	st	Z, r24
    1bbc:	a0 eb       	ldi	r26, 0xB0	; 176
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	8c 91       	ld	r24, X
    1bc2:	83 60       	ori	r24, 0x03	; 3
    1bc4:	8c 93       	st	X, r24
    1bc6:	a1 eb       	ldi	r26, 0xB1	; 177
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	8c 91       	ld	r24, X
    1bcc:	80 7f       	andi	r24, 0xF0	; 240
    1bce:	8c 93       	st	X, r24
    1bd0:	8c 91       	ld	r24, X
    1bd2:	82 60       	ori	r24, 0x02	; 2
    1bd4:	8c 93       	st	X, r24
    1bd6:	b8 9a       	sbi	0x17, 0	; 23
    1bd8:	80 81       	ld	r24, Z
    1bda:	81 60       	ori	r24, 0x01	; 1
    1bdc:	80 83       	st	Z, r24
    1bde:	78 94       	sei
    1be0:	08 95       	ret

00001be2 <_ZN13OrangutanTime4initEv>:
    1be2:	80 91 74 01 	lds	r24, 0x0174
    1be6:	88 23       	and	r24, r24
    1be8:	29 f4       	brne	.+10     	; 0x1bf4 <_ZN13OrangutanTime4initEv+0x12>
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	80 93 74 01 	sts	0x0174, r24
    1bf0:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_ZN13OrangutanTime5init2Ev>
    1bf4:	08 95       	ret

00001bf6 <_ZN13OrangutanTime5resetEv>:
    1bf6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_ZN13OrangutanTime4initEv>
    1bfa:	e0 e7       	ldi	r30, 0x70	; 112
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	8e 7f       	andi	r24, 0xFE	; 254
    1c02:	80 83       	st	Z, r24
    1c04:	10 92 6e 01 	sts	0x016E, r1
    1c08:	10 92 6f 01 	sts	0x016F, r1
    1c0c:	10 92 70 01 	sts	0x0170, r1
    1c10:	10 92 71 01 	sts	0x0171, r1
    1c14:	10 92 73 01 	sts	0x0173, r1
    1c18:	10 92 72 01 	sts	0x0172, r1
    1c1c:	80 81       	ld	r24, Z
    1c1e:	81 60       	ori	r24, 0x01	; 1
    1c20:	80 83       	st	Z, r24
    1c22:	08 95       	ret

00001c24 <calibrate_line_sensors>:
    1c24:	68 2f       	mov	r22, r24
    1c26:	85 e7       	ldi	r24, 0x75	; 117
    1c28:	91 e0       	ldi	r25, 0x01	; 1
    1c2a:	0e 94 42 13 	call	0x2684	; 0x2684 <_ZN16PololuQTRSensors9calibrateEh>
    1c2e:	08 95       	ret

00001c30 <read_line>:
    1c30:	9c 01       	movw	r18, r24
    1c32:	46 2f       	mov	r20, r22
    1c34:	85 e7       	ldi	r24, 0x75	; 117
    1c36:	91 e0       	ldi	r25, 0x01	; 1
    1c38:	b9 01       	movw	r22, r18
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	0e 94 a0 11 	call	0x2340	; 0x2340 <_ZN16PololuQTRSensors8readLineEPjhh>
    1c40:	08 95       	ret

00001c42 <_ZN9Pololu3pi4initEjh>:
    1c42:	0f 93       	push	r16
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <_ZN9Pololu3pi4initEjh+0x8>
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <_ZN9Pololu3pi4initEjh+0xa>
    1c4c:	0f 92       	push	r0
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	9c 01       	movw	r18, r24
    1c54:	96 2f       	mov	r25, r22
    1c56:	de 01       	movw	r26, r28
    1c58:	11 96       	adiw	r26, 0x01	; 1
    1c5a:	e6 e2       	ldi	r30, 0x26	; 38
    1c5c:	f1 e0       	ldi	r31, 0x01	; 1
    1c5e:	85 e0       	ldi	r24, 0x05	; 5
    1c60:	01 90       	ld	r0, Z+
    1c62:	0d 92       	st	X+, r0
    1c64:	81 50       	subi	r24, 0x01	; 1
    1c66:	e1 f7       	brne	.-8      	; 0x1c60 <_ZN9Pololu3pi4initEjh+0x1e>
    1c68:	be 01       	movw	r22, r28
    1c6a:	6f 5f       	subi	r22, 0xFF	; 255
    1c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6e:	99 23       	and	r25, r25
    1c70:	29 f0       	breq	.+10     	; 0x1c7c <_ZN9Pololu3pi4initEjh+0x3a>
    1c72:	85 e7       	ldi	r24, 0x75	; 117
    1c74:	91 e0       	ldi	r25, 0x01	; 1
    1c76:	45 e0       	ldi	r20, 0x05	; 5
    1c78:	0f ef       	ldi	r16, 0xFF	; 255
    1c7a:	04 c0       	rjmp	.+8      	; 0x1c84 <_ZN9Pololu3pi4initEjh+0x42>
    1c7c:	85 e7       	ldi	r24, 0x75	; 117
    1c7e:	91 e0       	ldi	r25, 0x01	; 1
    1c80:	45 e0       	ldi	r20, 0x05	; 5
    1c82:	03 e1       	ldi	r16, 0x13	; 19
    1c84:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1c88:	85 e7       	ldi	r24, 0x75	; 117
    1c8a:	91 e0       	ldi	r25, 0x01	; 1
    1c8c:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <_ZN16PololuQTRSensors11emittersOffEv>
    1c90:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <_ZN13OrangutanTime5resetEv>
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	0f 91       	pop	r16
    1ca4:	08 95       	ret

00001ca6 <pololu_3pi_init>:
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <_ZN9Pololu3pi4initEjh>
    1cac:	08 95       	ret

00001cae <_GLOBAL__I_pololu_3pi_init>:
    1cae:	08 95       	ret

00001cb0 <_GLOBAL__D_pololu_3pi_init>:
    1cb0:	85 e7       	ldi	r24, 0x75	; 117
    1cb2:	91 e0       	ldi	r25, 0x01	; 1
    1cb4:	0e 94 66 13 	call	0x26cc	; 0x26cc <_ZN16PololuQTRSensorsD1Ev>
    1cb8:	08 95       	ret

00001cba <delayMicroseconds>:
    1cba:	6f 93       	push	r22
    1cbc:	64 e0       	ldi	r22, 0x04	; 4
    1cbe:	6a 95       	dec	r22
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <delayMicroseconds+0x4>
    1cc2:	6f 91       	pop	r22
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	c9 f7       	brne	.-14     	; 0x1cba <delayMicroseconds>
    1cc8:	08 95       	ret

00001cca <_ZN16PololuQTRSensors4initEhhh>:
    1cca:	a7 e0       	ldi	r26, 0x07	; 7
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	eb e6       	ldi	r30, 0x6B	; 107
    1cd0:	fe e0       	ldi	r31, 0x0E	; 14
    1cd2:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__prologue_saves__+0x1c>
    1cd6:	8c 01       	movw	r16, r24
    1cd8:	fc 01       	movw	r30, r24
    1cda:	11 82       	std	Z+1, r1	; 0x01
    1cdc:	10 82       	st	Z, r1
    1cde:	13 82       	std	Z+3, r1	; 0x03
    1ce0:	12 82       	std	Z+2, r1	; 0x02
    1ce2:	15 82       	std	Z+5, r1	; 0x05
    1ce4:	14 82       	std	Z+4, r1	; 0x04
    1ce6:	17 82       	std	Z+7, r1	; 0x07
    1ce8:	16 82       	std	Z+6, r1	; 0x06
    1cea:	61 31       	cpi	r22, 0x11	; 17
    1cec:	18 f0       	brcs	.+6      	; 0x1cf4 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1cee:	80 e1       	ldi	r24, 0x10	; 16
    1cf0:	80 87       	std	Z+8, r24	; 0x08
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	60 87       	std	Z+8, r22	; 0x08
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	20 8b       	std	Z+16, r18	; 0x10
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	64 2f       	mov	r22, r20
    1d02:	0e 94 39 0c 	call	0x1872	; 0x1872 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1d06:	8f 81       	ldd	r24, Y+7	; 0x07
    1d08:	f8 01       	movw	r30, r16
    1d0a:	81 87       	std	Z+9, r24	; 0x09
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d10:	93 87       	std	Z+11, r25	; 0x0b
    1d12:	82 87       	std	Z+10, r24	; 0x0a
    1d14:	8d 81       	ldd	r24, Y+5	; 0x05
    1d16:	9e 81       	ldd	r25, Y+6	; 0x06
    1d18:	95 87       	std	Z+13, r25	; 0x0d
    1d1a:	84 87       	std	Z+12, r24	; 0x0c
    1d1c:	27 96       	adiw	r28, 0x07	; 7
    1d1e:	e4 e0       	ldi	r30, 0x04	; 4
    1d20:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__epilogue_restores__+0x1c>

00001d24 <_ZN16PololuQTRSensors11emittersOffEv>:
    1d24:	fc 01       	movw	r30, r24
    1d26:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d28:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d2a:	10 97       	sbiw	r26, 0x00	; 0
    1d2c:	79 f0       	breq	.+30     	; 0x1d4c <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    1d2e:	8c 91       	ld	r24, X
    1d30:	91 85       	ldd	r25, Z+9	; 0x09
    1d32:	89 2b       	or	r24, r25
    1d34:	8c 93       	st	X, r24
    1d36:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d38:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d3a:	9c 91       	ld	r25, X
    1d3c:	81 85       	ldd	r24, Z+9	; 0x09
    1d3e:	80 95       	com	r24
    1d40:	89 23       	and	r24, r25
    1d42:	8c 93       	st	X, r24
    1d44:	88 ec       	ldi	r24, 0xC8	; 200
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <delayMicroseconds>
    1d4c:	08 95       	ret

00001d4e <_ZN16PololuQTRSensors10emittersOnEv>:
    1d4e:	fc 01       	movw	r30, r24
    1d50:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d52:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d54:	10 97       	sbiw	r26, 0x00	; 0
    1d56:	71 f0       	breq	.+28     	; 0x1d74 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    1d58:	8c 91       	ld	r24, X
    1d5a:	91 85       	ldd	r25, Z+9	; 0x09
    1d5c:	89 2b       	or	r24, r25
    1d5e:	8c 93       	st	X, r24
    1d60:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d62:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d64:	8c 91       	ld	r24, X
    1d66:	91 85       	ldd	r25, Z+9	; 0x09
    1d68:	89 2b       	or	r24, r25
    1d6a:	8c 93       	st	X, r24
    1d6c:	88 ec       	ldi	r24, 0xC8	; 200
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <delayMicroseconds>
    1d74:	08 95       	ret

00001d76 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    1d76:	a7 e0       	ldi	r26, 0x07	; 7
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e1 ec       	ldi	r30, 0xC1	; 193
    1d7c:	fe e0       	ldi	r31, 0x0E	; 14
    1d7e:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__prologue_saves__>
    1d82:	7c 01       	movw	r14, r24
    1d84:	1b 01       	movw	r2, r22
    1d86:	64 2f       	mov	r22, r20
    1d88:	39 01       	movw	r6, r18
    1d8a:	40 2f       	mov	r20, r16
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <_ZN16PololuQTRSensors4initEhhh>
    1d92:	97 01       	movw	r18, r14
    1d94:	2f 5b       	subi	r18, 0xBF	; 191
    1d96:	3f 4f       	sbci	r19, 0xFF	; 255
    1d98:	f9 01       	movw	r30, r18
    1d9a:	10 82       	st	Z, r1
    1d9c:	d7 01       	movw	r26, r14
    1d9e:	ae 5b       	subi	r26, 0xBE	; 190
    1da0:	bf 4f       	sbci	r27, 0xFF	; 255
    1da2:	1c 92       	st	X, r1
    1da4:	c7 01       	movw	r24, r14
    1da6:	8d 5b       	subi	r24, 0xBD	; 189
    1da8:	9f 4f       	sbci	r25, 0xFF	; 255
    1daa:	fc 01       	movw	r30, r24
    1dac:	10 82       	st	Z, r1
    1dae:	f7 01       	movw	r30, r14
    1db0:	77 86       	std	Z+15, r7	; 0x0f
    1db2:	66 86       	std	Z+14, r6	; 0x0e
    1db4:	66 24       	eor	r6, r6
    1db6:	2e 01       	movw	r4, r28
    1db8:	08 94       	sec
    1dba:	41 1c       	adc	r4, r1
    1dbc:	51 1c       	adc	r5, r1
    1dbe:	6c 01       	movw	r12, r24
    1dc0:	5d 01       	movw	r10, r26
    1dc2:	49 01       	movw	r8, r18
    1dc4:	29 c0       	rjmp	.+82     	; 0x1e18 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1dc6:	06 2d       	mov	r16, r6
    1dc8:	10 e0       	ldi	r17, 0x00	; 0
    1dca:	f1 01       	movw	r30, r2
    1dcc:	e0 0f       	add	r30, r16
    1dce:	f1 1f       	adc	r31, r17
    1dd0:	c2 01       	movw	r24, r4
    1dd2:	60 81       	ld	r22, Z
    1dd4:	0e 94 39 0c 	call	0x1872	; 0x1872 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1dd8:	2f 81       	ldd	r18, Y+7	; 0x07
    1dda:	f7 01       	movw	r30, r14
    1ddc:	e0 0f       	add	r30, r16
    1dde:	f1 1f       	adc	r31, r17
    1de0:	21 8b       	std	Z+17, r18	; 0x11
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	f8 01       	movw	r30, r16
    1de8:	ee 0f       	add	r30, r30
    1dea:	ff 1f       	adc	r31, r31
    1dec:	ee 0d       	add	r30, r14
    1dee:	ff 1d       	adc	r31, r15
    1df0:	92 a3       	std	Z+34, r25	; 0x22
    1df2:	81 a3       	std	Z+33, r24	; 0x21
    1df4:	83 32       	cpi	r24, 0x23	; 35
    1df6:	91 05       	cpc	r25, r1
    1df8:	11 f4       	brne	.+4      	; 0x1dfe <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1dfa:	f4 01       	movw	r30, r8
    1dfc:	09 c0       	rjmp	.+18     	; 0x1e10 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1dfe:	86 32       	cpi	r24, 0x26	; 38
    1e00:	91 05       	cpc	r25, r1
    1e02:	11 f4       	brne	.+4      	; 0x1e08 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1e04:	f5 01       	movw	r30, r10
    1e06:	04 c0       	rjmp	.+8      	; 0x1e10 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1e08:	89 32       	cpi	r24, 0x29	; 41
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	21 f4       	brne	.+8      	; 0x1e16 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa0>
    1e0e:	f6 01       	movw	r30, r12
    1e10:	80 81       	ld	r24, Z
    1e12:	82 2b       	or	r24, r18
    1e14:	80 83       	st	Z, r24
    1e16:	63 94       	inc	r6
    1e18:	f7 01       	movw	r30, r14
    1e1a:	80 85       	ldd	r24, Z+8	; 0x08
    1e1c:	68 16       	cp	r6, r24
    1e1e:	98 f2       	brcs	.-90     	; 0x1dc6 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x50>
    1e20:	27 96       	adiw	r28, 0x07	; 7
    1e22:	e2 e1       	ldi	r30, 0x12	; 18
    1e24:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__epilogue_restores__>

00001e28 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1e28:	a0 e0       	ldi	r26, 0x00	; 0
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	ea e1       	ldi	r30, 0x1A	; 26
    1e2e:	ff e0       	ldi	r31, 0x0F	; 15
    1e30:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__prologue_saves__+0xa>
    1e34:	ec 01       	movw	r28, r24
    1e36:	5b 01       	movw	r10, r22
    1e38:	fc 01       	movw	r30, r24
    1e3a:	ef 5b       	subi	r30, 0xBF	; 191
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	90 80       	ld	r9, Z
    1e40:	fc 01       	movw	r30, r24
    1e42:	ee 5b       	subi	r30, 0xBE	; 190
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	80 80       	ld	r8, Z
    1e48:	fc 01       	movw	r30, r24
    1e4a:	ed 5b       	subi	r30, 0xBD	; 189
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	70 80       	ld	r7, Z
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	09 c0       	rjmp	.+18     	; 0x1e66 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x3e>
    1e54:	e8 2f       	mov	r30, r24
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	ee 0f       	add	r30, r30
    1e5a:	ff 1f       	adc	r31, r31
    1e5c:	ea 0d       	add	r30, r10
    1e5e:	fb 1d       	adc	r31, r11
    1e60:	11 82       	std	Z+1, r1	; 0x01
    1e62:	10 82       	st	Z, r1
    1e64:	8f 5f       	subi	r24, 0xFF	; 255
    1e66:	98 85       	ldd	r25, Y+8	; 0x08
    1e68:	89 17       	cp	r24, r25
    1e6a:	a0 f3       	brcs	.-24     	; 0x1e54 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x2c>
    1e6c:	84 b1       	in	r24, 0x04	; 4
    1e6e:	21 e4       	ldi	r18, 0x41	; 65
    1e70:	e2 2e       	mov	r14, r18
    1e72:	f1 2c       	mov	r15, r1
    1e74:	ec 0e       	add	r14, r28
    1e76:	fd 1e       	adc	r15, r29
    1e78:	d7 01       	movw	r26, r14
    1e7a:	9c 91       	ld	r25, X
    1e7c:	89 2b       	or	r24, r25
    1e7e:	84 b9       	out	0x04, r24	; 4
    1e80:	87 b1       	in	r24, 0x07	; 7
    1e82:	8e 01       	movw	r16, r28
    1e84:	0e 5b       	subi	r16, 0xBE	; 190
    1e86:	1f 4f       	sbci	r17, 0xFF	; 255
    1e88:	f8 01       	movw	r30, r16
    1e8a:	90 81       	ld	r25, Z
    1e8c:	89 2b       	or	r24, r25
    1e8e:	87 b9       	out	0x07, r24	; 7
    1e90:	8a b1       	in	r24, 0x0a	; 10
    1e92:	93 e4       	ldi	r25, 0x43	; 67
    1e94:	c9 2e       	mov	r12, r25
    1e96:	d1 2c       	mov	r13, r1
    1e98:	cc 0e       	add	r12, r28
    1e9a:	dd 1e       	adc	r13, r29
    1e9c:	d6 01       	movw	r26, r12
    1e9e:	9c 91       	ld	r25, X
    1ea0:	89 2b       	or	r24, r25
    1ea2:	8a b9       	out	0x0a, r24	; 10
    1ea4:	85 b1       	in	r24, 0x05	; 5
    1ea6:	f7 01       	movw	r30, r14
    1ea8:	90 81       	ld	r25, Z
    1eaa:	89 2b       	or	r24, r25
    1eac:	85 b9       	out	0x05, r24	; 5
    1eae:	88 b1       	in	r24, 0x08	; 8
    1eb0:	d8 01       	movw	r26, r16
    1eb2:	9c 91       	ld	r25, X
    1eb4:	89 2b       	or	r24, r25
    1eb6:	88 b9       	out	0x08, r24	; 8
    1eb8:	8b b1       	in	r24, 0x0b	; 11
    1eba:	f6 01       	movw	r30, r12
    1ebc:	90 81       	ld	r25, Z
    1ebe:	89 2b       	or	r24, r25
    1ec0:	8b b9       	out	0x0b, r24	; 11
    1ec2:	8a e0       	ldi	r24, 0x0A	; 10
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <delayMicroseconds>
    1eca:	94 b1       	in	r25, 0x04	; 4
    1ecc:	d7 01       	movw	r26, r14
    1ece:	8c 91       	ld	r24, X
    1ed0:	80 95       	com	r24
    1ed2:	89 23       	and	r24, r25
    1ed4:	84 b9       	out	0x04, r24	; 4
    1ed6:	97 b1       	in	r25, 0x07	; 7
    1ed8:	f8 01       	movw	r30, r16
    1eda:	80 81       	ld	r24, Z
    1edc:	80 95       	com	r24
    1ede:	89 23       	and	r24, r25
    1ee0:	87 b9       	out	0x07, r24	; 7
    1ee2:	9a b1       	in	r25, 0x0a	; 10
    1ee4:	d6 01       	movw	r26, r12
    1ee6:	8c 91       	ld	r24, X
    1ee8:	80 95       	com	r24
    1eea:	89 23       	and	r24, r25
    1eec:	8a b9       	out	0x0a, r24	; 10
    1eee:	95 b1       	in	r25, 0x05	; 5
    1ef0:	f7 01       	movw	r30, r14
    1ef2:	80 81       	ld	r24, Z
    1ef4:	80 95       	com	r24
    1ef6:	89 23       	and	r24, r25
    1ef8:	85 b9       	out	0x05, r24	; 5
    1efa:	98 b1       	in	r25, 0x08	; 8
    1efc:	d8 01       	movw	r26, r16
    1efe:	8c 91       	ld	r24, X
    1f00:	80 95       	com	r24
    1f02:	89 23       	and	r24, r25
    1f04:	88 b9       	out	0x08, r24	; 8
    1f06:	9b b1       	in	r25, 0x0b	; 11
    1f08:	f6 01       	movw	r30, r12
    1f0a:	80 81       	ld	r24, Z
    1f0c:	80 95       	com	r24
    1f0e:	89 23       	and	r24, r25
    1f10:	8b b9       	out	0x0b, r24	; 11
    1f12:	c0 90 b0 00 	lds	r12, 0x00B0
    1f16:	e0 90 b1 00 	lds	r14, 0x00B1
    1f1a:	80 91 b0 00 	lds	r24, 0x00B0
    1f1e:	83 60       	ori	r24, 0x03	; 3
    1f20:	80 93 b0 00 	sts	0x00B0, r24
    1f24:	82 e0       	ldi	r24, 0x02	; 2
    1f26:	80 93 b1 00 	sts	0x00B1, r24
    1f2a:	00 91 b2 00 	lds	r16, 0x00B2
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	39 c0       	rjmp	.+114    	; 0x1fa6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17e>
    1f34:	20 91 b2 00 	lds	r18, 0x00B2
    1f38:	20 1b       	sub	r18, r16
    1f3a:	82 0f       	add	r24, r18
    1f3c:	91 1d       	adc	r25, r1
    1f3e:	02 0f       	add	r16, r18
    1f40:	f3 b0       	in	r15, 0x03	; 3
    1f42:	f9 14       	cp	r15, r9
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x120>
    1f46:	4d c0       	rjmp	.+154    	; 0x1fe2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f48:	96 b0       	in	r9, 0x06	; 6
    1f4a:	98 14       	cp	r9, r8
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x128>
    1f4e:	49 c0       	rjmp	.+146    	; 0x1fe2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f50:	29 b1       	in	r18, 0x09	; 9
    1f52:	27 15       	cp	r18, r7
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x130>
    1f56:	45 c0       	rjmp	.+138    	; 0x1fe2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f58:	24 c0       	rjmp	.+72     	; 0x1fa2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17a>
    1f5a:	21 2f       	mov	r18, r17
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	a9 01       	movw	r20, r18
    1f60:	44 0f       	add	r20, r20
    1f62:	55 1f       	adc	r21, r21
    1f64:	f5 01       	movw	r30, r10
    1f66:	e4 0f       	add	r30, r20
    1f68:	f5 1f       	adc	r31, r21
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	61 15       	cp	r22, r1
    1f70:	71 05       	cpc	r23, r1
    1f72:	99 f4       	brne	.+38     	; 0x1f9a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    1f74:	4c 0f       	add	r20, r28
    1f76:	5d 1f       	adc	r21, r29
    1f78:	da 01       	movw	r26, r20
    1f7a:	91 96       	adiw	r26, 0x21	; 33
    1f7c:	4d 91       	ld	r20, X+
    1f7e:	5c 91       	ld	r21, X
    1f80:	92 97       	sbiw	r26, 0x22	; 34
    1f82:	da 01       	movw	r26, r20
    1f84:	4c 91       	ld	r20, X
    1f86:	2c 0f       	add	r18, r28
    1f88:	3d 1f       	adc	r19, r29
    1f8a:	d9 01       	movw	r26, r18
    1f8c:	51 96       	adiw	r26, 0x11	; 17
    1f8e:	2c 91       	ld	r18, X
    1f90:	51 97       	sbiw	r26, 0x11	; 17
    1f92:	42 23       	and	r20, r18
    1f94:	11 f4       	brne	.+4      	; 0x1f9a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	80 83       	st	Z, r24
    1f9a:	1f 5f       	subi	r17, 0xFF	; 255
    1f9c:	28 85       	ldd	r18, Y+8	; 0x08
    1f9e:	12 17       	cp	r17, r18
    1fa0:	e0 f2       	brcs	.-72     	; 0x1f5a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x132>
    1fa2:	89 2c       	mov	r8, r9
    1fa4:	9f 2c       	mov	r9, r15
    1fa6:	2e 85       	ldd	r18, Y+14	; 0x0e
    1fa8:	3f 85       	ldd	r19, Y+15	; 0x0f
    1faa:	82 17       	cp	r24, r18
    1fac:	93 07       	cpc	r25, r19
    1fae:	10 f2       	brcs	.-124    	; 0x1f34 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x10c>
    1fb0:	c0 92 b0 00 	sts	0x00B0, r12
    1fb4:	e0 92 b1 00 	sts	0x00B1, r14
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	0f c0       	rjmp	.+30     	; 0x1fda <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b2>
    1fbc:	e2 2f       	mov	r30, r18
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	ee 0f       	add	r30, r30
    1fc2:	ff 1f       	adc	r31, r31
    1fc4:	ea 0d       	add	r30, r10
    1fc6:	fb 1d       	adc	r31, r11
    1fc8:	80 81       	ld	r24, Z
    1fca:	91 81       	ldd	r25, Z+1	; 0x01
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	21 f4       	brne	.+8      	; 0x1fd8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b0>
    1fd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24
    1fd8:	2f 5f       	subi	r18, 0xFF	; 255
    1fda:	88 85       	ldd	r24, Y+8	; 0x08
    1fdc:	28 17       	cp	r18, r24
    1fde:	70 f3       	brcs	.-36     	; 0x1fbc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x194>
    1fe0:	05 c0       	rjmp	.+10     	; 0x1fec <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1c4>
    1fe2:	f3 b0       	in	r15, 0x03	; 3
    1fe4:	96 b0       	in	r9, 0x06	; 6
    1fe6:	79 b0       	in	r7, 0x09	; 9
    1fe8:	10 e0       	ldi	r17, 0x00	; 0
    1fea:	d8 cf       	rjmp	.-80     	; 0x1f9c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	ed e0       	ldi	r30, 0x0D	; 13
    1ff2:	0c 94 35 14 	jmp	0x286a	; 0x286a <__epilogue_restores__+0xa>

00001ff6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1ff6:	ef 92       	push	r14
    1ff8:	ff 92       	push	r15
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	fc 01       	movw	r30, r24
    2004:	9b 01       	movw	r18, r22
    2006:	00 91 7c 00 	lds	r16, 0x007C
    200a:	10 91 7a 00 	lds	r17, 0x007A
    200e:	e7 b0       	in	r14, 0x07	; 7
    2010:	f8 b0       	in	r15, 0x08	; 8
    2012:	80 91 7a 00 	lds	r24, 0x007A
    2016:	86 fd       	sbrc	r24, 6
    2018:	fc cf       	rjmp	.-8      	; 0x2012 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	0a c0       	rjmp	.+20     	; 0x2032 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3c>
    201e:	a8 2f       	mov	r26, r24
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	aa 0f       	add	r26, r26
    2024:	bb 1f       	adc	r27, r27
    2026:	a2 0f       	add	r26, r18
    2028:	b3 1f       	adc	r27, r19
    202a:	11 96       	adiw	r26, 0x01	; 1
    202c:	1c 92       	st	X, r1
    202e:	1e 92       	st	-X, r1
    2030:	8f 5f       	subi	r24, 0xFF	; 255
    2032:	90 85       	ldd	r25, Z+8	; 0x08
    2034:	89 17       	cp	r24, r25
    2036:	98 f3       	brcs	.-26     	; 0x201e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x28>
    2038:	97 b1       	in	r25, 0x07	; 7
    203a:	82 a1       	ldd	r24, Z+34	; 0x22
    203c:	80 95       	com	r24
    203e:	89 23       	and	r24, r25
    2040:	87 b9       	out	0x07, r24	; 7
    2042:	98 b1       	in	r25, 0x08	; 8
    2044:	82 a1       	ldd	r24, Z+34	; 0x22
    2046:	80 95       	com	r24
    2048:	89 23       	and	r24, r25
    204a:	88 b9       	out	0x08, r24	; 8
    204c:	87 e8       	ldi	r24, 0x87	; 135
    204e:	80 93 7a 00 	sts	0x007A, r24
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	29 c0       	rjmp	.+82     	; 0x20a8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2056:	df 01       	movw	r26, r30
    2058:	a6 0f       	add	r26, r22
    205a:	b1 1d       	adc	r27, r1
    205c:	51 96       	adiw	r26, 0x11	; 17
    205e:	8c 91       	ld	r24, X
    2060:	51 97       	sbiw	r26, 0x11	; 17
    2062:	80 64       	ori	r24, 0x40	; 64
    2064:	80 93 7c 00 	sts	0x007C, r24
    2068:	80 91 7a 00 	lds	r24, 0x007A
    206c:	80 64       	ori	r24, 0x40	; 64
    206e:	80 93 7a 00 	sts	0x007A, r24
    2072:	80 91 7a 00 	lds	r24, 0x007A
    2076:	86 fd       	sbrc	r24, 6
    2078:	fc cf       	rjmp	.-8      	; 0x2072 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x7c>
    207a:	a6 2f       	mov	r26, r22
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	aa 0f       	add	r26, r26
    2080:	bb 1f       	adc	r27, r27
    2082:	a2 0f       	add	r26, r18
    2084:	b3 1f       	adc	r27, r19
    2086:	40 91 78 00 	lds	r20, 0x0078
    208a:	50 91 79 00 	lds	r21, 0x0079
    208e:	8d 91       	ld	r24, X+
    2090:	9c 91       	ld	r25, X
    2092:	11 97       	sbiw	r26, 0x01	; 1
    2094:	84 0f       	add	r24, r20
    2096:	95 1f       	adc	r25, r21
    2098:	11 96       	adiw	r26, 0x01	; 1
    209a:	9c 93       	st	X, r25
    209c:	8e 93       	st	-X, r24
    209e:	6f 5f       	subi	r22, 0xFF	; 255
    20a0:	80 85       	ldd	r24, Z+8	; 0x08
    20a2:	68 17       	cp	r22, r24
    20a4:	c0 f2       	brcs	.-80     	; 0x2056 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x60>
    20a6:	7f 5f       	subi	r23, 0xFF	; 255
    20a8:	81 a1       	ldd	r24, Z+33	; 0x21
    20aa:	78 17       	cp	r23, r24
    20ac:	10 f4       	brcc	.+4      	; 0x20b2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xbc>
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	f7 cf       	rjmp	.-18     	; 0x20a0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xaa>
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	14 c0       	rjmp	.+40     	; 0x20de <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe8>
    20b6:	c4 2f       	mov	r28, r20
    20b8:	d0 e0       	ldi	r29, 0x00	; 0
    20ba:	cc 0f       	add	r28, r28
    20bc:	dd 1f       	adc	r29, r29
    20be:	c2 0f       	add	r28, r18
    20c0:	d3 1f       	adc	r29, r19
    20c2:	61 a1       	ldd	r22, Z+33	; 0x21
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	cb 01       	movw	r24, r22
    20c8:	95 95       	asr	r25
    20ca:	87 95       	ror	r24
    20cc:	a8 81       	ld	r26, Y
    20ce:	b9 81       	ldd	r27, Y+1	; 0x01
    20d0:	8a 0f       	add	r24, r26
    20d2:	9b 1f       	adc	r25, r27
    20d4:	0e 94 a0 13 	call	0x2740	; 0x2740 <__udivmodhi4>
    20d8:	79 83       	std	Y+1, r23	; 0x01
    20da:	68 83       	st	Y, r22
    20dc:	4f 5f       	subi	r20, 0xFF	; 255
    20de:	80 85       	ldd	r24, Z+8	; 0x08
    20e0:	48 17       	cp	r20, r24
    20e2:	48 f3       	brcs	.-46     	; 0x20b6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xc0>
    20e4:	00 93 7c 00 	sts	0x007C, r16
    20e8:	10 93 7a 00 	sts	0x007A, r17
    20ec:	f8 b8       	out	0x08, r15	; 8
    20ee:	e7 b8       	out	0x07, r14	; 7
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	e6 e0       	ldi	r30, 0x06	; 6
    20f6:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__+0x18>

000020fa <_ZN16PololuQTRSensors4readEPjh>:
    20fa:	a0 e2       	ldi	r26, 0x20	; 32
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e3 e8       	ldi	r30, 0x83	; 131
    2100:	f0 e1       	ldi	r31, 0x10	; 16
    2102:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__prologue_saves__+0x16>
    2106:	8c 01       	movw	r16, r24
    2108:	7b 01       	movw	r14, r22
    210a:	d4 2e       	mov	r13, r20
    210c:	84 2f       	mov	r24, r20
    210e:	81 50       	subi	r24, 0x01	; 1
    2110:	82 30       	cpi	r24, 0x02	; 2
    2112:	18 f4       	brcc	.+6      	; 0x211a <_ZN16PololuQTRSensors4readEPjh+0x20>
    2114:	c8 01       	movw	r24, r16
    2116:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <_ZN16PololuQTRSensors10emittersOnEv>
    211a:	d8 01       	movw	r26, r16
    211c:	50 96       	adiw	r26, 0x10	; 16
    211e:	8c 91       	ld	r24, X
    2120:	50 97       	sbiw	r26, 0x10	; 16
    2122:	88 23       	and	r24, r24
    2124:	89 f4       	brne	.+34     	; 0x2148 <_ZN16PololuQTRSensors4readEPjh+0x4e>
    2126:	c8 01       	movw	r24, r16
    2128:	b7 01       	movw	r22, r14
    212a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    212e:	c8 01       	movw	r24, r16
    2130:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <_ZN16PololuQTRSensors11emittersOffEv>
    2134:	bd 2d       	mov	r27, r13
    2136:	b2 30       	cpi	r27, 0x02	; 2
    2138:	d9 f5       	brne	.+118    	; 0x21b0 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    213a:	c8 01       	movw	r24, r16
    213c:	be 01       	movw	r22, r28
    213e:	6f 5f       	subi	r22, 0xFF	; 255
    2140:	7f 4f       	sbci	r23, 0xFF	; 255
    2142:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2146:	10 c0       	rjmp	.+32     	; 0x2168 <_ZN16PololuQTRSensors4readEPjh+0x6e>
    2148:	c8 01       	movw	r24, r16
    214a:	b7 01       	movw	r22, r14
    214c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2150:	c8 01       	movw	r24, r16
    2152:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <_ZN16PololuQTRSensors11emittersOffEv>
    2156:	ed 2d       	mov	r30, r13
    2158:	e2 30       	cpi	r30, 0x02	; 2
    215a:	51 f5       	brne	.+84     	; 0x21b0 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    215c:	c8 01       	movw	r24, r16
    215e:	be 01       	movw	r22, r28
    2160:	6f 5f       	subi	r22, 0xFF	; 255
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	ae 01       	movw	r20, r28
    216c:	4f 5f       	subi	r20, 0xFF	; 255
    216e:	5f 4f       	sbci	r21, 0xFF	; 255
    2170:	1b c0       	rjmp	.+54     	; 0x21a8 <_ZN16PololuQTRSensors4readEPjh+0xae>
    2172:	86 2f       	mov	r24, r22
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	f7 01       	movw	r30, r14
    217c:	e8 0f       	add	r30, r24
    217e:	f9 1f       	adc	r31, r25
    2180:	84 0f       	add	r24, r20
    2182:	95 1f       	adc	r25, r21
    2184:	d8 01       	movw	r26, r16
    2186:	1e 96       	adiw	r26, 0x0e	; 14
    2188:	2d 91       	ld	r18, X+
    218a:	3c 91       	ld	r19, X
    218c:	1f 97       	sbiw	r26, 0x0f	; 15
    218e:	dc 01       	movw	r26, r24
    2190:	8d 91       	ld	r24, X+
    2192:	9c 91       	ld	r25, X
    2194:	11 97       	sbiw	r26, 0x01	; 1
    2196:	28 1b       	sub	r18, r24
    2198:	39 0b       	sbc	r19, r25
    219a:	80 81       	ld	r24, Z
    219c:	91 81       	ldd	r25, Z+1	; 0x01
    219e:	82 0f       	add	r24, r18
    21a0:	93 1f       	adc	r25, r19
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	80 83       	st	Z, r24
    21a6:	6f 5f       	subi	r22, 0xFF	; 255
    21a8:	f8 01       	movw	r30, r16
    21aa:	80 85       	ldd	r24, Z+8	; 0x08
    21ac:	68 17       	cp	r22, r24
    21ae:	08 f3       	brcs	.-62     	; 0x2172 <_ZN16PololuQTRSensors4readEPjh+0x78>
    21b0:	a0 96       	adiw	r28, 0x20	; 32
    21b2:	e7 e0       	ldi	r30, 0x07	; 7
    21b4:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__epilogue_restores__+0x16>

000021b8 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    21b8:	8f 92       	push	r8
    21ba:	9f 92       	push	r9
    21bc:	af 92       	push	r10
    21be:	bf 92       	push	r11
    21c0:	cf 92       	push	r12
    21c2:	df 92       	push	r13
    21c4:	ff 92       	push	r15
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	ec 01       	movw	r28, r24
    21d0:	c6 2e       	mov	r12, r22
    21d2:	07 2f       	mov	r16, r23
    21d4:	f4 2e       	mov	r15, r20
    21d6:	42 30       	cpi	r20, 0x02	; 2
    21d8:	11 f0       	breq	.+4      	; 0x21de <_ZN16PololuQTRSensors14readCalibratedEPjh+0x26>
    21da:	ff 20       	and	r15, r15
    21dc:	51 f4       	brne	.+20     	; 0x21f2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    21de:	8c 81       	ldd	r24, Y+4	; 0x04
    21e0:	9d 81       	ldd	r25, Y+5	; 0x05
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x30>
    21e6:	a0 c0       	rjmp	.+320    	; 0x2328 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21e8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ea:	9f 81       	ldd	r25, Y+7	; 0x07
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    21f0:	9b c0       	rjmp	.+310    	; 0x2328 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21f2:	8f 2d       	mov	r24, r15
    21f4:	81 50       	subi	r24, 0x01	; 1
    21f6:	82 30       	cpi	r24, 0x02	; 2
    21f8:	50 f4       	brcc	.+20     	; 0x220e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    21fa:	88 81       	ld	r24, Y
    21fc:	99 81       	ldd	r25, Y+1	; 0x01
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	09 f4       	brne	.+2      	; 0x2204 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x4c>
    2202:	92 c0       	rjmp	.+292    	; 0x2328 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	9b 81       	ldd	r25, Y+3	; 0x03
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	09 f4       	brne	.+2      	; 0x220e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    220c:	8d c0       	rjmp	.+282    	; 0x2328 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    220e:	ce 01       	movw	r24, r28
    2210:	6c 2d       	mov	r22, r12
    2212:	70 2f       	mov	r23, r16
    2214:	4f 2d       	mov	r20, r15
    2216:	0e 94 7d 10 	call	0x20fa	; 0x20fa <_ZN16PololuQTRSensors4readEPjh>
    221a:	ac 2c       	mov	r10, r12
    221c:	b0 2e       	mov	r11, r16
    221e:	00 e0       	ldi	r16, 0x00	; 0
    2220:	10 e0       	ldi	r17, 0x00	; 0
    2222:	88 24       	eor	r8, r8
    2224:	99 24       	eor	r9, r9
    2226:	7a c0       	rjmp	.+244    	; 0x231c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x164>
    2228:	8f 2d       	mov	r24, r15
    222a:	81 30       	cpi	r24, 0x01	; 1
    222c:	59 f4       	brne	.+22     	; 0x2244 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x8c>
    222e:	ea 81       	ldd	r30, Y+2	; 0x02
    2230:	fb 81       	ldd	r31, Y+3	; 0x03
    2232:	e0 0f       	add	r30, r16
    2234:	f1 1f       	adc	r31, r17
    2236:	c0 80       	ld	r12, Z
    2238:	d1 80       	ldd	r13, Z+1	; 0x01
    223a:	e8 81       	ld	r30, Y
    223c:	f9 81       	ldd	r31, Y+1	; 0x01
    223e:	e0 0f       	add	r30, r16
    2240:	f1 1f       	adc	r31, r17
    2242:	0d c0       	rjmp	.+26     	; 0x225e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    2244:	8c 81       	ldd	r24, Y+4	; 0x04
    2246:	9d 81       	ldd	r25, Y+5	; 0x05
    2248:	ff 20       	and	r15, r15
    224a:	61 f4       	brne	.+24     	; 0x2264 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xac>
    224c:	ee 81       	ldd	r30, Y+6	; 0x06
    224e:	ff 81       	ldd	r31, Y+7	; 0x07
    2250:	e0 0f       	add	r30, r16
    2252:	f1 1f       	adc	r31, r17
    2254:	c0 80       	ld	r12, Z
    2256:	d1 80       	ldd	r13, Z+1	; 0x01
    2258:	80 0f       	add	r24, r16
    225a:	91 1f       	adc	r25, r17
    225c:	fc 01       	movw	r30, r24
    225e:	40 81       	ld	r20, Z
    2260:	51 81       	ldd	r21, Z+1	; 0x01
    2262:	2b c0       	rjmp	.+86     	; 0x22ba <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    2264:	80 0f       	add	r24, r16
    2266:	91 1f       	adc	r25, r17
    2268:	fc 01       	movw	r30, r24
    226a:	80 81       	ld	r24, Z
    226c:	91 81       	ldd	r25, Z+1	; 0x01
    226e:	e8 81       	ld	r30, Y
    2270:	f9 81       	ldd	r31, Y+1	; 0x01
    2272:	e0 0f       	add	r30, r16
    2274:	f1 1f       	adc	r31, r17
    2276:	40 81       	ld	r20, Z
    2278:	51 81       	ldd	r21, Z+1	; 0x01
    227a:	ce 84       	ldd	r12, Y+14	; 0x0e
    227c:	df 84       	ldd	r13, Y+15	; 0x0f
    227e:	84 17       	cp	r24, r20
    2280:	95 07       	cpc	r25, r21
    2282:	10 f4       	brcc	.+4      	; 0x2288 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd0>
    2284:	a6 01       	movw	r20, r12
    2286:	04 c0       	rjmp	.+8      	; 0x2290 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd8>
    2288:	4c 0d       	add	r20, r12
    228a:	5d 1d       	adc	r21, r13
    228c:	48 1b       	sub	r20, r24
    228e:	59 0b       	sbc	r21, r25
    2290:	ee 81       	ldd	r30, Y+6	; 0x06
    2292:	ff 81       	ldd	r31, Y+7	; 0x07
    2294:	e0 0f       	add	r30, r16
    2296:	f1 1f       	adc	r31, r17
    2298:	80 81       	ld	r24, Z
    229a:	91 81       	ldd	r25, Z+1	; 0x01
    229c:	ea 81       	ldd	r30, Y+2	; 0x02
    229e:	fb 81       	ldd	r31, Y+3	; 0x03
    22a0:	e0 0f       	add	r30, r16
    22a2:	f1 1f       	adc	r31, r17
    22a4:	20 81       	ld	r18, Z
    22a6:	31 81       	ldd	r19, Z+1	; 0x01
    22a8:	ce 84       	ldd	r12, Y+14	; 0x0e
    22aa:	df 84       	ldd	r13, Y+15	; 0x0f
    22ac:	82 17       	cp	r24, r18
    22ae:	93 07       	cpc	r25, r19
    22b0:	20 f0       	brcs	.+8      	; 0x22ba <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    22b2:	c2 0e       	add	r12, r18
    22b4:	d3 1e       	adc	r13, r19
    22b6:	c8 1a       	sub	r12, r24
    22b8:	d9 0a       	sbc	r13, r25
    22ba:	c4 1a       	sub	r12, r20
    22bc:	d5 0a       	sbc	r13, r21
    22be:	d1 f0       	breq	.+52     	; 0x22f4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    22c0:	f5 01       	movw	r30, r10
    22c2:	60 81       	ld	r22, Z
    22c4:	71 81       	ldd	r23, Z+1	; 0x01
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	9a 01       	movw	r18, r20
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	50 e0       	ldi	r21, 0x00	; 0
    22d0:	62 1b       	sub	r22, r18
    22d2:	73 0b       	sbc	r23, r19
    22d4:	84 0b       	sbc	r24, r20
    22d6:	95 0b       	sbc	r25, r21
    22d8:	28 ee       	ldi	r18, 0xE8	; 232
    22da:	33 e0       	ldi	r19, 0x03	; 3
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	0e 94 84 13 	call	0x2708	; 0x2708 <__mulsi3>
    22e4:	96 01       	movw	r18, r12
    22e6:	40 e0       	ldi	r20, 0x00	; 0
    22e8:	50 e0       	ldi	r21, 0x00	; 0
    22ea:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__divmodsi4>
    22ee:	37 fd       	sbrc	r19, 7
    22f0:	0a c0       	rjmp	.+20     	; 0x2306 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x14e>
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x140>
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	f3 e0       	ldi	r31, 0x03	; 3
    22fa:	29 3e       	cpi	r18, 0xE9	; 233
    22fc:	3f 07       	cpc	r19, r31
    22fe:	2c f0       	brlt	.+10     	; 0x230a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    2300:	28 ee       	ldi	r18, 0xE8	; 232
    2302:	33 e0       	ldi	r19, 0x03	; 3
    2304:	02 c0       	rjmp	.+4      	; 0x230a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	f5 01       	movw	r30, r10
    230c:	21 93       	st	Z+, r18
    230e:	31 93       	st	Z+, r19
    2310:	5f 01       	movw	r10, r30
    2312:	08 94       	sec
    2314:	81 1c       	adc	r8, r1
    2316:	91 1c       	adc	r9, r1
    2318:	0e 5f       	subi	r16, 0xFE	; 254
    231a:	1f 4f       	sbci	r17, 0xFF	; 255
    231c:	88 85       	ldd	r24, Y+8	; 0x08
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	88 16       	cp	r8, r24
    2322:	99 06       	cpc	r9, r25
    2324:	0c f4       	brge	.+2      	; 0x2328 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2326:	80 cf       	rjmp	.-256    	; 0x2228 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x70>
    2328:	df 91       	pop	r29
    232a:	cf 91       	pop	r28
    232c:	1f 91       	pop	r17
    232e:	0f 91       	pop	r16
    2330:	ff 90       	pop	r15
    2332:	df 90       	pop	r13
    2334:	cf 90       	pop	r12
    2336:	bf 90       	pop	r11
    2338:	af 90       	pop	r10
    233a:	9f 90       	pop	r9
    233c:	8f 90       	pop	r8
    233e:	08 95       	ret

00002340 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2340:	a5 e0       	ldi	r26, 0x05	; 5
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e6 ea       	ldi	r30, 0xA6	; 166
    2346:	f1 e1       	ldi	r31, 0x11	; 17
    2348:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__prologue_saves__>
    234c:	4c 01       	movw	r8, r24
    234e:	c6 2e       	mov	r12, r22
    2350:	e7 2e       	mov	r14, r23
    2352:	2d 83       	std	Y+5, r18	; 0x05
    2354:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2358:	d4 01       	movw	r26, r8
    235a:	18 96       	adiw	r26, 0x08	; 8
    235c:	4c 90       	ld	r4, X
    235e:	18 97       	sbiw	r26, 0x08	; 8
    2360:	de 2c       	mov	r13, r14
    2362:	64 2d       	mov	r22, r4
    2364:	70 e0       	ldi	r23, 0x00	; 0
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	28 ee       	ldi	r18, 0xE8	; 232
    236c:	33 e0       	ldi	r19, 0x03	; 3
    236e:	40 e0       	ldi	r20, 0x00	; 0
    2370:	50 e0       	ldi	r21, 0x00	; 0
    2372:	0e 94 84 13 	call	0x2708	; 0x2708 <__mulsi3>
    2376:	69 83       	std	Y+1, r22	; 0x01
    2378:	7a 83       	std	Y+2, r23	; 0x02
    237a:	8b 83       	std	Y+3, r24	; 0x03
    237c:	9c 83       	std	Y+4, r25	; 0x04
    237e:	ee 24       	eor	r14, r14
    2380:	ff 24       	eor	r15, r15
    2382:	87 01       	movw	r16, r14
    2384:	66 24       	eor	r6, r6
    2386:	77 24       	eor	r7, r7
    2388:	88 24       	eor	r8, r8
    238a:	99 24       	eor	r9, r9
    238c:	54 01       	movw	r10, r8
    238e:	55 24       	eor	r5, r5
    2390:	36 c0       	rjmp	.+108    	; 0x23fe <_ZN16PololuQTRSensors8readLineEPjhh+0xbe>
    2392:	f6 01       	movw	r30, r12
    2394:	30 81       	ld	r19, Z
    2396:	21 81       	ldd	r18, Z+1	; 0x01
    2398:	42 e0       	ldi	r20, 0x02	; 2
    239a:	24 2e       	mov	r2, r20
    239c:	31 2c       	mov	r3, r1
    239e:	c2 0c       	add	r12, r2
    23a0:	d3 1c       	adc	r13, r3
    23a2:	c9 01       	movw	r24, r18
    23a4:	49 2f       	mov	r20, r25
    23a6:	58 2f       	mov	r21, r24
    23a8:	1a 01       	movw	r2, r20
    23aa:	2d 81       	ldd	r18, Y+5	; 0x05
    23ac:	22 23       	and	r18, r18
    23ae:	29 f0       	breq	.+10     	; 0x23ba <_ZN16PololuQTRSensors8readLineEPjhh+0x7a>
    23b0:	88 ee       	ldi	r24, 0xE8	; 232
    23b2:	93 e0       	ldi	r25, 0x03	; 3
    23b4:	82 19       	sub	r24, r2
    23b6:	93 09       	sbc	r25, r3
    23b8:	1c 01       	movw	r2, r24
    23ba:	99 ec       	ldi	r25, 0xC9	; 201
    23bc:	29 16       	cp	r2, r25
    23be:	31 04       	cpc	r3, r1
    23c0:	2c f4       	brge	.+10     	; 0x23cc <_ZN16PololuQTRSensors8readLineEPjhh+0x8c>
    23c2:	a3 e3       	ldi	r26, 0x33	; 51
    23c4:	2a 16       	cp	r2, r26
    23c6:	31 04       	cpc	r3, r1
    23c8:	94 f0       	brlt	.+36     	; 0x23ee <_ZN16PololuQTRSensors8readLineEPjhh+0xae>
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <_ZN16PololuQTRSensors8readLineEPjhh+0x90>
    23cc:	55 24       	eor	r5, r5
    23ce:	53 94       	inc	r5
    23d0:	b1 01       	movw	r22, r2
    23d2:	88 27       	eor	r24, r24
    23d4:	77 fd       	sbrc	r23, 7
    23d6:	80 95       	com	r24
    23d8:	98 2f       	mov	r25, r24
    23da:	a8 01       	movw	r20, r16
    23dc:	97 01       	movw	r18, r14
    23de:	0e 94 84 13 	call	0x2708	; 0x2708 <__mulsi3>
    23e2:	86 0e       	add	r8, r22
    23e4:	97 1e       	adc	r9, r23
    23e6:	a8 1e       	adc	r10, r24
    23e8:	b9 1e       	adc	r11, r25
    23ea:	62 0c       	add	r6, r2
    23ec:	73 1c       	adc	r7, r3
    23ee:	88 ee       	ldi	r24, 0xE8	; 232
    23f0:	93 e0       	ldi	r25, 0x03	; 3
    23f2:	a0 e0       	ldi	r26, 0x00	; 0
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	e8 0e       	add	r14, r24
    23f8:	f9 1e       	adc	r15, r25
    23fa:	0a 1f       	adc	r16, r26
    23fc:	1b 1f       	adc	r17, r27
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	9a 81       	ldd	r25, Y+2	; 0x02
    2402:	ab 81       	ldd	r26, Y+3	; 0x03
    2404:	bc 81       	ldd	r27, Y+4	; 0x04
    2406:	e8 16       	cp	r14, r24
    2408:	f9 06       	cpc	r15, r25
    240a:	0a 07       	cpc	r16, r26
    240c:	1b 07       	cpc	r17, r27
    240e:	09 f6       	brne	.-126    	; 0x2392 <_ZN16PololuQTRSensors8readLineEPjhh+0x52>
    2410:	55 20       	and	r5, r5
    2412:	f1 f4       	brne	.+60     	; 0x2450 <_ZN16PololuQTRSensors8readLineEPjhh+0x110>
    2414:	55 24       	eor	r5, r5
    2416:	08 94       	sec
    2418:	41 08       	sbc	r4, r1
    241a:	51 08       	sbc	r5, r1
    241c:	24 ef       	ldi	r18, 0xF4	; 244
    241e:	31 e0       	ldi	r19, 0x01	; 1
    2420:	42 9e       	mul	r4, r18
    2422:	c0 01       	movw	r24, r0
    2424:	43 9e       	mul	r4, r19
    2426:	90 0d       	add	r25, r0
    2428:	52 9e       	mul	r5, r18
    242a:	90 0d       	add	r25, r0
    242c:	11 24       	eor	r1, r1
    242e:	20 91 b9 01 	lds	r18, 0x01B9
    2432:	30 91 ba 01 	lds	r19, 0x01BA
    2436:	28 17       	cp	r18, r24
    2438:	39 07       	cpc	r19, r25
    243a:	b4 f0       	brlt	.+44     	; 0x2468 <_ZN16PololuQTRSensors8readLineEPjhh+0x128>
    243c:	88 ee       	ldi	r24, 0xE8	; 232
    243e:	93 e0       	ldi	r25, 0x03	; 3
    2440:	48 9e       	mul	r4, r24
    2442:	90 01       	movw	r18, r0
    2444:	49 9e       	mul	r4, r25
    2446:	30 0d       	add	r19, r0
    2448:	58 9e       	mul	r5, r24
    244a:	30 0d       	add	r19, r0
    244c:	11 24       	eor	r1, r1
    244e:	0e c0       	rjmp	.+28     	; 0x246c <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    2450:	93 01       	movw	r18, r6
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	50 e0       	ldi	r21, 0x00	; 0
    2456:	c5 01       	movw	r24, r10
    2458:	b4 01       	movw	r22, r8
    245a:	0e 94 c8 13 	call	0x2790	; 0x2790 <__udivmodsi4>
    245e:	20 93 b9 01 	sts	0x01B9, r18
    2462:	30 93 ba 01 	sts	0x01BA, r19
    2466:	02 c0       	rjmp	.+4      	; 0x246c <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	c9 01       	movw	r24, r18
    246e:	25 96       	adiw	r28, 0x05	; 5
    2470:	e2 e1       	ldi	r30, 0x12	; 18
    2472:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__epilogue_restores__>

00002476 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    2476:	a7 e6       	ldi	r26, 0x67	; 103
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	e1 e4       	ldi	r30, 0x41	; 65
    247c:	f2 e1       	ldi	r31, 0x12	; 18
    247e:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__prologue_saves__>
    2482:	8c 01       	movw	r16, r24
    2484:	4b 01       	movw	r8, r22
    2486:	6a 01       	movw	r12, r20
    2488:	a6 96       	adiw	r28, 0x26	; 38
    248a:	2f af       	std	Y+63, r18	; 0x3f
    248c:	a6 97       	sbiw	r28, 0x26	; 38
    248e:	da 01       	movw	r26, r20
    2490:	8d 91       	ld	r24, X+
    2492:	9c 91       	ld	r25, X
    2494:	11 97       	sbiw	r26, 0x01	; 1
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	e9 f4       	brne	.+58     	; 0x24d4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x5e>
    249a:	f8 01       	movw	r30, r16
    249c:	80 85       	ldd	r24, Z+8	; 0x08
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	0e 94 60 14 	call	0x28c0	; 0x28c0 <malloc>
    24a8:	d6 01       	movw	r26, r12
    24aa:	11 96       	adiw	r26, 0x01	; 1
    24ac:	9c 93       	st	X, r25
    24ae:	8e 93       	st	-X, r24
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x40>
    24b4:	e2 c0       	rjmp	.+452    	; 0x267a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    24b6:	fc 01       	movw	r30, r24
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	03 c0       	rjmp	.+6      	; 0x24c4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x4e>
    24be:	11 92       	st	Z+, r1
    24c0:	11 92       	st	Z+, r1
    24c2:	01 96       	adiw	r24, 0x01	; 1
    24c4:	d8 01       	movw	r26, r16
    24c6:	18 96       	adiw	r26, 0x08	; 8
    24c8:	2c 91       	ld	r18, X
    24ca:	18 97       	sbiw	r26, 0x08	; 8
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	82 17       	cp	r24, r18
    24d0:	93 07       	cpc	r25, r19
    24d2:	ac f3       	brlt	.-22     	; 0x24be <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x48>
    24d4:	f4 01       	movw	r30, r8
    24d6:	80 81       	ld	r24, Z
    24d8:	91 81       	ldd	r25, Z+1	; 0x01
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	89 f0       	breq	.+34     	; 0x2500 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8a>
    24de:	ee 24       	eor	r14, r14
    24e0:	ff 24       	eor	r15, r15
    24e2:	5e 01       	movw	r10, r28
    24e4:	08 94       	sec
    24e6:	a1 1c       	adc	r10, r1
    24e8:	b1 1c       	adc	r11, r1
    24ea:	b1 e4       	ldi	r27, 0x41	; 65
    24ec:	6b 2e       	mov	r6, r27
    24ee:	71 2c       	mov	r7, r1
    24f0:	6c 0e       	add	r6, r28
    24f2:	7d 1e       	adc	r7, r29
    24f4:	a1 e2       	ldi	r26, 0x21	; 33
    24f6:	4a 2e       	mov	r4, r26
    24f8:	51 2c       	mov	r5, r1
    24fa:	4c 0e       	add	r4, r28
    24fc:	5d 1e       	adc	r5, r29
    24fe:	23 c0       	rjmp	.+70     	; 0x2546 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    2500:	d8 01       	movw	r26, r16
    2502:	18 96       	adiw	r26, 0x08	; 8
    2504:	8c 91       	ld	r24, X
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	0e 94 60 14 	call	0x28c0	; 0x28c0 <malloc>
    2510:	f4 01       	movw	r30, r8
    2512:	91 83       	std	Z+1, r25	; 0x01
    2514:	80 83       	st	Z, r24
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	09 f4       	brne	.+2      	; 0x251c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xa6>
    251a:	af c0       	rjmp	.+350    	; 0x267a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    251c:	fc 01       	movw	r30, r24
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	d8 01       	movw	r26, r16
    2524:	07 c0       	rjmp	.+14     	; 0x2534 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xbe>
    2526:	1e 96       	adiw	r26, 0x0e	; 14
    2528:	2d 91       	ld	r18, X+
    252a:	3c 91       	ld	r19, X
    252c:	1f 97       	sbiw	r26, 0x0f	; 15
    252e:	21 93       	st	Z+, r18
    2530:	31 93       	st	Z+, r19
    2532:	01 96       	adiw	r24, 0x01	; 1
    2534:	18 96       	adiw	r26, 0x08	; 8
    2536:	2c 91       	ld	r18, X
    2538:	18 97       	sbiw	r26, 0x08	; 8
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	82 17       	cp	r24, r18
    253e:	93 07       	cpc	r25, r19
    2540:	94 f3       	brlt	.-28     	; 0x2526 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb0>
    2542:	8d 01       	movw	r16, r26
    2544:	cc cf       	rjmp	.-104    	; 0x24de <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x68>
    2546:	c8 01       	movw	r24, r16
    2548:	b5 01       	movw	r22, r10
    254a:	a6 96       	adiw	r28, 0x26	; 38
    254c:	4f ad       	ldd	r20, Y+63	; 0x3f
    254e:	a6 97       	sbiw	r28, 0x26	; 38
    2550:	0e 94 7d 10 	call	0x20fa	; 0x20fa <_ZN16PololuQTRSensors4readEPjh>
    2554:	d8 01       	movw	r26, r16
    2556:	18 96       	adiw	r26, 0x08	; 8
    2558:	8c 91       	ld	r24, X
    255a:	18 97       	sbiw	r26, 0x08	; 8
    255c:	e8 2f       	mov	r30, r24
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	a5 96       	adiw	r28, 0x25	; 37
    2562:	ff af       	std	Y+63, r31	; 0x3f
    2564:	ee af       	std	Y+62, r30	; 0x3e
    2566:	a5 97       	sbiw	r28, 0x25	; 37
    2568:	13 01       	movw	r2, r6
    256a:	f5 01       	movw	r30, r10
    256c:	a3 96       	adiw	r28, 0x23	; 35
    256e:	5f ae       	std	Y+63, r5	; 0x3f
    2570:	4e ae       	std	Y+62, r4	; 0x3e
    2572:	a3 97       	sbiw	r28, 0x23	; 35
    2574:	93 01       	movw	r18, r6
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	a8 96       	adiw	r28, 0x28	; 40
    257c:	5f ae       	std	Y+63, r5	; 0x3f
    257e:	4e ae       	std	Y+62, r4	; 0x3e
    2580:	a8 97       	sbiw	r28, 0x28	; 40
    2582:	37 c0       	rjmp	.+110    	; 0x25f2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17c>
    2584:	e1 14       	cp	r14, r1
    2586:	f1 04       	cpc	r15, r1
    2588:	61 f0       	breq	.+24     	; 0x25a2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x12c>
    258a:	a8 96       	adiw	r28, 0x28	; 40
    258c:	ae ad       	ldd	r26, Y+62	; 0x3e
    258e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2590:	a8 97       	sbiw	r28, 0x28	; 40
    2592:	6d 91       	ld	r22, X+
    2594:	7c 91       	ld	r23, X
    2596:	11 97       	sbiw	r26, 0x01	; 1
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	68 17       	cp	r22, r24
    259e:	79 07       	cpc	r23, r25
    25a0:	60 f4       	brcc	.+24     	; 0x25ba <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x144>
    25a2:	80 81       	ld	r24, Z
    25a4:	91 81       	ldd	r25, Z+1	; 0x01
    25a6:	a8 96       	adiw	r28, 0x28	; 40
    25a8:	ae ad       	ldd	r26, Y+62	; 0x3e
    25aa:	bf ad       	ldd	r27, Y+63	; 0x3f
    25ac:	a8 97       	sbiw	r28, 0x28	; 40
    25ae:	11 96       	adiw	r26, 0x01	; 1
    25b0:	9c 93       	st	X, r25
    25b2:	8e 93       	st	-X, r24
    25b4:	e1 14       	cp	r14, r1
    25b6:	f1 04       	cpc	r15, r1
    25b8:	49 f0       	breq	.+18     	; 0x25cc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x156>
    25ba:	d9 01       	movw	r26, r18
    25bc:	6d 91       	ld	r22, X+
    25be:	7c 91       	ld	r23, X
    25c0:	11 97       	sbiw	r26, 0x01	; 1
    25c2:	80 81       	ld	r24, Z
    25c4:	91 81       	ldd	r25, Z+1	; 0x01
    25c6:	86 17       	cp	r24, r22
    25c8:	97 07       	cpc	r25, r23
    25ca:	28 f4       	brcc	.+10     	; 0x25d6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x160>
    25cc:	80 81       	ld	r24, Z
    25ce:	91 81       	ldd	r25, Z+1	; 0x01
    25d0:	d9 01       	movw	r26, r18
    25d2:	8d 93       	st	X+, r24
    25d4:	9c 93       	st	X, r25
    25d6:	4f 5f       	subi	r20, 0xFF	; 255
    25d8:	5f 4f       	sbci	r21, 0xFF	; 255
    25da:	2e 5f       	subi	r18, 0xFE	; 254
    25dc:	3f 4f       	sbci	r19, 0xFF	; 255
    25de:	32 96       	adiw	r30, 0x02	; 2
    25e0:	a8 96       	adiw	r28, 0x28	; 40
    25e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    25e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    25e6:	a8 97       	sbiw	r28, 0x28	; 40
    25e8:	02 96       	adiw	r24, 0x02	; 2
    25ea:	a8 96       	adiw	r28, 0x28	; 40
    25ec:	9f af       	std	Y+63, r25	; 0x3f
    25ee:	8e af       	std	Y+62, r24	; 0x3e
    25f0:	a8 97       	sbiw	r28, 0x28	; 40
    25f2:	a5 96       	adiw	r28, 0x25	; 37
    25f4:	ae ad       	ldd	r26, Y+62	; 0x3e
    25f6:	bf ad       	ldd	r27, Y+63	; 0x3f
    25f8:	a5 97       	sbiw	r28, 0x25	; 37
    25fa:	4a 17       	cp	r20, r26
    25fc:	5b 07       	cpc	r21, r27
    25fe:	14 f2       	brlt	.-124    	; 0x2584 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x10e>
    2600:	08 94       	sec
    2602:	e1 1c       	adc	r14, r1
    2604:	f1 1c       	adc	r15, r1
    2606:	ba e0       	ldi	r27, 0x0A	; 10
    2608:	eb 16       	cp	r14, r27
    260a:	f1 04       	cpc	r15, r1
    260c:	09 f0       	breq	.+2      	; 0x2610 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x19a>
    260e:	9b cf       	rjmp	.-202    	; 0x2546 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	2c c0       	rjmp	.+88     	; 0x266e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f8>
    2616:	f1 01       	movw	r30, r2
    2618:	41 91       	ld	r20, Z+
    261a:	51 91       	ld	r21, Z+
    261c:	1f 01       	movw	r2, r30
    261e:	bc 01       	movw	r22, r24
    2620:	66 0f       	add	r22, r22
    2622:	77 1f       	adc	r23, r23
    2624:	d6 01       	movw	r26, r12
    2626:	ed 91       	ld	r30, X+
    2628:	fc 91       	ld	r31, X
    262a:	11 97       	sbiw	r26, 0x01	; 1
    262c:	e6 0f       	add	r30, r22
    262e:	f7 1f       	adc	r31, r23
    2630:	20 81       	ld	r18, Z
    2632:	31 81       	ldd	r19, Z+1	; 0x01
    2634:	24 17       	cp	r18, r20
    2636:	35 07       	cpc	r19, r21
    2638:	10 f4       	brcc	.+4      	; 0x263e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1c8>
    263a:	51 83       	std	Z+1, r21	; 0x01
    263c:	40 83       	st	Z, r20
    263e:	a3 96       	adiw	r28, 0x23	; 35
    2640:	ee ad       	ldd	r30, Y+62	; 0x3e
    2642:	ff ad       	ldd	r31, Y+63	; 0x3f
    2644:	a3 97       	sbiw	r28, 0x23	; 35
    2646:	41 91       	ld	r20, Z+
    2648:	51 91       	ld	r21, Z+
    264a:	a3 96       	adiw	r28, 0x23	; 35
    264c:	ff af       	std	Y+63, r31	; 0x3f
    264e:	ee af       	std	Y+62, r30	; 0x3e
    2650:	a3 97       	sbiw	r28, 0x23	; 35
    2652:	d4 01       	movw	r26, r8
    2654:	ed 91       	ld	r30, X+
    2656:	fc 91       	ld	r31, X
    2658:	11 97       	sbiw	r26, 0x01	; 1
    265a:	e6 0f       	add	r30, r22
    265c:	f7 1f       	adc	r31, r23
    265e:	20 81       	ld	r18, Z
    2660:	31 81       	ldd	r19, Z+1	; 0x01
    2662:	42 17       	cp	r20, r18
    2664:	53 07       	cpc	r21, r19
    2666:	10 f4       	brcc	.+4      	; 0x266c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f6>
    2668:	51 83       	std	Z+1, r21	; 0x01
    266a:	40 83       	st	Z, r20
    266c:	01 96       	adiw	r24, 0x01	; 1
    266e:	f8 01       	movw	r30, r16
    2670:	20 85       	ldd	r18, Z+8	; 0x08
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	82 17       	cp	r24, r18
    2676:	93 07       	cpc	r25, r19
    2678:	74 f2       	brlt	.-100    	; 0x2616 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1a0>
    267a:	c9 59       	subi	r28, 0x99	; 153
    267c:	df 4f       	sbci	r29, 0xFF	; 255
    267e:	e2 e1       	ldi	r30, 0x12	; 18
    2680:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__epilogue_restores__>

00002684 <_ZN16PololuQTRSensors9calibrateEh>:
    2684:	1f 93       	push	r17
    2686:	cf 93       	push	r28
    2688:	df 93       	push	r29
    268a:	ec 01       	movw	r28, r24
    268c:	16 2f       	mov	r17, r22
    268e:	86 2f       	mov	r24, r22
    2690:	81 50       	subi	r24, 0x01	; 1
    2692:	82 30       	cpi	r24, 0x02	; 2
    2694:	58 f4       	brcc	.+22     	; 0x26ac <_ZN16PololuQTRSensors9calibrateEh+0x28>
    2696:	ae 01       	movw	r20, r28
    2698:	4e 5f       	subi	r20, 0xFE	; 254
    269a:	5f 4f       	sbci	r21, 0xFF	; 255
    269c:	ce 01       	movw	r24, r28
    269e:	be 01       	movw	r22, r28
    26a0:	21 e0       	ldi	r18, 0x01	; 1
    26a2:	0e 94 3b 12 	call	0x2476	; 0x2476 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    26a6:	12 30       	cpi	r17, 0x02	; 2
    26a8:	19 f0       	breq	.+6      	; 0x26b0 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    26aa:	0c c0       	rjmp	.+24     	; 0x26c4 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    26ac:	66 23       	and	r22, r22
    26ae:	51 f4       	brne	.+20     	; 0x26c4 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    26b0:	be 01       	movw	r22, r28
    26b2:	6c 5f       	subi	r22, 0xFC	; 252
    26b4:	7f 4f       	sbci	r23, 0xFF	; 255
    26b6:	ae 01       	movw	r20, r28
    26b8:	4a 5f       	subi	r20, 0xFA	; 250
    26ba:	5f 4f       	sbci	r21, 0xFF	; 255
    26bc:	ce 01       	movw	r24, r28
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	0e 94 3b 12 	call	0x2476	; 0x2476 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    26c4:	df 91       	pop	r29
    26c6:	cf 91       	pop	r28
    26c8:	1f 91       	pop	r17
    26ca:	08 95       	ret

000026cc <_ZN16PololuQTRSensorsD1Ev>:
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	ec 01       	movw	r28, r24
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	9b 81       	ldd	r25, Y+3	; 0x03
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	11 f0       	breq	.+4      	; 0x26de <_ZN16PololuQTRSensorsD1Ev+0x12>
    26da:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <free>
    26de:	8e 81       	ldd	r24, Y+6	; 0x06
    26e0:	9f 81       	ldd	r25, Y+7	; 0x07
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	11 f0       	breq	.+4      	; 0x26ea <_ZN16PololuQTRSensorsD1Ev+0x1e>
    26e6:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <free>
    26ea:	88 81       	ld	r24, Y
    26ec:	99 81       	ldd	r25, Y+1	; 0x01
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	11 f0       	breq	.+4      	; 0x26f6 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    26f2:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <free>
    26f6:	8c 81       	ldd	r24, Y+4	; 0x04
    26f8:	9d 81       	ldd	r25, Y+5	; 0x05
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	11 f0       	breq	.+4      	; 0x2702 <_ZN16PololuQTRSensorsD1Ev+0x36>
    26fe:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <free>
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	08 95       	ret

00002708 <__mulsi3>:
    2708:	db 01       	movw	r26, r22
    270a:	8f 93       	push	r24
    270c:	9f 93       	push	r25
    270e:	0e 94 09 14 	call	0x2812	; 0x2812 <__muluhisi3>
    2712:	bf 91       	pop	r27
    2714:	af 91       	pop	r26
    2716:	a2 9f       	mul	r26, r18
    2718:	80 0d       	add	r24, r0
    271a:	91 1d       	adc	r25, r1
    271c:	a3 9f       	mul	r26, r19
    271e:	90 0d       	add	r25, r0
    2720:	b2 9f       	mul	r27, r18
    2722:	90 0d       	add	r25, r0
    2724:	11 24       	eor	r1, r1
    2726:	08 95       	ret

00002728 <__udivmodqi4>:
    2728:	99 1b       	sub	r25, r25
    272a:	79 e0       	ldi	r23, 0x09	; 9
    272c:	04 c0       	rjmp	.+8      	; 0x2736 <__udivmodqi4_ep>

0000272e <__udivmodqi4_loop>:
    272e:	99 1f       	adc	r25, r25
    2730:	96 17       	cp	r25, r22
    2732:	08 f0       	brcs	.+2      	; 0x2736 <__udivmodqi4_ep>
    2734:	96 1b       	sub	r25, r22

00002736 <__udivmodqi4_ep>:
    2736:	88 1f       	adc	r24, r24
    2738:	7a 95       	dec	r23
    273a:	c9 f7       	brne	.-14     	; 0x272e <__udivmodqi4_loop>
    273c:	80 95       	com	r24
    273e:	08 95       	ret

00002740 <__udivmodhi4>:
    2740:	aa 1b       	sub	r26, r26
    2742:	bb 1b       	sub	r27, r27
    2744:	51 e1       	ldi	r21, 0x11	; 17
    2746:	07 c0       	rjmp	.+14     	; 0x2756 <__udivmodhi4_ep>

00002748 <__udivmodhi4_loop>:
    2748:	aa 1f       	adc	r26, r26
    274a:	bb 1f       	adc	r27, r27
    274c:	a6 17       	cp	r26, r22
    274e:	b7 07       	cpc	r27, r23
    2750:	10 f0       	brcs	.+4      	; 0x2756 <__udivmodhi4_ep>
    2752:	a6 1b       	sub	r26, r22
    2754:	b7 0b       	sbc	r27, r23

00002756 <__udivmodhi4_ep>:
    2756:	88 1f       	adc	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	5a 95       	dec	r21
    275c:	a9 f7       	brne	.-22     	; 0x2748 <__udivmodhi4_loop>
    275e:	80 95       	com	r24
    2760:	90 95       	com	r25
    2762:	bc 01       	movw	r22, r24
    2764:	cd 01       	movw	r24, r26
    2766:	08 95       	ret

00002768 <__divmodhi4>:
    2768:	97 fb       	bst	r25, 7
    276a:	07 2e       	mov	r0, r23
    276c:	16 f4       	brtc	.+4      	; 0x2772 <__divmodhi4+0xa>
    276e:	00 94       	com	r0
    2770:	07 d0       	rcall	.+14     	; 0x2780 <__divmodhi4_neg1>
    2772:	77 fd       	sbrc	r23, 7
    2774:	09 d0       	rcall	.+18     	; 0x2788 <__divmodhi4_neg2>
    2776:	0e 94 a0 13 	call	0x2740	; 0x2740 <__udivmodhi4>
    277a:	07 fc       	sbrc	r0, 7
    277c:	05 d0       	rcall	.+10     	; 0x2788 <__divmodhi4_neg2>
    277e:	3e f4       	brtc	.+14     	; 0x278e <__divmodhi4_exit>

00002780 <__divmodhi4_neg1>:
    2780:	90 95       	com	r25
    2782:	81 95       	neg	r24
    2784:	9f 4f       	sbci	r25, 0xFF	; 255
    2786:	08 95       	ret

00002788 <__divmodhi4_neg2>:
    2788:	70 95       	com	r23
    278a:	61 95       	neg	r22
    278c:	7f 4f       	sbci	r23, 0xFF	; 255

0000278e <__divmodhi4_exit>:
    278e:	08 95       	ret

00002790 <__udivmodsi4>:
    2790:	a1 e2       	ldi	r26, 0x21	; 33
    2792:	1a 2e       	mov	r1, r26
    2794:	aa 1b       	sub	r26, r26
    2796:	bb 1b       	sub	r27, r27
    2798:	fd 01       	movw	r30, r26
    279a:	0d c0       	rjmp	.+26     	; 0x27b6 <__udivmodsi4_ep>

0000279c <__udivmodsi4_loop>:
    279c:	aa 1f       	adc	r26, r26
    279e:	bb 1f       	adc	r27, r27
    27a0:	ee 1f       	adc	r30, r30
    27a2:	ff 1f       	adc	r31, r31
    27a4:	a2 17       	cp	r26, r18
    27a6:	b3 07       	cpc	r27, r19
    27a8:	e4 07       	cpc	r30, r20
    27aa:	f5 07       	cpc	r31, r21
    27ac:	20 f0       	brcs	.+8      	; 0x27b6 <__udivmodsi4_ep>
    27ae:	a2 1b       	sub	r26, r18
    27b0:	b3 0b       	sbc	r27, r19
    27b2:	e4 0b       	sbc	r30, r20
    27b4:	f5 0b       	sbc	r31, r21

000027b6 <__udivmodsi4_ep>:
    27b6:	66 1f       	adc	r22, r22
    27b8:	77 1f       	adc	r23, r23
    27ba:	88 1f       	adc	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	1a 94       	dec	r1
    27c0:	69 f7       	brne	.-38     	; 0x279c <__udivmodsi4_loop>
    27c2:	60 95       	com	r22
    27c4:	70 95       	com	r23
    27c6:	80 95       	com	r24
    27c8:	90 95       	com	r25
    27ca:	9b 01       	movw	r18, r22
    27cc:	ac 01       	movw	r20, r24
    27ce:	bd 01       	movw	r22, r26
    27d0:	cf 01       	movw	r24, r30
    27d2:	08 95       	ret

000027d4 <__divmodsi4>:
    27d4:	05 2e       	mov	r0, r21
    27d6:	97 fb       	bst	r25, 7
    27d8:	1e f4       	brtc	.+6      	; 0x27e0 <__divmodsi4+0xc>
    27da:	00 94       	com	r0
    27dc:	0e 94 01 14 	call	0x2802	; 0x2802 <__negsi2>
    27e0:	57 fd       	sbrc	r21, 7
    27e2:	07 d0       	rcall	.+14     	; 0x27f2 <__divmodsi4_neg2>
    27e4:	0e 94 c8 13 	call	0x2790	; 0x2790 <__udivmodsi4>
    27e8:	07 fc       	sbrc	r0, 7
    27ea:	03 d0       	rcall	.+6      	; 0x27f2 <__divmodsi4_neg2>
    27ec:	4e f4       	brtc	.+18     	; 0x2800 <__divmodsi4_exit>
    27ee:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__negsi2>

000027f2 <__divmodsi4_neg2>:
    27f2:	50 95       	com	r21
    27f4:	40 95       	com	r20
    27f6:	30 95       	com	r19
    27f8:	21 95       	neg	r18
    27fa:	3f 4f       	sbci	r19, 0xFF	; 255
    27fc:	4f 4f       	sbci	r20, 0xFF	; 255
    27fe:	5f 4f       	sbci	r21, 0xFF	; 255

00002800 <__divmodsi4_exit>:
    2800:	08 95       	ret

00002802 <__negsi2>:
    2802:	90 95       	com	r25
    2804:	80 95       	com	r24
    2806:	70 95       	com	r23
    2808:	61 95       	neg	r22
    280a:	7f 4f       	sbci	r23, 0xFF	; 255
    280c:	8f 4f       	sbci	r24, 0xFF	; 255
    280e:	9f 4f       	sbci	r25, 0xFF	; 255
    2810:	08 95       	ret

00002812 <__muluhisi3>:
    2812:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__umulhisi3>
    2816:	a5 9f       	mul	r26, r21
    2818:	90 0d       	add	r25, r0
    281a:	b4 9f       	mul	r27, r20
    281c:	90 0d       	add	r25, r0
    281e:	a4 9f       	mul	r26, r20
    2820:	80 0d       	add	r24, r0
    2822:	91 1d       	adc	r25, r1
    2824:	11 24       	eor	r1, r1
    2826:	08 95       	ret

00002828 <__prologue_saves__>:
    2828:	2f 92       	push	r2
    282a:	3f 92       	push	r3
    282c:	4f 92       	push	r4
    282e:	5f 92       	push	r5
    2830:	6f 92       	push	r6
    2832:	7f 92       	push	r7
    2834:	8f 92       	push	r8
    2836:	9f 92       	push	r9
    2838:	af 92       	push	r10
    283a:	bf 92       	push	r11
    283c:	cf 92       	push	r12
    283e:	df 92       	push	r13
    2840:	ef 92       	push	r14
    2842:	ff 92       	push	r15
    2844:	0f 93       	push	r16
    2846:	1f 93       	push	r17
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	ca 1b       	sub	r28, r26
    2852:	db 0b       	sbc	r29, r27
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	09 94       	ijmp

00002860 <__epilogue_restores__>:
    2860:	2a 88       	ldd	r2, Y+18	; 0x12
    2862:	39 88       	ldd	r3, Y+17	; 0x11
    2864:	48 88       	ldd	r4, Y+16	; 0x10
    2866:	5f 84       	ldd	r5, Y+15	; 0x0f
    2868:	6e 84       	ldd	r6, Y+14	; 0x0e
    286a:	7d 84       	ldd	r7, Y+13	; 0x0d
    286c:	8c 84       	ldd	r8, Y+12	; 0x0c
    286e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2870:	aa 84       	ldd	r10, Y+10	; 0x0a
    2872:	b9 84       	ldd	r11, Y+9	; 0x09
    2874:	c8 84       	ldd	r12, Y+8	; 0x08
    2876:	df 80       	ldd	r13, Y+7	; 0x07
    2878:	ee 80       	ldd	r14, Y+6	; 0x06
    287a:	fd 80       	ldd	r15, Y+5	; 0x05
    287c:	0c 81       	ldd	r16, Y+4	; 0x04
    287e:	1b 81       	ldd	r17, Y+3	; 0x03
    2880:	aa 81       	ldd	r26, Y+2	; 0x02
    2882:	b9 81       	ldd	r27, Y+1	; 0x01
    2884:	ce 0f       	add	r28, r30
    2886:	d1 1d       	adc	r29, r1
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
    2892:	ed 01       	movw	r28, r26
    2894:	08 95       	ret

00002896 <__tablejump2__>:
    2896:	ee 0f       	add	r30, r30
    2898:	ff 1f       	adc	r31, r31

0000289a <__tablejump__>:
    289a:	05 90       	lpm	r0, Z+
    289c:	f4 91       	lpm	r31, Z
    289e:	e0 2d       	mov	r30, r0
    28a0:	09 94       	ijmp

000028a2 <__umulhisi3>:
    28a2:	a2 9f       	mul	r26, r18
    28a4:	b0 01       	movw	r22, r0
    28a6:	b3 9f       	mul	r27, r19
    28a8:	c0 01       	movw	r24, r0
    28aa:	a3 9f       	mul	r26, r19
    28ac:	70 0d       	add	r23, r0
    28ae:	81 1d       	adc	r24, r1
    28b0:	11 24       	eor	r1, r1
    28b2:	91 1d       	adc	r25, r1
    28b4:	b2 9f       	mul	r27, r18
    28b6:	70 0d       	add	r23, r0
    28b8:	81 1d       	adc	r24, r1
    28ba:	11 24       	eor	r1, r1
    28bc:	91 1d       	adc	r25, r1
    28be:	08 95       	ret

000028c0 <malloc>:
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
    28c4:	82 30       	cpi	r24, 0x02	; 2
    28c6:	91 05       	cpc	r25, r1
    28c8:	10 f4       	brcc	.+4      	; 0x28ce <malloc+0xe>
    28ca:	82 e0       	ldi	r24, 0x02	; 2
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	e0 91 b5 03 	lds	r30, 0x03B5
    28d2:	f0 91 b6 03 	lds	r31, 0x03B6
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	a0 e0       	ldi	r26, 0x00	; 0
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	30 97       	sbiw	r30, 0x00	; 0
    28e0:	39 f1       	breq	.+78     	; 0x2930 <malloc+0x70>
    28e2:	40 81       	ld	r20, Z
    28e4:	51 81       	ldd	r21, Z+1	; 0x01
    28e6:	48 17       	cp	r20, r24
    28e8:	59 07       	cpc	r21, r25
    28ea:	b8 f0       	brcs	.+46     	; 0x291a <malloc+0x5a>
    28ec:	48 17       	cp	r20, r24
    28ee:	59 07       	cpc	r21, r25
    28f0:	71 f4       	brne	.+28     	; 0x290e <malloc+0x4e>
    28f2:	82 81       	ldd	r24, Z+2	; 0x02
    28f4:	93 81       	ldd	r25, Z+3	; 0x03
    28f6:	10 97       	sbiw	r26, 0x00	; 0
    28f8:	29 f0       	breq	.+10     	; 0x2904 <malloc+0x44>
    28fa:	13 96       	adiw	r26, 0x03	; 3
    28fc:	9c 93       	st	X, r25
    28fe:	8e 93       	st	-X, r24
    2900:	12 97       	sbiw	r26, 0x02	; 2
    2902:	2c c0       	rjmp	.+88     	; 0x295c <malloc+0x9c>
    2904:	90 93 b6 03 	sts	0x03B6, r25
    2908:	80 93 b5 03 	sts	0x03B5, r24
    290c:	27 c0       	rjmp	.+78     	; 0x295c <malloc+0x9c>
    290e:	21 15       	cp	r18, r1
    2910:	31 05       	cpc	r19, r1
    2912:	31 f0       	breq	.+12     	; 0x2920 <malloc+0x60>
    2914:	42 17       	cp	r20, r18
    2916:	53 07       	cpc	r21, r19
    2918:	18 f0       	brcs	.+6      	; 0x2920 <malloc+0x60>
    291a:	a9 01       	movw	r20, r18
    291c:	db 01       	movw	r26, r22
    291e:	01 c0       	rjmp	.+2      	; 0x2922 <malloc+0x62>
    2920:	ef 01       	movw	r28, r30
    2922:	9a 01       	movw	r18, r20
    2924:	bd 01       	movw	r22, r26
    2926:	df 01       	movw	r26, r30
    2928:	02 80       	ldd	r0, Z+2	; 0x02
    292a:	f3 81       	ldd	r31, Z+3	; 0x03
    292c:	e0 2d       	mov	r30, r0
    292e:	d7 cf       	rjmp	.-82     	; 0x28de <malloc+0x1e>
    2930:	21 15       	cp	r18, r1
    2932:	31 05       	cpc	r19, r1
    2934:	f9 f0       	breq	.+62     	; 0x2974 <malloc+0xb4>
    2936:	28 1b       	sub	r18, r24
    2938:	39 0b       	sbc	r19, r25
    293a:	24 30       	cpi	r18, 0x04	; 4
    293c:	31 05       	cpc	r19, r1
    293e:	80 f4       	brcc	.+32     	; 0x2960 <malloc+0xa0>
    2940:	8a 81       	ldd	r24, Y+2	; 0x02
    2942:	9b 81       	ldd	r25, Y+3	; 0x03
    2944:	61 15       	cp	r22, r1
    2946:	71 05       	cpc	r23, r1
    2948:	21 f0       	breq	.+8      	; 0x2952 <malloc+0x92>
    294a:	fb 01       	movw	r30, r22
    294c:	93 83       	std	Z+3, r25	; 0x03
    294e:	82 83       	std	Z+2, r24	; 0x02
    2950:	04 c0       	rjmp	.+8      	; 0x295a <malloc+0x9a>
    2952:	90 93 b6 03 	sts	0x03B6, r25
    2956:	80 93 b5 03 	sts	0x03B5, r24
    295a:	fe 01       	movw	r30, r28
    295c:	32 96       	adiw	r30, 0x02	; 2
    295e:	44 c0       	rjmp	.+136    	; 0x29e8 <malloc+0x128>
    2960:	fe 01       	movw	r30, r28
    2962:	e2 0f       	add	r30, r18
    2964:	f3 1f       	adc	r31, r19
    2966:	81 93       	st	Z+, r24
    2968:	91 93       	st	Z+, r25
    296a:	22 50       	subi	r18, 0x02	; 2
    296c:	31 09       	sbc	r19, r1
    296e:	39 83       	std	Y+1, r19	; 0x01
    2970:	28 83       	st	Y, r18
    2972:	3a c0       	rjmp	.+116    	; 0x29e8 <malloc+0x128>
    2974:	20 91 b3 03 	lds	r18, 0x03B3
    2978:	30 91 b4 03 	lds	r19, 0x03B4
    297c:	23 2b       	or	r18, r19
    297e:	41 f4       	brne	.+16     	; 0x2990 <malloc+0xd0>
    2980:	20 91 2d 01 	lds	r18, 0x012D
    2984:	30 91 2e 01 	lds	r19, 0x012E
    2988:	30 93 b4 03 	sts	0x03B4, r19
    298c:	20 93 b3 03 	sts	0x03B3, r18
    2990:	20 91 2b 01 	lds	r18, 0x012B
    2994:	30 91 2c 01 	lds	r19, 0x012C
    2998:	21 15       	cp	r18, r1
    299a:	31 05       	cpc	r19, r1
    299c:	41 f4       	brne	.+16     	; 0x29ae <malloc+0xee>
    299e:	2d b7       	in	r18, 0x3d	; 61
    29a0:	3e b7       	in	r19, 0x3e	; 62
    29a2:	40 91 2f 01 	lds	r20, 0x012F
    29a6:	50 91 30 01 	lds	r21, 0x0130
    29aa:	24 1b       	sub	r18, r20
    29ac:	35 0b       	sbc	r19, r21
    29ae:	e0 91 b3 03 	lds	r30, 0x03B3
    29b2:	f0 91 b4 03 	lds	r31, 0x03B4
    29b6:	e2 17       	cp	r30, r18
    29b8:	f3 07       	cpc	r31, r19
    29ba:	a0 f4       	brcc	.+40     	; 0x29e4 <malloc+0x124>
    29bc:	2e 1b       	sub	r18, r30
    29be:	3f 0b       	sbc	r19, r31
    29c0:	28 17       	cp	r18, r24
    29c2:	39 07       	cpc	r19, r25
    29c4:	78 f0       	brcs	.+30     	; 0x29e4 <malloc+0x124>
    29c6:	ac 01       	movw	r20, r24
    29c8:	4e 5f       	subi	r20, 0xFE	; 254
    29ca:	5f 4f       	sbci	r21, 0xFF	; 255
    29cc:	24 17       	cp	r18, r20
    29ce:	35 07       	cpc	r19, r21
    29d0:	48 f0       	brcs	.+18     	; 0x29e4 <malloc+0x124>
    29d2:	4e 0f       	add	r20, r30
    29d4:	5f 1f       	adc	r21, r31
    29d6:	50 93 b4 03 	sts	0x03B4, r21
    29da:	40 93 b3 03 	sts	0x03B3, r20
    29de:	81 93       	st	Z+, r24
    29e0:	91 93       	st	Z+, r25
    29e2:	02 c0       	rjmp	.+4      	; 0x29e8 <malloc+0x128>
    29e4:	e0 e0       	ldi	r30, 0x00	; 0
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	cf 01       	movw	r24, r30
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	08 95       	ret

000029f0 <free>:
    29f0:	cf 93       	push	r28
    29f2:	df 93       	push	r29
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	09 f4       	brne	.+2      	; 0x29fa <free+0xa>
    29f8:	87 c0       	rjmp	.+270    	; 0x2b08 <free+0x118>
    29fa:	fc 01       	movw	r30, r24
    29fc:	32 97       	sbiw	r30, 0x02	; 2
    29fe:	13 82       	std	Z+3, r1	; 0x03
    2a00:	12 82       	std	Z+2, r1	; 0x02
    2a02:	c0 91 b5 03 	lds	r28, 0x03B5
    2a06:	d0 91 b6 03 	lds	r29, 0x03B6
    2a0a:	20 97       	sbiw	r28, 0x00	; 0
    2a0c:	81 f4       	brne	.+32     	; 0x2a2e <free+0x3e>
    2a0e:	20 81       	ld	r18, Z
    2a10:	31 81       	ldd	r19, Z+1	; 0x01
    2a12:	28 0f       	add	r18, r24
    2a14:	39 1f       	adc	r19, r25
    2a16:	80 91 b3 03 	lds	r24, 0x03B3
    2a1a:	90 91 b4 03 	lds	r25, 0x03B4
    2a1e:	82 17       	cp	r24, r18
    2a20:	93 07       	cpc	r25, r19
    2a22:	79 f5       	brne	.+94     	; 0x2a82 <free+0x92>
    2a24:	f0 93 b4 03 	sts	0x03B4, r31
    2a28:	e0 93 b3 03 	sts	0x03B3, r30
    2a2c:	6d c0       	rjmp	.+218    	; 0x2b08 <free+0x118>
    2a2e:	de 01       	movw	r26, r28
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	ae 17       	cp	r26, r30
    2a36:	bf 07       	cpc	r27, r31
    2a38:	50 f4       	brcc	.+20     	; 0x2a4e <free+0x5e>
    2a3a:	12 96       	adiw	r26, 0x02	; 2
    2a3c:	4d 91       	ld	r20, X+
    2a3e:	5c 91       	ld	r21, X
    2a40:	13 97       	sbiw	r26, 0x03	; 3
    2a42:	9d 01       	movw	r18, r26
    2a44:	41 15       	cp	r20, r1
    2a46:	51 05       	cpc	r21, r1
    2a48:	09 f1       	breq	.+66     	; 0x2a8c <free+0x9c>
    2a4a:	da 01       	movw	r26, r20
    2a4c:	f3 cf       	rjmp	.-26     	; 0x2a34 <free+0x44>
    2a4e:	b3 83       	std	Z+3, r27	; 0x03
    2a50:	a2 83       	std	Z+2, r26	; 0x02
    2a52:	40 81       	ld	r20, Z
    2a54:	51 81       	ldd	r21, Z+1	; 0x01
    2a56:	84 0f       	add	r24, r20
    2a58:	95 1f       	adc	r25, r21
    2a5a:	8a 17       	cp	r24, r26
    2a5c:	9b 07       	cpc	r25, r27
    2a5e:	71 f4       	brne	.+28     	; 0x2a7c <free+0x8c>
    2a60:	8d 91       	ld	r24, X+
    2a62:	9c 91       	ld	r25, X
    2a64:	11 97       	sbiw	r26, 0x01	; 1
    2a66:	84 0f       	add	r24, r20
    2a68:	95 1f       	adc	r25, r21
    2a6a:	02 96       	adiw	r24, 0x02	; 2
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	80 83       	st	Z, r24
    2a70:	12 96       	adiw	r26, 0x02	; 2
    2a72:	8d 91       	ld	r24, X+
    2a74:	9c 91       	ld	r25, X
    2a76:	13 97       	sbiw	r26, 0x03	; 3
    2a78:	93 83       	std	Z+3, r25	; 0x03
    2a7a:	82 83       	std	Z+2, r24	; 0x02
    2a7c:	21 15       	cp	r18, r1
    2a7e:	31 05       	cpc	r19, r1
    2a80:	29 f4       	brne	.+10     	; 0x2a8c <free+0x9c>
    2a82:	f0 93 b6 03 	sts	0x03B6, r31
    2a86:	e0 93 b5 03 	sts	0x03B5, r30
    2a8a:	3e c0       	rjmp	.+124    	; 0x2b08 <free+0x118>
    2a8c:	d9 01       	movw	r26, r18
    2a8e:	13 96       	adiw	r26, 0x03	; 3
    2a90:	fc 93       	st	X, r31
    2a92:	ee 93       	st	-X, r30
    2a94:	12 97       	sbiw	r26, 0x02	; 2
    2a96:	4d 91       	ld	r20, X+
    2a98:	5d 91       	ld	r21, X+
    2a9a:	a4 0f       	add	r26, r20
    2a9c:	b5 1f       	adc	r27, r21
    2a9e:	ea 17       	cp	r30, r26
    2aa0:	fb 07       	cpc	r31, r27
    2aa2:	79 f4       	brne	.+30     	; 0x2ac2 <free+0xd2>
    2aa4:	80 81       	ld	r24, Z
    2aa6:	91 81       	ldd	r25, Z+1	; 0x01
    2aa8:	84 0f       	add	r24, r20
    2aaa:	95 1f       	adc	r25, r21
    2aac:	02 96       	adiw	r24, 0x02	; 2
    2aae:	d9 01       	movw	r26, r18
    2ab0:	11 96       	adiw	r26, 0x01	; 1
    2ab2:	9c 93       	st	X, r25
    2ab4:	8e 93       	st	-X, r24
    2ab6:	82 81       	ldd	r24, Z+2	; 0x02
    2ab8:	93 81       	ldd	r25, Z+3	; 0x03
    2aba:	13 96       	adiw	r26, 0x03	; 3
    2abc:	9c 93       	st	X, r25
    2abe:	8e 93       	st	-X, r24
    2ac0:	12 97       	sbiw	r26, 0x02	; 2
    2ac2:	e0 e0       	ldi	r30, 0x00	; 0
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	19 f0       	breq	.+6      	; 0x2ad4 <free+0xe4>
    2ace:	fe 01       	movw	r30, r28
    2ad0:	ec 01       	movw	r28, r24
    2ad2:	f9 cf       	rjmp	.-14     	; 0x2ac6 <free+0xd6>
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	02 96       	adiw	r24, 0x02	; 2
    2ad8:	28 81       	ld	r18, Y
    2ada:	39 81       	ldd	r19, Y+1	; 0x01
    2adc:	82 0f       	add	r24, r18
    2ade:	93 1f       	adc	r25, r19
    2ae0:	20 91 b3 03 	lds	r18, 0x03B3
    2ae4:	30 91 b4 03 	lds	r19, 0x03B4
    2ae8:	28 17       	cp	r18, r24
    2aea:	39 07       	cpc	r19, r25
    2aec:	69 f4       	brne	.+26     	; 0x2b08 <free+0x118>
    2aee:	30 97       	sbiw	r30, 0x00	; 0
    2af0:	29 f4       	brne	.+10     	; 0x2afc <free+0x10c>
    2af2:	10 92 b6 03 	sts	0x03B6, r1
    2af6:	10 92 b5 03 	sts	0x03B5, r1
    2afa:	02 c0       	rjmp	.+4      	; 0x2b00 <free+0x110>
    2afc:	13 82       	std	Z+3, r1	; 0x03
    2afe:	12 82       	std	Z+2, r1	; 0x02
    2b00:	d0 93 b4 03 	sts	0x03B4, r29
    2b04:	c0 93 b3 03 	sts	0x03B3, r28
    2b08:	df 91       	pop	r29
    2b0a:	cf 91       	pop	r28
    2b0c:	08 95       	ret

00002b0e <strrev>:
    2b0e:	dc 01       	movw	r26, r24
    2b10:	fc 01       	movw	r30, r24
    2b12:	67 2f       	mov	r22, r23
    2b14:	71 91       	ld	r23, Z+
    2b16:	77 23       	and	r23, r23
    2b18:	e1 f7       	brne	.-8      	; 0x2b12 <strrev+0x4>
    2b1a:	32 97       	sbiw	r30, 0x02	; 2
    2b1c:	04 c0       	rjmp	.+8      	; 0x2b26 <strrev+0x18>
    2b1e:	7c 91       	ld	r23, X
    2b20:	6d 93       	st	X+, r22
    2b22:	70 83       	st	Z, r23
    2b24:	62 91       	ld	r22, -Z
    2b26:	ae 17       	cp	r26, r30
    2b28:	bf 07       	cpc	r27, r31
    2b2a:	c8 f3       	brcs	.-14     	; 0x2b1e <strrev+0x10>
    2b2c:	08 95       	ret

00002b2e <__do_global_dtors>:
    2b2e:	10 e0       	ldi	r17, 0x00	; 0
    2b30:	cc ea       	ldi	r28, 0xAC	; 172
    2b32:	d0 e0       	ldi	r29, 0x00	; 0
    2b34:	04 c0       	rjmp	.+8      	; 0x2b3e <__do_global_dtors+0x10>
    2b36:	fe 01       	movw	r30, r28
    2b38:	0e 94 4d 14 	call	0x289a	; 0x289a <__tablejump__>
    2b3c:	22 96       	adiw	r28, 0x02	; 2
    2b3e:	ce 3a       	cpi	r28, 0xAE	; 174
    2b40:	d1 07       	cpc	r29, r17
    2b42:	c9 f7       	brne	.-14     	; 0x2b36 <__do_global_dtors+0x8>
    2b44:	f8 94       	cli

00002b46 <__stop_program>:
    2b46:	ff cf       	rjmp	.-2      	; 0x2b46 <__stop_program>
