
3pi-mazesolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00002b50  00002be4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026d  0080014a  0080014a  00002c2e  2**0
                  ALLOC
  3 .stab         00006624  00000000  00000000  00002c30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008bbc  00000000  00000000  00009254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00011e10  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  00011e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000018d1  00000000  00000000  00011f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007a9  00000000  00000000  00013821  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001101  00000000  00000000  00013fca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000284  00000000  00000000  000150cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000052e  00000000  00000000  00015350  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c87  00000000  00000000  0001587e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f0  00000000  00000000  00016505  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__dtors_end>
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      24:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__vector_9>
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      34:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__vector_13>
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      50:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <go>:
      76:	4c 31 36 20 63 64 65 67 72 65 67 34 00              L16 cdegreg4.

00000083 <welcome>:
      83:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000008d <demo_name_line2>:
      8d:	73 6f 6c 76 65 72 00                                solver.

00000094 <demo_name_line1>:
      94:	4d 61 7a 65 00                                      Maze.

00000099 <welcome_line2>:
      99:	33 f7 20 52 6f 62 6f 74 00                          3. Robot.

000000a2 <welcome_line1>:
      a2:	20 50 6f 6c 6f 6c 75 00                              Pololu.

000000aa <__ctors_start>:
      aa:	5b 0e       	add	r5, r27

000000ac <__ctors_end>:
      ac:	5c 0e       	add	r5, r28

000000ae <__dtors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	d8 e0       	ldi	r29, 0x08	; 8
      b6:	de bf       	out	0x3e, r29	; 62
      b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
      ba:	11 e0       	ldi	r17, 0x01	; 1
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	e0 e5       	ldi	r30, 0x50	; 80
      c2:	fb e2       	ldi	r31, 0x2B	; 43
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
      c6:	05 90       	lpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	aa 34       	cpi	r26, 0x4A	; 74
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
      d0:	23 e0       	ldi	r18, 0x03	; 3
      d2:	aa e4       	ldi	r26, 0x4A	; 74
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a7 3b       	cpi	r26, 0xB7	; 183
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>

000000e0 <__do_global_ctors>:
      e0:	10 e0       	ldi	r17, 0x00	; 0
      e2:	cc ea       	ldi	r28, 0xAC	; 172
      e4:	d0 e0       	ldi	r29, 0x00	; 0
      e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_global_ctors+0x10>
      e8:	22 97       	sbiw	r28, 0x02	; 2
      ea:	fe 01       	movw	r30, r28
      ec:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__tablejump__>
      f0:	ca 3a       	cpi	r28, 0xAA	; 170
      f2:	d1 07       	cpc	r29, r17
      f4:	c9 f7       	brne	.-14     	; 0xe8 <__do_global_ctors+0x8>
      f6:	0e 94 44 02 	call	0x488	; 0x488 <main>
      fa:	0c 94 9b 15 	jmp	0x2b36	; 0x2b36 <__do_global_dtors>

000000fe <__bad_interrupt>:
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <load_custom_characters>:

// This function loads custom characters into the LCD.  Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	88 e6       	ldi	r24, 0x68	; 104
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 12 0b 	call	0x1624	; 0x1624 <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
     10c:	61 e0       	ldi	r22, 0x01	; 1
     10e:	89 e6       	ldi	r24, 0x69	; 105
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 12 0b 	call	0x1624	; 0x1624 <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
     116:	62 e0       	ldi	r22, 0x02	; 2
     118:	8a e6       	ldi	r24, 0x6A	; 106
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 12 0b 	call	0x1624	; 0x1624 <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     120:	63 e0       	ldi	r22, 0x03	; 3
     122:	8b e6       	ldi	r24, 0x6B	; 107
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 12 0b 	call	0x1624	; 0x1624 <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     12a:	64 e0       	ldi	r22, 0x04	; 4
     12c:	8c e6       	ldi	r24, 0x6C	; 108
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 12 0b 	call	0x1624	; 0x1624 <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     134:	65 e0       	ldi	r22, 0x05	; 5
     136:	8d e6       	ldi	r24, 0x6D	; 109
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 12 0b 	call	0x1624	; 0x1624 <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     13e:	66 e0       	ldi	r22, 0x06	; 6
     140:	8e e6       	ldi	r24, 0x6E	; 110
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 12 0b 	call	0x1624	; 0x1624 <lcd_load_custom_character>
	clear(); // the LCD must be cleared for the characters to take effect
     148:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <clear>

0000014c <display_readings>:
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	2a 97       	sbiw	r28, 0x0a	; 10
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
     16c:	8c 01       	movw	r16, r24
	unsigned char i;

	for(i=0;i<5;i++) {
     16e:	d1 2c       	mov	r13, r1
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     170:	8a e0       	ldi	r24, 0x0A	; 10
     172:	c8 2e       	mov	r12, r24

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     174:	95 e6       	ldi	r25, 0x65	; 101
     176:	e9 2e       	mov	r14, r25
     178:	f1 2c       	mov	r15, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     17a:	e1 e3       	ldi	r30, 0x31	; 49
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	de 01       	movw	r26, r28
     180:	11 96       	adiw	r26, 0x01	; 1
     182:	8c 2d       	mov	r24, r12
     184:	01 90       	ld	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	8a 95       	dec	r24
     18a:	e1 f7       	brne	.-8      	; 0x184 <display_readings+0x38>

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     18c:	f8 01       	movw	r30, r16
     18e:	81 91       	ld	r24, Z+
     190:	91 91       	ld	r25, Z+
     192:	8f 01       	movw	r16, r30
     194:	b7 01       	movw	r22, r14
     196:	0e 94 a4 13 	call	0x2748	; 0x2748 <__udivmodhi4>
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	8c 0f       	add	r24, r28
     1a0:	9d 1f       	adc	r25, r29
     1a2:	68 0f       	add	r22, r24
     1a4:	79 1f       	adc	r23, r25

		// Display the bar graph character.
		print_character(c);
     1a6:	fb 01       	movw	r30, r22
     1a8:	80 81       	ld	r24, Z
     1aa:	0e 94 15 0b 	call	0x162a	; 0x162a <print_character>
// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     1ae:	d3 94       	inc	r13
     1b0:	f5 e0       	ldi	r31, 0x05	; 5
     1b2:	df 12       	cpse	r13, r31
     1b4:	e2 cf       	rjmp	.-60     	; 0x17a <display_readings+0x2e>
		char c = display_characters[calibrated_values[i]/101];

		// Display the bar graph character.
		print_character(c);
	}
}
     1b6:	2a 96       	adiw	r28, 0x0a	; 10
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	08 95       	ret

000001d4 <follow_segment>:
#include <pololu/3pi.h>

void follow_segment(int max)
{
     1d4:	2f 92       	push	r2
     1d6:	3f 92       	push	r3
     1d8:	4f 92       	push	r4
     1da:	5f 92       	push	r5
     1dc:	6f 92       	push	r6
     1de:	7f 92       	push	r7
     1e0:	8f 92       	push	r8
     1e2:	9f 92       	push	r9
     1e4:	af 92       	push	r10
     1e6:	bf 92       	push	r11
     1e8:	cf 92       	push	r12
     1ea:	df 92       	push	r13
     1ec:	ef 92       	push	r14
     1ee:	ff 92       	push	r15
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	2a 97       	sbiw	r28, 0x0a	; 10
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
     208:	8c 01       	movw	r16, r24
	int last_proportional = 0;
	long integral=0;
     20a:	c1 2c       	mov	r12, r1
     20c:	d1 2c       	mov	r13, r1
     20e:	76 01       	movw	r14, r12
#include <pololu/3pi.h>

void follow_segment(int max)
{
	int last_proportional = 0;
     210:	21 2c       	mov	r2, r1
     212:	31 2c       	mov	r3, r1
		int derivative = proportional - last_proportional;
		integral += proportional;

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     214:	50 e1       	ldi	r21, 0x10	; 16
     216:	45 2e       	mov	r4, r21
     218:	57 e2       	ldi	r21, 0x27	; 39
     21a:	55 2e       	mov	r5, r21
     21c:	61 2c       	mov	r6, r1
     21e:	71 2c       	mov	r7, r1

		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
     220:	88 24       	eor	r8, r8
     222:	99 24       	eor	r9, r9
     224:	88 1a       	sub	r8, r24
     226:	99 0a       	sbc	r9, r25
	long integral=0;

	while(1)
	{
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	ce 01       	movw	r24, r28
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <read_line>

		int proportional = ((int)position) - 2000;
     232:	80 5d       	subi	r24, 0xD0	; 208
     234:	97 40       	sbci	r25, 0x07	; 7
     236:	5c 01       	movw	r10, r24

		int derivative = proportional - last_proportional;
		integral += proportional;
     238:	aa 27       	eor	r26, r26
     23a:	97 fd       	sbrc	r25, 7
     23c:	a0 95       	com	r26
     23e:	ba 2f       	mov	r27, r26
     240:	c8 0e       	add	r12, r24
     242:	d9 1e       	adc	r13, r25
     244:	ea 1e       	adc	r14, r26
     246:	fb 1e       	adc	r15, r27

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     248:	c7 01       	movw	r24, r14
     24a:	b6 01       	movw	r22, r12
     24c:	a3 01       	movw	r20, r6
     24e:	92 01       	movw	r18, r4
     250:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__divmodsi4>
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);

		int proportional = ((int)position) - 2000;

		int derivative = proportional - last_proportional;
     254:	b5 01       	movw	r22, r10
     256:	62 19       	sub	r22, r2
     258:	73 09       	sbc	r23, r3
		integral += proportional;

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     25a:	cb 01       	movw	r24, r22
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	86 0f       	add	r24, r22
     262:	97 1f       	adc	r25, r23
     264:	97 fd       	sbrc	r25, 7
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	fc 01       	movw	r30, r24
     26a:	f5 95       	asr	r31
     26c:	e7 95       	ror	r30
     26e:	e2 0f       	add	r30, r18
     270:	f3 1f       	adc	r31, r19
     272:	c5 01       	movw	r24, r10
     274:	64 e1       	ldi	r22, 0x14	; 20
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	0e 94 b8 13 	call	0x2770	; 0x2770 <__divmodhi4>
     27c:	e6 0f       	add	r30, r22
     27e:	f7 1f       	adc	r31, r23
     280:	0e 17       	cp	r16, r30
     282:	1f 07       	cpc	r17, r31
     284:	0c f4       	brge	.+2      	; 0x288 <follow_segment+0xb4>
     286:	f8 01       	movw	r30, r16
     288:	cf 01       	movw	r24, r30
     28a:	e8 15       	cp	r30, r8
     28c:	f9 05       	cpc	r31, r9
     28e:	0c f4       	brge	.+2      	; 0x292 <follow_segment+0xbe>
     290:	c4 01       	movw	r24, r8
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
     292:	b8 01       	movw	r22, r16
		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
		
		if(power_difference < 0)
     294:	97 ff       	sbrs	r25, 7
     296:	03 c0       	rjmp	.+6      	; 0x29e <follow_segment+0xca>
			set_motors(max+power_difference,max);
     298:	80 0f       	add	r24, r16
     29a:	91 1f       	adc	r25, r17
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <follow_segment+0xd0>
		else
			set_motors(max,max-power_difference);
     29e:	68 1b       	sub	r22, r24
     2a0:	79 0b       	sbc	r23, r25
     2a2:	c8 01       	movw	r24, r16
     2a4:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>

		if(sensors[1] < 100 && sensors[2] < 100 && sensors[3] < 100)
     2a8:	8b 81       	ldd	r24, Y+3	; 0x03
     2aa:	9c 81       	ldd	r25, Y+4	; 0x04
     2ac:	84 36       	cpi	r24, 0x64	; 100
     2ae:	91 05       	cpc	r25, r1
     2b0:	50 f4       	brcc	.+20     	; 0x2c6 <follow_segment+0xf2>
     2b2:	8d 81       	ldd	r24, Y+5	; 0x05
     2b4:	9e 81       	ldd	r25, Y+6	; 0x06
     2b6:	84 36       	cpi	r24, 0x64	; 100
     2b8:	91 05       	cpc	r25, r1
     2ba:	28 f4       	brcc	.+10     	; 0x2c6 <follow_segment+0xf2>
     2bc:	8f 81       	ldd	r24, Y+7	; 0x07
     2be:	98 85       	ldd	r25, Y+8	; 0x08
     2c0:	84 36       	cpi	r24, 0x64	; 100
     2c2:	91 05       	cpc	r25, r1
     2c4:	60 f0       	brcs	.+24     	; 0x2de <follow_segment+0x10a>
		{
			return;
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ca:	89 3c       	cpi	r24, 0xC9	; 201
     2cc:	91 05       	cpc	r25, r1
     2ce:	38 f4       	brcc	.+14     	; 0x2de <follow_segment+0x10a>
     2d0:	89 85       	ldd	r24, Y+9	; 0x09
     2d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     2d4:	89 3c       	cpi	r24, 0xC9	; 201
     2d6:	91 05       	cpc	r25, r1
     2d8:	10 f4       	brcc	.+4      	; 0x2de <follow_segment+0x10a>
		int proportional = ((int)position) - 2000;

		int derivative = proportional - last_proportional;
		integral += proportional;

		last_proportional = proportional;
     2da:	15 01       	movw	r2, r10
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
		{
			return;
		}
	}
     2dc:	a5 cf       	rjmp	.-182    	; 0x228 <follow_segment+0x54>
     2de:	2a 96       	adiw	r28, 0x0a	; 10
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	df 90       	pop	r13
     2f8:	cf 90       	pop	r12
     2fa:	bf 90       	pop	r11
     2fc:	af 90       	pop	r10
     2fe:	9f 90       	pop	r9
     300:	8f 90       	pop	r8
     302:	7f 90       	pop	r7
     304:	6f 90       	pop	r6
     306:	5f 90       	pop	r5
     308:	4f 90       	pop	r4
     30a:	3f 90       	pop	r3
     30c:	2f 90       	pop	r2
     30e:	08 95       	ret

00000310 <initialize>:

const char welcome[] PROGMEM = ">g32>>c32";
const char go[] PROGMEM = "L16 cdegreg4";

void initialize()
{
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	2a 97       	sbiw	r28, 0x0a	; 10
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
	unsigned int counter; 
	unsigned int sensors[5]; 
	
	pololu_3pi_init(2000);
     328:	80 ed       	ldi	r24, 0xD0	; 208
     32a:	97 e0       	ldi	r25, 0x07	; 7
     32c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <pololu_3pi_init>
	load_custom_characters();
     330:	0e 94 81 00 	call	0x102	; 0x102 <load_custom_characters>
	
	print_from_program_space(welcome_line1);
     334:	82 ea       	ldi	r24, 0xA2	; 162
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 ba 0b 	call	0x1774	; 0x1774 <print_from_program_space>
	lcd_goto_xy(0,1);
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	0e 94 3a 0c 	call	0x1874	; 0x1874 <lcd_goto_xy>
	print_from_program_space(welcome_line2);
     344:	89 e9       	ldi	r24, 0x99	; 153
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 ba 0b 	call	0x1774	; 0x1774 <print_from_program_space>
	play_from_program_space(welcome);
     34c:	83 e8       	ldi	r24, 0x83	; 131
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 4f 0a 	call	0x149e	; 0x149e <play_from_program_space>
	delay_ms(1000);
     354:	88 ee       	ldi	r24, 0xE8	; 232
     356:	93 e0       	ldi	r25, 0x03	; 3
     358:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>

	clear();
     35c:	0e 94 92 0b 	call	0x1724	; 0x1724 <clear>
	print_from_program_space(demo_name_line1);
     360:	84 e9       	ldi	r24, 0x94	; 148
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 ba 0b 	call	0x1774	; 0x1774 <print_from_program_space>
	lcd_goto_xy(0,1);
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <lcd_goto_xy>
	print_from_program_space(demo_name_line2);
     370:	8d e8       	ldi	r24, 0x8D	; 141
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 ba 0b 	call	0x1774	; 0x1774 <print_from_program_space>
	delay_ms(1000);
     378:	88 ee       	ldi	r24, 0xE8	; 232
     37a:	93 e0       	ldi	r25, 0x03	; 3
		print_long(bat);
		print("mV");
		lcd_goto_xy(0,1);
		print("Press B");

		delay_ms(100);
     37c:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
	print_from_program_space(demo_name_line1);
	lcd_goto_xy(0,1);
	print_from_program_space(demo_name_line2);
	delay_ms(1000);

	while(!button_is_pressed(BUTTON_B))
     380:	80 e1       	ldi	r24, 0x10	; 16
     382:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <button_is_pressed>
     386:	81 11       	cpse	r24, r1
     388:	1b c0       	rjmp	.+54     	; 0x3c0 <initialize+0xb0>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     38a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <read_battery_millivolts_3pi>
     38e:	8c 01       	movw	r16, r24
	{
		int bat = read_battery_millivolts();

		clear();
     390:	0e 94 92 0b 	call	0x1724	; 0x1724 <clear>
		print_long(bat);
     394:	b8 01       	movw	r22, r16
     396:	88 27       	eor	r24, r24
     398:	77 fd       	sbrc	r23, 7
     39a:	80 95       	com	r24
     39c:	98 2f       	mov	r25, r24
     39e:	0e 94 17 0c 	call	0x182e	; 0x182e <print_long>
		print("mV");
     3a2:	8b e3       	ldi	r24, 0x3B	; 59
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 a9 0b 	call	0x1752	; 0x1752 <print>
		lcd_goto_xy(0,1);
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 3a 0c 	call	0x1874	; 0x1874 <lcd_goto_xy>
		print("Press B");
     3b2:	8e e3       	ldi	r24, 0x3E	; 62
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	0e 94 a9 0b 	call	0x1752	; 0x1752 <print>

		delay_ms(100);
     3ba:	84 e6       	ldi	r24, 0x64	; 100
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	de cf       	rjmp	.-68     	; 0x37c <initialize+0x6c>
	}

	wait_for_button_release(BUTTON_B);
     3c0:	80 e1       	ldi	r24, 0x10	; 16
     3c2:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <wait_for_button_release>
	delay_ms(1000);
     3c6:	88 ee       	ldi	r24, 0xE8	; 232
     3c8:	93 e0       	ldi	r25, 0x03	; 3
     3ca:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
     3ce:	0c ee       	ldi	r16, 0xEC	; 236
     3d0:	1f ef       	ldi	r17, 0xFF	; 255

	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     3d2:	08 32       	cpi	r16, 0x28	; 40
     3d4:	11 05       	cpc	r17, r1
     3d6:	28 f0       	brcs	.+10     	; 0x3e2 <initialize+0xd2>
			set_motors(40,-40);
     3d8:	68 ed       	ldi	r22, 0xD8	; 216
     3da:	7f ef       	ldi	r23, 0xFF	; 255
     3dc:	88 e2       	ldi	r24, 0x28	; 40
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <initialize+0xda>
		else
			set_motors(-40,40);
     3e2:	68 e2       	ldi	r22, 0x28	; 40
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	88 ed       	ldi	r24, 0xD8	; 216
     3e8:	9f ef       	ldi	r25, 0xFF	; 255
     3ea:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <calibrate_line_sensors>
		delay_ms(20);
     3f4:	84 e1       	ldi	r24, 0x14	; 20
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
     3fc:	0f 5f       	subi	r16, 0xFF	; 255
     3fe:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	for(counter=0;counter<80;counter++)
     400:	0c 33       	cpi	r16, 0x3C	; 60
     402:	11 05       	cpc	r17, r1
     404:	31 f7       	brne	.-52     	; 0x3d2 <initialize+0xc2>
		else
			set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	set_motors(0,0);
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>

	while(!button_is_pressed(BUTTON_B))
     412:	80 e1       	ldi	r24, 0x10	; 16
     414:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <button_is_pressed>
     418:	81 11       	cpse	r24, r1
     41a:	1a c0       	rjmp	.+52     	; 0x450 <initialize+0x140>
	{
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <read_line>
     426:	8c 01       	movw	r16, r24

		clear();
     428:	0e 94 92 0b 	call	0x1724	; 0x1724 <clear>
		print_long(position);
     42c:	b8 01       	movw	r22, r16
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 17 0c 	call	0x182e	; 0x182e <print_long>
		lcd_goto_xy(0,1);
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <lcd_goto_xy>
		display_readings(sensors);
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	0e 94 a6 00 	call	0x14c	; 0x14c <display_readings>

		delay_ms(100);
     446:	84 e6       	ldi	r24, 0x64	; 100
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
     44e:	e1 cf       	rjmp	.-62     	; 0x412 <initialize+0x102>
	}
	wait_for_button_release(BUTTON_B);
     450:	80 e1       	ldi	r24, 0x10	; 16
     452:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <wait_for_button_release>

	clear();
     456:	0e 94 92 0b 	call	0x1724	; 0x1724 <clear>

	print("Go!");		
     45a:	86 e4       	ldi	r24, 0x46	; 70
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <print>

	play_from_program_space(go);
     462:	86 e7       	ldi	r24, 0x76	; 118
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 4f 0a 	call	0x149e	; 0x149e <play_from_program_space>
	while(is_playing());
     46a:	0e 94 3e 0a 	call	0x147c	; 0x147c <is_playing>
     46e:	81 11       	cpse	r24, r1
     470:	fc cf       	rjmp	.-8      	; 0x46a <initialize+0x15a>
}
     472:	2a 96       	adiw	r28, 0x0a	; 10
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	08 95       	ret

00000488 <main>:


int main()
{
	initialize();//3pi initialization
     488:	0e 94 88 01 	call	0x310	; 0x310 <initialize>
	
	maze_solve(170); //std 160
     48c:	8a ea       	ldi	r24, 0xAA	; 170
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 51 03 	call	0x6a2	; 0x6a2 <maze_solve>
     494:	ff cf       	rjmp	.-2      	; 0x494 <main+0xc>

00000496 <sensor_data>:
uint16_t  node_number = 0;



uint8_t sensor_data(void)
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	2a 97       	sbiw	r28, 0x0a	; 10
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5], edge_th = 400, line_th = 300;
	uint8_t sn_dta = 0x00;
	read_line(sensors,IR_EMITTERS_ON);
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	ce 01       	movw	r24, r28
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <read_line>
	if (sensors[0] > edge_th)	sn_dta |= (1<<4);
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	81 39       	cpi	r24, 0x91	; 145
     4ba:	91 40       	sbci	r25, 0x01	; 1
     4bc:	10 f0       	brcs	.+4      	; 0x4c2 <sensor_data+0x2c>
     4be:	80 e1       	ldi	r24, 0x10	; 16
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <sensor_data+0x2e>
	else						sn_dta &= ~(1<<4);
     4c2:	80 e0       	ldi	r24, 0x00	; 0
	if (sensors[1] > line_th)	sn_dta |= (1<<3);
     4c4:	2b 81       	ldd	r18, Y+3	; 0x03
     4c6:	3c 81       	ldd	r19, Y+4	; 0x04
     4c8:	2d 32       	cpi	r18, 0x2D	; 45
     4ca:	31 40       	sbci	r19, 0x01	; 1
     4cc:	10 f0       	brcs	.+4      	; 0x4d2 <sensor_data+0x3c>
     4ce:	88 60       	ori	r24, 0x08	; 8
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <sensor_data+0x3e>
	else						sn_dta &= ~(1<<3);
     4d2:	87 7f       	andi	r24, 0xF7	; 247
	if (sensors[2] > line_th)	sn_dta |= (1<<2);
     4d4:	2d 81       	ldd	r18, Y+5	; 0x05
     4d6:	3e 81       	ldd	r19, Y+6	; 0x06
     4d8:	2d 32       	cpi	r18, 0x2D	; 45
     4da:	31 40       	sbci	r19, 0x01	; 1
     4dc:	10 f0       	brcs	.+4      	; 0x4e2 <sensor_data+0x4c>
     4de:	84 60       	ori	r24, 0x04	; 4
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <sensor_data+0x4e>
	else						sn_dta &= ~(1<<2);
     4e2:	8b 7f       	andi	r24, 0xFB	; 251
	if (sensors[3] > line_th)	sn_dta |= (1<<1);
     4e4:	2f 81       	ldd	r18, Y+7	; 0x07
     4e6:	38 85       	ldd	r19, Y+8	; 0x08
     4e8:	2d 32       	cpi	r18, 0x2D	; 45
     4ea:	31 40       	sbci	r19, 0x01	; 1
     4ec:	10 f0       	brcs	.+4      	; 0x4f2 <sensor_data+0x5c>
     4ee:	82 60       	ori	r24, 0x02	; 2
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <sensor_data+0x5e>
	else						sn_dta &= ~(1<<1);
     4f2:	8d 7f       	andi	r24, 0xFD	; 253
	if (sensors[4] > edge_th)	sn_dta |= (1<<0);
     4f4:	29 85       	ldd	r18, Y+9	; 0x09
     4f6:	3a 85       	ldd	r19, Y+10	; 0x0a
     4f8:	21 39       	cpi	r18, 0x91	; 145
     4fa:	31 40       	sbci	r19, 0x01	; 1
     4fc:	10 f0       	brcs	.+4      	; 0x502 <sensor_data+0x6c>
     4fe:	81 60       	ori	r24, 0x01	; 1
     500:	01 c0       	rjmp	.+2      	; 0x504 <sensor_data+0x6e>
	else						sn_dta &= ~(1<<0);
     502:	8e 7f       	andi	r24, 0xFE	; 254
	
	return sn_dta;
}
     504:	2a 96       	adiw	r28, 0x0a	; 10
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <sensor_data_verified>:

uint8_t sensor_data_verified(void)
{
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
void time_reset(void);

// This is inline for efficiency:
static inline void delay_us(unsigned int microseconds)
{
  __asm__ volatile (
     51c:	c4 e1       	ldi	r28, 0x14	; 20
     51e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t snsr_data;
re_data:
	snsr_data = sensor_data();
     520:	0e 94 4b 02 	call	0x496	; 0x496 <sensor_data>
     524:	18 2f       	mov	r17, r24
     526:	fe 01       	movw	r30, r28
     528:	6f 93       	push	r22
     52a:	64 e0       	ldi	r22, 0x04	; 4
     52c:	6a 95       	dec	r22
     52e:	f1 f7       	brne	.-4      	; 0x52c <sensor_data_verified+0x16>
     530:	6f 91       	pop	r22
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	c9 f7       	brne	.-14     	; 0x528 <sensor_data_verified+0x12>
	delay_us(20);
	if (snsr_data == sensor_data())
     536:	0e 94 4b 02 	call	0x496	; 0x496 <sensor_data>
     53a:	18 13       	cpse	r17, r24
     53c:	f1 cf       	rjmp	.-30     	; 0x520 <sensor_data_verified+0xa>
	{
		return snsr_data;
	}
	else goto re_data;
}
     53e:	81 2f       	mov	r24, r17
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	08 95       	ret

00000548 <process_u>:


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
			{
				directions_solved[i-1] = 's';
     54c:	43 e7       	ldi	r20, 0x73	; 115
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'r';
     54e:	52 e7       	ldi	r21, 0x72	; 114
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
			{
				directions_solved[i-1] = 'l';
     550:	6c e6       	ldi	r22, 0x6C	; 108


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     552:	dc 01       	movw	r26, r24
     554:	a1 54       	subi	r26, 0x41	; 65
     556:	be 4f       	sbci	r27, 0xFE	; 254
     558:	2c 91       	ld	r18, X
     55a:	22 23       	and	r18, r18
     55c:	e1 f1       	breq	.+120    	; 0x5d6 <process_u+0x8e>
	{
		if (directions_solved[i] == 'u')
     55e:	25 37       	cpi	r18, 0x75	; 117
     560:	c1 f5       	brne	.+112    	; 0x5d2 <process_u+0x8a>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
     562:	fc 01       	movw	r30, r24
     564:	e2 54       	subi	r30, 0x42	; 66
     566:	fe 4f       	sbci	r31, 0xFE	; 254
     568:	30 81       	ld	r19, Z
     56a:	32 37       	cpi	r19, 0x72	; 114
     56c:	29 f4       	brne	.+10     	; 0x578 <process_u+0x30>
     56e:	11 96       	adiw	r26, 0x01	; 1
     570:	3c 91       	ld	r19, X
     572:	33 37       	cpi	r19, 0x73	; 115
     574:	81 f4       	brne	.+32     	; 0x596 <process_u+0x4e>
     576:	06 c0       	rjmp	.+12     	; 0x584 <process_u+0x3c>
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
     578:	33 37       	cpi	r19, 0x73	; 115
     57a:	31 f4       	brne	.+12     	; 0x588 <process_u+0x40>
     57c:	11 96       	adiw	r26, 0x01	; 1
     57e:	3c 91       	ld	r19, X
     580:	32 37       	cpi	r19, 0x72	; 114
     582:	a1 f4       	brne	.+40     	; 0x5ac <process_u+0x64>
			{
				directions_solved[i-1] = 'l';
     584:	60 83       	st	Z, r22
     586:	19 c0       	rjmp	.+50     	; 0x5ba <process_u+0x72>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'r')
     588:	3c 36       	cpi	r19, 0x6C	; 108
     58a:	b9 f4       	brne	.+46     	; 0x5ba <process_u+0x72>
     58c:	11 96       	adiw	r26, 0x01	; 1
     58e:	3c 91       	ld	r19, X
     590:	32 37       	cpi	r19, 0x72	; 114
     592:	31 f4       	brne	.+12     	; 0x5a0 <process_u+0x58>
     594:	11 c0       	rjmp	.+34     	; 0x5b8 <process_u+0x70>
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'r')
     596:	32 37       	cpi	r19, 0x72	; 114
     598:	39 f0       	breq	.+14     	; 0x5a8 <process_u+0x60>
			{
				directions_solved[i-1] = 's';
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'l')
     59a:	3c 36       	cpi	r19, 0x6C	; 108
     59c:	71 f4       	brne	.+28     	; 0x5ba <process_u+0x72>
     59e:	0c c0       	rjmp	.+24     	; 0x5b8 <process_u+0x70>
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
     5a0:	33 37       	cpi	r19, 0x73	; 115
     5a2:	31 f0       	breq	.+12     	; 0x5b0 <process_u+0x68>
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
     5a4:	3c 36       	cpi	r19, 0x6C	; 108
     5a6:	49 f4       	brne	.+18     	; 0x5ba <process_u+0x72>
			{
				directions_solved[i-1] = 's';
     5a8:	40 83       	st	Z, r20
     5aa:	07 c0       	rjmp	.+14     	; 0x5ba <process_u+0x72>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'l')
     5ac:	3c 36       	cpi	r19, 0x6C	; 108
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <process_u+0x6c>
			{
				directions_solved[i-1] = 'r';
     5b0:	50 83       	st	Z, r21
     5b2:	03 c0       	rjmp	.+6      	; 0x5ba <process_u+0x72>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
     5b4:	33 37       	cpi	r19, 0x73	; 115
     5b6:	09 f4       	brne	.+2      	; 0x5ba <process_u+0x72>
			{
				directions_solved[i-1] = 'u';
     5b8:	20 83       	st	Z, r18
     5ba:	fc 01       	movw	r30, r24
     5bc:	e1 54       	subi	r30, 0x41	; 65
     5be:	fe 4f       	sbci	r31, 0xFE	; 254
			}

			
			while (directions_solved[i+2])
     5c0:	22 81       	ldd	r18, Z+2	; 0x02
     5c2:	22 23       	and	r18, r18
     5c4:	19 f0       	breq	.+6      	; 0x5cc <process_u+0x84>
			{
				directions_solved[i] = directions_solved[i+2];
     5c6:	20 83       	st	Z, r18
				i++;
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	f7 cf       	rjmp	.-18     	; 0x5ba <process_u+0x72>
			}
			directions_solved[i] = '\0';
     5cc:	10 82       	st	Z, r1
			i=0;
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	be cf       	rjmp	.-132    	; 0x552 <process_u+0xa>
			}
			directions_solved[i] = '\0';
			i=0;
		}
	}
}
     5d6:	08 95       	ret

000005d8 <process_array>:
		}
	}
}

void process_array(void)
{
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
     5e0:	8f eb       	ldi	r24, 0xBF	; 191
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <strrev>
     5e8:	ef eb       	ldi	r30, 0xBF	; 191
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
		{
			directions_solved[i] = 'r';
		}
		else if (directions_solved[i] == 'r')
		{
			directions_solved[i] = 'l';
     5ec:	9c e6       	ldi	r25, 0x6C	; 108
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'l')
		{
			directions_solved[i] = 'r';
     5ee:	22 e7       	ldi	r18, 0x72	; 114
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
	
	for (i=0;directions_solved[i];i++)
     5f0:	80 81       	ld	r24, Z
     5f2:	88 23       	and	r24, r24
     5f4:	49 f0       	breq	.+18     	; 0x608 <process_array+0x30>
	{
		if (directions_solved[i] == 'l')
     5f6:	8c 36       	cpi	r24, 0x6C	; 108
     5f8:	11 f4       	brne	.+4      	; 0x5fe <process_array+0x26>
		{
			directions_solved[i] = 'r';
     5fa:	20 83       	st	Z, r18
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <process_array+0x2c>
		}
		else if (directions_solved[i] == 'r')
     5fe:	82 37       	cpi	r24, 0x72	; 114
     600:	09 f4       	brne	.+2      	; 0x604 <process_array+0x2c>
		{
			directions_solved[i] = 'l';
     602:	90 83       	st	Z, r25
     604:	31 96       	adiw	r30, 0x01	; 1
     606:	f4 cf       	rjmp	.-24     	; 0x5f0 <process_array+0x18>
		}
	}
	
	while(1)
	{
		length_sln_prev = strlen(directions_solved);
     608:	0f eb       	ldi	r16, 0xBF	; 191
     60a:	11 e0       	ldi	r17, 0x01	; 1
     60c:	e8 01       	movw	r28, r16
     60e:	09 90       	ld	r0, Y+
     610:	00 20       	and	r0, r0
     612:	e9 f7       	brne	.-6      	; 0x60e <process_array+0x36>
     614:	21 97       	sbiw	r28, 0x01	; 1
     616:	cf 5b       	subi	r28, 0xBF	; 191
     618:	d1 40       	sbci	r29, 0x01	; 1
		
		process_u();
     61a:	0e 94 a4 02 	call	0x548	; 0x548 <process_u>
		
		//process_loop();
		
		if (length_sln_prev == strlen(directions_solved))
     61e:	f8 01       	movw	r30, r16
     620:	01 90       	ld	r0, Z+
     622:	00 20       	and	r0, r0
     624:	e9 f7       	brne	.-6      	; 0x620 <process_array+0x48>
     626:	31 97       	sbiw	r30, 0x01	; 1
     628:	ef 5b       	subi	r30, 0xBF	; 191
     62a:	f1 40       	sbci	r31, 0x01	; 1
     62c:	ce 17       	cp	r28, r30
     62e:	df 07       	cpc	r29, r31
     630:	69 f7       	brne	.-38     	; 0x60c <process_array+0x34>
		{
			break;
		}
	}
}
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret

0000063c <evaluate_direction>:


void evaluate_direction(uint16_t speed)
{
     63c:	bc 01       	movw	r22, r24
	char evaluation = 0;
	evaluation = directions_solved[node_number];
     63e:	80 91 bd 01 	lds	r24, 0x01BD
     642:	90 91 be 01 	lds	r25, 0x01BE
     646:	fc 01       	movw	r30, r24
     648:	e1 54       	subi	r30, 0x41	; 65
     64a:	fe 4f       	sbci	r31, 0xFE	; 254
     64c:	20 81       	ld	r18, Z
	node_number = node_number + 1;
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	90 93 be 01 	sts	0x01BE, r25
     654:	80 93 bd 01 	sts	0x01BD, r24
	
	if (evaluation == 's')
     658:	23 37       	cpi	r18, 0x73	; 115
     65a:	11 f4       	brne	.+4      	; 0x660 <evaluate_direction+0x24>
	{
		turn('S',speed);
     65c:	83 e5       	ldi	r24, 0x53	; 83
     65e:	0b c0       	rjmp	.+22     	; 0x676 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'u')
     660:	25 37       	cpi	r18, 0x75	; 117
     662:	11 f4       	brne	.+4      	; 0x668 <evaluate_direction+0x2c>
	{
		turn('U',speed);
     664:	85 e5       	ldi	r24, 0x55	; 85
     666:	07 c0       	rjmp	.+14     	; 0x676 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'l')
     668:	2c 36       	cpi	r18, 0x6C	; 108
     66a:	11 f4       	brne	.+4      	; 0x670 <evaluate_direction+0x34>
	{
		turn('L',speed);
     66c:	8c e4       	ldi	r24, 0x4C	; 76
     66e:	03 c0       	rjmp	.+6      	; 0x676 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'r')
     670:	22 37       	cpi	r18, 0x72	; 114
     672:	19 f4       	brne	.+6      	; 0x67a <evaluate_direction+0x3e>
	{
		turn('R',speed);
     674:	82 e5       	ldi	r24, 0x52	; 82
     676:	0c 94 c3 04 	jmp	0x986	; 0x986 <turn>
	}
	else
	{
		set_motors(0,0);
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
     686:	ff cf       	rjmp	.-2      	; 0x686 <evaluate_direction+0x4a>

00000688 <destination_operation>:
}


void destination_operation(int speed)
{
	directions_solved[node_number] = '\0';
     688:	e0 91 bd 01 	lds	r30, 0x01BD
     68c:	f0 91 be 01 	lds	r31, 0x01BE
     690:	e1 54       	subi	r30, 0x41	; 65
     692:	fe 4f       	sbci	r31, 0xFE	; 254
     694:	10 82       	st	Z, r1
	turn('D',speed);
     696:	bc 01       	movw	r22, r24
     698:	84 e4       	ldi	r24, 0x44	; 68
     69a:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
	process_array();
     69e:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <process_array>

000006a2 <maze_solve>:
}


void maze_solve(int speed)
{
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	1f 92       	push	r1
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	3c 01       	movw	r6, r24
	uint16_t destination = 0;
	const signed int speed_node = 100;
	char sensor_data_hold = 0, Right_trigged = 0, Left_trigged = 0, Forward_trigged = 0; 
     6ae:	a1 2c       	mov	r10, r1
     6b0:	91 2c       	mov	r9, r1
     6b2:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
			}
		}
		else if (sensor_data_hold == 0b00000) //-100
		{	
			directions_solved[node_number] = 'u';
     6b4:	85 e7       	ldi	r24, 0x75	; 117
     6b6:	e8 2e       	mov	r14, r24
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 'l';
     6b8:	9c e6       	ldi	r25, 0x6C	; 108
     6ba:	f9 2e       	mov	r15, r25
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 's';
     6bc:	23 e7       	ldi	r18, 0x73	; 115
     6be:	d2 2e       	mov	r13, r18
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
			{
				directions_solved[node_number] = 'r';
     6c0:	32 e7       	ldi	r19, 0x72	; 114
     6c2:	c3 2e       	mov	r12, r19
//****** Explore the path *****************************************************************************
///////////////////////////////////////////////////////////////////////////////////////////////////////

	while(1)
	{
		follow_segment(speed);
     6c4:	c3 01       	movw	r24, r6
     6c6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>
		
		sensor_data_hold = sensor_data_verified();
     6ca:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     6ce:	28 2f       	mov	r18, r24
		
		if(sensor_data_hold & 0b10000)  //left trigging 
     6d0:	84 ff       	sbrs	r24, 4
     6d2:	6e c0       	rjmp	.+220    	; 0x7b0 <maze_solve+0x10e>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     6d4:	64 e6       	ldi	r22, 0x64	; 100
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	84 e6       	ldi	r24, 0x64	; 100
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	29 83       	std	Y+1, r18	; 0x01
     6de:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
			destination = 0;
     6e2:	00 e0       	ldi	r16, 0x00	; 0
     6e4:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     6e6:	29 81       	ldd	r18, Y+1	; 0x01
     6e8:	21 71       	andi	r18, 0x11	; 17
     6ea:	c1 f0       	breq	.+48     	; 0x71c <maze_solve+0x7a>
			{
				sensor_data_hold = sensor_data_verified();
     6ec:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     6f0:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b00001) && (Right_trigged == 0))
     6f2:	80 ff       	sbrs	r24, 0
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <maze_solve+0x5c>
     6f6:	b1 10       	cpse	r11, r1
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <maze_solve+0x5c>
				{
					Right_trigged=1;
     6fa:	bb 24       	eor	r11, r11
     6fc:	b3 94       	inc	r11
				}
				if (sensor_data_hold == 0b11111)
     6fe:	2f 31       	cpi	r18, 0x1F	; 31
     700:	99 f7       	brne	.-26     	; 0x6e8 <maze_solve+0x46>
				{
					destination = destination + 1;
     702:	0f 5f       	subi	r16, 0xFF	; 255
     704:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     706:	03 33       	cpi	r16, 0x33	; 51
     708:	11 05       	cpc	r17, r1
     70a:	70 f3       	brcs	.-36     	; 0x6e8 <maze_solve+0x46>
					{
						destination = 0x00;
						destination_operation(speed);
     70c:	c3 01       	movw	r24, r6
     70e:	0e 94 44 03 	call	0x688	; 0x688 <destination_operation>
	//****** Follow the Solved path************************************************************************
	///////////////////////////////////////////////////////////////////////////////////////////////////////

solv_maze:

node_number = 0x00;
     712:	10 92 be 01 	sts	0x01BE, r1
     716:	10 92 bd 01 	sts	0x01BD, r1
     71a:	e0 c0       	rjmp	.+448    	; 0x8dc <maze_solve+0x23a>
						goto solv_maze;
					}
				}
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
     71c:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
			if (sensor_data_hold & 0b00100)
     720:	82 fd       	sbrc	r24, 2
     722:	1d c1       	rjmp	.+570    	; 0x95e <__stack+0x5f>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     724:	b1 10       	cpse	r11, r1
     726:	16 c0       	rjmp	.+44     	; 0x754 <maze_solve+0xb2>
     728:	a1 10       	cpse	r10, r1
     72a:	10 c0       	rjmp	.+32     	; 0x74c <maze_solve+0xaa>
			{
				directions_solved[node_number] = 'l';
     72c:	80 91 bd 01 	lds	r24, 0x01BD
     730:	90 91 be 01 	lds	r25, 0x01BE
     734:	fc 01       	movw	r30, r24
     736:	e1 54       	subi	r30, 0x41	; 65
     738:	fe 4f       	sbci	r31, 0xFE	; 254
     73a:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	90 93 be 01 	sts	0x01BE, r25
     742:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     746:	b3 01       	movw	r22, r6
     748:	8c e4       	ldi	r24, 0x4C	; 76
     74a:	bb c0       	rjmp	.+374    	; 0x8c2 <maze_solve+0x220>
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	a8 12       	cpse	r10, r24
     750:	b9 cf       	rjmp	.-142    	; 0x6c4 <maze_solve+0x22>
     752:	1b c0       	rjmp	.+54     	; 0x78a <maze_solve+0xe8>
				node_number = node_number + 1;
				turn('L',speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     754:	e1 e0       	ldi	r30, 0x01	; 1
     756:	be 12       	cpse	r11, r30
     758:	b5 cf       	rjmp	.-150    	; 0x6c4 <maze_solve+0x22>
     75a:	a1 10       	cpse	r10, r1
     75c:	13 c0       	rjmp	.+38     	; 0x784 <maze_solve+0xe2>
			{
				directions_solved[node_number] = 'l';
     75e:	80 91 bd 01 	lds	r24, 0x01BD
     762:	90 91 be 01 	lds	r25, 0x01BE
     766:	fc 01       	movw	r30, r24
     768:	e1 54       	subi	r30, 0x41	; 65
     76a:	fe 4f       	sbci	r31, 0xFE	; 254
     76c:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 be 01 	sts	0x01BE, r25
     774:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     778:	b3 01       	movw	r22, r6
     77a:	8c e4       	ldi	r24, 0x4C	; 76
     77c:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
				Right_trigged = 0;
     780:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
     782:	a0 cf       	rjmp	.-192    	; 0x6c4 <maze_solve+0x22>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
     784:	f1 e0       	ldi	r31, 0x01	; 1
     786:	af 12       	cpse	r10, r31
     788:	9d cf       	rjmp	.-198    	; 0x6c4 <maze_solve+0x22>
			{
				directions_solved[node_number] = 'l';
     78a:	80 91 bd 01 	lds	r24, 0x01BD
     78e:	90 91 be 01 	lds	r25, 0x01BE
     792:	fc 01       	movw	r30, r24
     794:	e1 54       	subi	r30, 0x41	; 65
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	90 93 be 01 	sts	0x01BE, r25
     7a0:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     7a4:	b3 01       	movw	r22, r6
     7a6:	8c e4       	ldi	r24, 0x4C	; 76
     7a8:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
				Right_trigged = 0;
				Forward_trigged = 0;
     7ac:	a1 2c       	mov	r10, r1
     7ae:	e8 cf       	rjmp	.-48     	; 0x780 <maze_solve+0xde>
			}
		}
		else if (sensor_data_hold & 0b00001) //right trigging
     7b0:	80 ff       	sbrs	r24, 0
     7b2:	76 c0       	rjmp	.+236    	; 0x8a0 <maze_solve+0x1fe>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     7b4:	64 e6       	ldi	r22, 0x64	; 100
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	84 e6       	ldi	r24, 0x64	; 100
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	29 83       	std	Y+1, r18	; 0x01
     7be:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
			destination = 0;
     7c2:	00 e0       	ldi	r16, 0x00	; 0
     7c4:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     7c6:	29 81       	ldd	r18, Y+1	; 0x01
     7c8:	21 71       	andi	r18, 0x11	; 17
     7ca:	89 f0       	breq	.+34     	; 0x7ee <maze_solve+0x14c>
			{
				sensor_data_hold = sensor_data_verified();
     7cc:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     7d0:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b10000) && (Left_trigged == 0))
     7d2:	84 ff       	sbrs	r24, 4
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <maze_solve+0x13c>
     7d6:	91 10       	cpse	r9, r1
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <maze_solve+0x13c>
				{
					Left_trigged=1;
     7da:	99 24       	eor	r9, r9
     7dc:	93 94       	inc	r9
				}
				if (sensor_data_hold == 0b11111)
     7de:	2f 31       	cpi	r18, 0x1F	; 31
     7e0:	99 f7       	brne	.-26     	; 0x7c8 <maze_solve+0x126>
				{
					destination = destination + 1;
     7e2:	0f 5f       	subi	r16, 0xFF	; 255
     7e4:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     7e6:	03 33       	cpi	r16, 0x33	; 51
     7e8:	11 05       	cpc	r17, r1
     7ea:	70 f3       	brcs	.-36     	; 0x7c8 <maze_solve+0x126>
     7ec:	8f cf       	rjmp	.-226    	; 0x70c <maze_solve+0x6a>
						goto solv_maze;
					}
				}
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
     7ee:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
			if (sensor_data_hold & 0b00100)
     7f2:	82 fd       	sbrc	r24, 2
     7f4:	b8 c0       	rjmp	.+368    	; 0x966 <__stack+0x67>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     7f6:	91 10       	cpse	r9, r1
     7f8:	25 c0       	rjmp	.+74     	; 0x844 <maze_solve+0x1a2>
     7fa:	a1 10       	cpse	r10, r1
     7fc:	10 c0       	rjmp	.+32     	; 0x81e <maze_solve+0x17c>
			{
				directions_solved[node_number] = 'r';
     7fe:	80 91 bd 01 	lds	r24, 0x01BD
     802:	90 91 be 01 	lds	r25, 0x01BE
     806:	fc 01       	movw	r30, r24
     808:	e1 54       	subi	r30, 0x41	; 65
     80a:	fe 4f       	sbci	r31, 0xFE	; 254
     80c:	c0 82       	st	Z, r12
				node_number = node_number + 1;
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	90 93 be 01 	sts	0x01BE, r25
     814:	80 93 bd 01 	sts	0x01BD, r24
				turn('R',speed);
     818:	b3 01       	movw	r22, r6
     81a:	82 e5       	ldi	r24, 0x52	; 82
     81c:	52 c0       	rjmp	.+164    	; 0x8c2 <maze_solve+0x220>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	a8 12       	cpse	r10, r24
     822:	50 cf       	rjmp	.-352    	; 0x6c4 <maze_solve+0x22>
			{
				directions_solved[node_number] = 's';
     824:	80 91 bd 01 	lds	r24, 0x01BD
     828:	90 91 be 01 	lds	r25, 0x01BE
     82c:	fc 01       	movw	r30, r24
     82e:	e1 54       	subi	r30, 0x41	; 65
     830:	fe 4f       	sbci	r31, 0xFE	; 254
     832:	d0 82       	st	Z, r13
				node_number = node_number + 1;
     834:	01 96       	adiw	r24, 0x01	; 1
     836:	90 93 be 01 	sts	0x01BE, r25
     83a:	80 93 bd 01 	sts	0x01BD, r24
				turn('S',speed);
     83e:	b3 01       	movw	r22, r6
     840:	83 e5       	ldi	r24, 0x53	; 83
     842:	29 c0       	rjmp	.+82     	; 0x896 <maze_solve+0x1f4>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     844:	e1 e0       	ldi	r30, 0x01	; 1
     846:	9e 12       	cpse	r9, r30
     848:	3d cf       	rjmp	.-390    	; 0x6c4 <maze_solve+0x22>
     84a:	a1 10       	cpse	r10, r1
     84c:	12 c0       	rjmp	.+36     	; 0x872 <maze_solve+0x1d0>
			{
				directions_solved[node_number] = 'l';
     84e:	80 91 bd 01 	lds	r24, 0x01BD
     852:	90 91 be 01 	lds	r25, 0x01BE
     856:	fc 01       	movw	r30, r24
     858:	e1 54       	subi	r30, 0x41	; 65
     85a:	fe 4f       	sbci	r31, 0xFE	; 254
     85c:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	90 93 be 01 	sts	0x01BE, r25
     864:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     868:	b3 01       	movw	r22, r6
     86a:	8c e4       	ldi	r24, 0x4C	; 76
     86c:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
     870:	15 c0       	rjmp	.+42     	; 0x89c <maze_solve+0x1fa>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	af 12       	cpse	r10, r31
     876:	26 cf       	rjmp	.-436    	; 0x6c4 <maze_solve+0x22>
			{
				directions_solved[node_number] = 'l';
     878:	80 91 bd 01 	lds	r24, 0x01BD
     87c:	90 91 be 01 	lds	r25, 0x01BE
     880:	fc 01       	movw	r30, r24
     882:	e1 54       	subi	r30, 0x41	; 65
     884:	fe 4f       	sbci	r31, 0xFE	; 254
     886:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	90 93 be 01 	sts	0x01BE, r25
     88e:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     892:	b3 01       	movw	r22, r6
     894:	8c e4       	ldi	r24, 0x4C	; 76
     896:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
				Left_trigged = 0;
				Forward_trigged = 0;
     89a:	a1 2c       	mov	r10, r1
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 'l';
				node_number = node_number + 1;
				turn('L',speed);
				Left_trigged = 0;
     89c:	91 2c       	mov	r9, r1
     89e:	12 cf       	rjmp	.-476    	; 0x6c4 <maze_solve+0x22>
				Forward_trigged = 0;
			}
		}
		else if (sensor_data_hold == 0b00000) //-100
     8a0:	81 11       	cpse	r24, r1
     8a2:	10 cf       	rjmp	.-480    	; 0x6c4 <maze_solve+0x22>
		{	
			directions_solved[node_number] = 'u';
     8a4:	80 91 bd 01 	lds	r24, 0x01BD
     8a8:	90 91 be 01 	lds	r25, 0x01BE
     8ac:	fc 01       	movw	r30, r24
     8ae:	e1 54       	subi	r30, 0x41	; 65
     8b0:	fe 4f       	sbci	r31, 0xFE	; 254
     8b2:	e0 82       	st	Z, r14
			node_number = node_number + 1;
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	90 93 be 01 	sts	0x01BE, r25
     8ba:	80 93 bd 01 	sts	0x01BD, r24
			turn('U',speed);
     8be:	b3 01       	movw	r22, r6
     8c0:	85 e5       	ldi	r24, 0x55	; 85
     8c2:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
     8c6:	fe ce       	rjmp	.-516    	; 0x6c4 <maze_solve+0x22>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
			destination = 0;
			while (sensor_data_hold & 0b10001)
			{
				sensor_data_hold = sensor_data_verified();
     8c8:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     8cc:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b00001) && (Right_trigged == 0))
				{
					Right_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
     8ce:	8f 31       	cpi	r24, 0x1F	; 31
     8d0:	c1 f0       	breq	.+48     	; 0x902 <__stack+0x3>
		
		if(sensor_data_hold & 0b10000)  //left trigging 
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
			destination = 0;
			while (sensor_data_hold & 0b10001)
     8d2:	21 71       	andi	r18, 0x11	; 17
     8d4:	c9 f7       	brne	.-14     	; 0x8c8 <maze_solve+0x226>
						set_motors(0,0);
						while(1);
					}
				}
			}
			evaluate_direction(speed);
     8d6:	c3 01       	movw	r24, r6
     8d8:	0e 94 1e 03 	call	0x63c	; 0x63c <evaluate_direction>

node_number = 0x00;

	while(1)
	{
		follow_segment(speed);
     8dc:	c3 01       	movw	r24, r6
     8de:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>
		
		sensor_data_hold = sensor_data_verified();
     8e2:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     8e6:	28 2f       	mov	r18, r24
		
		if(sensor_data_hold & 0b10000)  //left trigging 
     8e8:	84 ff       	sbrs	r24, 4
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__stack+0x1b>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     8ec:	64 e6       	ldi	r22, 0x64	; 100
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	84 e6       	ldi	r24, 0x64	; 100
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	29 83       	std	Y+1, r18	; 0x01
     8f6:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
			destination = 0;
     8fa:	00 e0       	ldi	r16, 0x00	; 0
     8fc:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     8fe:	29 81       	ldd	r18, Y+1	; 0x01
     900:	e8 cf       	rjmp	.-48     	; 0x8d2 <maze_solve+0x230>
				{
					Right_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
				{
					destination = destination + 1;
     902:	0f 5f       	subi	r16, 0xFF	; 255
     904:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     906:	03 33       	cpi	r16, 0x33	; 51
     908:	11 05       	cpc	r17, r1
     90a:	18 f3       	brcs	.-58     	; 0x8d2 <maze_solve+0x230>
					{
						set_motors(0,0);
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
     918:	ff cf       	rjmp	.-2      	; 0x918 <__stack+0x19>
					}
				}
			}
			evaluate_direction(speed);
		}
		else if (sensor_data_hold & 0b00001) //right trigging
     91a:	80 ff       	sbrs	r24, 0
     91c:	1d c0       	rjmp	.+58     	; 0x958 <__stack+0x59>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     91e:	64 e6       	ldi	r22, 0x64	; 100
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	84 e6       	ldi	r24, 0x64	; 100
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	29 83       	std	Y+1, r18	; 0x01
     928:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
			destination = 0;
     92c:	00 e0       	ldi	r16, 0x00	; 0
     92e:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     930:	29 81       	ldd	r18, Y+1	; 0x01
     932:	21 71       	andi	r18, 0x11	; 17
     934:	81 f2       	breq	.-96     	; 0x8d6 <maze_solve+0x234>
			{
				sensor_data_hold = sensor_data_verified();
     936:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     93a:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b10000) && (Left_trigged == 0))
				{
					Left_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
     93c:	8f 31       	cpi	r24, 0x1F	; 31
     93e:	c9 f7       	brne	.-14     	; 0x932 <__stack+0x33>
				{
					destination = destination + 1;
     940:	0f 5f       	subi	r16, 0xFF	; 255
     942:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     944:	03 33       	cpi	r16, 0x33	; 51
     946:	11 05       	cpc	r17, r1
     948:	a0 f3       	brcs	.-24     	; 0x932 <__stack+0x33>
					{
						set_motors(0,0);
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
     956:	ff cf       	rjmp	.-2      	; 0x956 <__stack+0x57>
					}
				}
			}
			evaluate_direction(speed);
		}
		else if (sensor_data_hold == 0b00000) //-100
     958:	81 11       	cpse	r24, r1
     95a:	c0 cf       	rjmp	.-128    	; 0x8dc <maze_solve+0x23a>
     95c:	bc cf       	rjmp	.-136    	; 0x8d6 <maze_solve+0x234>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     95e:	bb 20       	and	r11, r11
     960:	09 f4       	brne	.+2      	; 0x964 <__stack+0x65>
     962:	13 cf       	rjmp	.-474    	; 0x78a <maze_solve+0xe8>
     964:	04 c0       	rjmp	.+8      	; 0x96e <__stack+0x6f>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     966:	99 20       	and	r9, r9
     968:	09 f4       	brne	.+2      	; 0x96c <__stack+0x6d>
     96a:	5c cf       	rjmp	.-328    	; 0x824 <maze_solve+0x182>
     96c:	05 c0       	rjmp	.+10     	; 0x978 <__stack+0x79>
				node_number = node_number + 1;
				turn('L',speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	b8 16       	cp	r11, r24
     972:	09 f4       	brne	.+2      	; 0x976 <__stack+0x77>
     974:	0a cf       	rjmp	.-492    	; 0x78a <maze_solve+0xe8>
     976:	04 c0       	rjmp	.+8      	; 0x980 <__stack+0x81>
				node_number = node_number + 1;
				turn('S',speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     978:	e1 e0       	ldi	r30, 0x01	; 1
     97a:	9e 16       	cp	r9, r30
     97c:	09 f4       	brne	.+2      	; 0x980 <__stack+0x81>
     97e:	7c cf       	rjmp	.-264    	; 0x878 <maze_solve+0x1d6>
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
			if (sensor_data_hold & 0b00100)
			{
				Forward_trigged = 1;
     980:	aa 24       	eor	r10, r10
     982:	a3 94       	inc	r10
     984:	9f ce       	rjmp	.-706    	; 0x6c4 <maze_solve+0x22>

00000986 <turn>:

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
	
	if (dir == 'L')
     986:	8c 34       	cpi	r24, 0x4C	; 76
     988:	09 f0       	breq	.+2      	; 0x98c <turn+0x6>
     98a:	41 c0       	rjmp	.+130    	; 0xa0e <turn+0x88>
	{
		delay_ms(17); //25
     98c:	81 e1       	ldi	r24, 0x11	; 17
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(0,0);
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(10);
     9a0:	8a e0       	ldi	r24, 0x0A	; 10
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(-200,-200);
     9a8:	68 e3       	ldi	r22, 0x38	; 56
     9aa:	7f ef       	ldi	r23, 0xFF	; 255
     9ac:	88 e3       	ldi	r24, 0x38	; 56
     9ae:	9f ef       	ldi	r25, 0xFF	; 255
     9b0:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(10);
     9b4:	8a e0       	ldi	r24, 0x0A	; 10
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(0,0);
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(10);
     9c8:	8a e0       	ldi	r24, 0x0A	; 10
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		
		set_motors(-90,90);
     9d0:	6a e5       	ldi	r22, 0x5A	; 90
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	86 ea       	ldi	r24, 0xA6	; 166
     9d6:	9f ef       	ldi	r25, 0xFF	; 255
     9d8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     9dc:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(10);
		
		set_motors(-90,90);
		
		while(!(sensor_data_save & 0b10000))
     9de:	84 fd       	sbrc	r24, 4
     9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <turn+0x62>
		{
			sensor_data_save = sensor_data_verified();
     9e2:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     9e6:	fb cf       	rjmp	.-10     	; 0x9de <turn+0x58>
		}
		while(sensor_data_save & 0b10000)
     9e8:	84 ff       	sbrs	r24, 4
     9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <turn+0x6c>
		{
			sensor_data_save = sensor_data_verified();
     9ec:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     9f0:	fb cf       	rjmp	.-10     	; 0x9e8 <turn+0x62>
		}
		while(!(sensor_data_save & 0b00010))
     9f2:	81 fd       	sbrc	r24, 1
     9f4:	03 c0       	rjmp	.+6      	; 0x9fc <turn+0x76>
		{
			sensor_data_save = sensor_data_verified();
     9f6:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     9fa:	fb cf       	rjmp	.-10     	; 0x9f2 <turn+0x6c>
		}
		
		set_motors(0,0);
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(1); //30
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	9e c0       	rjmp	.+316    	; 0xb4a <turn+0x1c4>
		delay_ms(10);
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);
	}
	else if (dir == 'R')
     a0e:	82 35       	cpi	r24, 0x52	; 82
     a10:	09 f0       	breq	.+2      	; 0xa14 <turn+0x8e>
     a12:	55 c0       	rjmp	.+170    	; 0xabe <turn+0x138>
	{
		delay_ms(17);  //25
     a14:	81 e1       	ldi	r24, 0x11	; 17
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(0,0);
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(10);
     a28:	8a e0       	ldi	r24, 0x0A	; 10
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(-200,-200);
     a30:	68 e3       	ldi	r22, 0x38	; 56
     a32:	7f ef       	ldi	r23, 0xFF	; 255
     a34:	88 e3       	ldi	r24, 0x38	; 56
     a36:	9f ef       	ldi	r25, 0xFF	; 255
     a38:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(10);
     a3c:	8a e0       	ldi	r24, 0x0A	; 10
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(0,0);
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(10);
     a50:	8a e0       	ldi	r24, 0x0A	; 10
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		
		set_motors(90,-90);
     a58:	66 ea       	ldi	r22, 0xA6	; 166
     a5a:	7f ef       	ldi	r23, 0xFF	; 255
     a5c:	8a e5       	ldi	r24, 0x5A	; 90
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     a64:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(10);
		
		set_motors(90,-90);
		
		while(!(sensor_data_save & 0b00001))
     a66:	80 fd       	sbrc	r24, 0
     a68:	03 c0       	rjmp	.+6      	; 0xa70 <turn+0xea>
		{
			sensor_data_save = sensor_data_verified();
     a6a:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     a6e:	fb cf       	rjmp	.-10     	; 0xa66 <turn+0xe0>
		}
		while(sensor_data_save & 0b00001)
     a70:	80 ff       	sbrs	r24, 0
     a72:	03 c0       	rjmp	.+6      	; 0xa7a <turn+0xf4>
		{
			sensor_data_save = sensor_data_verified();
     a74:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     a78:	fb cf       	rjmp	.-10     	; 0xa70 <turn+0xea>
		}
		while(!(sensor_data_save & 0b01000))
     a7a:	83 fd       	sbrc	r24, 3
     a7c:	03 c0       	rjmp	.+6      	; 0xa84 <turn+0xfe>
		{
			sensor_data_save = sensor_data_verified();
     a7e:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     a82:	fb cf       	rjmp	.-10     	; 0xa7a <turn+0xf4>
		}
		//delay_ms(7); // external 
		set_motors(0,0);
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(1);//30
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(-100,100);
     a98:	64 e6       	ldi	r22, 0x64	; 100
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	8c e9       	ldi	r24, 0x9C	; 156
     a9e:	9f ef       	ldi	r25, 0xFF	; 255
     aa0:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(10);
     aa4:	8a e0       	ldi	r24, 0x0A	; 10
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(0,0);
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(10);
     ab8:	8a e0       	ldi	r24, 0x0A	; 10
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	bb c0       	rjmp	.+374    	; 0xc34 <turn+0x2ae>
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);

	}
	else if (dir == 'S')
     abe:	83 35       	cpi	r24, 0x53	; 83
     ac0:	09 f4       	brne	.+2      	; 0xac4 <turn+0x13e>
     ac2:	ba c0       	rjmp	.+372    	; 0xc38 <turn+0x2b2>
		//delay_ms(10);
		//set_motors(0,0);
		//delay_ms(50);
		////follow_segment(speed);
	}
	else if (dir == 'U')
     ac4:	85 35       	cpi	r24, 0x55	; 85
     ac6:	09 f0       	breq	.+2      	; 0xaca <turn+0x144>
     ac8:	47 c0       	rjmp	.+142    	; 0xb58 <turn+0x1d2>
	{
		delay_ms(25);
     aca:	89 e1       	ldi	r24, 0x19	; 25
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(0,0);
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(10);
     ade:	8a e0       	ldi	r24, 0x0A	; 10
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(-200,-200);
     ae6:	68 e3       	ldi	r22, 0x38	; 56
     ae8:	7f ef       	ldi	r23, 0xFF	; 255
     aea:	88 e3       	ldi	r24, 0x38	; 56
     aec:	9f ef       	ldi	r25, 0xFF	; 255
     aee:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(10);
     af2:	8a e0       	ldi	r24, 0x0A	; 10
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(0,0);
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(10);
     b06:	8a e0       	ldi	r24, 0x0A	; 10
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		
		set_motors(-90,90);
     b0e:	6a e5       	ldi	r22, 0x5A	; 90
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	86 ea       	ldi	r24, 0xA6	; 166
     b14:	9f ef       	ldi	r25, 0xFF	; 255
     b16:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     b1a:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(10);
		
		set_motors(-90,90);
		
		while(!(sensor_data_save & 0b10000))
     b1c:	84 fd       	sbrc	r24, 4
     b1e:	03 c0       	rjmp	.+6      	; 0xb26 <turn+0x1a0>
		{
			sensor_data_save = sensor_data_verified();
     b20:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b24:	fb cf       	rjmp	.-10     	; 0xb1c <turn+0x196>
		}
		while(sensor_data_save & 0b10000)
     b26:	84 ff       	sbrs	r24, 4
     b28:	03 c0       	rjmp	.+6      	; 0xb30 <turn+0x1aa>
		{
			sensor_data_save = sensor_data_verified();
     b2a:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b2e:	fb cf       	rjmp	.-10     	; 0xb26 <turn+0x1a0>
		}
		while(!(sensor_data_save & 0b00010))
     b30:	81 fd       	sbrc	r24, 1
     b32:	03 c0       	rjmp	.+6      	; 0xb3a <turn+0x1b4>
		{
			sensor_data_save = sensor_data_verified();
     b34:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b38:	fb cf       	rjmp	.-10     	; 0xb30 <turn+0x1aa>
		}
		
		set_motors(0,0);
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(10);//30
     b46:	8a e0       	ldi	r24, 0x0A	; 10
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(100,-100);
     b4e:	6c e9       	ldi	r22, 0x9C	; 156
     b50:	7f ef       	ldi	r23, 0xFF	; 255
     b52:	84 e6       	ldi	r24, 0x64	; 100
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a4 cf       	rjmp	.-184    	; 0xaa0 <turn+0x11a>
		delay_ms(10);
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);
	}
	else if (dir == 'D')
     b58:	84 34       	cpi	r24, 0x44	; 68
     b5a:	09 f0       	breq	.+2      	; 0xb5e <turn+0x1d8>
     b5c:	6d c0       	rjmp	.+218    	; 0xc38 <turn+0x2b2>
	{
		uint16_t sensor_data_hold;
		set_motors(0,0);
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(50);
     b6a:	82 e3       	ldi	r24, 0x32	; 50
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		//set_motors(-100,-100);
		//delay_ms(50);
		//set_motors(0,0);
		//process_array();
		delay_ms(100);
     b72:	84 e6       	ldi	r24, 0x64	; 100
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(-50,-50);
     b7a:	6e ec       	ldi	r22, 0xCE	; 206
     b7c:	7f ef       	ldi	r23, 0xFF	; 255
     b7e:	8e ec       	ldi	r24, 0xCE	; 206
     b80:	9f ef       	ldi	r25, 0xFF	; 255
     b82:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		sensor_data_hold = sensor_data_verified();
		while((sensor_data_hold & 0b10001) == 0b10001)
		{
			sensor_data_hold = sensor_data_verified();
     b86:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b8a:	90 e0       	ldi	r25, 0x00	; 0
		//set_motors(0,0);
		//process_array();
		delay_ms(100);
		set_motors(-50,-50);
		sensor_data_hold = sensor_data_verified();
		while((sensor_data_hold & 0b10001) == 0b10001)
     b8c:	81 71       	andi	r24, 0x11	; 17
     b8e:	99 27       	eor	r25, r25
     b90:	41 97       	sbiw	r24, 0x11	; 17
     b92:	c9 f3       	breq	.-14     	; 0xb86 <turn+0x200>
		{
			sensor_data_hold = sensor_data_verified();
		}
		set_motors(0,0);
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(50);
     ba0:	82 e3       	ldi	r24, 0x32	; 50
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(50,50);
     ba8:	62 e3       	ldi	r22, 0x32	; 50
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	82 e3       	ldi	r24, 0x32	; 50
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(150);
     bb4:	86 e9       	ldi	r24, 0x96	; 150
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		//set_motors(-100,-100);
		//delay_ms(50);
		set_motors(0,0);
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(50);
     bc8:	82 e3       	ldi	r24, 0x32	; 50
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(-80,80);
     bd0:	60 e5       	ldi	r22, 0x50	; 80
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	80 eb       	ldi	r24, 0xB0	; 176
     bd6:	9f ef       	ldi	r25, 0xFF	; 255
     bd8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(50);
     bdc:	82 e3       	ldi	r24, 0x32	; 50
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		while((sensor_data_verified() & 0b10000) != 0x00);
     be4:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     be8:	84 fd       	sbrc	r24, 4
     bea:	fc cf       	rjmp	.-8      	; 0xbe4 <turn+0x25e>
		while((sensor_data_verified() & 0b10000) != 0b10000);
     bec:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     bf0:	84 ff       	sbrs	r24, 4
     bf2:	fc cf       	rjmp	.-8      	; 0xbec <turn+0x266>
		while((sensor_data_verified() & 0b00010) != 0b00010);
     bf4:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     bf8:	81 ff       	sbrs	r24, 1
     bfa:	fc cf       	rjmp	.-8      	; 0xbf4 <turn+0x26e>
		////while(sensor_data() & (3<<3)) != (3<<3));
		//delay_ms(20);
		//set_motors(0,0);
		//delay_ms(50);
		
		set_motors(0,0);
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(10); //30
     c08:	8a e0       	ldi	r24, 0x0A	; 10
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(100,-100);
     c10:	6c e9       	ldi	r22, 0x9C	; 156
     c12:	7f ef       	ldi	r23, 0xFF	; 255
     c14:	84 e6       	ldi	r24, 0x64	; 100
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(10);
     c1c:	8a e0       	ldi	r24, 0x0A	; 10
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
		set_motors(0,0);
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_motors>
		delay_ms(50);
     c30:	82 e3       	ldi	r24, 0x32	; 50
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <delay_ms>
     c38:	08 95       	ret

00000c3a <_ZN15OrangutanAnalog7setModeEh>:
     c3a:	88 23       	and	r24, r24
     c3c:	21 f4       	brne	.+8      	; 0xc46 <_ZN15OrangutanAnalog7setModeEh+0xc>
     c3e:	80 91 7c 00 	lds	r24, 0x007C
     c42:	8f 7d       	andi	r24, 0xDF	; 223
     c44:	03 c0       	rjmp	.+6      	; 0xc4c <_ZN15OrangutanAnalog7setModeEh+0x12>
     c46:	80 91 7c 00 	lds	r24, 0x007C
     c4a:	80 62       	ori	r24, 0x20	; 32
     c4c:	80 93 7c 00 	sts	0x007C, r24
     c50:	08 95       	ret

00000c52 <_ZN15OrangutanAnalog7getModeEv>:
     c52:	80 91 7c 00 	lds	r24, 0x007C
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	25 e0       	ldi	r18, 0x05	; 5
     c5a:	95 95       	asr	r25
     c5c:	87 95       	ror	r24
     c5e:	2a 95       	dec	r18
     c60:	e1 f7       	brne	.-8      	; 0xc5a <_ZN15OrangutanAnalog7getModeEv+0x8>
     c62:	81 70       	andi	r24, 0x01	; 1
     c64:	08 95       	ret

00000c66 <_ZN15OrangutanAnalog12isConvertingEv>:
     c66:	80 91 7a 00 	lds	r24, 0x007A
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	36 e0       	ldi	r19, 0x06	; 6
     c6e:	95 95       	asr	r25
     c70:	87 95       	ror	r24
     c72:	3a 95       	dec	r19
     c74:	e1 f7       	brne	.-8      	; 0xc6e <_ZN15OrangutanAnalog12isConvertingEv+0x8>
     c76:	81 70       	andi	r24, 0x01	; 1
     c78:	08 95       	ret

00000c7a <_ZN15OrangutanAnalog16conversionResultEv>:
     c7a:	0e 94 29 06 	call	0xc52	; 0xc52 <_ZN15OrangutanAnalog7getModeEv>
     c7e:	88 23       	and	r24, r24
     c80:	21 f0       	breq	.+8      	; 0xc8a <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     c82:	20 91 79 00 	lds	r18, 0x0079
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	04 c0       	rjmp	.+8      	; 0xc92 <_ZN15OrangutanAnalog16conversionResultEv+0x18>
     c8a:	20 91 78 00 	lds	r18, 0x0078
     c8e:	30 91 79 00 	lds	r19, 0x0079
     c92:	c9 01       	movw	r24, r18
     c94:	08 95       	ret

00000c96 <_ZN15OrangutanAnalog15startConversionEhh>:
     c96:	80 32       	cpi	r24, 0x20	; 32
     c98:	b0 f4       	brcc	.+44     	; 0xcc6 <_ZN15OrangutanAnalog15startConversionEhh+0x30>
     c9a:	97 e8       	ldi	r25, 0x87	; 135
     c9c:	90 93 7a 00 	sts	0x007A, r25
     ca0:	90 91 7c 00 	lds	r25, 0x007C
     ca4:	29 2f       	mov	r18, r25
     ca6:	20 64       	ori	r18, 0x40	; 64
     ca8:	66 23       	and	r22, r22
     caa:	11 f0       	breq	.+4      	; 0xcb0 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     cac:	90 6c       	ori	r25, 0xC0	; 192
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <_ZN15OrangutanAnalog15startConversionEhh+0x1e>
     cb0:	92 2f       	mov	r25, r18
     cb2:	9f 77       	andi	r25, 0x7F	; 127
     cb4:	90 7e       	andi	r25, 0xE0	; 224
     cb6:	98 2b       	or	r25, r24
     cb8:	90 93 7c 00 	sts	0x007C, r25
     cbc:	80 91 7a 00 	lds	r24, 0x007A
     cc0:	80 64       	ori	r24, 0x40	; 64
     cc2:	80 93 7a 00 	sts	0x007A, r24
     cc6:	08 95       	ret

00000cc8 <_ZN15OrangutanAnalog11readAverageEhj>:
     cc8:	a0 e0       	ldi	r26, 0x00	; 0
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	ea e6       	ldi	r30, 0x6A	; 106
     cce:	f6 e0       	ldi	r31, 0x06	; 6
     cd0:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__prologue_saves__+0x14>
     cd4:	6b 01       	movw	r12, r22
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	0e 94 4b 06 	call	0xc96	; 0xc96 <_ZN15OrangutanAnalog15startConversionEhh>
     cdc:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN15OrangutanAnalog12isConvertingEv>
     ce0:	88 23       	and	r24, r24
     ce2:	e1 f7       	brne	.-8      	; 0xcdc <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     ce4:	e6 01       	movw	r28, r12
     ce6:	ee 24       	eor	r14, r14
     ce8:	ff 24       	eor	r15, r15
     cea:	87 01       	movw	r16, r14
     cec:	80 91 7a 00 	lds	r24, 0x007A
     cf0:	80 64       	ori	r24, 0x40	; 64
     cf2:	80 93 7a 00 	sts	0x007A, r24
     cf6:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN15OrangutanAnalog12isConvertingEv>
     cfa:	88 23       	and	r24, r24
     cfc:	e1 f7       	brne	.-8      	; 0xcf6 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     cfe:	0e 94 3d 06 	call	0xc7a	; 0xc7a <_ZN15OrangutanAnalog16conversionResultEv>
     d02:	a0 e0       	ldi	r26, 0x00	; 0
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e8 0e       	add	r14, r24
     d08:	f9 1e       	adc	r15, r25
     d0a:	0a 1f       	adc	r16, r26
     d0c:	1b 1f       	adc	r17, r27
     d0e:	21 97       	sbiw	r28, 0x01	; 1
     d10:	69 f7       	brne	.-38     	; 0xcec <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     d12:	c6 01       	movw	r24, r12
     d14:	96 95       	lsr	r25
     d16:	87 95       	ror	r24
     d18:	20 e4       	ldi	r18, 0x40	; 64
     d1a:	c2 16       	cp	r12, r18
     d1c:	d1 04       	cpc	r13, r1
     d1e:	40 f4       	brcc	.+16     	; 0xd30 <_ZN15OrangutanAnalog11readAverageEhj+0x68>
     d20:	8e 0d       	add	r24, r14
     d22:	9f 1d       	adc	r25, r15
     d24:	6c 2d       	mov	r22, r12
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	0e 94 a4 13 	call	0x2748	; 0x2748 <__udivmodhi4>
     d2c:	cb 01       	movw	r24, r22
     d2e:	0d c0       	rjmp	.+26     	; 0xd4a <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     d30:	bc 01       	movw	r22, r24
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	6e 0d       	add	r22, r14
     d38:	7f 1d       	adc	r23, r15
     d3a:	80 1f       	adc	r24, r16
     d3c:	91 1f       	adc	r25, r17
     d3e:	96 01       	movw	r18, r12
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	0e 94 cc 13 	call	0x2798	; 0x2798 <__udivmodsi4>
     d48:	c9 01       	movw	r24, r18
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	e8 e0       	ldi	r30, 0x08	; 8
     d50:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__epilogue_restores__+0x14>

00000d54 <_ZN15OrangutanAnalog12toMillivoltsEj>:
     d54:	a3 e0       	ldi	r26, 0x03	; 3
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e0 eb       	ldi	r30, 0xB0	; 176
     d5a:	f6 e0       	ldi	r31, 0x06	; 6
     d5c:	0c 94 27 14 	jmp	0x284e	; 0x284e <__prologue_saves__+0x1e>
     d60:	bc 01       	movw	r22, r24
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	20 91 00 01 	lds	r18, 0x0100
     d6a:	30 91 01 01 	lds	r19, 0x0101
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsi3>
     d76:	18 2f       	mov	r17, r24
     d78:	69 83       	std	Y+1, r22	; 0x01
     d7a:	7a 83       	std	Y+2, r23	; 0x02
     d7c:	9b 83       	std	Y+3, r25	; 0x03
     d7e:	0e 94 29 06 	call	0xc52	; 0xc52 <_ZN15OrangutanAnalog7getModeEv>
     d82:	69 81       	ldd	r22, Y+1	; 0x01
     d84:	7a 81       	ldd	r23, Y+2	; 0x02
     d86:	9b 81       	ldd	r25, Y+3	; 0x03
     d88:	88 23       	and	r24, r24
     d8a:	71 f0       	breq	.+28     	; 0xda8 <_ZN15OrangutanAnalog12toMillivoltsEj+0x54>
     d8c:	9b 01       	movw	r18, r22
     d8e:	41 2f       	mov	r20, r17
     d90:	59 2f       	mov	r21, r25
     d92:	ca 01       	movw	r24, r20
     d94:	b9 01       	movw	r22, r18
     d96:	61 58       	subi	r22, 0x81	; 129
     d98:	7f 4f       	sbci	r23, 0xFF	; 255
     d9a:	8f 4f       	sbci	r24, 0xFF	; 255
     d9c:	9f 4f       	sbci	r25, 0xFF	; 255
     d9e:	2f ef       	ldi	r18, 0xFF	; 255
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	0d c0       	rjmp	.+26     	; 0xdc2 <_ZN15OrangutanAnalog12toMillivoltsEj+0x6e>
     da8:	9b 01       	movw	r18, r22
     daa:	41 2f       	mov	r20, r17
     dac:	59 2f       	mov	r21, r25
     dae:	ca 01       	movw	r24, r20
     db0:	b9 01       	movw	r22, r18
     db2:	61 50       	subi	r22, 0x01	; 1
     db4:	7e 4f       	sbci	r23, 0xFE	; 254
     db6:	8f 4f       	sbci	r24, 0xFF	; 255
     db8:	9f 4f       	sbci	r25, 0xFF	; 255
     dba:	2f ef       	ldi	r18, 0xFF	; 255
     dbc:	33 e0       	ldi	r19, 0x03	; 3
     dbe:	40 e0       	ldi	r20, 0x00	; 0
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	0e 94 cc 13 	call	0x2798	; 0x2798 <__udivmodsi4>
     dc6:	c9 01       	movw	r24, r18
     dc8:	23 96       	adiw	r28, 0x03	; 3
     dca:	e3 e0       	ldi	r30, 0x03	; 3
     dcc:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__epilogue_restores__+0x1e>

00000dd0 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     dd0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN15OrangutanAnalog11readAverageEhj>
     dd4:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN15OrangutanAnalog12toMillivoltsEj>
     dd8:	08 95       	ret

00000dda <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	0e 94 29 06 	call	0xc52	; 0xc52 <_ZN15OrangutanAnalog7getModeEv>
     de4:	18 2f       	mov	r17, r24
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	0e 94 1d 06 	call	0xc3a	; 0xc3a <_ZN15OrangutanAnalog7setModeEh>
     dec:	86 e0       	ldi	r24, 0x06	; 6
     dee:	6a e0       	ldi	r22, 0x0A	; 10
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     df6:	ec 01       	movw	r28, r24
     df8:	81 2f       	mov	r24, r17
     dfa:	0e 94 1d 06 	call	0xc3a	; 0xc3a <_ZN15OrangutanAnalog7setModeEh>
     dfe:	9e 01       	movw	r18, r28
     e00:	22 0f       	add	r18, r18
     e02:	33 1f       	adc	r19, r19
     e04:	2c 0f       	add	r18, r28
     e06:	3d 1f       	adc	r19, r29
     e08:	2f 5f       	subi	r18, 0xFF	; 255
     e0a:	3f 4f       	sbci	r19, 0xFF	; 255
     e0c:	36 95       	lsr	r19
     e0e:	27 95       	ror	r18
     e10:	c9 01       	movw	r24, r18
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	08 95       	ret

00000e1a <read_battery_millivolts_3pi>:
     e1a:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     e1e:	08 95       	ret

00000e20 <_ZL16currentCharacterv>:
     e20:	90 91 4f 01 	lds	r25, 0x014F
     e24:	e0 91 4b 01 	lds	r30, 0x014B
     e28:	f0 91 4c 01 	lds	r31, 0x014C
     e2c:	99 23       	and	r25, r25
     e2e:	11 f0       	breq	.+4      	; 0xe34 <_ZL16currentCharacterv+0x14>
     e30:	84 91       	lpm	r24, Z
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <_ZL16currentCharacterv+0x16>
     e34:	80 81       	ld	r24, Z
     e36:	28 2f       	mov	r18, r24
     e38:	21 54       	subi	r18, 0x41	; 65
     e3a:	2a 31       	cpi	r18, 0x1A	; 26
     e3c:	10 f4       	brcc	.+4      	; 0xe42 <_ZL16currentCharacterv+0x22>
     e3e:	80 5e       	subi	r24, 0xE0	; 224
     e40:	08 95       	ret
     e42:	80 32       	cpi	r24, 0x20	; 32
     e44:	71 f4       	brne	.+28     	; 0xe62 <_ZL16currentCharacterv+0x42>
     e46:	20 91 4b 01 	lds	r18, 0x014B
     e4a:	30 91 4c 01 	lds	r19, 0x014C
     e4e:	a9 01       	movw	r20, r18
     e50:	4f 5f       	subi	r20, 0xFF	; 255
     e52:	5f 4f       	sbci	r21, 0xFF	; 255
     e54:	50 93 4c 01 	sts	0x014C, r21
     e58:	40 93 4b 01 	sts	0x014B, r20
     e5c:	21 15       	cp	r18, r1
     e5e:	31 05       	cpc	r19, r1
     e60:	09 f7       	brne	.-62     	; 0xe24 <_ZL16currentCharacterv+0x4>
     e62:	08 95       	ret

00000e64 <_ZL9getNumberv>:
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	0e 94 10 07 	call	0xe20	; 0xe20 <_ZL16currentCharacterv>
     e70:	c0 e0       	ldi	r28, 0x00	; 0
     e72:	d0 e0       	ldi	r29, 0x00	; 0
     e74:	1b c0       	rjmp	.+54     	; 0xeac <_ZL9getNumberv+0x48>
     e76:	9e 01       	movw	r18, r28
     e78:	22 0f       	add	r18, r18
     e7a:	33 1f       	adc	r19, r19
     e7c:	93 e0       	ldi	r25, 0x03	; 3
     e7e:	cc 0f       	add	r28, r28
     e80:	dd 1f       	adc	r29, r29
     e82:	9a 95       	dec	r25
     e84:	e1 f7       	brne	.-8      	; 0xe7e <_ZL9getNumberv+0x1a>
     e86:	c2 0f       	add	r28, r18
     e88:	d3 1f       	adc	r29, r19
     e8a:	99 27       	eor	r25, r25
     e8c:	87 fd       	sbrc	r24, 7
     e8e:	90 95       	com	r25
     e90:	c8 0f       	add	r28, r24
     e92:	d9 1f       	adc	r29, r25
     e94:	e0 97       	sbiw	r28, 0x30	; 48
     e96:	80 91 4b 01 	lds	r24, 0x014B
     e9a:	90 91 4c 01 	lds	r25, 0x014C
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	90 93 4c 01 	sts	0x014C, r25
     ea4:	80 93 4b 01 	sts	0x014B, r24
     ea8:	0e 94 10 07 	call	0xe20	; 0xe20 <_ZL16currentCharacterv>
     eac:	98 2f       	mov	r25, r24
     eae:	90 53       	subi	r25, 0x30	; 48
     eb0:	9a 30       	cpi	r25, 0x0A	; 10
     eb2:	08 f3       	brcs	.-62     	; 0xe76 <_ZL9getNumberv+0x12>
     eb4:	ce 01       	movw	r24, r28
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	ff 90       	pop	r15
     ebc:	ef 90       	pop	r14
     ebe:	08 95       	ret

00000ec0 <_ZN15OrangutanBuzzer5init2Ev>:
     ec0:	10 92 6f 00 	sts	0x006F, r1
     ec4:	83 e2       	ldi	r24, 0x23	; 35
     ec6:	80 93 80 00 	sts	0x0080, r24
     eca:	81 e1       	ldi	r24, 0x11	; 17
     ecc:	80 93 81 00 	sts	0x0081, r24
     ed0:	10 92 82 00 	sts	0x0082, r1
     ed4:	80 e1       	ldi	r24, 0x10	; 16
     ed6:	97 e2       	ldi	r25, 0x27	; 39
     ed8:	90 93 89 00 	sts	0x0089, r25
     edc:	80 93 88 00 	sts	0x0088, r24
     ee0:	10 92 8b 00 	sts	0x008B, r1
     ee4:	10 92 8a 00 	sts	0x008A, r1
     ee8:	22 9a       	sbi	0x04, 2	; 4
     eea:	78 94       	sei
     eec:	08 95       	ret

00000eee <_ZN15OrangutanBuzzer4initEv>:
     eee:	80 91 4a 01 	lds	r24, 0x014A
     ef2:	88 23       	and	r24, r24
     ef4:	29 f4       	brne	.+10     	; 0xf00 <_ZN15OrangutanBuzzer4initEv+0x12>
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	80 93 4a 01 	sts	0x014A, r24
     efc:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN15OrangutanBuzzer5init2Ev>
     f00:	08 95       	ret

00000f02 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     f02:	a0 e0       	ldi	r26, 0x00	; 0
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e7 e8       	ldi	r30, 0x87	; 135
     f08:	f7 e0       	ldi	r31, 0x07	; 7
     f0a:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__prologue_saves__+0xc>
     f0e:	8c 01       	movw	r16, r24
     f10:	5b 01       	movw	r10, r22
     f12:	e4 2e       	mov	r14, r20
     f14:	0e 94 77 07 	call	0xeee	; 0xeee <_ZN15OrangutanBuzzer4initEv>
     f18:	10 92 02 01 	sts	0x0102, r1
     f1c:	17 ff       	sbrs	r17, 7
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x26>
     f20:	1f 77       	andi	r17, 0x7F	; 127
     f22:	aa e0       	ldi	r26, 0x0A	; 10
     f24:	fa 2e       	mov	r15, r26
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
     f28:	ff 24       	eor	r15, r15
     f2a:	f3 94       	inc	r15
     f2c:	c0 90 81 00 	lds	r12, 0x0081
     f30:	dd 24       	eor	r13, r13
     f32:	28 ef       	ldi	r18, 0xF8	; 248
     f34:	c2 22       	and	r12, r18
     f36:	dd 24       	eor	r13, r13
     f38:	88 ec       	ldi	r24, 0xC8	; 200
     f3a:	3f 2d       	mov	r19, r15
     f3c:	38 9f       	mul	r19, r24
     f3e:	c0 01       	movw	r24, r0
     f40:	11 24       	eor	r1, r1
     f42:	80 17       	cp	r24, r16
     f44:	91 07       	cpc	r25, r17
     f46:	d8 f4       	brcc	.+54     	; 0xf7e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x7c>
     f48:	e8 01       	movw	r28, r16
     f4a:	67 e2       	ldi	r22, 0x27	; 39
     f4c:	01 31       	cpi	r16, 0x11	; 17
     f4e:	16 07       	cpc	r17, r22
     f50:	10 f0       	brcs	.+4      	; 0xf56 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x54>
     f52:	c0 e1       	ldi	r28, 0x10	; 16
     f54:	d7 e2       	ldi	r29, 0x27	; 39
     f56:	be 01       	movw	r22, r28
     f58:	76 95       	lsr	r23
     f5a:	67 95       	ror	r22
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	60 58       	subi	r22, 0x80	; 128
     f62:	79 46       	sbci	r23, 0x69	; 105
     f64:	87 46       	sbci	r24, 0x67	; 103
     f66:	9f 4f       	sbci	r25, 0xFF	; 255
     f68:	9e 01       	movw	r18, r28
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	0e 94 cc 13 	call	0x2798	; 0x2798 <__udivmodsi4>
     f72:	89 01       	movw	r16, r18
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	c8 2a       	or	r12, r24
     f7a:	d9 2a       	or	r13, r25
     f7c:	2c c0       	rjmp	.+88     	; 0xfd6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd4>
     f7e:	98 e2       	ldi	r25, 0x28	; 40
     f80:	f9 9e       	mul	r15, r25
     f82:	90 2d       	mov	r25, r0
     f84:	11 24       	eor	r1, r1
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	89 2e       	mov	r8, r25
     f8a:	e4 01       	movw	r28, r8
     f8c:	4e 01       	movw	r8, r28
     f8e:	98 2e       	mov	r9, r24
     f90:	e4 01       	movw	r28, r8
     f92:	80 16       	cp	r8, r16
     f94:	91 06       	cpc	r9, r17
     f96:	08 f4       	brcc	.+2      	; 0xf9a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x98>
     f98:	e8 01       	movw	r28, r16
     f9a:	be 01       	movw	r22, r28
     f9c:	76 95       	lsr	r23
     f9e:	67 95       	ror	r22
     fa0:	9e 01       	movw	r18, r28
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	8f 2d       	mov	r24, r15
     fa8:	8a 30       	cpi	r24, 0x0A	; 10
     faa:	39 f4       	brne	.+14     	; 0xfba <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb8>
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	60 5e       	subi	r22, 0xE0	; 224
     fb2:	73 44       	sbci	r23, 0x43	; 67
     fb4:	81 44       	sbci	r24, 0x41	; 65
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	06 c0       	rjmp	.+12     	; 0xfc6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc4>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	60 53       	subi	r22, 0x30	; 48
     fc0:	7d 4e       	sbci	r23, 0xED	; 237
     fc2:	8c 4e       	sbci	r24, 0xEC	; 236
     fc4:	9f 4f       	sbci	r25, 0xFF	; 255
     fc6:	0e 94 cc 13 	call	0x2798	; 0x2798 <__udivmodsi4>
     fca:	89 01       	movw	r16, r18
     fcc:	52 e0       	ldi	r21, 0x02	; 2
     fce:	85 2e       	mov	r8, r21
     fd0:	91 2c       	mov	r9, r1
     fd2:	c8 28       	or	r12, r8
     fd4:	d9 28       	or	r13, r9
     fd6:	2f 2d       	mov	r18, r15
     fd8:	2a 30       	cpi	r18, 0x0A	; 10
     fda:	39 f4       	brne	.+14     	; 0xfea <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe8>
     fdc:	ce 01       	movw	r24, r28
     fde:	05 96       	adiw	r24, 0x05	; 5
     fe0:	6a e0       	ldi	r22, 0x0A	; 10
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	0e 94 a4 13 	call	0x2748	; 0x2748 <__udivmodhi4>
     fe8:	eb 01       	movw	r28, r22
     fea:	33 e0       	ldi	r19, 0x03	; 3
     fec:	c8 3e       	cpi	r28, 0xE8	; 232
     fee:	d3 07       	cpc	r29, r19
     ff0:	79 f0       	breq	.+30     	; 0x1010 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x10e>
     ff2:	be 01       	movw	r22, r28
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	95 01       	movw	r18, r10
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsi3>
    1002:	28 ee       	ldi	r18, 0xE8	; 232
    1004:	33 e0       	ldi	r19, 0x03	; 3
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__divmodsi4>
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1010:	95 01       	movw	r18, r10
    1012:	10 92 6f 00 	sts	0x006F, r1
    1016:	c0 92 81 00 	sts	0x0081, r12
    101a:	10 93 89 00 	sts	0x0089, r17
    101e:	00 93 88 00 	sts	0x0088, r16
    1022:	40 91 88 00 	lds	r20, 0x0088
    1026:	50 91 89 00 	lds	r21, 0x0089
    102a:	6e 2d       	mov	r22, r14
    102c:	60 31       	cpi	r22, 0x10	; 16
    102e:	08 f0       	brcs	.+2      	; 0x1032 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1030:	6f e0       	ldi	r22, 0x0F	; 15
    1032:	80 e1       	ldi	r24, 0x10	; 16
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	86 1b       	sub	r24, r22
    1038:	91 09       	sbc	r25, r1
    103a:	ba 01       	movw	r22, r20
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    103e:	76 95       	lsr	r23
    1040:	67 95       	ror	r22
    1042:	8a 95       	dec	r24
    1044:	e2 f7       	brpl	.-8      	; 0x103e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1046:	70 93 8b 00 	sts	0x008B, r23
    104a:	60 93 8a 00 	sts	0x008A, r22
    104e:	30 93 52 01 	sts	0x0152, r19
    1052:	20 93 51 01 	sts	0x0151, r18
    1056:	86 b3       	in	r24, 0x16	; 22
    1058:	8f ef       	ldi	r24, 0xFF	; 255
    105a:	86 bb       	out	0x16, r24	; 22
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	80 93 6f 00 	sts	0x006F, r24
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	ec e0       	ldi	r30, 0x0C	; 12
    1068:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <__epilogue_restores__+0xc>

0000106c <_ZN15OrangutanBuzzer8playNoteEhjh>:
    106c:	9b 01       	movw	r18, r22
    106e:	8f 3f       	cpi	r24, 0xFF	; 255
    1070:	11 f0       	breq	.+4      	; 0x1076 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa>
    1072:	44 23       	and	r20, r20
    1074:	29 f4       	brne	.+10     	; 0x1080 <_ZN15OrangutanBuzzer8playNoteEhjh+0x14>
    1076:	88 ee       	ldi	r24, 0xE8	; 232
    1078:	93 e0       	ldi	r25, 0x03	; 3
    107a:	b9 01       	movw	r22, r18
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	49 c0       	rjmp	.+146    	; 0x1112 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa6>
    1080:	81 31       	cpi	r24, 0x11	; 17
    1082:	30 f0       	brcs	.+12     	; 0x1090 <_ZN15OrangutanBuzzer8playNoteEhjh+0x24>
    1084:	58 2f       	mov	r21, r24
    1086:	50 51       	subi	r21, 0x10	; 16
    1088:	50 36       	cpi	r21, 0x60	; 96
    108a:	18 f0       	brcs	.+6      	; 0x1092 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    108c:	5f e5       	ldi	r21, 0x5F	; 95
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	85 2f       	mov	r24, r21
    1094:	6c e0       	ldi	r22, 0x0C	; 12
    1096:	0e 94 98 13 	call	0x2730	; 0x2730 <__udivmodqi4>
    109a:	a8 2f       	mov	r26, r24
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e4 ef       	ldi	r30, 0xF4	; 244
    10a0:	ff ef       	ldi	r31, 0xFF	; 255
    10a2:	ae 9f       	mul	r26, r30
    10a4:	b0 01       	movw	r22, r0
    10a6:	af 9f       	mul	r26, r31
    10a8:	70 0d       	add	r23, r0
    10aa:	be 9f       	mul	r27, r30
    10ac:	70 0d       	add	r23, r0
    10ae:	11 24       	eor	r1, r1
    10b0:	65 0f       	add	r22, r21
    10b2:	71 1d       	adc	r23, r1
    10b4:	6c 30       	cpi	r22, 0x0C	; 12
    10b6:	71 05       	cpc	r23, r1
    10b8:	40 f4       	brcc	.+16     	; 0x10ca <_ZN15OrangutanBuzzer8playNoteEhjh+0x5e>
    10ba:	fb 01       	movw	r30, r22
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	e4 5f       	subi	r30, 0xF4	; 244
    10c2:	fe 4f       	sbci	r31, 0xFE	; 254
    10c4:	60 81       	ld	r22, Z
    10c6:	71 81       	ldd	r23, Z+1	; 0x01
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	87 30       	cpi	r24, 0x07	; 7
    10d0:	81 f0       	breq	.+32     	; 0x10f2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x86>
    10d2:	08 2e       	mov	r0, r24
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <_ZN15OrangutanBuzzer8playNoteEhjh+0x6e>
    10d6:	66 0f       	add	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6a>
    10de:	82 30       	cpi	r24, 0x02	; 2
    10e0:	28 f0       	brcs	.+10     	; 0x10ec <_ZN15OrangutanBuzzer8playNoteEhjh+0x80>
    10e2:	cb 01       	movw	r24, r22
    10e4:	05 96       	adiw	r24, 0x05	; 5
    10e6:	6a e0       	ldi	r22, 0x0A	; 10
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	0c c0       	rjmp	.+24     	; 0x1104 <_ZN15OrangutanBuzzer8playNoteEhjh+0x98>
    10ec:	60 50       	subi	r22, 0x00	; 0
    10ee:	70 48       	sbci	r23, 0x80	; 128
    10f0:	0b c0       	rjmp	.+22     	; 0x1108 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    10f2:	cb 01       	movw	r24, r22
    10f4:	b6 e0       	ldi	r27, 0x06	; 6
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	ba 95       	dec	r27
    10fc:	e1 f7       	brne	.-8      	; 0x10f6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x8a>
    10fe:	02 96       	adiw	r24, 0x02	; 2
    1100:	65 e0       	ldi	r22, 0x05	; 5
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	0e 94 a4 13 	call	0x2748	; 0x2748 <__udivmodhi4>
    1108:	40 31       	cpi	r20, 0x10	; 16
    110a:	08 f0       	brcs	.+2      	; 0x110e <_ZN15OrangutanBuzzer8playNoteEhjh+0xa2>
    110c:	4f e0       	ldi	r20, 0x0F	; 15
    110e:	cb 01       	movw	r24, r22
    1110:	b9 01       	movw	r22, r18
    1112:	0e 94 81 07 	call	0xf02	; 0xf02 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1116:	08 95       	ret

00001118 <_ZL8nextNotev>:
    1118:	a0 e0       	ldi	r26, 0x00	; 0
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e2 e9       	ldi	r30, 0x92	; 146
    111e:	f8 e0       	ldi	r31, 0x08	; 8
    1120:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__prologue_saves__+0xa>
    1124:	b0 90 03 01 	lds	r11, 0x0103
    1128:	80 91 4d 01 	lds	r24, 0x014D
    112c:	88 23       	and	r24, r24
    112e:	61 f0       	breq	.+24     	; 0x1148 <_ZL8nextNotev+0x30>
    1130:	60 91 4e 01 	lds	r22, 0x014E
    1134:	66 23       	and	r22, r22
    1136:	41 f0       	breq	.+16     	; 0x1148 <_ZL8nextNotev+0x30>
    1138:	8f ef       	ldi	r24, 0xFF	; 255
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	0e 94 36 08 	call	0x106c	; 0x106c <_ZN15OrangutanBuzzer8playNoteEhjh>
    1142:	10 92 4e 01 	sts	0x014E, r1
    1146:	34 c1       	rjmp	.+616    	; 0x13b0 <_ZL8nextNotev+0x298>
    1148:	c0 ec       	ldi	r28, 0xC0	; 192
    114a:	dd e5       	ldi	r29, 0x5D	; 93
    114c:	aa 24       	eor	r10, r10
    114e:	a3 94       	inc	r10
    1150:	14 e0       	ldi	r17, 0x04	; 4
    1152:	71 2e       	mov	r7, r17
    1154:	00 ed       	ldi	r16, 0xD0	; 208
    1156:	17 e0       	ldi	r17, 0x07	; 7
    1158:	b4 e0       	ldi	r27, 0x04	; 4
    115a:	eb 2e       	mov	r14, r27
    115c:	f1 2c       	mov	r15, r1
    115e:	a4 ef       	ldi	r26, 0xF4	; 244
    1160:	ca 2e       	mov	r12, r26
    1162:	a1 e0       	ldi	r26, 0x01	; 1
    1164:	da 2e       	mov	r13, r26
    1166:	ff e0       	ldi	r31, 0x0F	; 15
    1168:	8f 2e       	mov	r8, r31
    116a:	91 2c       	mov	r9, r1
    116c:	0e 94 10 07 	call	0xe20	; 0xe20 <_ZL16currentCharacterv>
    1170:	20 91 4b 01 	lds	r18, 0x014B
    1174:	30 91 4c 01 	lds	r19, 0x014C
    1178:	2f 5f       	subi	r18, 0xFF	; 255
    117a:	3f 4f       	sbci	r19, 0xFF	; 255
    117c:	30 93 4c 01 	sts	0x014C, r19
    1180:	20 93 4b 01 	sts	0x014B, r18
    1184:	86 36       	cpi	r24, 0x66	; 102
    1186:	f1 f1       	breq	.+124    	; 0x1204 <_ZL8nextNotev+0xec>
    1188:	87 36       	cpi	r24, 0x67	; 103
    118a:	cc f4       	brge	.+50     	; 0x11be <_ZL8nextNotev+0xa6>
    118c:	82 36       	cpi	r24, 0x62	; 98
    118e:	09 f4       	brne	.+2      	; 0x1192 <_ZL8nextNotev+0x7a>
    1190:	af c0       	rjmp	.+350    	; 0x12f0 <_ZL8nextNotev+0x1d8>
    1192:	83 36       	cpi	r24, 0x63	; 99
    1194:	7c f4       	brge	.+30     	; 0x11b4 <_ZL8nextNotev+0x9c>
    1196:	8e 33       	cpi	r24, 0x3E	; 62
    1198:	49 f1       	breq	.+82     	; 0x11ec <_ZL8nextNotev+0xd4>
    119a:	8f 33       	cpi	r24, 0x3F	; 63
    119c:	3c f4       	brge	.+14     	; 0x11ac <_ZL8nextNotev+0x94>
    119e:	81 32       	cpi	r24, 0x21	; 33
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <_ZL8nextNotev+0x8c>
    11a2:	87 c0       	rjmp	.+270    	; 0x12b2 <_ZL8nextNotev+0x19a>
    11a4:	8c 33       	cpi	r24, 0x3C	; 60
    11a6:	09 f0       	breq	.+2      	; 0x11aa <_ZL8nextNotev+0x92>
    11a8:	9b c0       	rjmp	.+310    	; 0x12e0 <_ZL8nextNotev+0x1c8>
    11aa:	22 c0       	rjmp	.+68     	; 0x11f0 <_ZL8nextNotev+0xd8>
    11ac:	81 36       	cpi	r24, 0x61	; 97
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <_ZL8nextNotev+0x9a>
    11b0:	97 c0       	rjmp	.+302    	; 0x12e0 <_ZL8nextNotev+0x1c8>
    11b2:	9b c0       	rjmp	.+310    	; 0x12ea <_ZL8nextNotev+0x1d2>
    11b4:	84 36       	cpi	r24, 0x64	; 100
    11b6:	01 f1       	breq	.+64     	; 0x11f8 <_ZL8nextNotev+0xe0>
    11b8:	85 36       	cpi	r24, 0x65	; 101
    11ba:	0c f5       	brge	.+66     	; 0x11fe <_ZL8nextNotev+0xe6>
    11bc:	1b c0       	rjmp	.+54     	; 0x11f4 <_ZL8nextNotev+0xdc>
    11be:	8f 36       	cpi	r24, 0x6F	; 111
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <_ZL8nextNotev+0xac>
    11c2:	47 c0       	rjmp	.+142    	; 0x1252 <_ZL8nextNotev+0x13a>
    11c4:	80 37       	cpi	r24, 0x70	; 112
    11c6:	44 f4       	brge	.+16     	; 0x11d8 <_ZL8nextNotev+0xc0>
    11c8:	8c 36       	cpi	r24, 0x6C	; 108
    11ca:	11 f1       	breq	.+68     	; 0x1210 <_ZL8nextNotev+0xf8>
    11cc:	8d 36       	cpi	r24, 0x6D	; 109
    11ce:	61 f1       	breq	.+88     	; 0x1228 <_ZL8nextNotev+0x110>
    11d0:	87 36       	cpi	r24, 0x67	; 103
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <_ZL8nextNotev+0xbe>
    11d4:	85 c0       	rjmp	.+266    	; 0x12e0 <_ZL8nextNotev+0x1c8>
    11d6:	19 c0       	rjmp	.+50     	; 0x120a <_ZL8nextNotev+0xf2>
    11d8:	84 37       	cpi	r24, 0x74	; 116
    11da:	09 f4       	brne	.+2      	; 0x11de <_ZL8nextNotev+0xc6>
    11dc:	44 c0       	rjmp	.+136    	; 0x1266 <_ZL8nextNotev+0x14e>
    11de:	86 37       	cpi	r24, 0x76	; 118
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <_ZL8nextNotev+0xcc>
    11e2:	60 c0       	rjmp	.+192    	; 0x12a4 <_ZL8nextNotev+0x18c>
    11e4:	82 37       	cpi	r24, 0x72	; 114
    11e6:	09 f0       	breq	.+2      	; 0x11ea <_ZL8nextNotev+0xd2>
    11e8:	7b c0       	rjmp	.+246    	; 0x12e0 <_ZL8nextNotev+0x1c8>
    11ea:	39 c0       	rjmp	.+114    	; 0x125e <_ZL8nextNotev+0x146>
    11ec:	b3 94       	inc	r11
    11ee:	be cf       	rjmp	.-132    	; 0x116c <_ZL8nextNotev+0x54>
    11f0:	ba 94       	dec	r11
    11f2:	bc cf       	rjmp	.-136    	; 0x116c <_ZL8nextNotev+0x54>
    11f4:	ee 24       	eor	r14, r14
    11f6:	35 c0       	rjmp	.+106    	; 0x1262 <_ZL8nextNotev+0x14a>
    11f8:	ee 24       	eor	r14, r14
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	7b c0       	rjmp	.+246    	; 0x12f4 <_ZL8nextNotev+0x1dc>
    11fe:	ee 24       	eor	r14, r14
    1200:	84 e0       	ldi	r24, 0x04	; 4
    1202:	78 c0       	rjmp	.+240    	; 0x12f4 <_ZL8nextNotev+0x1dc>
    1204:	ee 24       	eor	r14, r14
    1206:	85 e0       	ldi	r24, 0x05	; 5
    1208:	75 c0       	rjmp	.+234    	; 0x12f4 <_ZL8nextNotev+0x1dc>
    120a:	ee 24       	eor	r14, r14
    120c:	87 e0       	ldi	r24, 0x07	; 7
    120e:	72 c0       	rjmp	.+228    	; 0x12f4 <_ZL8nextNotev+0x1dc>
    1210:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZL9getNumberv>
    1214:	bc 01       	movw	r22, r24
    1216:	90 93 05 01 	sts	0x0105, r25
    121a:	80 93 04 01 	sts	0x0104, r24
    121e:	80 91 06 01 	lds	r24, 0x0106
    1222:	90 91 07 01 	lds	r25, 0x0107
    1226:	37 c0       	rjmp	.+110    	; 0x1296 <_ZL8nextNotev+0x17e>
    1228:	0e 94 10 07 	call	0xe20	; 0xe20 <_ZL16currentCharacterv>
    122c:	8c 36       	cpi	r24, 0x6C	; 108
    122e:	19 f4       	brne	.+6      	; 0x1236 <_ZL8nextNotev+0x11e>
    1230:	10 92 4d 01 	sts	0x014D, r1
    1234:	04 c0       	rjmp	.+8      	; 0x123e <_ZL8nextNotev+0x126>
    1236:	a0 92 4d 01 	sts	0x014D, r10
    123a:	10 92 4e 01 	sts	0x014E, r1
    123e:	80 91 4b 01 	lds	r24, 0x014B
    1242:	90 91 4c 01 	lds	r25, 0x014C
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	90 93 4c 01 	sts	0x014C, r25
    124c:	80 93 4b 01 	sts	0x014B, r24
    1250:	8d cf       	rjmp	.-230    	; 0x116c <_ZL8nextNotev+0x54>
    1252:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZL9getNumberv>
    1256:	b8 2e       	mov	r11, r24
    1258:	80 93 03 01 	sts	0x0103, r24
    125c:	87 cf       	rjmp	.-242    	; 0x116c <_ZL8nextNotev+0x54>
    125e:	ee 24       	eor	r14, r14
    1260:	e3 94       	inc	r14
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	47 c0       	rjmp	.+142    	; 0x12f4 <_ZL8nextNotev+0x1dc>
    1266:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZL9getNumberv>
    126a:	bc 01       	movw	r22, r24
    126c:	ce 01       	movw	r24, r28
    126e:	0e 94 a4 13 	call	0x2748	; 0x2748 <__udivmodhi4>
    1272:	cb 01       	movw	r24, r22
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	53 e0       	ldi	r21, 0x03	; 3
    127a:	66 0f       	add	r22, r22
    127c:	77 1f       	adc	r23, r23
    127e:	5a 95       	dec	r21
    1280:	e1 f7       	brne	.-8      	; 0x127a <_ZL8nextNotev+0x162>
    1282:	86 0f       	add	r24, r22
    1284:	97 1f       	adc	r25, r23
    1286:	90 93 07 01 	sts	0x0107, r25
    128a:	80 93 06 01 	sts	0x0106, r24
    128e:	60 91 04 01 	lds	r22, 0x0104
    1292:	70 91 05 01 	lds	r23, 0x0105
    1296:	0e 94 a4 13 	call	0x2748	; 0x2748 <__udivmodhi4>
    129a:	70 93 09 01 	sts	0x0109, r23
    129e:	60 93 08 01 	sts	0x0108, r22
    12a2:	64 cf       	rjmp	.-312    	; 0x116c <_ZL8nextNotev+0x54>
    12a4:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZL9getNumberv>
    12a8:	90 93 0b 01 	sts	0x010B, r25
    12ac:	80 93 0a 01 	sts	0x010A, r24
    12b0:	5d cf       	rjmp	.-326    	; 0x116c <_ZL8nextNotev+0x54>
    12b2:	70 92 03 01 	sts	0x0103, r7
    12b6:	10 93 07 01 	sts	0x0107, r17
    12ba:	00 93 06 01 	sts	0x0106, r16
    12be:	f0 92 05 01 	sts	0x0105, r15
    12c2:	e0 92 04 01 	sts	0x0104, r14
    12c6:	d0 92 09 01 	sts	0x0109, r13
    12ca:	c0 92 08 01 	sts	0x0108, r12
    12ce:	90 92 0b 01 	sts	0x010B, r9
    12d2:	80 92 0a 01 	sts	0x010A, r8
    12d6:	10 92 4d 01 	sts	0x014D, r1
    12da:	44 e0       	ldi	r20, 0x04	; 4
    12dc:	b4 2e       	mov	r11, r20
    12de:	46 cf       	rjmp	.-372    	; 0x116c <_ZL8nextNotev+0x54>
    12e0:	10 92 4c 01 	sts	0x014C, r1
    12e4:	10 92 4b 01 	sts	0x014B, r1
    12e8:	63 c0       	rjmp	.+198    	; 0x13b0 <_ZL8nextNotev+0x298>
    12ea:	ee 24       	eor	r14, r14
    12ec:	89 e0       	ldi	r24, 0x09	; 9
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <_ZL8nextNotev+0x1dc>
    12f0:	ee 24       	eor	r14, r14
    12f2:	8b e0       	ldi	r24, 0x0B	; 11
    12f4:	9c e0       	ldi	r25, 0x0C	; 12
    12f6:	b9 9e       	mul	r11, r25
    12f8:	b0 2c       	mov	r11, r0
    12fa:	11 24       	eor	r1, r1
    12fc:	b8 0e       	add	r11, r24
    12fe:	0e 94 10 07 	call	0xe20	; 0xe20 <_ZL16currentCharacterv>
    1302:	8b 32       	cpi	r24, 0x2B	; 43
    1304:	11 f0       	breq	.+4      	; 0x130a <_ZL8nextNotev+0x1f2>
    1306:	83 32       	cpi	r24, 0x23	; 35
    1308:	b9 f4       	brne	.+46     	; 0x1338 <_ZL8nextNotev+0x220>
    130a:	80 91 4b 01 	lds	r24, 0x014B
    130e:	90 91 4c 01 	lds	r25, 0x014C
    1312:	01 96       	adiw	r24, 0x01	; 1
    1314:	90 93 4c 01 	sts	0x014C, r25
    1318:	80 93 4b 01 	sts	0x014B, r24
    131c:	b3 94       	inc	r11
    131e:	ef cf       	rjmp	.-34     	; 0x12fe <_ZL8nextNotev+0x1e6>
    1320:	80 91 4b 01 	lds	r24, 0x014B
    1324:	90 91 4c 01 	lds	r25, 0x014C
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	90 93 4c 01 	sts	0x014C, r25
    132e:	80 93 4b 01 	sts	0x014B, r24
    1332:	ba 94       	dec	r11
    1334:	0e 94 10 07 	call	0xe20	; 0xe20 <_ZL16currentCharacterv>
    1338:	8d 32       	cpi	r24, 0x2D	; 45
    133a:	91 f3       	breq	.-28     	; 0x1320 <_ZL8nextNotev+0x208>
    133c:	c0 91 08 01 	lds	r28, 0x0108
    1340:	d0 91 09 01 	lds	r29, 0x0109
    1344:	81 53       	subi	r24, 0x31	; 49
    1346:	88 30       	cpi	r24, 0x08	; 8
    1348:	58 f4       	brcc	.+22     	; 0x1360 <_ZL8nextNotev+0x248>
    134a:	c0 91 06 01 	lds	r28, 0x0106
    134e:	d0 91 07 01 	lds	r29, 0x0107
    1352:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZL9getNumberv>
    1356:	bc 01       	movw	r22, r24
    1358:	ce 01       	movw	r24, r28
    135a:	0e 94 a4 13 	call	0x2748	; 0x2748 <__udivmodhi4>
    135e:	eb 01       	movw	r28, r22
    1360:	8e 01       	movw	r16, r28
    1362:	0b c0       	rjmp	.+22     	; 0x137a <_ZL8nextNotev+0x262>
    1364:	80 91 4b 01 	lds	r24, 0x014B
    1368:	90 91 4c 01 	lds	r25, 0x014C
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	90 93 4c 01 	sts	0x014C, r25
    1372:	80 93 4b 01 	sts	0x014B, r24
    1376:	c0 0f       	add	r28, r16
    1378:	d1 1f       	adc	r29, r17
    137a:	16 95       	lsr	r17
    137c:	07 95       	ror	r16
    137e:	0e 94 10 07 	call	0xe20	; 0xe20 <_ZL16currentCharacterv>
    1382:	8e 32       	cpi	r24, 0x2E	; 46
    1384:	79 f3       	breq	.-34     	; 0x1364 <_ZL8nextNotev+0x24c>
    1386:	80 91 4d 01 	lds	r24, 0x014D
    138a:	88 23       	and	r24, r24
    138c:	39 f0       	breq	.+14     	; 0x139c <_ZL8nextNotev+0x284>
    138e:	ce 01       	movw	r24, r28
    1390:	96 95       	lsr	r25
    1392:	87 95       	ror	r24
    1394:	80 93 4e 01 	sts	0x014E, r24
    1398:	c8 1b       	sub	r28, r24
    139a:	d1 09       	sbc	r29, r1
    139c:	ee 20       	and	r14, r14
    139e:	11 f0       	breq	.+4      	; 0x13a4 <_ZL8nextNotev+0x28c>
    13a0:	bb 24       	eor	r11, r11
    13a2:	ba 94       	dec	r11
    13a4:	8b 2d       	mov	r24, r11
    13a6:	be 01       	movw	r22, r28
    13a8:	40 91 0a 01 	lds	r20, 0x010A
    13ac:	0e 94 36 08 	call	0x106c	; 0x106c <_ZN15OrangutanBuzzer8playNoteEhjh>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	ed e0       	ldi	r30, 0x0D	; 13
    13b6:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__epilogue_restores__+0xa>

000013ba <__vector_13>:
    13ba:	1f 92       	push	r1
    13bc:	0f 92       	push	r0
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	0f 92       	push	r0
    13c2:	11 24       	eor	r1, r1
    13c4:	2f 93       	push	r18
    13c6:	3f 93       	push	r19
    13c8:	4f 93       	push	r20
    13ca:	5f 93       	push	r21
    13cc:	6f 93       	push	r22
    13ce:	7f 93       	push	r23
    13d0:	8f 93       	push	r24
    13d2:	9f 93       	push	r25
    13d4:	af 93       	push	r26
    13d6:	bf 93       	push	r27
    13d8:	ef 93       	push	r30
    13da:	ff 93       	push	r31
    13dc:	80 91 51 01 	lds	r24, 0x0151
    13e0:	90 91 52 01 	lds	r25, 0x0152
    13e4:	9c 01       	movw	r18, r24
    13e6:	21 50       	subi	r18, 0x01	; 1
    13e8:	30 40       	sbci	r19, 0x00	; 0
    13ea:	30 93 52 01 	sts	0x0152, r19
    13ee:	20 93 51 01 	sts	0x0151, r18
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	11 f5       	brne	.+68     	; 0x143a <__vector_13+0x80>
    13f6:	10 92 6f 00 	sts	0x006F, r1
    13fa:	78 94       	sei
    13fc:	80 91 81 00 	lds	r24, 0x0081
    1400:	88 7f       	andi	r24, 0xF8	; 248
    1402:	81 60       	ori	r24, 0x01	; 1
    1404:	80 93 81 00 	sts	0x0081, r24
    1408:	80 e1       	ldi	r24, 0x10	; 16
    140a:	97 e2       	ldi	r25, 0x27	; 39
    140c:	90 93 89 00 	sts	0x0089, r25
    1410:	80 93 88 00 	sts	0x0088, r24
    1414:	10 92 8b 00 	sts	0x008B, r1
    1418:	10 92 8a 00 	sts	0x008A, r1
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	80 93 02 01 	sts	0x0102, r24
    1422:	80 91 4b 01 	lds	r24, 0x014B
    1426:	90 91 4c 01 	lds	r25, 0x014C
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	31 f0       	breq	.+12     	; 0x143a <__vector_13+0x80>
    142e:	80 91 50 01 	lds	r24, 0x0150
    1432:	88 23       	and	r24, r24
    1434:	11 f4       	brne	.+4      	; 0x143a <__vector_13+0x80>
    1436:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZL8nextNotev>
    143a:	ff 91       	pop	r31
    143c:	ef 91       	pop	r30
    143e:	bf 91       	pop	r27
    1440:	af 91       	pop	r26
    1442:	9f 91       	pop	r25
    1444:	8f 91       	pop	r24
    1446:	7f 91       	pop	r23
    1448:	6f 91       	pop	r22
    144a:	5f 91       	pop	r21
    144c:	4f 91       	pop	r20
    144e:	3f 91       	pop	r19
    1450:	2f 91       	pop	r18
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <_ZN15OrangutanBuzzer9isPlayingEv>:
    145c:	80 91 02 01 	lds	r24, 0x0102
    1460:	88 23       	and	r24, r24
    1462:	51 f0       	breq	.+20     	; 0x1478 <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	20 91 4b 01 	lds	r18, 0x014B
    146a:	30 91 4c 01 	lds	r19, 0x014C
    146e:	21 15       	cp	r18, r1
    1470:	31 05       	cpc	r19, r1
    1472:	19 f4       	brne	.+6      	; 0x147a <_ZN15OrangutanBuzzer9isPlayingEv+0x1e>
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	08 95       	ret
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	08 95       	ret

0000147c <is_playing>:
    147c:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN15OrangutanBuzzer9isPlayingEv>
    1480:	08 95       	ret

00001482 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    1482:	10 92 6f 00 	sts	0x006F, r1
    1486:	90 93 4c 01 	sts	0x014C, r25
    148a:	80 93 4b 01 	sts	0x014B, r24
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	80 93 4f 01 	sts	0x014F, r24
    1494:	10 92 4e 01 	sts	0x014E, r1
    1498:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZL8nextNotev>
    149c:	08 95       	ret

0000149e <play_from_program_space>:
    149e:	0e 94 41 0a 	call	0x1482	; 0x1482 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    14a2:	08 95       	ret

000014a4 <delayMicroseconds.clone.0>:
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	6f 93       	push	r22
    14aa:	64 e0       	ldi	r22, 0x04	; 4
    14ac:	6a 95       	dec	r22
    14ae:	f1 f7       	brne	.-4      	; 0x14ac <delayMicroseconds.clone.0+0x8>
    14b0:	6f 91       	pop	r22
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	c9 f7       	brne	.-14     	; 0x14a8 <delayMicroseconds.clone.0+0x4>
    14b6:	08 95       	ret

000014b8 <_ZN12OrangutanLCD8busyWaitEv>:
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	1a b1       	in	r17, 0x0a	; 10
    14c2:	57 98       	cbi	0x0a, 7	; 10
    14c4:	5a 98       	cbi	0x0b, 2	; 11
    14c6:	28 9a       	sbi	0x05, 0	; 5
    14c8:	c0 e0       	ldi	r28, 0x00	; 0
    14ca:	d0 e0       	ldi	r29, 0x00	; 0
    14cc:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <delayMicroseconds.clone.0>
    14d0:	5c 9a       	sbi	0x0b, 4	; 11
    14d2:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <delayMicroseconds.clone.0>
    14d6:	09 b1       	in	r16, 0x09	; 9
    14d8:	5c 98       	cbi	0x0b, 4	; 11
    14da:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <delayMicroseconds.clone.0>
    14de:	5c 9a       	sbi	0x0b, 4	; 11
    14e0:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <delayMicroseconds.clone.0>
    14e4:	5c 98       	cbi	0x0b, 4	; 11
    14e6:	07 ff       	sbrs	r16, 7
    14e8:	11 c0       	rjmp	.+34     	; 0x150c <_ZN12OrangutanLCD8busyWaitEv+0x54>
    14ea:	24 96       	adiw	r28, 0x04	; 4
    14ec:	9e 01       	movw	r18, r28
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	80 91 57 01 	lds	r24, 0x0157
    14f6:	90 91 58 01 	lds	r25, 0x0158
    14fa:	a0 91 59 01 	lds	r26, 0x0159
    14fe:	b0 91 5a 01 	lds	r27, 0x015A
    1502:	28 17       	cp	r18, r24
    1504:	39 07       	cpc	r19, r25
    1506:	4a 07       	cpc	r20, r26
    1508:	5b 07       	cpc	r21, r27
    150a:	00 f3       	brcs	.-64     	; 0x14cc <_ZN12OrangutanLCD8busyWaitEv+0x14>
    150c:	1a b9       	out	0x0a, r17	; 10
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	08 95       	ret

00001518 <_ZN12OrangutanLCD8sendDataEh>:
    1518:	65 b1       	in	r22, 0x05	; 5
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	ac 01       	movw	r20, r24
    151e:	41 70       	andi	r20, 0x01	; 1
    1520:	50 70       	andi	r21, 0x00	; 0
    1522:	44 0f       	add	r20, r20
    1524:	55 1f       	adc	r21, r21
    1526:	9c 01       	movw	r18, r24
    1528:	26 70       	andi	r18, 0x06	; 6
    152a:	30 70       	andi	r19, 0x00	; 0
    152c:	53 e0       	ldi	r21, 0x03	; 3
    152e:	22 0f       	add	r18, r18
    1530:	33 1f       	adc	r19, r19
    1532:	5a 95       	dec	r21
    1534:	e1 f7       	brne	.-8      	; 0x152e <_ZN12OrangutanLCD8sendDataEh+0x16>
    1536:	24 2b       	or	r18, r20
    1538:	6d 7c       	andi	r22, 0xCD	; 205
    153a:	26 2b       	or	r18, r22
    153c:	25 b9       	out	0x05, r18	; 5
    153e:	2b b1       	in	r18, 0x0b	; 11
    1540:	88 70       	andi	r24, 0x08	; 8
    1542:	90 70       	andi	r25, 0x00	; 0
    1544:	34 e0       	ldi	r19, 0x04	; 4
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	3a 95       	dec	r19
    154c:	e1 f7       	brne	.-8      	; 0x1546 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    154e:	2f 77       	andi	r18, 0x7F	; 127
    1550:	28 2b       	or	r18, r24
    1552:	2b b9       	out	0x0b, r18	; 11
    1554:	5c 9a       	sbi	0x0b, 4	; 11
    1556:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <delayMicroseconds.clone.0>
    155a:	5c 98       	cbi	0x0b, 4	; 11
    155c:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <delayMicroseconds.clone.0>
    1560:	08 95       	ret

00001562 <_ZN12OrangutanLCD4sendEhhh>:
    1562:	a2 e0       	ldi	r26, 0x02	; 2
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e7 eb       	ldi	r30, 0xB7	; 183
    1568:	fa e0       	ldi	r31, 0x0A	; 10
    156a:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__prologue_saves__+0x16>
    156e:	18 2f       	mov	r17, r24
    1570:	4a 83       	std	Y+2, r20	; 0x02
    1572:	69 83       	std	Y+1, r22	; 0x01
    1574:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <_ZN12OrangutanLCD4initEv>
    1578:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <_ZN12OrangutanLCD8busyWaitEv>
    157c:	f4 b0       	in	r15, 0x04	; 4
    157e:	05 b1       	in	r16, 0x05	; 5
    1580:	da b0       	in	r13, 0x0a	; 10
    1582:	eb b0       	in	r14, 0x0b	; 11
    1584:	28 98       	cbi	0x05, 0	; 5
    1586:	69 81       	ldd	r22, Y+1	; 0x01
    1588:	4a 81       	ldd	r20, Y+2	; 0x02
    158a:	66 23       	and	r22, r22
    158c:	11 f0       	breq	.+4      	; 0x1592 <_ZN12OrangutanLCD4sendEhhh+0x30>
    158e:	5a 9a       	sbi	0x0b, 2	; 11
    1590:	01 c0       	rjmp	.+2      	; 0x1594 <_ZN12OrangutanLCD4sendEhhh+0x32>
    1592:	5a 98       	cbi	0x0b, 2	; 11
    1594:	84 b1       	in	r24, 0x04	; 4
    1596:	82 63       	ori	r24, 0x32	; 50
    1598:	84 b9       	out	0x04, r24	; 4
    159a:	57 9a       	sbi	0x0a, 7	; 10
    159c:	41 30       	cpi	r20, 0x01	; 1
    159e:	29 f0       	breq	.+10     	; 0x15aa <_ZN12OrangutanLCD4sendEhhh+0x48>
    15a0:	81 2f       	mov	r24, r17
    15a2:	82 95       	swap	r24
    15a4:	8f 70       	andi	r24, 0x0F	; 15
    15a6:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN12OrangutanLCD8sendDataEh>
    15aa:	81 2f       	mov	r24, r17
    15ac:	8f 70       	andi	r24, 0x0F	; 15
    15ae:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN12OrangutanLCD8sendDataEh>
    15b2:	da b8       	out	0x0a, r13	; 10
    15b4:	eb b8       	out	0x0b, r14	; 11
    15b6:	f4 b8       	out	0x04, r15	; 4
    15b8:	05 b9       	out	0x05, r16	; 5
    15ba:	22 96       	adiw	r28, 0x02	; 2
    15bc:	e7 e0       	ldi	r30, 0x07	; 7
    15be:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__epilogue_restores__+0x16>

000015c2 <_ZN12OrangutanLCD8send_cmdEh>:
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	42 e0       	ldi	r20, 0x02	; 2
    15c6:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_ZN12OrangutanLCD4sendEhhh>
    15ca:	08 95       	ret

000015cc <_ZN12OrangutanLCD9send_dataEh>:
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	42 e0       	ldi	r20, 0x02	; 2
    15d0:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_ZN12OrangutanLCD4sendEhhh>
    15d4:	08 95       	ret

000015d6 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    15d6:	ef 92       	push	r14
    15d8:	ff 92       	push	r15
    15da:	1f 93       	push	r17
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	0f 92       	push	r0
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	66 0f       	add	r22, r22
    15e8:	66 0f       	add	r22, r22
    15ea:	66 0f       	add	r22, r22
    15ec:	48 2f       	mov	r20, r24
    15ee:	59 2f       	mov	r21, r25
    15f0:	7a 01       	movw	r14, r20
    15f2:	10 e0       	ldi	r17, 0x00	; 0
    15f4:	81 2f       	mov	r24, r17
    15f6:	86 0f       	add	r24, r22
    15f8:	80 64       	ori	r24, 0x40	; 64
    15fa:	69 83       	std	Y+1, r22	; 0x01
    15fc:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN12OrangutanLCD8send_cmdEh>
    1600:	f7 01       	movw	r30, r14
    1602:	84 91       	lpm	r24, Z
    1604:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN12OrangutanLCD9send_dataEh>
    1608:	1f 5f       	subi	r17, 0xFF	; 255
    160a:	08 94       	sec
    160c:	e1 1c       	adc	r14, r1
    160e:	f1 1c       	adc	r15, r1
    1610:	69 81       	ldd	r22, Y+1	; 0x01
    1612:	18 30       	cpi	r17, 0x08	; 8
    1614:	79 f7       	brne	.-34     	; 0x15f4 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x1e>
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	1f 91       	pop	r17
    161e:	ff 90       	pop	r15
    1620:	ef 90       	pop	r14
    1622:	08 95       	ret

00001624 <lcd_load_custom_character>:
    1624:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    1628:	08 95       	ret

0000162a <print_character>:
    162a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN12OrangutanLCD9send_dataEh>
    162e:	08 95       	ret

00001630 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	41 e0       	ldi	r20, 0x01	; 1
    1634:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_ZN12OrangutanLCD4sendEhhh>
    1638:	08 95       	ret

0000163a <_ZN12OrangutanLCD5init2Ev>:
    163a:	80 e1       	ldi	r24, 0x10	; 16
    163c:	97 e2       	ldi	r25, 0x27	; 39
    163e:	a0 e0       	ldi	r26, 0x00	; 0
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	80 93 57 01 	sts	0x0157, r24
    1646:	90 93 58 01 	sts	0x0158, r25
    164a:	a0 93 59 01 	sts	0x0159, r26
    164e:	b0 93 5a 01 	sts	0x015A, r27
    1652:	52 9a       	sbi	0x0a, 2	; 10
    1654:	20 9a       	sbi	0x04, 0	; 4
    1656:	54 9a       	sbi	0x0a, 4	; 10
    1658:	8e e1       	ldi	r24, 0x1E	; 30
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
    1660:	83 e0       	ldi	r24, 0x03	; 3
    1662:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1666:	86 e0       	ldi	r24, 0x06	; 6
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
    167c:	83 e0       	ldi	r24, 0x03	; 3
    167e:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
    168a:	82 e0       	ldi	r24, 0x02	; 2
    168c:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1690:	82 e0       	ldi	r24, 0x02	; 2
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
    1698:	88 e2       	ldi	r24, 0x28	; 40
    169a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN12OrangutanLCD8send_cmdEh>
    169e:	88 e0       	ldi	r24, 0x08	; 8
    16a0:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN12OrangutanLCD8send_cmdEh>
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN12OrangutanLCD8send_cmdEh>
    16aa:	86 e0       	ldi	r24, 0x06	; 6
    16ac:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN12OrangutanLCD8send_cmdEh>
    16b0:	8c e0       	ldi	r24, 0x0C	; 12
    16b2:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN12OrangutanLCD8send_cmdEh>
    16b6:	08 95       	ret

000016b8 <_ZN12OrangutanLCD4initEv>:
    16b8:	80 91 5b 01 	lds	r24, 0x015B
    16bc:	88 23       	and	r24, r24
    16be:	29 f4       	brne	.+10     	; 0x16ca <_ZN12OrangutanLCD4initEv+0x12>
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	80 93 5b 01 	sts	0x015B, r24
    16c6:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN12OrangutanLCD5init2Ev>
    16ca:	08 95       	ret

000016cc <_ZN12OrangutanLCD5clearEv>:
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN12OrangutanLCD8send_cmdEh>
    16d2:	80 91 53 01 	lds	r24, 0x0153
    16d6:	90 91 54 01 	lds	r25, 0x0154
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	11 f1       	breq	.+68     	; 0x1722 <_ZN12OrangutanLCD5clearEv+0x56>
    16de:	a0 e0       	ldi	r26, 0x00	; 0
    16e0:	b0 e2       	ldi	r27, 0x20	; 32
    16e2:	08 c0       	rjmp	.+16     	; 0x16f4 <_ZN12OrangutanLCD5clearEv+0x28>
    16e4:	e0 91 53 01 	lds	r30, 0x0153
    16e8:	f0 91 54 01 	lds	r31, 0x0154
    16ec:	e2 0f       	add	r30, r18
    16ee:	f3 1f       	adc	r31, r19
    16f0:	b0 83       	st	Z, r27
    16f2:	af 5f       	subi	r26, 0xFF	; 255
    16f4:	2a 2f       	mov	r18, r26
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	80 91 24 01 	lds	r24, 0x0124
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	60 91 25 01 	lds	r22, 0x0125
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	86 9f       	mul	r24, r22
    1708:	a0 01       	movw	r20, r0
    170a:	87 9f       	mul	r24, r23
    170c:	50 0d       	add	r21, r0
    170e:	96 9f       	mul	r25, r22
    1710:	50 0d       	add	r21, r0
    1712:	11 24       	eor	r1, r1
    1714:	24 17       	cp	r18, r20
    1716:	35 07       	cpc	r19, r21
    1718:	2c f3       	brlt	.-54     	; 0x16e4 <_ZN12OrangutanLCD5clearEv+0x18>
    171a:	10 92 56 01 	sts	0x0156, r1
    171e:	10 92 55 01 	sts	0x0155, r1
    1722:	08 95       	ret

00001724 <clear>:
    1724:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN12OrangutanLCD5clearEv>
    1728:	08 95       	ret

0000172a <_ZN12OrangutanLCD5printEPKc>:
    172a:	ef 92       	push	r14
    172c:	ff 92       	push	r15
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	e8 2e       	mov	r14, r24
    1734:	e7 01       	movw	r28, r14
    1736:	7e 01       	movw	r14, r28
    1738:	f9 2e       	mov	r15, r25
    173a:	e7 01       	movw	r28, r14
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <_ZN12OrangutanLCD5printEPKc+0x18>
    173e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN12OrangutanLCD9send_dataEh>
    1742:	89 91       	ld	r24, Y+
    1744:	88 23       	and	r24, r24
    1746:	d9 f7       	brne	.-10     	; 0x173e <_ZN12OrangutanLCD5printEPKc+0x14>
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	ff 90       	pop	r15
    174e:	ef 90       	pop	r14
    1750:	08 95       	ret

00001752 <print>:
    1752:	0e 94 95 0b 	call	0x172a	; 0x172a <_ZN12OrangutanLCD5printEPKc>
    1756:	08 95       	ret

00001758 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	ec 01       	movw	r28, r24
    175e:	03 c0       	rjmp	.+6      	; 0x1766 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    1760:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN12OrangutanLCD9send_dataEh>
    1764:	21 96       	adiw	r28, 0x01	; 1
    1766:	fe 01       	movw	r30, r28
    1768:	84 91       	lpm	r24, Z
    176a:	88 23       	and	r24, r24
    176c:	c9 f7       	brne	.-14     	; 0x1760 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	08 95       	ret

00001774 <print_from_program_space>:
    1774:	0e 94 ac 0b 	call	0x1758	; 0x1758 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    1778:	08 95       	ret

0000177a <_ZN12OrangutanLCD5printEm>:
    177a:	aa e0       	ldi	r26, 0x0A	; 10
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e3 ec       	ldi	r30, 0xC3	; 195
    1780:	fb e0       	ldi	r31, 0x0B	; 11
    1782:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__+0x10>
    1786:	9b 01       	movw	r18, r22
    1788:	ac 01       	movw	r20, r24
    178a:	1a e0       	ldi	r17, 0x0A	; 10
    178c:	ea e0       	ldi	r30, 0x0A	; 10
    178e:	ce 2e       	mov	r12, r30
    1790:	d1 2c       	mov	r13, r1
    1792:	e1 2c       	mov	r14, r1
    1794:	f1 2c       	mov	r15, r1
    1796:	5e 01       	movw	r10, r28
    1798:	08 94       	sec
    179a:	a1 1c       	adc	r10, r1
    179c:	b1 1c       	adc	r11, r1
    179e:	02 2f       	mov	r16, r18
    17a0:	ca 01       	movw	r24, r20
    17a2:	b9 01       	movw	r22, r18
    17a4:	a7 01       	movw	r20, r14
    17a6:	96 01       	movw	r18, r12
    17a8:	0e 94 cc 13 	call	0x2798	; 0x2798 <__udivmodsi4>
    17ac:	11 50       	subi	r17, 0x01	; 1
    17ae:	f5 01       	movw	r30, r10
    17b0:	e1 0f       	add	r30, r17
    17b2:	f1 1d       	adc	r31, r1
    17b4:	00 5d       	subi	r16, 0xD0	; 208
    17b6:	92 2f       	mov	r25, r18
    17b8:	99 0f       	add	r25, r25
    17ba:	89 2f       	mov	r24, r25
    17bc:	88 0f       	add	r24, r24
    17be:	88 0f       	add	r24, r24
    17c0:	89 0f       	add	r24, r25
    17c2:	08 1b       	sub	r16, r24
    17c4:	00 83       	st	Z, r16
    17c6:	21 15       	cp	r18, r1
    17c8:	31 05       	cpc	r19, r1
    17ca:	41 05       	cpc	r20, r1
    17cc:	51 05       	cpc	r21, r1
    17ce:	39 f7       	brne	.-50     	; 0x179e <_ZN12OrangutanLCD5printEm+0x24>
    17d0:	08 c0       	rjmp	.+16     	; 0x17e2 <_ZN12OrangutanLCD5printEm+0x68>
    17d2:	f6 01       	movw	r30, r12
    17d4:	e1 0f       	add	r30, r17
    17d6:	f1 1d       	adc	r31, r1
    17d8:	80 81       	ld	r24, Z
    17da:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN12OrangutanLCD9send_dataEh>
    17de:	1f 5f       	subi	r17, 0xFF	; 255
    17e0:	04 c0       	rjmp	.+8      	; 0x17ea <_ZN12OrangutanLCD5printEm+0x70>
    17e2:	6e 01       	movw	r12, r28
    17e4:	08 94       	sec
    17e6:	c1 1c       	adc	r12, r1
    17e8:	d1 1c       	adc	r13, r1
    17ea:	1a 30       	cpi	r17, 0x0A	; 10
    17ec:	90 f3       	brcs	.-28     	; 0x17d2 <_ZN12OrangutanLCD5printEm+0x58>
    17ee:	2a 96       	adiw	r28, 0x0a	; 10
    17f0:	ea e0       	ldi	r30, 0x0A	; 10
    17f2:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__+0x10>

000017f6 <_ZN12OrangutanLCD5printEl>:
    17f6:	ef 92       	push	r14
    17f8:	ff 92       	push	r15
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	7b 01       	movw	r14, r22
    1800:	8c 01       	movw	r16, r24
    1802:	97 ff       	sbrs	r25, 7
    1804:	0b c0       	rjmp	.+22     	; 0x181c <_ZN12OrangutanLCD5printEl+0x26>
    1806:	10 95       	com	r17
    1808:	00 95       	com	r16
    180a:	f0 94       	com	r15
    180c:	e0 94       	com	r14
    180e:	e1 1c       	adc	r14, r1
    1810:	f1 1c       	adc	r15, r1
    1812:	01 1d       	adc	r16, r1
    1814:	11 1d       	adc	r17, r1
    1816:	8d e2       	ldi	r24, 0x2D	; 45
    1818:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN12OrangutanLCD9send_dataEh>
    181c:	c8 01       	movw	r24, r16
    181e:	b7 01       	movw	r22, r14
    1820:	0e 94 bd 0b 	call	0x177a	; 0x177a <_ZN12OrangutanLCD5printEm>
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	08 95       	ret

0000182e <print_long>:
    182e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN12OrangutanLCD5printEl>
    1832:	08 95       	ret

00001834 <_ZN12OrangutanLCD6gotoXYEhh>:
    1834:	a5 e0       	ldi	r26, 0x05	; 5
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e0 e2       	ldi	r30, 0x20	; 32
    183a:	fc e0       	ldi	r31, 0x0C	; 12
    183c:	0c 94 27 14 	jmp	0x284e	; 0x284e <__prologue_saves__+0x1e>
    1840:	18 2f       	mov	r17, r24
    1842:	80 e8       	ldi	r24, 0x80	; 128
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	80 ec       	ldi	r24, 0xC0	; 192
    1848:	8a 83       	std	Y+2, r24	; 0x02
    184a:	84 e9       	ldi	r24, 0x94	; 148
    184c:	8b 83       	std	Y+3, r24	; 0x03
    184e:	84 ed       	ldi	r24, 0xD4	; 212
    1850:	8c 83       	std	Y+4, r24	; 0x04
    1852:	fe 01       	movw	r30, r28
    1854:	e6 0f       	add	r30, r22
    1856:	f1 1d       	adc	r31, r1
    1858:	81 81       	ldd	r24, Z+1	; 0x01
    185a:	81 0f       	add	r24, r17
    185c:	6d 83       	std	Y+5, r22	; 0x05
    185e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN12OrangutanLCD8send_cmdEh>
    1862:	10 93 56 01 	sts	0x0156, r17
    1866:	6d 81       	ldd	r22, Y+5	; 0x05
    1868:	60 93 55 01 	sts	0x0155, r22
    186c:	25 96       	adiw	r28, 0x05	; 5
    186e:	e3 e0       	ldi	r30, 0x03	; 3
    1870:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__epilogue_restores__+0x1e>

00001874 <lcd_goto_xy>:
    1874:	0e 94 1a 0c 	call	0x1834	; 0x1834 <_ZN12OrangutanLCD6gotoXYEhh>
    1878:	08 95       	ret

0000187a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    187a:	fc 01       	movw	r30, r24
    187c:	11 82       	std	Z+1, r1	; 0x01
    187e:	10 82       	st	Z, r1
    1880:	13 82       	std	Z+3, r1	; 0x03
    1882:	12 82       	std	Z+2, r1	; 0x02
    1884:	15 82       	std	Z+5, r1	; 0x05
    1886:	14 82       	std	Z+4, r1	; 0x04
    1888:	16 82       	std	Z+6, r1	; 0x06
    188a:	68 30       	cpi	r22, 0x08	; 8
    188c:	68 f4       	brcc	.+26     	; 0x18a8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    188e:	89 e2       	ldi	r24, 0x29	; 41
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
    1896:	8b e2       	ldi	r24, 0x2B	; 43
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	93 83       	std	Z+3, r25	; 0x03
    189c:	82 83       	std	Z+2, r24	; 0x02
    189e:	8a e2       	ldi	r24, 0x2A	; 42
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	95 83       	std	Z+5, r25	; 0x05
    18a4:	84 83       	std	Z+4, r24	; 0x04
    18a6:	11 c0       	rjmp	.+34     	; 0x18ca <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x50>
    18a8:	6e 30       	cpi	r22, 0x0E	; 14
    18aa:	c0 f4       	brcc	.+48     	; 0x18dc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x62>
    18ac:	83 e2       	ldi	r24, 0x23	; 35
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	80 83       	st	Z, r24
    18b4:	85 e2       	ldi	r24, 0x25	; 37
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	93 83       	std	Z+3, r25	; 0x03
    18ba:	82 83       	std	Z+2, r24	; 0x02
    18bc:	84 e2       	ldi	r24, 0x24	; 36
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	95 83       	std	Z+5, r25	; 0x05
    18c2:	84 83       	std	Z+4, r24	; 0x04
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	68 50       	subi	r22, 0x08	; 8
    18c8:	70 40       	sbci	r23, 0x00	; 0
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x5a>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	6a 95       	dec	r22
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x56>
    18d8:	86 83       	std	Z+6, r24	; 0x06
    18da:	08 95       	ret
    18dc:	65 31       	cpi	r22, 0x15	; 21
    18de:	b8 f4       	brcc	.+46     	; 0x190e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x94>
    18e0:	86 e2       	ldi	r24, 0x26	; 38
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	80 83       	st	Z, r24
    18e8:	88 e2       	ldi	r24, 0x28	; 40
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	93 83       	std	Z+3, r25	; 0x03
    18ee:	82 83       	std	Z+2, r24	; 0x02
    18f0:	87 e2       	ldi	r24, 0x27	; 39
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	95 83       	std	Z+5, r25	; 0x05
    18f6:	84 83       	std	Z+4, r24	; 0x04
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	6e 50       	subi	r22, 0x0E	; 14
    18fc:	70 40       	sbci	r23, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8e>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	6a 95       	dec	r22
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8a>
    190c:	86 83       	std	Z+6, r24	; 0x06
    190e:	08 95       	ret

00001910 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>:
    1910:	fc 01       	movw	r30, r24
    1912:	a4 81       	ldd	r26, Z+4	; 0x04
    1914:	b5 81       	ldd	r27, Z+5	; 0x05
    1916:	86 81       	ldd	r24, Z+6	; 0x06
    1918:	66 23       	and	r22, r22
    191a:	21 f0       	breq	.+8      	; 0x1924 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh+0x14>
    191c:	9c 91       	ld	r25, X
    191e:	98 2b       	or	r25, r24
    1920:	9c 93       	st	X, r25
    1922:	08 95       	ret
    1924:	9c 91       	ld	r25, X
    1926:	80 95       	com	r24
    1928:	89 23       	and	r24, r25
    192a:	8c 93       	st	X, r24
    192c:	08 95       	ret

0000192e <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>:
    192e:	fc 01       	movw	r30, r24
    1930:	6f 3f       	cpi	r22, 0xFF	; 255
    1932:	31 f4       	brne	.+12     	; 0x1940 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x12>
    1934:	a2 81       	ldd	r26, Z+2	; 0x02
    1936:	b3 81       	ldd	r27, Z+3	; 0x03
    1938:	8c 91       	ld	r24, X
    193a:	96 81       	ldd	r25, Z+6	; 0x06
    193c:	89 27       	eor	r24, r25
    193e:	0c c0       	rjmp	.+24     	; 0x1958 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x2a>
    1940:	a2 81       	ldd	r26, Z+2	; 0x02
    1942:	b3 81       	ldd	r27, Z+3	; 0x03
    1944:	86 81       	ldd	r24, Z+6	; 0x06
    1946:	66 23       	and	r22, r22
    1948:	21 f0       	breq	.+8      	; 0x1952 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x24>
    194a:	9c 91       	ld	r25, X
    194c:	98 2b       	or	r25, r24
    194e:	9c 93       	st	X, r25
    1950:	08 95       	ret
    1952:	9c 91       	ld	r25, X
    1954:	80 95       	com	r24
    1956:	89 23       	and	r24, r25
    1958:	8c 93       	st	X, r24
    195a:	08 95       	ret

0000195c <_ZN16OrangutanDigital9setOutputEhh>:
    195c:	a7 e0       	ldi	r26, 0x07	; 7
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e4 eb       	ldi	r30, 0xB4	; 180
    1962:	fc e0       	ldi	r31, 0x0C	; 12
    1964:	0c 94 25 14 	jmp	0x284a	; 0x284a <__prologue_saves__+0x1a>
    1968:	28 2f       	mov	r18, r24
    196a:	f6 2e       	mov	r15, r22
    196c:	8e 01       	movw	r16, r28
    196e:	0f 5f       	subi	r16, 0xFF	; 255
    1970:	1f 4f       	sbci	r17, 0xFF	; 255
    1972:	c8 01       	movw	r24, r16
    1974:	62 2f       	mov	r22, r18
    1976:	0e 94 3d 0c 	call	0x187a	; 0x187a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    197a:	c8 01       	movw	r24, r16
    197c:	6f 2d       	mov	r22, r15
    197e:	0e 94 97 0c 	call	0x192e	; 0x192e <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>
    1982:	c8 01       	movw	r24, r16
    1984:	61 e0       	ldi	r22, 0x01	; 1
    1986:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>
    198a:	27 96       	adiw	r28, 0x07	; 7
    198c:	e5 e0       	ldi	r30, 0x05	; 5
    198e:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__epilogue_restores__+0x1a>

00001992 <_ZN15OrangutanMotors5init2Ev>:
    1992:	e0 eb       	ldi	r30, 0xB0	; 176
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	83 ef       	ldi	r24, 0xF3	; 243
    1998:	80 83       	st	Z, r24
    199a:	80 81       	ld	r24, Z
    199c:	84 bd       	out	0x24, r24	; 36
    199e:	e1 eb       	ldi	r30, 0xB1	; 177
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	80 83       	st	Z, r24
    19a6:	80 81       	ld	r24, Z
    19a8:	85 bd       	out	0x25, r24	; 37
    19aa:	e4 eb       	ldi	r30, 0xB4	; 180
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	10 82       	st	Z, r1
    19b0:	80 81       	ld	r24, Z
    19b2:	e3 eb       	ldi	r30, 0xB3	; 179
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 83       	st	Z, r24
    19b8:	80 81       	ld	r24, Z
    19ba:	88 bd       	out	0x28, r24	; 40
    19bc:	88 b5       	in	r24, 0x28	; 40
    19be:	87 bd       	out	0x27, r24	; 39
    19c0:	86 e0       	ldi	r24, 0x06	; 6
    19c2:	60 e0       	ldi	r22, 0x00	; 0
    19c4:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN16OrangutanDigital9setOutputEhh>
    19c8:	85 e0       	ldi	r24, 0x05	; 5
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN16OrangutanDigital9setOutputEhh>
    19d0:	8b e0       	ldi	r24, 0x0B	; 11
    19d2:	60 e0       	ldi	r22, 0x00	; 0
    19d4:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN16OrangutanDigital9setOutputEhh>
    19d8:	83 e0       	ldi	r24, 0x03	; 3
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN16OrangutanDigital9setOutputEhh>
    19e0:	08 95       	ret

000019e2 <_ZN15OrangutanMotors4initEv>:
    19e2:	80 91 5c 01 	lds	r24, 0x015C
    19e6:	88 23       	and	r24, r24
    19e8:	29 f4       	brne	.+10     	; 0x19f4 <_ZN15OrangutanMotors4initEv+0x12>
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	80 93 5c 01 	sts	0x015C, r24
    19f0:	0e 94 c9 0c 	call	0x1992	; 0x1992 <_ZN15OrangutanMotors5init2Ev>
    19f4:	08 95       	ret

000019f6 <_ZN15OrangutanMotors10setM1SpeedEi>:
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	ec 01       	movw	r28, r24
    19fc:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <_ZN15OrangutanMotors4initEv>
    1a00:	d7 ff       	sbrs	r29, 7
    1a02:	05 c0       	rjmp	.+10     	; 0x1a0e <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    1a04:	d0 95       	com	r29
    1a06:	c1 95       	neg	r28
    1a08:	df 4f       	sbci	r29, 0xFF	; 255
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	01 c0       	rjmp	.+2      	; 0x1a10 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	cf 3f       	cpi	r28, 0xFF	; 255
    1a12:	d1 05       	cpc	r29, r1
    1a14:	19 f0       	breq	.+6      	; 0x1a1c <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1a16:	14 f0       	brlt	.+4      	; 0x1a1c <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1a18:	cf ef       	ldi	r28, 0xFF	; 255
    1a1a:	d0 e0       	ldi	r29, 0x00	; 0
    1a1c:	88 23       	and	r24, r24
    1a1e:	19 f0       	breq	.+6      	; 0x1a26 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1a20:	18 bc       	out	0x28, r1	; 40
    1a22:	c7 bd       	out	0x27, r28	; 39
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1a26:	c8 bd       	out	0x28, r28	; 40
    1a28:	17 bc       	out	0x27, r1	; 39
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	08 95       	ret

00001a30 <_ZN15OrangutanMotors10setM2SpeedEi>:
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	ec 01       	movw	r28, r24
    1a36:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <_ZN15OrangutanMotors4initEv>
    1a3a:	d7 ff       	sbrs	r29, 7
    1a3c:	05 c0       	rjmp	.+10     	; 0x1a48 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1a3e:	d0 95       	com	r29
    1a40:	c1 95       	neg	r28
    1a42:	df 4f       	sbci	r29, 0xFF	; 255
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	01 c0       	rjmp	.+2      	; 0x1a4a <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	cf 3f       	cpi	r28, 0xFF	; 255
    1a4c:	d1 05       	cpc	r29, r1
    1a4e:	19 f0       	breq	.+6      	; 0x1a56 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1a50:	14 f0       	brlt	.+4      	; 0x1a56 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1a52:	cf ef       	ldi	r28, 0xFF	; 255
    1a54:	d0 e0       	ldi	r29, 0x00	; 0
    1a56:	88 23       	and	r24, r24
    1a58:	29 f0       	breq	.+10     	; 0x1a64 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1a5a:	10 92 b4 00 	sts	0x00B4, r1
    1a5e:	c0 93 b3 00 	sts	0x00B3, r28
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1a64:	c0 93 b4 00 	sts	0x00B4, r28
    1a68:	10 92 b3 00 	sts	0x00B3, r1
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	08 95       	ret

00001a72 <_ZN15OrangutanMotors9setSpeedsEii>:
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	eb 01       	movw	r28, r22
    1a78:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <_ZN15OrangutanMotors10setM1SpeedEi>
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <_ZN15OrangutanMotors10setM2SpeedEi>
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	08 95       	ret

00001a88 <set_motors>:
    1a88:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <_ZN15OrangutanMotors9setSpeedsEii>
    1a8c:	08 95       	ret

00001a8e <_ZN20OrangutanPushbuttons5init2Ev>:
    1a8e:	84 b1       	in	r24, 0x04	; 4
    1a90:	8d 7c       	andi	r24, 0xCD	; 205
    1a92:	84 b9       	out	0x04, r24	; 4
    1a94:	85 b1       	in	r24, 0x05	; 5
    1a96:	82 63       	ori	r24, 0x32	; 50
    1a98:	85 b9       	out	0x05, r24	; 5
    1a9a:	85 e0       	ldi	r24, 0x05	; 5
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	6f 93       	push	r22
    1aa0:	64 e0       	ldi	r22, 0x04	; 4
    1aa2:	6a 95       	dec	r22
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1aa6:	6f 91       	pop	r22
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	c9 f7       	brne	.-14     	; 0x1a9e <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1aac:	08 95       	ret

00001aae <_ZN20OrangutanPushbuttons4initEv>:
    1aae:	80 91 5d 01 	lds	r24, 0x015D
    1ab2:	88 23       	and	r24, r24
    1ab4:	29 f4       	brne	.+10     	; 0x1ac0 <_ZN20OrangutanPushbuttons4initEv+0x12>
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	80 93 5d 01 	sts	0x015D, r24
    1abc:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <_ZN20OrangutanPushbuttons5init2Ev>
    1ac0:	08 95       	ret

00001ac2 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1ac2:	1f 93       	push	r17
    1ac4:	18 2f       	mov	r17, r24
    1ac6:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_ZN20OrangutanPushbuttons4initEv>
    1aca:	83 b1       	in	r24, 0x03	; 3
    1acc:	81 23       	and	r24, r17
    1ace:	e9 f3       	breq	.-6      	; 0x1aca <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1ad0:	8a e0       	ldi	r24, 0x0A	; 10
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <delay_ms>
    1ad8:	83 b1       	in	r24, 0x03	; 3
    1ada:	81 23       	and	r24, r17
    1adc:	b1 f3       	breq	.-20     	; 0x1aca <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1ade:	83 b1       	in	r24, 0x03	; 3
    1ae0:	81 23       	and	r24, r17
    1ae2:	1f 91       	pop	r17
    1ae4:	08 95       	ret

00001ae6 <wait_for_button_release>:
    1ae6:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    1aea:	08 95       	ret

00001aec <_ZN20OrangutanPushbuttons9isPressedEh>:
    1aec:	a1 e0       	ldi	r26, 0x01	; 1
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	ec e7       	ldi	r30, 0x7C	; 124
    1af2:	fd e0       	ldi	r31, 0x0D	; 13
    1af4:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__prologue_saves__+0x20>
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_ZN20OrangutanPushbuttons4initEv>
    1afe:	93 b1       	in	r25, 0x03	; 3
    1b00:	90 95       	com	r25
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	89 23       	and	r24, r25
    1b06:	21 96       	adiw	r28, 0x01	; 1
    1b08:	e2 e0       	ldi	r30, 0x02	; 2
    1b0a:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__epilogue_restores__+0x20>

00001b0e <button_is_pressed>:
    1b0e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_ZN20OrangutanPushbuttons9isPressedEh>
    1b12:	08 95       	ret

00001b14 <_ZN13OrangutanTime17delayMicrosecondsEj>:
    1b14:	6f 93       	push	r22
    1b16:	64 e0       	ldi	r22, 0x04	; 4
    1b18:	6a 95       	dec	r22
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
    1b1c:	6f 91       	pop	r22
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	c9 f7       	brne	.-14     	; 0x1b14 <_ZN13OrangutanTime17delayMicrosecondsEj>
    1b22:	08 95       	ret

00001b24 <__vector_9>:
    1b24:	2f 92       	push	r2
    1b26:	8f 93       	push	r24
    1b28:	9f 93       	push	r25
    1b2a:	2f b6       	in	r2, 0x3f	; 63
    1b2c:	80 91 6b 01 	lds	r24, 0x016B
    1b30:	90 91 6c 01 	lds	r25, 0x016C
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	80 93 6b 01 	sts	0x016B, r24
    1b3a:	90 93 6c 01 	sts	0x016C, r25
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	80 91 6d 01 	lds	r24, 0x016D
    1b44:	89 1f       	adc	r24, r25
    1b46:	80 93 6d 01 	sts	0x016D, r24
    1b4a:	90 91 73 01 	lds	r25, 0x0173
    1b4e:	9c 5f       	subi	r25, 0xFC	; 252
    1b50:	90 93 73 01 	sts	0x0173, r25
    1b54:	80 91 72 01 	lds	r24, 0x0172
    1b58:	80 51       	subi	r24, 0x10	; 16
    1b5a:	97 42       	sbci	r25, 0x27	; 39
    1b5c:	c0 f0       	brcs	.+48     	; 0x1b8e <end>
    1b5e:	90 93 73 01 	sts	0x0173, r25
    1b62:	80 93 72 01 	sts	0x0172, r24
    1b66:	80 91 6e 01 	lds	r24, 0x016E
    1b6a:	90 91 6f 01 	lds	r25, 0x016F
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	80 93 6e 01 	sts	0x016E, r24
    1b74:	90 93 6f 01 	sts	0x016F, r25
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	80 91 70 01 	lds	r24, 0x0170
    1b7e:	89 1f       	adc	r24, r25
    1b80:	80 93 70 01 	sts	0x0170, r24
    1b84:	80 91 71 01 	lds	r24, 0x0171
    1b88:	89 1f       	adc	r24, r25
    1b8a:	80 93 71 01 	sts	0x0171, r24

00001b8e <end>:
    1b8e:	2f be       	out	0x3f, r2	; 63
    1b90:	9f 91       	pop	r25
    1b92:	8f 91       	pop	r24
    1b94:	2f 90       	pop	r2
    1b96:	18 95       	reti

00001b98 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	ec 01       	movw	r28, r24
    1b9e:	05 c0       	rjmp	.+10     	; 0x1baa <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
    1ba0:	88 ee       	ldi	r24, 0xE8	; 232
    1ba2:	93 e0       	ldi	r25, 0x03	; 3
    1ba4:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <_ZN13OrangutanTime17delayMicrosecondsEj>
    1ba8:	21 97       	sbiw	r28, 0x01	; 1
    1baa:	20 97       	sbiw	r28, 0x00	; 0
    1bac:	c9 f7       	brne	.-14     	; 0x1ba0 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	08 95       	ret

00001bb4 <delay_ms>:
    1bb4:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN13OrangutanTime17delayMillisecondsEj>
    1bb8:	08 95       	ret

00001bba <_ZN13OrangutanTime5init2Ev>:
    1bba:	e0 e7       	ldi	r30, 0x70	; 112
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8e 7f       	andi	r24, 0xFE	; 254
    1bc2:	80 83       	st	Z, r24
    1bc4:	a0 eb       	ldi	r26, 0xB0	; 176
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	8c 91       	ld	r24, X
    1bca:	83 60       	ori	r24, 0x03	; 3
    1bcc:	8c 93       	st	X, r24
    1bce:	a1 eb       	ldi	r26, 0xB1	; 177
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	8c 91       	ld	r24, X
    1bd4:	80 7f       	andi	r24, 0xF0	; 240
    1bd6:	8c 93       	st	X, r24
    1bd8:	8c 91       	ld	r24, X
    1bda:	82 60       	ori	r24, 0x02	; 2
    1bdc:	8c 93       	st	X, r24
    1bde:	b8 9a       	sbi	0x17, 0	; 23
    1be0:	80 81       	ld	r24, Z
    1be2:	81 60       	ori	r24, 0x01	; 1
    1be4:	80 83       	st	Z, r24
    1be6:	78 94       	sei
    1be8:	08 95       	ret

00001bea <_ZN13OrangutanTime4initEv>:
    1bea:	80 91 74 01 	lds	r24, 0x0174
    1bee:	88 23       	and	r24, r24
    1bf0:	29 f4       	brne	.+10     	; 0x1bfc <_ZN13OrangutanTime4initEv+0x12>
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	80 93 74 01 	sts	0x0174, r24
    1bf8:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <_ZN13OrangutanTime5init2Ev>
    1bfc:	08 95       	ret

00001bfe <_ZN13OrangutanTime5resetEv>:
    1bfe:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_ZN13OrangutanTime4initEv>
    1c02:	e0 e7       	ldi	r30, 0x70	; 112
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	8e 7f       	andi	r24, 0xFE	; 254
    1c0a:	80 83       	st	Z, r24
    1c0c:	10 92 6e 01 	sts	0x016E, r1
    1c10:	10 92 6f 01 	sts	0x016F, r1
    1c14:	10 92 70 01 	sts	0x0170, r1
    1c18:	10 92 71 01 	sts	0x0171, r1
    1c1c:	10 92 73 01 	sts	0x0173, r1
    1c20:	10 92 72 01 	sts	0x0172, r1
    1c24:	80 81       	ld	r24, Z
    1c26:	81 60       	ori	r24, 0x01	; 1
    1c28:	80 83       	st	Z, r24
    1c2a:	08 95       	ret

00001c2c <calibrate_line_sensors>:
    1c2c:	68 2f       	mov	r22, r24
    1c2e:	85 e7       	ldi	r24, 0x75	; 117
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	0e 94 46 13 	call	0x268c	; 0x268c <_ZN16PololuQTRSensors9calibrateEh>
    1c36:	08 95       	ret

00001c38 <read_line>:
    1c38:	9c 01       	movw	r18, r24
    1c3a:	46 2f       	mov	r20, r22
    1c3c:	85 e7       	ldi	r24, 0x75	; 117
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	b9 01       	movw	r22, r18
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN16PololuQTRSensors8readLineEPjhh>
    1c48:	08 95       	ret

00001c4a <_ZN9Pololu3pi4initEjh>:
    1c4a:	0f 93       	push	r16
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <_ZN9Pololu3pi4initEjh+0x8>
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <_ZN9Pololu3pi4initEjh+0xa>
    1c54:	0f 92       	push	r0
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	9c 01       	movw	r18, r24
    1c5c:	96 2f       	mov	r25, r22
    1c5e:	de 01       	movw	r26, r28
    1c60:	11 96       	adiw	r26, 0x01	; 1
    1c62:	e6 e2       	ldi	r30, 0x26	; 38
    1c64:	f1 e0       	ldi	r31, 0x01	; 1
    1c66:	85 e0       	ldi	r24, 0x05	; 5
    1c68:	01 90       	ld	r0, Z+
    1c6a:	0d 92       	st	X+, r0
    1c6c:	81 50       	subi	r24, 0x01	; 1
    1c6e:	e1 f7       	brne	.-8      	; 0x1c68 <_ZN9Pololu3pi4initEjh+0x1e>
    1c70:	be 01       	movw	r22, r28
    1c72:	6f 5f       	subi	r22, 0xFF	; 255
    1c74:	7f 4f       	sbci	r23, 0xFF	; 255
    1c76:	99 23       	and	r25, r25
    1c78:	29 f0       	breq	.+10     	; 0x1c84 <_ZN9Pololu3pi4initEjh+0x3a>
    1c7a:	85 e7       	ldi	r24, 0x75	; 117
    1c7c:	91 e0       	ldi	r25, 0x01	; 1
    1c7e:	45 e0       	ldi	r20, 0x05	; 5
    1c80:	0f ef       	ldi	r16, 0xFF	; 255
    1c82:	04 c0       	rjmp	.+8      	; 0x1c8c <_ZN9Pololu3pi4initEjh+0x42>
    1c84:	85 e7       	ldi	r24, 0x75	; 117
    1c86:	91 e0       	ldi	r25, 0x01	; 1
    1c88:	45 e0       	ldi	r20, 0x05	; 5
    1c8a:	03 e1       	ldi	r16, 0x13	; 19
    1c8c:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1c90:	85 e7       	ldi	r24, 0x75	; 117
    1c92:	91 e0       	ldi	r25, 0x01	; 1
    1c94:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <_ZN16PololuQTRSensors11emittersOffEv>
    1c98:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN13OrangutanTime5resetEv>
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	0f 91       	pop	r16
    1cac:	08 95       	ret

00001cae <pololu_3pi_init>:
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <_ZN9Pololu3pi4initEjh>
    1cb4:	08 95       	ret

00001cb6 <_GLOBAL__I_pololu_3pi_init>:
    1cb6:	08 95       	ret

00001cb8 <_GLOBAL__D_pololu_3pi_init>:
    1cb8:	85 e7       	ldi	r24, 0x75	; 117
    1cba:	91 e0       	ldi	r25, 0x01	; 1
    1cbc:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_ZN16PololuQTRSensorsD1Ev>
    1cc0:	08 95       	ret

00001cc2 <delayMicroseconds>:
    1cc2:	6f 93       	push	r22
    1cc4:	64 e0       	ldi	r22, 0x04	; 4
    1cc6:	6a 95       	dec	r22
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <delayMicroseconds+0x4>
    1cca:	6f 91       	pop	r22
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	c9 f7       	brne	.-14     	; 0x1cc2 <delayMicroseconds>
    1cd0:	08 95       	ret

00001cd2 <_ZN16PololuQTRSensors4initEhhh>:
    1cd2:	a7 e0       	ldi	r26, 0x07	; 7
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	ef e6       	ldi	r30, 0x6F	; 111
    1cd8:	fe e0       	ldi	r31, 0x0E	; 14
    1cda:	0c 94 26 14 	jmp	0x284c	; 0x284c <__prologue_saves__+0x1c>
    1cde:	8c 01       	movw	r16, r24
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	11 82       	std	Z+1, r1	; 0x01
    1ce4:	10 82       	st	Z, r1
    1ce6:	13 82       	std	Z+3, r1	; 0x03
    1ce8:	12 82       	std	Z+2, r1	; 0x02
    1cea:	15 82       	std	Z+5, r1	; 0x05
    1cec:	14 82       	std	Z+4, r1	; 0x04
    1cee:	17 82       	std	Z+7, r1	; 0x07
    1cf0:	16 82       	std	Z+6, r1	; 0x06
    1cf2:	61 31       	cpi	r22, 0x11	; 17
    1cf4:	18 f0       	brcs	.+6      	; 0x1cfc <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1cf6:	80 e1       	ldi	r24, 0x10	; 16
    1cf8:	80 87       	std	Z+8, r24	; 0x08
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	60 87       	std	Z+8, r22	; 0x08
    1d00:	f8 01       	movw	r30, r16
    1d02:	20 8b       	std	Z+16, r18	; 0x10
    1d04:	ce 01       	movw	r24, r28
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	64 2f       	mov	r22, r20
    1d0a:	0e 94 3d 0c 	call	0x187a	; 0x187a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1d0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d10:	f8 01       	movw	r30, r16
    1d12:	81 87       	std	Z+9, r24	; 0x09
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	93 87       	std	Z+11, r25	; 0x0b
    1d1a:	82 87       	std	Z+10, r24	; 0x0a
    1d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d20:	95 87       	std	Z+13, r25	; 0x0d
    1d22:	84 87       	std	Z+12, r24	; 0x0c
    1d24:	27 96       	adiw	r28, 0x07	; 7
    1d26:	e4 e0       	ldi	r30, 0x04	; 4
    1d28:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__epilogue_restores__+0x1c>

00001d2c <_ZN16PololuQTRSensors11emittersOffEv>:
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d30:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d32:	10 97       	sbiw	r26, 0x00	; 0
    1d34:	79 f0       	breq	.+30     	; 0x1d54 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    1d36:	8c 91       	ld	r24, X
    1d38:	91 85       	ldd	r25, Z+9	; 0x09
    1d3a:	89 2b       	or	r24, r25
    1d3c:	8c 93       	st	X, r24
    1d3e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d40:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d42:	9c 91       	ld	r25, X
    1d44:	81 85       	ldd	r24, Z+9	; 0x09
    1d46:	80 95       	com	r24
    1d48:	89 23       	and	r24, r25
    1d4a:	8c 93       	st	X, r24
    1d4c:	88 ec       	ldi	r24, 0xC8	; 200
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delayMicroseconds>
    1d54:	08 95       	ret

00001d56 <_ZN16PololuQTRSensors10emittersOnEv>:
    1d56:	fc 01       	movw	r30, r24
    1d58:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d5a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d5c:	10 97       	sbiw	r26, 0x00	; 0
    1d5e:	71 f0       	breq	.+28     	; 0x1d7c <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    1d60:	8c 91       	ld	r24, X
    1d62:	91 85       	ldd	r25, Z+9	; 0x09
    1d64:	89 2b       	or	r24, r25
    1d66:	8c 93       	st	X, r24
    1d68:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d6a:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d6c:	8c 91       	ld	r24, X
    1d6e:	91 85       	ldd	r25, Z+9	; 0x09
    1d70:	89 2b       	or	r24, r25
    1d72:	8c 93       	st	X, r24
    1d74:	88 ec       	ldi	r24, 0xC8	; 200
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delayMicroseconds>
    1d7c:	08 95       	ret

00001d7e <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    1d7e:	a7 e0       	ldi	r26, 0x07	; 7
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e5 ec       	ldi	r30, 0xC5	; 197
    1d84:	fe e0       	ldi	r31, 0x0E	; 14
    1d86:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__prologue_saves__>
    1d8a:	7c 01       	movw	r14, r24
    1d8c:	1b 01       	movw	r2, r22
    1d8e:	64 2f       	mov	r22, r20
    1d90:	39 01       	movw	r6, r18
    1d92:	40 2f       	mov	r20, r16
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <_ZN16PololuQTRSensors4initEhhh>
    1d9a:	97 01       	movw	r18, r14
    1d9c:	2f 5b       	subi	r18, 0xBF	; 191
    1d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1da0:	f9 01       	movw	r30, r18
    1da2:	10 82       	st	Z, r1
    1da4:	d7 01       	movw	r26, r14
    1da6:	ae 5b       	subi	r26, 0xBE	; 190
    1da8:	bf 4f       	sbci	r27, 0xFF	; 255
    1daa:	1c 92       	st	X, r1
    1dac:	c7 01       	movw	r24, r14
    1dae:	8d 5b       	subi	r24, 0xBD	; 189
    1db0:	9f 4f       	sbci	r25, 0xFF	; 255
    1db2:	fc 01       	movw	r30, r24
    1db4:	10 82       	st	Z, r1
    1db6:	f7 01       	movw	r30, r14
    1db8:	77 86       	std	Z+15, r7	; 0x0f
    1dba:	66 86       	std	Z+14, r6	; 0x0e
    1dbc:	66 24       	eor	r6, r6
    1dbe:	2e 01       	movw	r4, r28
    1dc0:	08 94       	sec
    1dc2:	41 1c       	adc	r4, r1
    1dc4:	51 1c       	adc	r5, r1
    1dc6:	6c 01       	movw	r12, r24
    1dc8:	5d 01       	movw	r10, r26
    1dca:	49 01       	movw	r8, r18
    1dcc:	29 c0       	rjmp	.+82     	; 0x1e20 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1dce:	06 2d       	mov	r16, r6
    1dd0:	10 e0       	ldi	r17, 0x00	; 0
    1dd2:	f1 01       	movw	r30, r2
    1dd4:	e0 0f       	add	r30, r16
    1dd6:	f1 1f       	adc	r31, r17
    1dd8:	c2 01       	movw	r24, r4
    1dda:	60 81       	ld	r22, Z
    1ddc:	0e 94 3d 0c 	call	0x187a	; 0x187a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1de0:	2f 81       	ldd	r18, Y+7	; 0x07
    1de2:	f7 01       	movw	r30, r14
    1de4:	e0 0f       	add	r30, r16
    1de6:	f1 1f       	adc	r31, r17
    1de8:	21 8b       	std	Z+17, r18	; 0x11
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	9a 81       	ldd	r25, Y+2	; 0x02
    1dee:	f8 01       	movw	r30, r16
    1df0:	ee 0f       	add	r30, r30
    1df2:	ff 1f       	adc	r31, r31
    1df4:	ee 0d       	add	r30, r14
    1df6:	ff 1d       	adc	r31, r15
    1df8:	92 a3       	std	Z+34, r25	; 0x22
    1dfa:	81 a3       	std	Z+33, r24	; 0x21
    1dfc:	83 32       	cpi	r24, 0x23	; 35
    1dfe:	91 05       	cpc	r25, r1
    1e00:	11 f4       	brne	.+4      	; 0x1e06 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1e02:	f4 01       	movw	r30, r8
    1e04:	09 c0       	rjmp	.+18     	; 0x1e18 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1e06:	86 32       	cpi	r24, 0x26	; 38
    1e08:	91 05       	cpc	r25, r1
    1e0a:	11 f4       	brne	.+4      	; 0x1e10 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1e0c:	f5 01       	movw	r30, r10
    1e0e:	04 c0       	rjmp	.+8      	; 0x1e18 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1e10:	89 32       	cpi	r24, 0x29	; 41
    1e12:	91 05       	cpc	r25, r1
    1e14:	21 f4       	brne	.+8      	; 0x1e1e <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa0>
    1e16:	f6 01       	movw	r30, r12
    1e18:	80 81       	ld	r24, Z
    1e1a:	82 2b       	or	r24, r18
    1e1c:	80 83       	st	Z, r24
    1e1e:	63 94       	inc	r6
    1e20:	f7 01       	movw	r30, r14
    1e22:	80 85       	ldd	r24, Z+8	; 0x08
    1e24:	68 16       	cp	r6, r24
    1e26:	98 f2       	brcs	.-90     	; 0x1dce <_ZN18PololuQTRSensorsRC4initEPhhjh+0x50>
    1e28:	27 96       	adiw	r28, 0x07	; 7
    1e2a:	e2 e1       	ldi	r30, 0x12	; 18
    1e2c:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__epilogue_restores__>

00001e30 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1e30:	a0 e0       	ldi	r26, 0x00	; 0
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	ee e1       	ldi	r30, 0x1E	; 30
    1e36:	ff e0       	ldi	r31, 0x0F	; 15
    1e38:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__prologue_saves__+0xa>
    1e3c:	ec 01       	movw	r28, r24
    1e3e:	5b 01       	movw	r10, r22
    1e40:	fc 01       	movw	r30, r24
    1e42:	ef 5b       	subi	r30, 0xBF	; 191
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	90 80       	ld	r9, Z
    1e48:	fc 01       	movw	r30, r24
    1e4a:	ee 5b       	subi	r30, 0xBE	; 190
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 80       	ld	r8, Z
    1e50:	fc 01       	movw	r30, r24
    1e52:	ed 5b       	subi	r30, 0xBD	; 189
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	70 80       	ld	r7, Z
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	09 c0       	rjmp	.+18     	; 0x1e6e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x3e>
    1e5c:	e8 2f       	mov	r30, r24
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	ee 0f       	add	r30, r30
    1e62:	ff 1f       	adc	r31, r31
    1e64:	ea 0d       	add	r30, r10
    1e66:	fb 1d       	adc	r31, r11
    1e68:	11 82       	std	Z+1, r1	; 0x01
    1e6a:	10 82       	st	Z, r1
    1e6c:	8f 5f       	subi	r24, 0xFF	; 255
    1e6e:	98 85       	ldd	r25, Y+8	; 0x08
    1e70:	89 17       	cp	r24, r25
    1e72:	a0 f3       	brcs	.-24     	; 0x1e5c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x2c>
    1e74:	84 b1       	in	r24, 0x04	; 4
    1e76:	21 e4       	ldi	r18, 0x41	; 65
    1e78:	e2 2e       	mov	r14, r18
    1e7a:	f1 2c       	mov	r15, r1
    1e7c:	ec 0e       	add	r14, r28
    1e7e:	fd 1e       	adc	r15, r29
    1e80:	d7 01       	movw	r26, r14
    1e82:	9c 91       	ld	r25, X
    1e84:	89 2b       	or	r24, r25
    1e86:	84 b9       	out	0x04, r24	; 4
    1e88:	87 b1       	in	r24, 0x07	; 7
    1e8a:	8e 01       	movw	r16, r28
    1e8c:	0e 5b       	subi	r16, 0xBE	; 190
    1e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e90:	f8 01       	movw	r30, r16
    1e92:	90 81       	ld	r25, Z
    1e94:	89 2b       	or	r24, r25
    1e96:	87 b9       	out	0x07, r24	; 7
    1e98:	8a b1       	in	r24, 0x0a	; 10
    1e9a:	93 e4       	ldi	r25, 0x43	; 67
    1e9c:	c9 2e       	mov	r12, r25
    1e9e:	d1 2c       	mov	r13, r1
    1ea0:	cc 0e       	add	r12, r28
    1ea2:	dd 1e       	adc	r13, r29
    1ea4:	d6 01       	movw	r26, r12
    1ea6:	9c 91       	ld	r25, X
    1ea8:	89 2b       	or	r24, r25
    1eaa:	8a b9       	out	0x0a, r24	; 10
    1eac:	85 b1       	in	r24, 0x05	; 5
    1eae:	f7 01       	movw	r30, r14
    1eb0:	90 81       	ld	r25, Z
    1eb2:	89 2b       	or	r24, r25
    1eb4:	85 b9       	out	0x05, r24	; 5
    1eb6:	88 b1       	in	r24, 0x08	; 8
    1eb8:	d8 01       	movw	r26, r16
    1eba:	9c 91       	ld	r25, X
    1ebc:	89 2b       	or	r24, r25
    1ebe:	88 b9       	out	0x08, r24	; 8
    1ec0:	8b b1       	in	r24, 0x0b	; 11
    1ec2:	f6 01       	movw	r30, r12
    1ec4:	90 81       	ld	r25, Z
    1ec6:	89 2b       	or	r24, r25
    1ec8:	8b b9       	out	0x0b, r24	; 11
    1eca:	8a e0       	ldi	r24, 0x0A	; 10
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <delayMicroseconds>
    1ed2:	94 b1       	in	r25, 0x04	; 4
    1ed4:	d7 01       	movw	r26, r14
    1ed6:	8c 91       	ld	r24, X
    1ed8:	80 95       	com	r24
    1eda:	89 23       	and	r24, r25
    1edc:	84 b9       	out	0x04, r24	; 4
    1ede:	97 b1       	in	r25, 0x07	; 7
    1ee0:	f8 01       	movw	r30, r16
    1ee2:	80 81       	ld	r24, Z
    1ee4:	80 95       	com	r24
    1ee6:	89 23       	and	r24, r25
    1ee8:	87 b9       	out	0x07, r24	; 7
    1eea:	9a b1       	in	r25, 0x0a	; 10
    1eec:	d6 01       	movw	r26, r12
    1eee:	8c 91       	ld	r24, X
    1ef0:	80 95       	com	r24
    1ef2:	89 23       	and	r24, r25
    1ef4:	8a b9       	out	0x0a, r24	; 10
    1ef6:	95 b1       	in	r25, 0x05	; 5
    1ef8:	f7 01       	movw	r30, r14
    1efa:	80 81       	ld	r24, Z
    1efc:	80 95       	com	r24
    1efe:	89 23       	and	r24, r25
    1f00:	85 b9       	out	0x05, r24	; 5
    1f02:	98 b1       	in	r25, 0x08	; 8
    1f04:	d8 01       	movw	r26, r16
    1f06:	8c 91       	ld	r24, X
    1f08:	80 95       	com	r24
    1f0a:	89 23       	and	r24, r25
    1f0c:	88 b9       	out	0x08, r24	; 8
    1f0e:	9b b1       	in	r25, 0x0b	; 11
    1f10:	f6 01       	movw	r30, r12
    1f12:	80 81       	ld	r24, Z
    1f14:	80 95       	com	r24
    1f16:	89 23       	and	r24, r25
    1f18:	8b b9       	out	0x0b, r24	; 11
    1f1a:	c0 90 b0 00 	lds	r12, 0x00B0
    1f1e:	e0 90 b1 00 	lds	r14, 0x00B1
    1f22:	80 91 b0 00 	lds	r24, 0x00B0
    1f26:	83 60       	ori	r24, 0x03	; 3
    1f28:	80 93 b0 00 	sts	0x00B0, r24
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	80 93 b1 00 	sts	0x00B1, r24
    1f32:	00 91 b2 00 	lds	r16, 0x00B2
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	39 c0       	rjmp	.+114    	; 0x1fae <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17e>
    1f3c:	20 91 b2 00 	lds	r18, 0x00B2
    1f40:	20 1b       	sub	r18, r16
    1f42:	82 0f       	add	r24, r18
    1f44:	91 1d       	adc	r25, r1
    1f46:	02 0f       	add	r16, r18
    1f48:	f3 b0       	in	r15, 0x03	; 3
    1f4a:	f9 14       	cp	r15, r9
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x120>
    1f4e:	4d c0       	rjmp	.+154    	; 0x1fea <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f50:	96 b0       	in	r9, 0x06	; 6
    1f52:	98 14       	cp	r9, r8
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x128>
    1f56:	49 c0       	rjmp	.+146    	; 0x1fea <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f58:	29 b1       	in	r18, 0x09	; 9
    1f5a:	27 15       	cp	r18, r7
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x130>
    1f5e:	45 c0       	rjmp	.+138    	; 0x1fea <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f60:	24 c0       	rjmp	.+72     	; 0x1faa <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17a>
    1f62:	21 2f       	mov	r18, r17
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	a9 01       	movw	r20, r18
    1f68:	44 0f       	add	r20, r20
    1f6a:	55 1f       	adc	r21, r21
    1f6c:	f5 01       	movw	r30, r10
    1f6e:	e4 0f       	add	r30, r20
    1f70:	f5 1f       	adc	r31, r21
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	61 15       	cp	r22, r1
    1f78:	71 05       	cpc	r23, r1
    1f7a:	99 f4       	brne	.+38     	; 0x1fa2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    1f7c:	4c 0f       	add	r20, r28
    1f7e:	5d 1f       	adc	r21, r29
    1f80:	da 01       	movw	r26, r20
    1f82:	91 96       	adiw	r26, 0x21	; 33
    1f84:	4d 91       	ld	r20, X+
    1f86:	5c 91       	ld	r21, X
    1f88:	92 97       	sbiw	r26, 0x22	; 34
    1f8a:	da 01       	movw	r26, r20
    1f8c:	4c 91       	ld	r20, X
    1f8e:	2c 0f       	add	r18, r28
    1f90:	3d 1f       	adc	r19, r29
    1f92:	d9 01       	movw	r26, r18
    1f94:	51 96       	adiw	r26, 0x11	; 17
    1f96:	2c 91       	ld	r18, X
    1f98:	51 97       	sbiw	r26, 0x11	; 17
    1f9a:	42 23       	and	r20, r18
    1f9c:	11 f4       	brne	.+4      	; 0x1fa2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    1f9e:	91 83       	std	Z+1, r25	; 0x01
    1fa0:	80 83       	st	Z, r24
    1fa2:	1f 5f       	subi	r17, 0xFF	; 255
    1fa4:	28 85       	ldd	r18, Y+8	; 0x08
    1fa6:	12 17       	cp	r17, r18
    1fa8:	e0 f2       	brcs	.-72     	; 0x1f62 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x132>
    1faa:	89 2c       	mov	r8, r9
    1fac:	9f 2c       	mov	r9, r15
    1fae:	2e 85       	ldd	r18, Y+14	; 0x0e
    1fb0:	3f 85       	ldd	r19, Y+15	; 0x0f
    1fb2:	82 17       	cp	r24, r18
    1fb4:	93 07       	cpc	r25, r19
    1fb6:	10 f2       	brcs	.-124    	; 0x1f3c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x10c>
    1fb8:	c0 92 b0 00 	sts	0x00B0, r12
    1fbc:	e0 92 b1 00 	sts	0x00B1, r14
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	0f c0       	rjmp	.+30     	; 0x1fe2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b2>
    1fc4:	e2 2f       	mov	r30, r18
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	ee 0f       	add	r30, r30
    1fca:	ff 1f       	adc	r31, r31
    1fcc:	ea 0d       	add	r30, r10
    1fce:	fb 1d       	adc	r31, r11
    1fd0:	80 81       	ld	r24, Z
    1fd2:	91 81       	ldd	r25, Z+1	; 0x01
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	21 f4       	brne	.+8      	; 0x1fe0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b0>
    1fd8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fda:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	80 83       	st	Z, r24
    1fe0:	2f 5f       	subi	r18, 0xFF	; 255
    1fe2:	88 85       	ldd	r24, Y+8	; 0x08
    1fe4:	28 17       	cp	r18, r24
    1fe6:	70 f3       	brcs	.-36     	; 0x1fc4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x194>
    1fe8:	05 c0       	rjmp	.+10     	; 0x1ff4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1c4>
    1fea:	f3 b0       	in	r15, 0x03	; 3
    1fec:	96 b0       	in	r9, 0x06	; 6
    1fee:	79 b0       	in	r7, 0x09	; 9
    1ff0:	10 e0       	ldi	r17, 0x00	; 0
    1ff2:	d8 cf       	rjmp	.-80     	; 0x1fa4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	ed e0       	ldi	r30, 0x0D	; 13
    1ffa:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__epilogue_restores__+0xa>

00001ffe <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	fc 01       	movw	r30, r24
    200c:	9b 01       	movw	r18, r22
    200e:	00 91 7c 00 	lds	r16, 0x007C
    2012:	10 91 7a 00 	lds	r17, 0x007A
    2016:	e7 b0       	in	r14, 0x07	; 7
    2018:	f8 b0       	in	r15, 0x08	; 8
    201a:	80 91 7a 00 	lds	r24, 0x007A
    201e:	86 fd       	sbrc	r24, 6
    2020:	fc cf       	rjmp	.-8      	; 0x201a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	0a c0       	rjmp	.+20     	; 0x203a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3c>
    2026:	a8 2f       	mov	r26, r24
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	aa 0f       	add	r26, r26
    202c:	bb 1f       	adc	r27, r27
    202e:	a2 0f       	add	r26, r18
    2030:	b3 1f       	adc	r27, r19
    2032:	11 96       	adiw	r26, 0x01	; 1
    2034:	1c 92       	st	X, r1
    2036:	1e 92       	st	-X, r1
    2038:	8f 5f       	subi	r24, 0xFF	; 255
    203a:	90 85       	ldd	r25, Z+8	; 0x08
    203c:	89 17       	cp	r24, r25
    203e:	98 f3       	brcs	.-26     	; 0x2026 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x28>
    2040:	97 b1       	in	r25, 0x07	; 7
    2042:	82 a1       	ldd	r24, Z+34	; 0x22
    2044:	80 95       	com	r24
    2046:	89 23       	and	r24, r25
    2048:	87 b9       	out	0x07, r24	; 7
    204a:	98 b1       	in	r25, 0x08	; 8
    204c:	82 a1       	ldd	r24, Z+34	; 0x22
    204e:	80 95       	com	r24
    2050:	89 23       	and	r24, r25
    2052:	88 b9       	out	0x08, r24	; 8
    2054:	87 e8       	ldi	r24, 0x87	; 135
    2056:	80 93 7a 00 	sts	0x007A, r24
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	29 c0       	rjmp	.+82     	; 0x20b0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    205e:	df 01       	movw	r26, r30
    2060:	a6 0f       	add	r26, r22
    2062:	b1 1d       	adc	r27, r1
    2064:	51 96       	adiw	r26, 0x11	; 17
    2066:	8c 91       	ld	r24, X
    2068:	51 97       	sbiw	r26, 0x11	; 17
    206a:	80 64       	ori	r24, 0x40	; 64
    206c:	80 93 7c 00 	sts	0x007C, r24
    2070:	80 91 7a 00 	lds	r24, 0x007A
    2074:	80 64       	ori	r24, 0x40	; 64
    2076:	80 93 7a 00 	sts	0x007A, r24
    207a:	80 91 7a 00 	lds	r24, 0x007A
    207e:	86 fd       	sbrc	r24, 6
    2080:	fc cf       	rjmp	.-8      	; 0x207a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x7c>
    2082:	a6 2f       	mov	r26, r22
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	aa 0f       	add	r26, r26
    2088:	bb 1f       	adc	r27, r27
    208a:	a2 0f       	add	r26, r18
    208c:	b3 1f       	adc	r27, r19
    208e:	40 91 78 00 	lds	r20, 0x0078
    2092:	50 91 79 00 	lds	r21, 0x0079
    2096:	8d 91       	ld	r24, X+
    2098:	9c 91       	ld	r25, X
    209a:	11 97       	sbiw	r26, 0x01	; 1
    209c:	84 0f       	add	r24, r20
    209e:	95 1f       	adc	r25, r21
    20a0:	11 96       	adiw	r26, 0x01	; 1
    20a2:	9c 93       	st	X, r25
    20a4:	8e 93       	st	-X, r24
    20a6:	6f 5f       	subi	r22, 0xFF	; 255
    20a8:	80 85       	ldd	r24, Z+8	; 0x08
    20aa:	68 17       	cp	r22, r24
    20ac:	c0 f2       	brcs	.-80     	; 0x205e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x60>
    20ae:	7f 5f       	subi	r23, 0xFF	; 255
    20b0:	81 a1       	ldd	r24, Z+33	; 0x21
    20b2:	78 17       	cp	r23, r24
    20b4:	10 f4       	brcc	.+4      	; 0x20ba <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xbc>
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	f7 cf       	rjmp	.-18     	; 0x20a8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xaa>
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	14 c0       	rjmp	.+40     	; 0x20e6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe8>
    20be:	c4 2f       	mov	r28, r20
    20c0:	d0 e0       	ldi	r29, 0x00	; 0
    20c2:	cc 0f       	add	r28, r28
    20c4:	dd 1f       	adc	r29, r29
    20c6:	c2 0f       	add	r28, r18
    20c8:	d3 1f       	adc	r29, r19
    20ca:	61 a1       	ldd	r22, Z+33	; 0x21
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	cb 01       	movw	r24, r22
    20d0:	95 95       	asr	r25
    20d2:	87 95       	ror	r24
    20d4:	a8 81       	ld	r26, Y
    20d6:	b9 81       	ldd	r27, Y+1	; 0x01
    20d8:	8a 0f       	add	r24, r26
    20da:	9b 1f       	adc	r25, r27
    20dc:	0e 94 a4 13 	call	0x2748	; 0x2748 <__udivmodhi4>
    20e0:	79 83       	std	Y+1, r23	; 0x01
    20e2:	68 83       	st	Y, r22
    20e4:	4f 5f       	subi	r20, 0xFF	; 255
    20e6:	80 85       	ldd	r24, Z+8	; 0x08
    20e8:	48 17       	cp	r20, r24
    20ea:	48 f3       	brcs	.-46     	; 0x20be <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xc0>
    20ec:	00 93 7c 00 	sts	0x007C, r16
    20f0:	10 93 7a 00 	sts	0x007A, r17
    20f4:	f8 b8       	out	0x08, r15	; 8
    20f6:	e7 b8       	out	0x07, r14	; 7
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	e6 e0       	ldi	r30, 0x06	; 6
    20fe:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__+0x18>

00002102 <_ZN16PololuQTRSensors4readEPjh>:
    2102:	a0 e2       	ldi	r26, 0x20	; 32
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e7 e8       	ldi	r30, 0x87	; 135
    2108:	f0 e1       	ldi	r31, 0x10	; 16
    210a:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__prologue_saves__+0x16>
    210e:	8c 01       	movw	r16, r24
    2110:	7b 01       	movw	r14, r22
    2112:	d4 2e       	mov	r13, r20
    2114:	84 2f       	mov	r24, r20
    2116:	81 50       	subi	r24, 0x01	; 1
    2118:	82 30       	cpi	r24, 0x02	; 2
    211a:	18 f4       	brcc	.+6      	; 0x2122 <_ZN16PololuQTRSensors4readEPjh+0x20>
    211c:	c8 01       	movw	r24, r16
    211e:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN16PololuQTRSensors10emittersOnEv>
    2122:	d8 01       	movw	r26, r16
    2124:	50 96       	adiw	r26, 0x10	; 16
    2126:	8c 91       	ld	r24, X
    2128:	50 97       	sbiw	r26, 0x10	; 16
    212a:	88 23       	and	r24, r24
    212c:	89 f4       	brne	.+34     	; 0x2150 <_ZN16PololuQTRSensors4readEPjh+0x4e>
    212e:	c8 01       	movw	r24, r16
    2130:	b7 01       	movw	r22, r14
    2132:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2136:	c8 01       	movw	r24, r16
    2138:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <_ZN16PololuQTRSensors11emittersOffEv>
    213c:	bd 2d       	mov	r27, r13
    213e:	b2 30       	cpi	r27, 0x02	; 2
    2140:	d9 f5       	brne	.+118    	; 0x21b8 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    2142:	c8 01       	movw	r24, r16
    2144:	be 01       	movw	r22, r28
    2146:	6f 5f       	subi	r22, 0xFF	; 255
    2148:	7f 4f       	sbci	r23, 0xFF	; 255
    214a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    214e:	10 c0       	rjmp	.+32     	; 0x2170 <_ZN16PololuQTRSensors4readEPjh+0x6e>
    2150:	c8 01       	movw	r24, r16
    2152:	b7 01       	movw	r22, r14
    2154:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2158:	c8 01       	movw	r24, r16
    215a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <_ZN16PololuQTRSensors11emittersOffEv>
    215e:	ed 2d       	mov	r30, r13
    2160:	e2 30       	cpi	r30, 0x02	; 2
    2162:	51 f5       	brne	.+84     	; 0x21b8 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    2164:	c8 01       	movw	r24, r16
    2166:	be 01       	movw	r22, r28
    2168:	6f 5f       	subi	r22, 0xFF	; 255
    216a:	7f 4f       	sbci	r23, 0xFF	; 255
    216c:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2170:	60 e0       	ldi	r22, 0x00	; 0
    2172:	ae 01       	movw	r20, r28
    2174:	4f 5f       	subi	r20, 0xFF	; 255
    2176:	5f 4f       	sbci	r21, 0xFF	; 255
    2178:	1b c0       	rjmp	.+54     	; 0x21b0 <_ZN16PololuQTRSensors4readEPjh+0xae>
    217a:	86 2f       	mov	r24, r22
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	f7 01       	movw	r30, r14
    2184:	e8 0f       	add	r30, r24
    2186:	f9 1f       	adc	r31, r25
    2188:	84 0f       	add	r24, r20
    218a:	95 1f       	adc	r25, r21
    218c:	d8 01       	movw	r26, r16
    218e:	1e 96       	adiw	r26, 0x0e	; 14
    2190:	2d 91       	ld	r18, X+
    2192:	3c 91       	ld	r19, X
    2194:	1f 97       	sbiw	r26, 0x0f	; 15
    2196:	dc 01       	movw	r26, r24
    2198:	8d 91       	ld	r24, X+
    219a:	9c 91       	ld	r25, X
    219c:	11 97       	sbiw	r26, 0x01	; 1
    219e:	28 1b       	sub	r18, r24
    21a0:	39 0b       	sbc	r19, r25
    21a2:	80 81       	ld	r24, Z
    21a4:	91 81       	ldd	r25, Z+1	; 0x01
    21a6:	82 0f       	add	r24, r18
    21a8:	93 1f       	adc	r25, r19
    21aa:	91 83       	std	Z+1, r25	; 0x01
    21ac:	80 83       	st	Z, r24
    21ae:	6f 5f       	subi	r22, 0xFF	; 255
    21b0:	f8 01       	movw	r30, r16
    21b2:	80 85       	ldd	r24, Z+8	; 0x08
    21b4:	68 17       	cp	r22, r24
    21b6:	08 f3       	brcs	.-62     	; 0x217a <_ZN16PololuQTRSensors4readEPjh+0x78>
    21b8:	a0 96       	adiw	r28, 0x20	; 32
    21ba:	e7 e0       	ldi	r30, 0x07	; 7
    21bc:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__epilogue_restores__+0x16>

000021c0 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    21c0:	8f 92       	push	r8
    21c2:	9f 92       	push	r9
    21c4:	af 92       	push	r10
    21c6:	bf 92       	push	r11
    21c8:	cf 92       	push	r12
    21ca:	df 92       	push	r13
    21cc:	ff 92       	push	r15
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
    21d6:	ec 01       	movw	r28, r24
    21d8:	c6 2e       	mov	r12, r22
    21da:	07 2f       	mov	r16, r23
    21dc:	f4 2e       	mov	r15, r20
    21de:	42 30       	cpi	r20, 0x02	; 2
    21e0:	11 f0       	breq	.+4      	; 0x21e6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x26>
    21e2:	ff 20       	and	r15, r15
    21e4:	51 f4       	brne	.+20     	; 0x21fa <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    21e6:	8c 81       	ldd	r24, Y+4	; 0x04
    21e8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x30>
    21ee:	a0 c0       	rjmp	.+320    	; 0x2330 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21f0:	8e 81       	ldd	r24, Y+6	; 0x06
    21f2:	9f 81       	ldd	r25, Y+7	; 0x07
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	09 f4       	brne	.+2      	; 0x21fa <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    21f8:	9b c0       	rjmp	.+310    	; 0x2330 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21fa:	8f 2d       	mov	r24, r15
    21fc:	81 50       	subi	r24, 0x01	; 1
    21fe:	82 30       	cpi	r24, 0x02	; 2
    2200:	50 f4       	brcc	.+20     	; 0x2216 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    2202:	88 81       	ld	r24, Y
    2204:	99 81       	ldd	r25, Y+1	; 0x01
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	09 f4       	brne	.+2      	; 0x220c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x4c>
    220a:	92 c0       	rjmp	.+292    	; 0x2330 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	9b 81       	ldd	r25, Y+3	; 0x03
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	09 f4       	brne	.+2      	; 0x2216 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    2214:	8d c0       	rjmp	.+282    	; 0x2330 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2216:	ce 01       	movw	r24, r28
    2218:	6c 2d       	mov	r22, r12
    221a:	70 2f       	mov	r23, r16
    221c:	4f 2d       	mov	r20, r15
    221e:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN16PololuQTRSensors4readEPjh>
    2222:	ac 2c       	mov	r10, r12
    2224:	b0 2e       	mov	r11, r16
    2226:	00 e0       	ldi	r16, 0x00	; 0
    2228:	10 e0       	ldi	r17, 0x00	; 0
    222a:	88 24       	eor	r8, r8
    222c:	99 24       	eor	r9, r9
    222e:	7a c0       	rjmp	.+244    	; 0x2324 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x164>
    2230:	8f 2d       	mov	r24, r15
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	59 f4       	brne	.+22     	; 0x224c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x8c>
    2236:	ea 81       	ldd	r30, Y+2	; 0x02
    2238:	fb 81       	ldd	r31, Y+3	; 0x03
    223a:	e0 0f       	add	r30, r16
    223c:	f1 1f       	adc	r31, r17
    223e:	c0 80       	ld	r12, Z
    2240:	d1 80       	ldd	r13, Z+1	; 0x01
    2242:	e8 81       	ld	r30, Y
    2244:	f9 81       	ldd	r31, Y+1	; 0x01
    2246:	e0 0f       	add	r30, r16
    2248:	f1 1f       	adc	r31, r17
    224a:	0d c0       	rjmp	.+26     	; 0x2266 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    224c:	8c 81       	ldd	r24, Y+4	; 0x04
    224e:	9d 81       	ldd	r25, Y+5	; 0x05
    2250:	ff 20       	and	r15, r15
    2252:	61 f4       	brne	.+24     	; 0x226c <_ZN16PololuQTRSensors14readCalibratedEPjh+0xac>
    2254:	ee 81       	ldd	r30, Y+6	; 0x06
    2256:	ff 81       	ldd	r31, Y+7	; 0x07
    2258:	e0 0f       	add	r30, r16
    225a:	f1 1f       	adc	r31, r17
    225c:	c0 80       	ld	r12, Z
    225e:	d1 80       	ldd	r13, Z+1	; 0x01
    2260:	80 0f       	add	r24, r16
    2262:	91 1f       	adc	r25, r17
    2264:	fc 01       	movw	r30, r24
    2266:	40 81       	ld	r20, Z
    2268:	51 81       	ldd	r21, Z+1	; 0x01
    226a:	2b c0       	rjmp	.+86     	; 0x22c2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    226c:	80 0f       	add	r24, r16
    226e:	91 1f       	adc	r25, r17
    2270:	fc 01       	movw	r30, r24
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	e8 81       	ld	r30, Y
    2278:	f9 81       	ldd	r31, Y+1	; 0x01
    227a:	e0 0f       	add	r30, r16
    227c:	f1 1f       	adc	r31, r17
    227e:	40 81       	ld	r20, Z
    2280:	51 81       	ldd	r21, Z+1	; 0x01
    2282:	ce 84       	ldd	r12, Y+14	; 0x0e
    2284:	df 84       	ldd	r13, Y+15	; 0x0f
    2286:	84 17       	cp	r24, r20
    2288:	95 07       	cpc	r25, r21
    228a:	10 f4       	brcc	.+4      	; 0x2290 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd0>
    228c:	a6 01       	movw	r20, r12
    228e:	04 c0       	rjmp	.+8      	; 0x2298 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd8>
    2290:	4c 0d       	add	r20, r12
    2292:	5d 1d       	adc	r21, r13
    2294:	48 1b       	sub	r20, r24
    2296:	59 0b       	sbc	r21, r25
    2298:	ee 81       	ldd	r30, Y+6	; 0x06
    229a:	ff 81       	ldd	r31, Y+7	; 0x07
    229c:	e0 0f       	add	r30, r16
    229e:	f1 1f       	adc	r31, r17
    22a0:	80 81       	ld	r24, Z
    22a2:	91 81       	ldd	r25, Z+1	; 0x01
    22a4:	ea 81       	ldd	r30, Y+2	; 0x02
    22a6:	fb 81       	ldd	r31, Y+3	; 0x03
    22a8:	e0 0f       	add	r30, r16
    22aa:	f1 1f       	adc	r31, r17
    22ac:	20 81       	ld	r18, Z
    22ae:	31 81       	ldd	r19, Z+1	; 0x01
    22b0:	ce 84       	ldd	r12, Y+14	; 0x0e
    22b2:	df 84       	ldd	r13, Y+15	; 0x0f
    22b4:	82 17       	cp	r24, r18
    22b6:	93 07       	cpc	r25, r19
    22b8:	20 f0       	brcs	.+8      	; 0x22c2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    22ba:	c2 0e       	add	r12, r18
    22bc:	d3 1e       	adc	r13, r19
    22be:	c8 1a       	sub	r12, r24
    22c0:	d9 0a       	sbc	r13, r25
    22c2:	c4 1a       	sub	r12, r20
    22c4:	d5 0a       	sbc	r13, r21
    22c6:	d1 f0       	breq	.+52     	; 0x22fc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    22c8:	f5 01       	movw	r30, r10
    22ca:	60 81       	ld	r22, Z
    22cc:	71 81       	ldd	r23, Z+1	; 0x01
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9a 01       	movw	r18, r20
    22d4:	40 e0       	ldi	r20, 0x00	; 0
    22d6:	50 e0       	ldi	r21, 0x00	; 0
    22d8:	62 1b       	sub	r22, r18
    22da:	73 0b       	sbc	r23, r19
    22dc:	84 0b       	sbc	r24, r20
    22de:	95 0b       	sbc	r25, r21
    22e0:	28 ee       	ldi	r18, 0xE8	; 232
    22e2:	33 e0       	ldi	r19, 0x03	; 3
    22e4:	40 e0       	ldi	r20, 0x00	; 0
    22e6:	50 e0       	ldi	r21, 0x00	; 0
    22e8:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsi3>
    22ec:	96 01       	movw	r18, r12
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	50 e0       	ldi	r21, 0x00	; 0
    22f2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__divmodsi4>
    22f6:	37 fd       	sbrc	r19, 7
    22f8:	0a c0       	rjmp	.+20     	; 0x230e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x14e>
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x140>
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	f3 e0       	ldi	r31, 0x03	; 3
    2302:	29 3e       	cpi	r18, 0xE9	; 233
    2304:	3f 07       	cpc	r19, r31
    2306:	2c f0       	brlt	.+10     	; 0x2312 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    2308:	28 ee       	ldi	r18, 0xE8	; 232
    230a:	33 e0       	ldi	r19, 0x03	; 3
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	f5 01       	movw	r30, r10
    2314:	21 93       	st	Z+, r18
    2316:	31 93       	st	Z+, r19
    2318:	5f 01       	movw	r10, r30
    231a:	08 94       	sec
    231c:	81 1c       	adc	r8, r1
    231e:	91 1c       	adc	r9, r1
    2320:	0e 5f       	subi	r16, 0xFE	; 254
    2322:	1f 4f       	sbci	r17, 0xFF	; 255
    2324:	88 85       	ldd	r24, Y+8	; 0x08
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	88 16       	cp	r8, r24
    232a:	99 06       	cpc	r9, r25
    232c:	0c f4       	brge	.+2      	; 0x2330 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    232e:	80 cf       	rjmp	.-256    	; 0x2230 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x70>
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	1f 91       	pop	r17
    2336:	0f 91       	pop	r16
    2338:	ff 90       	pop	r15
    233a:	df 90       	pop	r13
    233c:	cf 90       	pop	r12
    233e:	bf 90       	pop	r11
    2340:	af 90       	pop	r10
    2342:	9f 90       	pop	r9
    2344:	8f 90       	pop	r8
    2346:	08 95       	ret

00002348 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2348:	a5 e0       	ldi	r26, 0x05	; 5
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	ea ea       	ldi	r30, 0xAA	; 170
    234e:	f1 e1       	ldi	r31, 0x11	; 17
    2350:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__prologue_saves__>
    2354:	4c 01       	movw	r8, r24
    2356:	c6 2e       	mov	r12, r22
    2358:	e7 2e       	mov	r14, r23
    235a:	2d 83       	std	Y+5, r18	; 0x05
    235c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2360:	d4 01       	movw	r26, r8
    2362:	18 96       	adiw	r26, 0x08	; 8
    2364:	4c 90       	ld	r4, X
    2366:	18 97       	sbiw	r26, 0x08	; 8
    2368:	de 2c       	mov	r13, r14
    236a:	64 2d       	mov	r22, r4
    236c:	70 e0       	ldi	r23, 0x00	; 0
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	28 ee       	ldi	r18, 0xE8	; 232
    2374:	33 e0       	ldi	r19, 0x03	; 3
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsi3>
    237e:	69 83       	std	Y+1, r22	; 0x01
    2380:	7a 83       	std	Y+2, r23	; 0x02
    2382:	8b 83       	std	Y+3, r24	; 0x03
    2384:	9c 83       	std	Y+4, r25	; 0x04
    2386:	ee 24       	eor	r14, r14
    2388:	ff 24       	eor	r15, r15
    238a:	87 01       	movw	r16, r14
    238c:	66 24       	eor	r6, r6
    238e:	77 24       	eor	r7, r7
    2390:	88 24       	eor	r8, r8
    2392:	99 24       	eor	r9, r9
    2394:	54 01       	movw	r10, r8
    2396:	55 24       	eor	r5, r5
    2398:	36 c0       	rjmp	.+108    	; 0x2406 <_ZN16PololuQTRSensors8readLineEPjhh+0xbe>
    239a:	f6 01       	movw	r30, r12
    239c:	30 81       	ld	r19, Z
    239e:	21 81       	ldd	r18, Z+1	; 0x01
    23a0:	42 e0       	ldi	r20, 0x02	; 2
    23a2:	24 2e       	mov	r2, r20
    23a4:	31 2c       	mov	r3, r1
    23a6:	c2 0c       	add	r12, r2
    23a8:	d3 1c       	adc	r13, r3
    23aa:	c9 01       	movw	r24, r18
    23ac:	49 2f       	mov	r20, r25
    23ae:	58 2f       	mov	r21, r24
    23b0:	1a 01       	movw	r2, r20
    23b2:	2d 81       	ldd	r18, Y+5	; 0x05
    23b4:	22 23       	and	r18, r18
    23b6:	29 f0       	breq	.+10     	; 0x23c2 <_ZN16PololuQTRSensors8readLineEPjhh+0x7a>
    23b8:	88 ee       	ldi	r24, 0xE8	; 232
    23ba:	93 e0       	ldi	r25, 0x03	; 3
    23bc:	82 19       	sub	r24, r2
    23be:	93 09       	sbc	r25, r3
    23c0:	1c 01       	movw	r2, r24
    23c2:	99 ec       	ldi	r25, 0xC9	; 201
    23c4:	29 16       	cp	r2, r25
    23c6:	31 04       	cpc	r3, r1
    23c8:	2c f4       	brge	.+10     	; 0x23d4 <_ZN16PololuQTRSensors8readLineEPjhh+0x8c>
    23ca:	a3 e3       	ldi	r26, 0x33	; 51
    23cc:	2a 16       	cp	r2, r26
    23ce:	31 04       	cpc	r3, r1
    23d0:	94 f0       	brlt	.+36     	; 0x23f6 <_ZN16PololuQTRSensors8readLineEPjhh+0xae>
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <_ZN16PololuQTRSensors8readLineEPjhh+0x90>
    23d4:	55 24       	eor	r5, r5
    23d6:	53 94       	inc	r5
    23d8:	b1 01       	movw	r22, r2
    23da:	88 27       	eor	r24, r24
    23dc:	77 fd       	sbrc	r23, 7
    23de:	80 95       	com	r24
    23e0:	98 2f       	mov	r25, r24
    23e2:	a8 01       	movw	r20, r16
    23e4:	97 01       	movw	r18, r14
    23e6:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsi3>
    23ea:	86 0e       	add	r8, r22
    23ec:	97 1e       	adc	r9, r23
    23ee:	a8 1e       	adc	r10, r24
    23f0:	b9 1e       	adc	r11, r25
    23f2:	62 0c       	add	r6, r2
    23f4:	73 1c       	adc	r7, r3
    23f6:	88 ee       	ldi	r24, 0xE8	; 232
    23f8:	93 e0       	ldi	r25, 0x03	; 3
    23fa:	a0 e0       	ldi	r26, 0x00	; 0
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e8 0e       	add	r14, r24
    2400:	f9 1e       	adc	r15, r25
    2402:	0a 1f       	adc	r16, r26
    2404:	1b 1f       	adc	r17, r27
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	9a 81       	ldd	r25, Y+2	; 0x02
    240a:	ab 81       	ldd	r26, Y+3	; 0x03
    240c:	bc 81       	ldd	r27, Y+4	; 0x04
    240e:	e8 16       	cp	r14, r24
    2410:	f9 06       	cpc	r15, r25
    2412:	0a 07       	cpc	r16, r26
    2414:	1b 07       	cpc	r17, r27
    2416:	09 f6       	brne	.-126    	; 0x239a <_ZN16PololuQTRSensors8readLineEPjhh+0x52>
    2418:	55 20       	and	r5, r5
    241a:	f1 f4       	brne	.+60     	; 0x2458 <_ZN16PololuQTRSensors8readLineEPjhh+0x110>
    241c:	55 24       	eor	r5, r5
    241e:	08 94       	sec
    2420:	41 08       	sbc	r4, r1
    2422:	51 08       	sbc	r5, r1
    2424:	24 ef       	ldi	r18, 0xF4	; 244
    2426:	31 e0       	ldi	r19, 0x01	; 1
    2428:	42 9e       	mul	r4, r18
    242a:	c0 01       	movw	r24, r0
    242c:	43 9e       	mul	r4, r19
    242e:	90 0d       	add	r25, r0
    2430:	52 9e       	mul	r5, r18
    2432:	90 0d       	add	r25, r0
    2434:	11 24       	eor	r1, r1
    2436:	20 91 b9 01 	lds	r18, 0x01B9
    243a:	30 91 ba 01 	lds	r19, 0x01BA
    243e:	28 17       	cp	r18, r24
    2440:	39 07       	cpc	r19, r25
    2442:	b4 f0       	brlt	.+44     	; 0x2470 <_ZN16PololuQTRSensors8readLineEPjhh+0x128>
    2444:	88 ee       	ldi	r24, 0xE8	; 232
    2446:	93 e0       	ldi	r25, 0x03	; 3
    2448:	48 9e       	mul	r4, r24
    244a:	90 01       	movw	r18, r0
    244c:	49 9e       	mul	r4, r25
    244e:	30 0d       	add	r19, r0
    2450:	58 9e       	mul	r5, r24
    2452:	30 0d       	add	r19, r0
    2454:	11 24       	eor	r1, r1
    2456:	0e c0       	rjmp	.+28     	; 0x2474 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    2458:	93 01       	movw	r18, r6
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	c5 01       	movw	r24, r10
    2460:	b4 01       	movw	r22, r8
    2462:	0e 94 cc 13 	call	0x2798	; 0x2798 <__udivmodsi4>
    2466:	20 93 b9 01 	sts	0x01B9, r18
    246a:	30 93 ba 01 	sts	0x01BA, r19
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	c9 01       	movw	r24, r18
    2476:	25 96       	adiw	r28, 0x05	; 5
    2478:	e2 e1       	ldi	r30, 0x12	; 18
    247a:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__epilogue_restores__>

0000247e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    247e:	a7 e6       	ldi	r26, 0x67	; 103
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e5 e4       	ldi	r30, 0x45	; 69
    2484:	f2 e1       	ldi	r31, 0x12	; 18
    2486:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__prologue_saves__>
    248a:	8c 01       	movw	r16, r24
    248c:	4b 01       	movw	r8, r22
    248e:	6a 01       	movw	r12, r20
    2490:	a6 96       	adiw	r28, 0x26	; 38
    2492:	2f af       	std	Y+63, r18	; 0x3f
    2494:	a6 97       	sbiw	r28, 0x26	; 38
    2496:	da 01       	movw	r26, r20
    2498:	8d 91       	ld	r24, X+
    249a:	9c 91       	ld	r25, X
    249c:	11 97       	sbiw	r26, 0x01	; 1
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	e9 f4       	brne	.+58     	; 0x24dc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x5e>
    24a2:	f8 01       	movw	r30, r16
    24a4:	80 85       	ldd	r24, Z+8	; 0x08
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	0e 94 64 14 	call	0x28c8	; 0x28c8 <malloc>
    24b0:	d6 01       	movw	r26, r12
    24b2:	11 96       	adiw	r26, 0x01	; 1
    24b4:	9c 93       	st	X, r25
    24b6:	8e 93       	st	-X, r24
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	09 f4       	brne	.+2      	; 0x24be <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x40>
    24bc:	e2 c0       	rjmp	.+452    	; 0x2682 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    24be:	fc 01       	movw	r30, r24
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	03 c0       	rjmp	.+6      	; 0x24cc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x4e>
    24c6:	11 92       	st	Z+, r1
    24c8:	11 92       	st	Z+, r1
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	d8 01       	movw	r26, r16
    24ce:	18 96       	adiw	r26, 0x08	; 8
    24d0:	2c 91       	ld	r18, X
    24d2:	18 97       	sbiw	r26, 0x08	; 8
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	82 17       	cp	r24, r18
    24d8:	93 07       	cpc	r25, r19
    24da:	ac f3       	brlt	.-22     	; 0x24c6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x48>
    24dc:	f4 01       	movw	r30, r8
    24de:	80 81       	ld	r24, Z
    24e0:	91 81       	ldd	r25, Z+1	; 0x01
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	89 f0       	breq	.+34     	; 0x2508 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8a>
    24e6:	ee 24       	eor	r14, r14
    24e8:	ff 24       	eor	r15, r15
    24ea:	5e 01       	movw	r10, r28
    24ec:	08 94       	sec
    24ee:	a1 1c       	adc	r10, r1
    24f0:	b1 1c       	adc	r11, r1
    24f2:	b1 e4       	ldi	r27, 0x41	; 65
    24f4:	6b 2e       	mov	r6, r27
    24f6:	71 2c       	mov	r7, r1
    24f8:	6c 0e       	add	r6, r28
    24fa:	7d 1e       	adc	r7, r29
    24fc:	a1 e2       	ldi	r26, 0x21	; 33
    24fe:	4a 2e       	mov	r4, r26
    2500:	51 2c       	mov	r5, r1
    2502:	4c 0e       	add	r4, r28
    2504:	5d 1e       	adc	r5, r29
    2506:	23 c0       	rjmp	.+70     	; 0x254e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    2508:	d8 01       	movw	r26, r16
    250a:	18 96       	adiw	r26, 0x08	; 8
    250c:	8c 91       	ld	r24, X
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	88 0f       	add	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	0e 94 64 14 	call	0x28c8	; 0x28c8 <malloc>
    2518:	f4 01       	movw	r30, r8
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	80 83       	st	Z, r24
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	09 f4       	brne	.+2      	; 0x2524 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xa6>
    2522:	af c0       	rjmp	.+350    	; 0x2682 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    2524:	fc 01       	movw	r30, r24
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	d8 01       	movw	r26, r16
    252c:	07 c0       	rjmp	.+14     	; 0x253c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xbe>
    252e:	1e 96       	adiw	r26, 0x0e	; 14
    2530:	2d 91       	ld	r18, X+
    2532:	3c 91       	ld	r19, X
    2534:	1f 97       	sbiw	r26, 0x0f	; 15
    2536:	21 93       	st	Z+, r18
    2538:	31 93       	st	Z+, r19
    253a:	01 96       	adiw	r24, 0x01	; 1
    253c:	18 96       	adiw	r26, 0x08	; 8
    253e:	2c 91       	ld	r18, X
    2540:	18 97       	sbiw	r26, 0x08	; 8
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	82 17       	cp	r24, r18
    2546:	93 07       	cpc	r25, r19
    2548:	94 f3       	brlt	.-28     	; 0x252e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb0>
    254a:	8d 01       	movw	r16, r26
    254c:	cc cf       	rjmp	.-104    	; 0x24e6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x68>
    254e:	c8 01       	movw	r24, r16
    2550:	b5 01       	movw	r22, r10
    2552:	a6 96       	adiw	r28, 0x26	; 38
    2554:	4f ad       	ldd	r20, Y+63	; 0x3f
    2556:	a6 97       	sbiw	r28, 0x26	; 38
    2558:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN16PololuQTRSensors4readEPjh>
    255c:	d8 01       	movw	r26, r16
    255e:	18 96       	adiw	r26, 0x08	; 8
    2560:	8c 91       	ld	r24, X
    2562:	18 97       	sbiw	r26, 0x08	; 8
    2564:	e8 2f       	mov	r30, r24
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	a5 96       	adiw	r28, 0x25	; 37
    256a:	ff af       	std	Y+63, r31	; 0x3f
    256c:	ee af       	std	Y+62, r30	; 0x3e
    256e:	a5 97       	sbiw	r28, 0x25	; 37
    2570:	13 01       	movw	r2, r6
    2572:	f5 01       	movw	r30, r10
    2574:	a3 96       	adiw	r28, 0x23	; 35
    2576:	5f ae       	std	Y+63, r5	; 0x3f
    2578:	4e ae       	std	Y+62, r4	; 0x3e
    257a:	a3 97       	sbiw	r28, 0x23	; 35
    257c:	93 01       	movw	r18, r6
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	50 e0       	ldi	r21, 0x00	; 0
    2582:	a8 96       	adiw	r28, 0x28	; 40
    2584:	5f ae       	std	Y+63, r5	; 0x3f
    2586:	4e ae       	std	Y+62, r4	; 0x3e
    2588:	a8 97       	sbiw	r28, 0x28	; 40
    258a:	37 c0       	rjmp	.+110    	; 0x25fa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17c>
    258c:	e1 14       	cp	r14, r1
    258e:	f1 04       	cpc	r15, r1
    2590:	61 f0       	breq	.+24     	; 0x25aa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x12c>
    2592:	a8 96       	adiw	r28, 0x28	; 40
    2594:	ae ad       	ldd	r26, Y+62	; 0x3e
    2596:	bf ad       	ldd	r27, Y+63	; 0x3f
    2598:	a8 97       	sbiw	r28, 0x28	; 40
    259a:	6d 91       	ld	r22, X+
    259c:	7c 91       	ld	r23, X
    259e:	11 97       	sbiw	r26, 0x01	; 1
    25a0:	80 81       	ld	r24, Z
    25a2:	91 81       	ldd	r25, Z+1	; 0x01
    25a4:	68 17       	cp	r22, r24
    25a6:	79 07       	cpc	r23, r25
    25a8:	60 f4       	brcc	.+24     	; 0x25c2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x144>
    25aa:	80 81       	ld	r24, Z
    25ac:	91 81       	ldd	r25, Z+1	; 0x01
    25ae:	a8 96       	adiw	r28, 0x28	; 40
    25b0:	ae ad       	ldd	r26, Y+62	; 0x3e
    25b2:	bf ad       	ldd	r27, Y+63	; 0x3f
    25b4:	a8 97       	sbiw	r28, 0x28	; 40
    25b6:	11 96       	adiw	r26, 0x01	; 1
    25b8:	9c 93       	st	X, r25
    25ba:	8e 93       	st	-X, r24
    25bc:	e1 14       	cp	r14, r1
    25be:	f1 04       	cpc	r15, r1
    25c0:	49 f0       	breq	.+18     	; 0x25d4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x156>
    25c2:	d9 01       	movw	r26, r18
    25c4:	6d 91       	ld	r22, X+
    25c6:	7c 91       	ld	r23, X
    25c8:	11 97       	sbiw	r26, 0x01	; 1
    25ca:	80 81       	ld	r24, Z
    25cc:	91 81       	ldd	r25, Z+1	; 0x01
    25ce:	86 17       	cp	r24, r22
    25d0:	97 07       	cpc	r25, r23
    25d2:	28 f4       	brcc	.+10     	; 0x25de <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x160>
    25d4:	80 81       	ld	r24, Z
    25d6:	91 81       	ldd	r25, Z+1	; 0x01
    25d8:	d9 01       	movw	r26, r18
    25da:	8d 93       	st	X+, r24
    25dc:	9c 93       	st	X, r25
    25de:	4f 5f       	subi	r20, 0xFF	; 255
    25e0:	5f 4f       	sbci	r21, 0xFF	; 255
    25e2:	2e 5f       	subi	r18, 0xFE	; 254
    25e4:	3f 4f       	sbci	r19, 0xFF	; 255
    25e6:	32 96       	adiw	r30, 0x02	; 2
    25e8:	a8 96       	adiw	r28, 0x28	; 40
    25ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    25ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    25ee:	a8 97       	sbiw	r28, 0x28	; 40
    25f0:	02 96       	adiw	r24, 0x02	; 2
    25f2:	a8 96       	adiw	r28, 0x28	; 40
    25f4:	9f af       	std	Y+63, r25	; 0x3f
    25f6:	8e af       	std	Y+62, r24	; 0x3e
    25f8:	a8 97       	sbiw	r28, 0x28	; 40
    25fa:	a5 96       	adiw	r28, 0x25	; 37
    25fc:	ae ad       	ldd	r26, Y+62	; 0x3e
    25fe:	bf ad       	ldd	r27, Y+63	; 0x3f
    2600:	a5 97       	sbiw	r28, 0x25	; 37
    2602:	4a 17       	cp	r20, r26
    2604:	5b 07       	cpc	r21, r27
    2606:	14 f2       	brlt	.-124    	; 0x258c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x10e>
    2608:	08 94       	sec
    260a:	e1 1c       	adc	r14, r1
    260c:	f1 1c       	adc	r15, r1
    260e:	ba e0       	ldi	r27, 0x0A	; 10
    2610:	eb 16       	cp	r14, r27
    2612:	f1 04       	cpc	r15, r1
    2614:	09 f0       	breq	.+2      	; 0x2618 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x19a>
    2616:	9b cf       	rjmp	.-202    	; 0x254e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	2c c0       	rjmp	.+88     	; 0x2676 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f8>
    261e:	f1 01       	movw	r30, r2
    2620:	41 91       	ld	r20, Z+
    2622:	51 91       	ld	r21, Z+
    2624:	1f 01       	movw	r2, r30
    2626:	bc 01       	movw	r22, r24
    2628:	66 0f       	add	r22, r22
    262a:	77 1f       	adc	r23, r23
    262c:	d6 01       	movw	r26, r12
    262e:	ed 91       	ld	r30, X+
    2630:	fc 91       	ld	r31, X
    2632:	11 97       	sbiw	r26, 0x01	; 1
    2634:	e6 0f       	add	r30, r22
    2636:	f7 1f       	adc	r31, r23
    2638:	20 81       	ld	r18, Z
    263a:	31 81       	ldd	r19, Z+1	; 0x01
    263c:	24 17       	cp	r18, r20
    263e:	35 07       	cpc	r19, r21
    2640:	10 f4       	brcc	.+4      	; 0x2646 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1c8>
    2642:	51 83       	std	Z+1, r21	; 0x01
    2644:	40 83       	st	Z, r20
    2646:	a3 96       	adiw	r28, 0x23	; 35
    2648:	ee ad       	ldd	r30, Y+62	; 0x3e
    264a:	ff ad       	ldd	r31, Y+63	; 0x3f
    264c:	a3 97       	sbiw	r28, 0x23	; 35
    264e:	41 91       	ld	r20, Z+
    2650:	51 91       	ld	r21, Z+
    2652:	a3 96       	adiw	r28, 0x23	; 35
    2654:	ff af       	std	Y+63, r31	; 0x3f
    2656:	ee af       	std	Y+62, r30	; 0x3e
    2658:	a3 97       	sbiw	r28, 0x23	; 35
    265a:	d4 01       	movw	r26, r8
    265c:	ed 91       	ld	r30, X+
    265e:	fc 91       	ld	r31, X
    2660:	11 97       	sbiw	r26, 0x01	; 1
    2662:	e6 0f       	add	r30, r22
    2664:	f7 1f       	adc	r31, r23
    2666:	20 81       	ld	r18, Z
    2668:	31 81       	ldd	r19, Z+1	; 0x01
    266a:	42 17       	cp	r20, r18
    266c:	53 07       	cpc	r21, r19
    266e:	10 f4       	brcc	.+4      	; 0x2674 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f6>
    2670:	51 83       	std	Z+1, r21	; 0x01
    2672:	40 83       	st	Z, r20
    2674:	01 96       	adiw	r24, 0x01	; 1
    2676:	f8 01       	movw	r30, r16
    2678:	20 85       	ldd	r18, Z+8	; 0x08
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	82 17       	cp	r24, r18
    267e:	93 07       	cpc	r25, r19
    2680:	74 f2       	brlt	.-100    	; 0x261e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1a0>
    2682:	c9 59       	subi	r28, 0x99	; 153
    2684:	df 4f       	sbci	r29, 0xFF	; 255
    2686:	e2 e1       	ldi	r30, 0x12	; 18
    2688:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__epilogue_restores__>

0000268c <_ZN16PololuQTRSensors9calibrateEh>:
    268c:	1f 93       	push	r17
    268e:	cf 93       	push	r28
    2690:	df 93       	push	r29
    2692:	ec 01       	movw	r28, r24
    2694:	16 2f       	mov	r17, r22
    2696:	86 2f       	mov	r24, r22
    2698:	81 50       	subi	r24, 0x01	; 1
    269a:	82 30       	cpi	r24, 0x02	; 2
    269c:	58 f4       	brcc	.+22     	; 0x26b4 <_ZN16PololuQTRSensors9calibrateEh+0x28>
    269e:	ae 01       	movw	r20, r28
    26a0:	4e 5f       	subi	r20, 0xFE	; 254
    26a2:	5f 4f       	sbci	r21, 0xFF	; 255
    26a4:	ce 01       	movw	r24, r28
    26a6:	be 01       	movw	r22, r28
    26a8:	21 e0       	ldi	r18, 0x01	; 1
    26aa:	0e 94 3f 12 	call	0x247e	; 0x247e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    26ae:	12 30       	cpi	r17, 0x02	; 2
    26b0:	19 f0       	breq	.+6      	; 0x26b8 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    26b2:	0c c0       	rjmp	.+24     	; 0x26cc <_ZN16PololuQTRSensors9calibrateEh+0x40>
    26b4:	66 23       	and	r22, r22
    26b6:	51 f4       	brne	.+20     	; 0x26cc <_ZN16PololuQTRSensors9calibrateEh+0x40>
    26b8:	be 01       	movw	r22, r28
    26ba:	6c 5f       	subi	r22, 0xFC	; 252
    26bc:	7f 4f       	sbci	r23, 0xFF	; 255
    26be:	ae 01       	movw	r20, r28
    26c0:	4a 5f       	subi	r20, 0xFA	; 250
    26c2:	5f 4f       	sbci	r21, 0xFF	; 255
    26c4:	ce 01       	movw	r24, r28
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	0e 94 3f 12 	call	0x247e	; 0x247e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	1f 91       	pop	r17
    26d2:	08 95       	ret

000026d4 <_ZN16PololuQTRSensorsD1Ev>:
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	ec 01       	movw	r28, r24
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	9b 81       	ldd	r25, Y+3	; 0x03
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	11 f0       	breq	.+4      	; 0x26e6 <_ZN16PololuQTRSensorsD1Ev+0x12>
    26e2:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <free>
    26e6:	8e 81       	ldd	r24, Y+6	; 0x06
    26e8:	9f 81       	ldd	r25, Y+7	; 0x07
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	11 f0       	breq	.+4      	; 0x26f2 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    26ee:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <free>
    26f2:	88 81       	ld	r24, Y
    26f4:	99 81       	ldd	r25, Y+1	; 0x01
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	11 f0       	breq	.+4      	; 0x26fe <_ZN16PololuQTRSensorsD1Ev+0x2a>
    26fa:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <free>
    26fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2700:	9d 81       	ldd	r25, Y+5	; 0x05
    2702:	00 97       	sbiw	r24, 0x00	; 0
    2704:	11 f0       	breq	.+4      	; 0x270a <_ZN16PololuQTRSensorsD1Ev+0x36>
    2706:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <free>
    270a:	df 91       	pop	r29
    270c:	cf 91       	pop	r28
    270e:	08 95       	ret

00002710 <__mulsi3>:
    2710:	db 01       	movw	r26, r22
    2712:	8f 93       	push	r24
    2714:	9f 93       	push	r25
    2716:	0e 94 0d 14 	call	0x281a	; 0x281a <__muluhisi3>
    271a:	bf 91       	pop	r27
    271c:	af 91       	pop	r26
    271e:	a2 9f       	mul	r26, r18
    2720:	80 0d       	add	r24, r0
    2722:	91 1d       	adc	r25, r1
    2724:	a3 9f       	mul	r26, r19
    2726:	90 0d       	add	r25, r0
    2728:	b2 9f       	mul	r27, r18
    272a:	90 0d       	add	r25, r0
    272c:	11 24       	eor	r1, r1
    272e:	08 95       	ret

00002730 <__udivmodqi4>:
    2730:	99 1b       	sub	r25, r25
    2732:	79 e0       	ldi	r23, 0x09	; 9
    2734:	04 c0       	rjmp	.+8      	; 0x273e <__udivmodqi4_ep>

00002736 <__udivmodqi4_loop>:
    2736:	99 1f       	adc	r25, r25
    2738:	96 17       	cp	r25, r22
    273a:	08 f0       	brcs	.+2      	; 0x273e <__udivmodqi4_ep>
    273c:	96 1b       	sub	r25, r22

0000273e <__udivmodqi4_ep>:
    273e:	88 1f       	adc	r24, r24
    2740:	7a 95       	dec	r23
    2742:	c9 f7       	brne	.-14     	; 0x2736 <__udivmodqi4_loop>
    2744:	80 95       	com	r24
    2746:	08 95       	ret

00002748 <__udivmodhi4>:
    2748:	aa 1b       	sub	r26, r26
    274a:	bb 1b       	sub	r27, r27
    274c:	51 e1       	ldi	r21, 0x11	; 17
    274e:	07 c0       	rjmp	.+14     	; 0x275e <__udivmodhi4_ep>

00002750 <__udivmodhi4_loop>:
    2750:	aa 1f       	adc	r26, r26
    2752:	bb 1f       	adc	r27, r27
    2754:	a6 17       	cp	r26, r22
    2756:	b7 07       	cpc	r27, r23
    2758:	10 f0       	brcs	.+4      	; 0x275e <__udivmodhi4_ep>
    275a:	a6 1b       	sub	r26, r22
    275c:	b7 0b       	sbc	r27, r23

0000275e <__udivmodhi4_ep>:
    275e:	88 1f       	adc	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	5a 95       	dec	r21
    2764:	a9 f7       	brne	.-22     	; 0x2750 <__udivmodhi4_loop>
    2766:	80 95       	com	r24
    2768:	90 95       	com	r25
    276a:	bc 01       	movw	r22, r24
    276c:	cd 01       	movw	r24, r26
    276e:	08 95       	ret

00002770 <__divmodhi4>:
    2770:	97 fb       	bst	r25, 7
    2772:	07 2e       	mov	r0, r23
    2774:	16 f4       	brtc	.+4      	; 0x277a <__divmodhi4+0xa>
    2776:	00 94       	com	r0
    2778:	07 d0       	rcall	.+14     	; 0x2788 <__divmodhi4_neg1>
    277a:	77 fd       	sbrc	r23, 7
    277c:	09 d0       	rcall	.+18     	; 0x2790 <__divmodhi4_neg2>
    277e:	0e 94 a4 13 	call	0x2748	; 0x2748 <__udivmodhi4>
    2782:	07 fc       	sbrc	r0, 7
    2784:	05 d0       	rcall	.+10     	; 0x2790 <__divmodhi4_neg2>
    2786:	3e f4       	brtc	.+14     	; 0x2796 <__divmodhi4_exit>

00002788 <__divmodhi4_neg1>:
    2788:	90 95       	com	r25
    278a:	81 95       	neg	r24
    278c:	9f 4f       	sbci	r25, 0xFF	; 255
    278e:	08 95       	ret

00002790 <__divmodhi4_neg2>:
    2790:	70 95       	com	r23
    2792:	61 95       	neg	r22
    2794:	7f 4f       	sbci	r23, 0xFF	; 255

00002796 <__divmodhi4_exit>:
    2796:	08 95       	ret

00002798 <__udivmodsi4>:
    2798:	a1 e2       	ldi	r26, 0x21	; 33
    279a:	1a 2e       	mov	r1, r26
    279c:	aa 1b       	sub	r26, r26
    279e:	bb 1b       	sub	r27, r27
    27a0:	fd 01       	movw	r30, r26
    27a2:	0d c0       	rjmp	.+26     	; 0x27be <__udivmodsi4_ep>

000027a4 <__udivmodsi4_loop>:
    27a4:	aa 1f       	adc	r26, r26
    27a6:	bb 1f       	adc	r27, r27
    27a8:	ee 1f       	adc	r30, r30
    27aa:	ff 1f       	adc	r31, r31
    27ac:	a2 17       	cp	r26, r18
    27ae:	b3 07       	cpc	r27, r19
    27b0:	e4 07       	cpc	r30, r20
    27b2:	f5 07       	cpc	r31, r21
    27b4:	20 f0       	brcs	.+8      	; 0x27be <__udivmodsi4_ep>
    27b6:	a2 1b       	sub	r26, r18
    27b8:	b3 0b       	sbc	r27, r19
    27ba:	e4 0b       	sbc	r30, r20
    27bc:	f5 0b       	sbc	r31, r21

000027be <__udivmodsi4_ep>:
    27be:	66 1f       	adc	r22, r22
    27c0:	77 1f       	adc	r23, r23
    27c2:	88 1f       	adc	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	1a 94       	dec	r1
    27c8:	69 f7       	brne	.-38     	; 0x27a4 <__udivmodsi4_loop>
    27ca:	60 95       	com	r22
    27cc:	70 95       	com	r23
    27ce:	80 95       	com	r24
    27d0:	90 95       	com	r25
    27d2:	9b 01       	movw	r18, r22
    27d4:	ac 01       	movw	r20, r24
    27d6:	bd 01       	movw	r22, r26
    27d8:	cf 01       	movw	r24, r30
    27da:	08 95       	ret

000027dc <__divmodsi4>:
    27dc:	05 2e       	mov	r0, r21
    27de:	97 fb       	bst	r25, 7
    27e0:	1e f4       	brtc	.+6      	; 0x27e8 <__divmodsi4+0xc>
    27e2:	00 94       	com	r0
    27e4:	0e 94 05 14 	call	0x280a	; 0x280a <__negsi2>
    27e8:	57 fd       	sbrc	r21, 7
    27ea:	07 d0       	rcall	.+14     	; 0x27fa <__divmodsi4_neg2>
    27ec:	0e 94 cc 13 	call	0x2798	; 0x2798 <__udivmodsi4>
    27f0:	07 fc       	sbrc	r0, 7
    27f2:	03 d0       	rcall	.+6      	; 0x27fa <__divmodsi4_neg2>
    27f4:	4e f4       	brtc	.+18     	; 0x2808 <__divmodsi4_exit>
    27f6:	0c 94 05 14 	jmp	0x280a	; 0x280a <__negsi2>

000027fa <__divmodsi4_neg2>:
    27fa:	50 95       	com	r21
    27fc:	40 95       	com	r20
    27fe:	30 95       	com	r19
    2800:	21 95       	neg	r18
    2802:	3f 4f       	sbci	r19, 0xFF	; 255
    2804:	4f 4f       	sbci	r20, 0xFF	; 255
    2806:	5f 4f       	sbci	r21, 0xFF	; 255

00002808 <__divmodsi4_exit>:
    2808:	08 95       	ret

0000280a <__negsi2>:
    280a:	90 95       	com	r25
    280c:	80 95       	com	r24
    280e:	70 95       	com	r23
    2810:	61 95       	neg	r22
    2812:	7f 4f       	sbci	r23, 0xFF	; 255
    2814:	8f 4f       	sbci	r24, 0xFF	; 255
    2816:	9f 4f       	sbci	r25, 0xFF	; 255
    2818:	08 95       	ret

0000281a <__muluhisi3>:
    281a:	0e 94 55 14 	call	0x28aa	; 0x28aa <__umulhisi3>
    281e:	a5 9f       	mul	r26, r21
    2820:	90 0d       	add	r25, r0
    2822:	b4 9f       	mul	r27, r20
    2824:	90 0d       	add	r25, r0
    2826:	a4 9f       	mul	r26, r20
    2828:	80 0d       	add	r24, r0
    282a:	91 1d       	adc	r25, r1
    282c:	11 24       	eor	r1, r1
    282e:	08 95       	ret

00002830 <__prologue_saves__>:
    2830:	2f 92       	push	r2
    2832:	3f 92       	push	r3
    2834:	4f 92       	push	r4
    2836:	5f 92       	push	r5
    2838:	6f 92       	push	r6
    283a:	7f 92       	push	r7
    283c:	8f 92       	push	r8
    283e:	9f 92       	push	r9
    2840:	af 92       	push	r10
    2842:	bf 92       	push	r11
    2844:	cf 92       	push	r12
    2846:	df 92       	push	r13
    2848:	ef 92       	push	r14
    284a:	ff 92       	push	r15
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	ca 1b       	sub	r28, r26
    285a:	db 0b       	sbc	r29, r27
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	09 94       	ijmp

00002868 <__epilogue_restores__>:
    2868:	2a 88       	ldd	r2, Y+18	; 0x12
    286a:	39 88       	ldd	r3, Y+17	; 0x11
    286c:	48 88       	ldd	r4, Y+16	; 0x10
    286e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2870:	6e 84       	ldd	r6, Y+14	; 0x0e
    2872:	7d 84       	ldd	r7, Y+13	; 0x0d
    2874:	8c 84       	ldd	r8, Y+12	; 0x0c
    2876:	9b 84       	ldd	r9, Y+11	; 0x0b
    2878:	aa 84       	ldd	r10, Y+10	; 0x0a
    287a:	b9 84       	ldd	r11, Y+9	; 0x09
    287c:	c8 84       	ldd	r12, Y+8	; 0x08
    287e:	df 80       	ldd	r13, Y+7	; 0x07
    2880:	ee 80       	ldd	r14, Y+6	; 0x06
    2882:	fd 80       	ldd	r15, Y+5	; 0x05
    2884:	0c 81       	ldd	r16, Y+4	; 0x04
    2886:	1b 81       	ldd	r17, Y+3	; 0x03
    2888:	aa 81       	ldd	r26, Y+2	; 0x02
    288a:	b9 81       	ldd	r27, Y+1	; 0x01
    288c:	ce 0f       	add	r28, r30
    288e:	d1 1d       	adc	r29, r1
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	f8 94       	cli
    2894:	de bf       	out	0x3e, r29	; 62
    2896:	0f be       	out	0x3f, r0	; 63
    2898:	cd bf       	out	0x3d, r28	; 61
    289a:	ed 01       	movw	r28, r26
    289c:	08 95       	ret

0000289e <__tablejump2__>:
    289e:	ee 0f       	add	r30, r30
    28a0:	ff 1f       	adc	r31, r31

000028a2 <__tablejump__>:
    28a2:	05 90       	lpm	r0, Z+
    28a4:	f4 91       	lpm	r31, Z
    28a6:	e0 2d       	mov	r30, r0
    28a8:	09 94       	ijmp

000028aa <__umulhisi3>:
    28aa:	a2 9f       	mul	r26, r18
    28ac:	b0 01       	movw	r22, r0
    28ae:	b3 9f       	mul	r27, r19
    28b0:	c0 01       	movw	r24, r0
    28b2:	a3 9f       	mul	r26, r19
    28b4:	70 0d       	add	r23, r0
    28b6:	81 1d       	adc	r24, r1
    28b8:	11 24       	eor	r1, r1
    28ba:	91 1d       	adc	r25, r1
    28bc:	b2 9f       	mul	r27, r18
    28be:	70 0d       	add	r23, r0
    28c0:	81 1d       	adc	r24, r1
    28c2:	11 24       	eor	r1, r1
    28c4:	91 1d       	adc	r25, r1
    28c6:	08 95       	ret

000028c8 <malloc>:
    28c8:	cf 93       	push	r28
    28ca:	df 93       	push	r29
    28cc:	82 30       	cpi	r24, 0x02	; 2
    28ce:	91 05       	cpc	r25, r1
    28d0:	10 f4       	brcc	.+4      	; 0x28d6 <malloc+0xe>
    28d2:	82 e0       	ldi	r24, 0x02	; 2
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	e0 91 b5 03 	lds	r30, 0x03B5
    28da:	f0 91 b6 03 	lds	r31, 0x03B6
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	a0 e0       	ldi	r26, 0x00	; 0
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	30 97       	sbiw	r30, 0x00	; 0
    28e8:	39 f1       	breq	.+78     	; 0x2938 <malloc+0x70>
    28ea:	40 81       	ld	r20, Z
    28ec:	51 81       	ldd	r21, Z+1	; 0x01
    28ee:	48 17       	cp	r20, r24
    28f0:	59 07       	cpc	r21, r25
    28f2:	b8 f0       	brcs	.+46     	; 0x2922 <malloc+0x5a>
    28f4:	48 17       	cp	r20, r24
    28f6:	59 07       	cpc	r21, r25
    28f8:	71 f4       	brne	.+28     	; 0x2916 <malloc+0x4e>
    28fa:	82 81       	ldd	r24, Z+2	; 0x02
    28fc:	93 81       	ldd	r25, Z+3	; 0x03
    28fe:	10 97       	sbiw	r26, 0x00	; 0
    2900:	29 f0       	breq	.+10     	; 0x290c <malloc+0x44>
    2902:	13 96       	adiw	r26, 0x03	; 3
    2904:	9c 93       	st	X, r25
    2906:	8e 93       	st	-X, r24
    2908:	12 97       	sbiw	r26, 0x02	; 2
    290a:	2c c0       	rjmp	.+88     	; 0x2964 <malloc+0x9c>
    290c:	90 93 b6 03 	sts	0x03B6, r25
    2910:	80 93 b5 03 	sts	0x03B5, r24
    2914:	27 c0       	rjmp	.+78     	; 0x2964 <malloc+0x9c>
    2916:	21 15       	cp	r18, r1
    2918:	31 05       	cpc	r19, r1
    291a:	31 f0       	breq	.+12     	; 0x2928 <malloc+0x60>
    291c:	42 17       	cp	r20, r18
    291e:	53 07       	cpc	r21, r19
    2920:	18 f0       	brcs	.+6      	; 0x2928 <malloc+0x60>
    2922:	a9 01       	movw	r20, r18
    2924:	db 01       	movw	r26, r22
    2926:	01 c0       	rjmp	.+2      	; 0x292a <malloc+0x62>
    2928:	ef 01       	movw	r28, r30
    292a:	9a 01       	movw	r18, r20
    292c:	bd 01       	movw	r22, r26
    292e:	df 01       	movw	r26, r30
    2930:	02 80       	ldd	r0, Z+2	; 0x02
    2932:	f3 81       	ldd	r31, Z+3	; 0x03
    2934:	e0 2d       	mov	r30, r0
    2936:	d7 cf       	rjmp	.-82     	; 0x28e6 <malloc+0x1e>
    2938:	21 15       	cp	r18, r1
    293a:	31 05       	cpc	r19, r1
    293c:	f9 f0       	breq	.+62     	; 0x297c <malloc+0xb4>
    293e:	28 1b       	sub	r18, r24
    2940:	39 0b       	sbc	r19, r25
    2942:	24 30       	cpi	r18, 0x04	; 4
    2944:	31 05       	cpc	r19, r1
    2946:	80 f4       	brcc	.+32     	; 0x2968 <malloc+0xa0>
    2948:	8a 81       	ldd	r24, Y+2	; 0x02
    294a:	9b 81       	ldd	r25, Y+3	; 0x03
    294c:	61 15       	cp	r22, r1
    294e:	71 05       	cpc	r23, r1
    2950:	21 f0       	breq	.+8      	; 0x295a <malloc+0x92>
    2952:	fb 01       	movw	r30, r22
    2954:	93 83       	std	Z+3, r25	; 0x03
    2956:	82 83       	std	Z+2, r24	; 0x02
    2958:	04 c0       	rjmp	.+8      	; 0x2962 <malloc+0x9a>
    295a:	90 93 b6 03 	sts	0x03B6, r25
    295e:	80 93 b5 03 	sts	0x03B5, r24
    2962:	fe 01       	movw	r30, r28
    2964:	32 96       	adiw	r30, 0x02	; 2
    2966:	44 c0       	rjmp	.+136    	; 0x29f0 <malloc+0x128>
    2968:	fe 01       	movw	r30, r28
    296a:	e2 0f       	add	r30, r18
    296c:	f3 1f       	adc	r31, r19
    296e:	81 93       	st	Z+, r24
    2970:	91 93       	st	Z+, r25
    2972:	22 50       	subi	r18, 0x02	; 2
    2974:	31 09       	sbc	r19, r1
    2976:	39 83       	std	Y+1, r19	; 0x01
    2978:	28 83       	st	Y, r18
    297a:	3a c0       	rjmp	.+116    	; 0x29f0 <malloc+0x128>
    297c:	20 91 b3 03 	lds	r18, 0x03B3
    2980:	30 91 b4 03 	lds	r19, 0x03B4
    2984:	23 2b       	or	r18, r19
    2986:	41 f4       	brne	.+16     	; 0x2998 <malloc+0xd0>
    2988:	20 91 2d 01 	lds	r18, 0x012D
    298c:	30 91 2e 01 	lds	r19, 0x012E
    2990:	30 93 b4 03 	sts	0x03B4, r19
    2994:	20 93 b3 03 	sts	0x03B3, r18
    2998:	20 91 2b 01 	lds	r18, 0x012B
    299c:	30 91 2c 01 	lds	r19, 0x012C
    29a0:	21 15       	cp	r18, r1
    29a2:	31 05       	cpc	r19, r1
    29a4:	41 f4       	brne	.+16     	; 0x29b6 <malloc+0xee>
    29a6:	2d b7       	in	r18, 0x3d	; 61
    29a8:	3e b7       	in	r19, 0x3e	; 62
    29aa:	40 91 2f 01 	lds	r20, 0x012F
    29ae:	50 91 30 01 	lds	r21, 0x0130
    29b2:	24 1b       	sub	r18, r20
    29b4:	35 0b       	sbc	r19, r21
    29b6:	e0 91 b3 03 	lds	r30, 0x03B3
    29ba:	f0 91 b4 03 	lds	r31, 0x03B4
    29be:	e2 17       	cp	r30, r18
    29c0:	f3 07       	cpc	r31, r19
    29c2:	a0 f4       	brcc	.+40     	; 0x29ec <malloc+0x124>
    29c4:	2e 1b       	sub	r18, r30
    29c6:	3f 0b       	sbc	r19, r31
    29c8:	28 17       	cp	r18, r24
    29ca:	39 07       	cpc	r19, r25
    29cc:	78 f0       	brcs	.+30     	; 0x29ec <malloc+0x124>
    29ce:	ac 01       	movw	r20, r24
    29d0:	4e 5f       	subi	r20, 0xFE	; 254
    29d2:	5f 4f       	sbci	r21, 0xFF	; 255
    29d4:	24 17       	cp	r18, r20
    29d6:	35 07       	cpc	r19, r21
    29d8:	48 f0       	brcs	.+18     	; 0x29ec <malloc+0x124>
    29da:	4e 0f       	add	r20, r30
    29dc:	5f 1f       	adc	r21, r31
    29de:	50 93 b4 03 	sts	0x03B4, r21
    29e2:	40 93 b3 03 	sts	0x03B3, r20
    29e6:	81 93       	st	Z+, r24
    29e8:	91 93       	st	Z+, r25
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <malloc+0x128>
    29ec:	e0 e0       	ldi	r30, 0x00	; 0
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	cf 01       	movw	r24, r30
    29f2:	df 91       	pop	r29
    29f4:	cf 91       	pop	r28
    29f6:	08 95       	ret

000029f8 <free>:
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	09 f4       	brne	.+2      	; 0x2a02 <free+0xa>
    2a00:	87 c0       	rjmp	.+270    	; 0x2b10 <free+0x118>
    2a02:	fc 01       	movw	r30, r24
    2a04:	32 97       	sbiw	r30, 0x02	; 2
    2a06:	13 82       	std	Z+3, r1	; 0x03
    2a08:	12 82       	std	Z+2, r1	; 0x02
    2a0a:	c0 91 b5 03 	lds	r28, 0x03B5
    2a0e:	d0 91 b6 03 	lds	r29, 0x03B6
    2a12:	20 97       	sbiw	r28, 0x00	; 0
    2a14:	81 f4       	brne	.+32     	; 0x2a36 <free+0x3e>
    2a16:	20 81       	ld	r18, Z
    2a18:	31 81       	ldd	r19, Z+1	; 0x01
    2a1a:	28 0f       	add	r18, r24
    2a1c:	39 1f       	adc	r19, r25
    2a1e:	80 91 b3 03 	lds	r24, 0x03B3
    2a22:	90 91 b4 03 	lds	r25, 0x03B4
    2a26:	82 17       	cp	r24, r18
    2a28:	93 07       	cpc	r25, r19
    2a2a:	79 f5       	brne	.+94     	; 0x2a8a <free+0x92>
    2a2c:	f0 93 b4 03 	sts	0x03B4, r31
    2a30:	e0 93 b3 03 	sts	0x03B3, r30
    2a34:	6d c0       	rjmp	.+218    	; 0x2b10 <free+0x118>
    2a36:	de 01       	movw	r26, r28
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	ae 17       	cp	r26, r30
    2a3e:	bf 07       	cpc	r27, r31
    2a40:	50 f4       	brcc	.+20     	; 0x2a56 <free+0x5e>
    2a42:	12 96       	adiw	r26, 0x02	; 2
    2a44:	4d 91       	ld	r20, X+
    2a46:	5c 91       	ld	r21, X
    2a48:	13 97       	sbiw	r26, 0x03	; 3
    2a4a:	9d 01       	movw	r18, r26
    2a4c:	41 15       	cp	r20, r1
    2a4e:	51 05       	cpc	r21, r1
    2a50:	09 f1       	breq	.+66     	; 0x2a94 <free+0x9c>
    2a52:	da 01       	movw	r26, r20
    2a54:	f3 cf       	rjmp	.-26     	; 0x2a3c <free+0x44>
    2a56:	b3 83       	std	Z+3, r27	; 0x03
    2a58:	a2 83       	std	Z+2, r26	; 0x02
    2a5a:	40 81       	ld	r20, Z
    2a5c:	51 81       	ldd	r21, Z+1	; 0x01
    2a5e:	84 0f       	add	r24, r20
    2a60:	95 1f       	adc	r25, r21
    2a62:	8a 17       	cp	r24, r26
    2a64:	9b 07       	cpc	r25, r27
    2a66:	71 f4       	brne	.+28     	; 0x2a84 <free+0x8c>
    2a68:	8d 91       	ld	r24, X+
    2a6a:	9c 91       	ld	r25, X
    2a6c:	11 97       	sbiw	r26, 0x01	; 1
    2a6e:	84 0f       	add	r24, r20
    2a70:	95 1f       	adc	r25, r21
    2a72:	02 96       	adiw	r24, 0x02	; 2
    2a74:	91 83       	std	Z+1, r25	; 0x01
    2a76:	80 83       	st	Z, r24
    2a78:	12 96       	adiw	r26, 0x02	; 2
    2a7a:	8d 91       	ld	r24, X+
    2a7c:	9c 91       	ld	r25, X
    2a7e:	13 97       	sbiw	r26, 0x03	; 3
    2a80:	93 83       	std	Z+3, r25	; 0x03
    2a82:	82 83       	std	Z+2, r24	; 0x02
    2a84:	21 15       	cp	r18, r1
    2a86:	31 05       	cpc	r19, r1
    2a88:	29 f4       	brne	.+10     	; 0x2a94 <free+0x9c>
    2a8a:	f0 93 b6 03 	sts	0x03B6, r31
    2a8e:	e0 93 b5 03 	sts	0x03B5, r30
    2a92:	3e c0       	rjmp	.+124    	; 0x2b10 <free+0x118>
    2a94:	d9 01       	movw	r26, r18
    2a96:	13 96       	adiw	r26, 0x03	; 3
    2a98:	fc 93       	st	X, r31
    2a9a:	ee 93       	st	-X, r30
    2a9c:	12 97       	sbiw	r26, 0x02	; 2
    2a9e:	4d 91       	ld	r20, X+
    2aa0:	5d 91       	ld	r21, X+
    2aa2:	a4 0f       	add	r26, r20
    2aa4:	b5 1f       	adc	r27, r21
    2aa6:	ea 17       	cp	r30, r26
    2aa8:	fb 07       	cpc	r31, r27
    2aaa:	79 f4       	brne	.+30     	; 0x2aca <free+0xd2>
    2aac:	80 81       	ld	r24, Z
    2aae:	91 81       	ldd	r25, Z+1	; 0x01
    2ab0:	84 0f       	add	r24, r20
    2ab2:	95 1f       	adc	r25, r21
    2ab4:	02 96       	adiw	r24, 0x02	; 2
    2ab6:	d9 01       	movw	r26, r18
    2ab8:	11 96       	adiw	r26, 0x01	; 1
    2aba:	9c 93       	st	X, r25
    2abc:	8e 93       	st	-X, r24
    2abe:	82 81       	ldd	r24, Z+2	; 0x02
    2ac0:	93 81       	ldd	r25, Z+3	; 0x03
    2ac2:	13 96       	adiw	r26, 0x03	; 3
    2ac4:	9c 93       	st	X, r25
    2ac6:	8e 93       	st	-X, r24
    2ac8:	12 97       	sbiw	r26, 0x02	; 2
    2aca:	e0 e0       	ldi	r30, 0x00	; 0
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	19 f0       	breq	.+6      	; 0x2adc <free+0xe4>
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	ec 01       	movw	r28, r24
    2ada:	f9 cf       	rjmp	.-14     	; 0x2ace <free+0xd6>
    2adc:	ce 01       	movw	r24, r28
    2ade:	02 96       	adiw	r24, 0x02	; 2
    2ae0:	28 81       	ld	r18, Y
    2ae2:	39 81       	ldd	r19, Y+1	; 0x01
    2ae4:	82 0f       	add	r24, r18
    2ae6:	93 1f       	adc	r25, r19
    2ae8:	20 91 b3 03 	lds	r18, 0x03B3
    2aec:	30 91 b4 03 	lds	r19, 0x03B4
    2af0:	28 17       	cp	r18, r24
    2af2:	39 07       	cpc	r19, r25
    2af4:	69 f4       	brne	.+26     	; 0x2b10 <free+0x118>
    2af6:	30 97       	sbiw	r30, 0x00	; 0
    2af8:	29 f4       	brne	.+10     	; 0x2b04 <free+0x10c>
    2afa:	10 92 b6 03 	sts	0x03B6, r1
    2afe:	10 92 b5 03 	sts	0x03B5, r1
    2b02:	02 c0       	rjmp	.+4      	; 0x2b08 <free+0x110>
    2b04:	13 82       	std	Z+3, r1	; 0x03
    2b06:	12 82       	std	Z+2, r1	; 0x02
    2b08:	d0 93 b4 03 	sts	0x03B4, r29
    2b0c:	c0 93 b3 03 	sts	0x03B3, r28
    2b10:	df 91       	pop	r29
    2b12:	cf 91       	pop	r28
    2b14:	08 95       	ret

00002b16 <strrev>:
    2b16:	dc 01       	movw	r26, r24
    2b18:	fc 01       	movw	r30, r24
    2b1a:	67 2f       	mov	r22, r23
    2b1c:	71 91       	ld	r23, Z+
    2b1e:	77 23       	and	r23, r23
    2b20:	e1 f7       	brne	.-8      	; 0x2b1a <strrev+0x4>
    2b22:	32 97       	sbiw	r30, 0x02	; 2
    2b24:	04 c0       	rjmp	.+8      	; 0x2b2e <strrev+0x18>
    2b26:	7c 91       	ld	r23, X
    2b28:	6d 93       	st	X+, r22
    2b2a:	70 83       	st	Z, r23
    2b2c:	62 91       	ld	r22, -Z
    2b2e:	ae 17       	cp	r26, r30
    2b30:	bf 07       	cpc	r27, r31
    2b32:	c8 f3       	brcs	.-14     	; 0x2b26 <strrev+0x10>
    2b34:	08 95       	ret

00002b36 <__do_global_dtors>:
    2b36:	10 e0       	ldi	r17, 0x00	; 0
    2b38:	cc ea       	ldi	r28, 0xAC	; 172
    2b3a:	d0 e0       	ldi	r29, 0x00	; 0
    2b3c:	04 c0       	rjmp	.+8      	; 0x2b46 <__do_global_dtors+0x10>
    2b3e:	fe 01       	movw	r30, r28
    2b40:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__tablejump__>
    2b44:	22 96       	adiw	r28, 0x02	; 2
    2b46:	ce 3a       	cpi	r28, 0xAE	; 174
    2b48:	d1 07       	cpc	r29, r17
    2b4a:	c9 f7       	brne	.-14     	; 0x2b3e <__do_global_dtors+0x8>
    2b4c:	f8 94       	cli

00002b4e <__stop_program>:
    2b4e:	ff cf       	rjmp	.-2      	; 0x2b4e <__stop_program>
