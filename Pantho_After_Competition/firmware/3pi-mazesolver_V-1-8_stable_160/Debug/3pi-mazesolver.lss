
3pi-mazesolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00002b18  00002bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026d  0080014a  0080014a  00002bf6  2**0
                  ALLOC
  3 .stab         00006624  00000000  00000000  00002bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008bbc  00000000  00000000  0000921c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00011dd8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  00011e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001849  00000000  00000000  00011f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007a9  00000000  00000000  00013761  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001101  00000000  00000000  00013f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000284  00000000  00000000  0001500c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000052d  00000000  00000000  00015290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c7c  00000000  00000000  000157bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f0  00000000  00000000  00016439  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__dtors_end>
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      24:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__vector_9>
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      34:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__vector_13>
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      50:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <go>:
      76:	4c 31 36 20 63 64 65 67 72 65 67 34 00              L16 cdegreg4.

00000083 <welcome>:
      83:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000008d <demo_name_line2>:
      8d:	73 6f 6c 76 65 72 00                                solver.

00000094 <demo_name_line1>:
      94:	4d 61 7a 65 00                                      Maze.

00000099 <welcome_line2>:
      99:	33 f7 20 52 6f 62 6f 74 00                          3. Robot.

000000a2 <welcome_line1>:
      a2:	20 50 6f 6c 6f 6c 75 00                              Pololu.

000000aa <__ctors_start>:
      aa:	3f 0e       	add	r3, r31

000000ac <__ctors_end>:
      ac:	40 0e       	add	r4, r16

000000ae <__dtors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	d8 e0       	ldi	r29, 0x08	; 8
      b6:	de bf       	out	0x3e, r29	; 62
      b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
      ba:	11 e0       	ldi	r17, 0x01	; 1
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	e8 e1       	ldi	r30, 0x18	; 24
      c2:	fb e2       	ldi	r31, 0x2B	; 43
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
      c6:	05 90       	lpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	aa 34       	cpi	r26, 0x4A	; 74
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
      d0:	23 e0       	ldi	r18, 0x03	; 3
      d2:	aa e4       	ldi	r26, 0x4A	; 74
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a7 3b       	cpi	r26, 0xB7	; 183
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>

000000e0 <__do_global_ctors>:
      e0:	10 e0       	ldi	r17, 0x00	; 0
      e2:	cc ea       	ldi	r28, 0xAC	; 172
      e4:	d0 e0       	ldi	r29, 0x00	; 0
      e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_global_ctors+0x10>
      e8:	22 97       	sbiw	r28, 0x02	; 2
      ea:	fe 01       	movw	r30, r28
      ec:	0e 94 35 14 	call	0x286a	; 0x286a <__tablejump__>
      f0:	ca 3a       	cpi	r28, 0xAA	; 170
      f2:	d1 07       	cpc	r29, r17
      f4:	c9 f7       	brne	.-14     	; 0xe8 <__do_global_ctors+0x8>
      f6:	0e 94 44 02 	call	0x488	; 0x488 <main>
      fa:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__do_global_dtors>

000000fe <__bad_interrupt>:
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <load_custom_characters>:

// This function loads custom characters into the LCD.  Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	88 e6       	ldi	r24, 0x68	; 104
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
     10c:	61 e0       	ldi	r22, 0x01	; 1
     10e:	89 e6       	ldi	r24, 0x69	; 105
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
     116:	62 e0       	ldi	r22, 0x02	; 2
     118:	8a e6       	ldi	r24, 0x6A	; 106
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     120:	63 e0       	ldi	r22, 0x03	; 3
     122:	8b e6       	ldi	r24, 0x6B	; 107
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     12a:	64 e0       	ldi	r22, 0x04	; 4
     12c:	8c e6       	ldi	r24, 0x6C	; 108
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     134:	65 e0       	ldi	r22, 0x05	; 5
     136:	8d e6       	ldi	r24, 0x6D	; 109
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     13e:	66 e0       	ldi	r22, 0x06	; 6
     140:	8e e6       	ldi	r24, 0x6E	; 110
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <lcd_load_custom_character>
	clear(); // the LCD must be cleared for the characters to take effect
     148:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <clear>

0000014c <display_readings>:
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	2a 97       	sbiw	r28, 0x0a	; 10
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
     16c:	8c 01       	movw	r16, r24
	unsigned char i;

	for(i=0;i<5;i++) {
     16e:	d1 2c       	mov	r13, r1
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     170:	8a e0       	ldi	r24, 0x0A	; 10
     172:	c8 2e       	mov	r12, r24

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     174:	95 e6       	ldi	r25, 0x65	; 101
     176:	e9 2e       	mov	r14, r25
     178:	f1 2c       	mov	r15, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     17a:	e1 e3       	ldi	r30, 0x31	; 49
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	de 01       	movw	r26, r28
     180:	11 96       	adiw	r26, 0x01	; 1
     182:	8c 2d       	mov	r24, r12
     184:	01 90       	ld	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	8a 95       	dec	r24
     18a:	e1 f7       	brne	.-8      	; 0x184 <display_readings+0x38>

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     18c:	f8 01       	movw	r30, r16
     18e:	81 91       	ld	r24, Z+
     190:	91 91       	ld	r25, Z+
     192:	8f 01       	movw	r16, r30
     194:	b7 01       	movw	r22, r14
     196:	0e 94 88 13 	call	0x2710	; 0x2710 <__udivmodhi4>
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	8c 0f       	add	r24, r28
     1a0:	9d 1f       	adc	r25, r29
     1a2:	68 0f       	add	r22, r24
     1a4:	79 1f       	adc	r23, r25

		// Display the bar graph character.
		print_character(c);
     1a6:	fb 01       	movw	r30, r22
     1a8:	80 81       	ld	r24, Z
     1aa:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <print_character>
// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     1ae:	d3 94       	inc	r13
     1b0:	f5 e0       	ldi	r31, 0x05	; 5
     1b2:	df 12       	cpse	r13, r31
     1b4:	e2 cf       	rjmp	.-60     	; 0x17a <display_readings+0x2e>
		char c = display_characters[calibrated_values[i]/101];

		// Display the bar graph character.
		print_character(c);
	}
}
     1b6:	2a 96       	adiw	r28, 0x0a	; 10
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	08 95       	ret

000001d4 <follow_segment>:
#include <pololu/3pi.h>

void follow_segment(int max)
{
     1d4:	2f 92       	push	r2
     1d6:	3f 92       	push	r3
     1d8:	4f 92       	push	r4
     1da:	5f 92       	push	r5
     1dc:	6f 92       	push	r6
     1de:	7f 92       	push	r7
     1e0:	8f 92       	push	r8
     1e2:	9f 92       	push	r9
     1e4:	af 92       	push	r10
     1e6:	bf 92       	push	r11
     1e8:	cf 92       	push	r12
     1ea:	df 92       	push	r13
     1ec:	ef 92       	push	r14
     1ee:	ff 92       	push	r15
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	2a 97       	sbiw	r28, 0x0a	; 10
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
     208:	8c 01       	movw	r16, r24
	int last_proportional = 0;
	long integral=0;
     20a:	c1 2c       	mov	r12, r1
     20c:	d1 2c       	mov	r13, r1
     20e:	76 01       	movw	r14, r12
#include <pololu/3pi.h>

void follow_segment(int max)
{
	int last_proportional = 0;
     210:	21 2c       	mov	r2, r1
     212:	31 2c       	mov	r3, r1
		int derivative = proportional - last_proportional;
		integral += proportional;

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     214:	50 e1       	ldi	r21, 0x10	; 16
     216:	45 2e       	mov	r4, r21
     218:	57 e2       	ldi	r21, 0x27	; 39
     21a:	55 2e       	mov	r5, r21
     21c:	61 2c       	mov	r6, r1
     21e:	71 2c       	mov	r7, r1

		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
     220:	88 24       	eor	r8, r8
     222:	99 24       	eor	r9, r9
     224:	88 1a       	sub	r8, r24
     226:	99 0a       	sbc	r9, r25
	long integral=0;

	while(1)
	{
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	ce 01       	movw	r24, r28
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <read_line>

		int proportional = ((int)position) - 2000;
     232:	80 5d       	subi	r24, 0xD0	; 208
     234:	97 40       	sbci	r25, 0x07	; 7
     236:	5c 01       	movw	r10, r24

		int derivative = proportional - last_proportional;
		integral += proportional;
     238:	aa 27       	eor	r26, r26
     23a:	97 fd       	sbrc	r25, 7
     23c:	a0 95       	com	r26
     23e:	ba 2f       	mov	r27, r26
     240:	c8 0e       	add	r12, r24
     242:	d9 1e       	adc	r13, r25
     244:	ea 1e       	adc	r14, r26
     246:	fb 1e       	adc	r15, r27

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     248:	c7 01       	movw	r24, r14
     24a:	b6 01       	movw	r22, r12
     24c:	a3 01       	movw	r20, r6
     24e:	92 01       	movw	r18, r4
     250:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__divmodsi4>
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);

		int proportional = ((int)position) - 2000;

		int derivative = proportional - last_proportional;
     254:	b5 01       	movw	r22, r10
     256:	62 19       	sub	r22, r2
     258:	73 09       	sbc	r23, r3
		integral += proportional;

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     25a:	cb 01       	movw	r24, r22
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	86 0f       	add	r24, r22
     262:	97 1f       	adc	r25, r23
     264:	97 fd       	sbrc	r25, 7
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	fc 01       	movw	r30, r24
     26a:	f5 95       	asr	r31
     26c:	e7 95       	ror	r30
     26e:	e2 0f       	add	r30, r18
     270:	f3 1f       	adc	r31, r19
     272:	c5 01       	movw	r24, r10
     274:	64 e1       	ldi	r22, 0x14	; 20
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	0e 94 9c 13 	call	0x2738	; 0x2738 <__divmodhi4>
     27c:	e6 0f       	add	r30, r22
     27e:	f7 1f       	adc	r31, r23
     280:	0e 17       	cp	r16, r30
     282:	1f 07       	cpc	r17, r31
     284:	0c f4       	brge	.+2      	; 0x288 <follow_segment+0xb4>
     286:	f8 01       	movw	r30, r16
     288:	cf 01       	movw	r24, r30
     28a:	e8 15       	cp	r30, r8
     28c:	f9 05       	cpc	r31, r9
     28e:	0c f4       	brge	.+2      	; 0x292 <follow_segment+0xbe>
     290:	c4 01       	movw	r24, r8
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
     292:	b8 01       	movw	r22, r16
		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
		
		if(power_difference < 0)
     294:	97 ff       	sbrs	r25, 7
     296:	03 c0       	rjmp	.+6      	; 0x29e <follow_segment+0xca>
			set_motors(max+power_difference,max);
     298:	80 0f       	add	r24, r16
     29a:	91 1f       	adc	r25, r17
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <follow_segment+0xd0>
		else
			set_motors(max,max-power_difference);
     29e:	68 1b       	sub	r22, r24
     2a0:	79 0b       	sbc	r23, r25
     2a2:	c8 01       	movw	r24, r16
     2a4:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>

		if(sensors[1] < 100 && sensors[2] < 100 && sensors[3] < 100)
     2a8:	8b 81       	ldd	r24, Y+3	; 0x03
     2aa:	9c 81       	ldd	r25, Y+4	; 0x04
     2ac:	84 36       	cpi	r24, 0x64	; 100
     2ae:	91 05       	cpc	r25, r1
     2b0:	50 f4       	brcc	.+20     	; 0x2c6 <follow_segment+0xf2>
     2b2:	8d 81       	ldd	r24, Y+5	; 0x05
     2b4:	9e 81       	ldd	r25, Y+6	; 0x06
     2b6:	84 36       	cpi	r24, 0x64	; 100
     2b8:	91 05       	cpc	r25, r1
     2ba:	28 f4       	brcc	.+10     	; 0x2c6 <follow_segment+0xf2>
     2bc:	8f 81       	ldd	r24, Y+7	; 0x07
     2be:	98 85       	ldd	r25, Y+8	; 0x08
     2c0:	84 36       	cpi	r24, 0x64	; 100
     2c2:	91 05       	cpc	r25, r1
     2c4:	60 f0       	brcs	.+24     	; 0x2de <follow_segment+0x10a>
		{
			return;
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ca:	89 3c       	cpi	r24, 0xC9	; 201
     2cc:	91 05       	cpc	r25, r1
     2ce:	38 f4       	brcc	.+14     	; 0x2de <follow_segment+0x10a>
     2d0:	89 85       	ldd	r24, Y+9	; 0x09
     2d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     2d4:	89 3c       	cpi	r24, 0xC9	; 201
     2d6:	91 05       	cpc	r25, r1
     2d8:	10 f4       	brcc	.+4      	; 0x2de <follow_segment+0x10a>
		int proportional = ((int)position) - 2000;

		int derivative = proportional - last_proportional;
		integral += proportional;

		last_proportional = proportional;
     2da:	15 01       	movw	r2, r10
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
		{
			return;
		}
	}
     2dc:	a5 cf       	rjmp	.-182    	; 0x228 <follow_segment+0x54>
     2de:	2a 96       	adiw	r28, 0x0a	; 10
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	df 90       	pop	r13
     2f8:	cf 90       	pop	r12
     2fa:	bf 90       	pop	r11
     2fc:	af 90       	pop	r10
     2fe:	9f 90       	pop	r9
     300:	8f 90       	pop	r8
     302:	7f 90       	pop	r7
     304:	6f 90       	pop	r6
     306:	5f 90       	pop	r5
     308:	4f 90       	pop	r4
     30a:	3f 90       	pop	r3
     30c:	2f 90       	pop	r2
     30e:	08 95       	ret

00000310 <initialize>:

const char welcome[] PROGMEM = ">g32>>c32";
const char go[] PROGMEM = "L16 cdegreg4";

void initialize()
{
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	2a 97       	sbiw	r28, 0x0a	; 10
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
	unsigned int counter; 
	unsigned int sensors[5]; 
	
	pololu_3pi_init(2000);
     328:	80 ed       	ldi	r24, 0xD0	; 208
     32a:	97 e0       	ldi	r25, 0x07	; 7
     32c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <pololu_3pi_init>
	load_custom_characters();
     330:	0e 94 81 00 	call	0x102	; 0x102 <load_custom_characters>
	
	print_from_program_space(welcome_line1);
     334:	82 ea       	ldi	r24, 0xA2	; 162
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 9e 0b 	call	0x173c	; 0x173c <print_from_program_space>
	lcd_goto_xy(0,1);
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	0e 94 1e 0c 	call	0x183c	; 0x183c <lcd_goto_xy>
	print_from_program_space(welcome_line2);
     344:	89 e9       	ldi	r24, 0x99	; 153
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 9e 0b 	call	0x173c	; 0x173c <print_from_program_space>
	play_from_program_space(welcome);
     34c:	83 e8       	ldi	r24, 0x83	; 131
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 33 0a 	call	0x1466	; 0x1466 <play_from_program_space>
	delay_ms(1000);
     354:	88 ee       	ldi	r24, 0xE8	; 232
     356:	93 e0       	ldi	r25, 0x03	; 3
     358:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>

	clear();
     35c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <clear>
	print_from_program_space(demo_name_line1);
     360:	84 e9       	ldi	r24, 0x94	; 148
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 9e 0b 	call	0x173c	; 0x173c <print_from_program_space>
	lcd_goto_xy(0,1);
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	0e 94 1e 0c 	call	0x183c	; 0x183c <lcd_goto_xy>
	print_from_program_space(demo_name_line2);
     370:	8d e8       	ldi	r24, 0x8D	; 141
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 9e 0b 	call	0x173c	; 0x173c <print_from_program_space>
	delay_ms(1000);
     378:	88 ee       	ldi	r24, 0xE8	; 232
     37a:	93 e0       	ldi	r25, 0x03	; 3
		print_long(bat);
		print("mV");
		lcd_goto_xy(0,1);
		print("Press B");

		delay_ms(100);
     37c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
	print_from_program_space(demo_name_line1);
	lcd_goto_xy(0,1);
	print_from_program_space(demo_name_line2);
	delay_ms(1000);

	while(!button_is_pressed(BUTTON_B))
     380:	80 e1       	ldi	r24, 0x10	; 16
     382:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_is_pressed>
     386:	81 11       	cpse	r24, r1
     388:	1b c0       	rjmp	.+54     	; 0x3c0 <initialize+0xb0>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     38a:	0e 94 f1 06 	call	0xde2	; 0xde2 <read_battery_millivolts_3pi>
     38e:	8c 01       	movw	r16, r24
	{
		int bat = read_battery_millivolts();

		clear();
     390:	0e 94 76 0b 	call	0x16ec	; 0x16ec <clear>
		print_long(bat);
     394:	b8 01       	movw	r22, r16
     396:	88 27       	eor	r24, r24
     398:	77 fd       	sbrc	r23, 7
     39a:	80 95       	com	r24
     39c:	98 2f       	mov	r25, r24
     39e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <print_long>
		print("mV");
     3a2:	8b e3       	ldi	r24, 0x3B	; 59
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 8d 0b 	call	0x171a	; 0x171a <print>
		lcd_goto_xy(0,1);
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 1e 0c 	call	0x183c	; 0x183c <lcd_goto_xy>
		print("Press B");
     3b2:	8e e3       	ldi	r24, 0x3E	; 62
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	0e 94 8d 0b 	call	0x171a	; 0x171a <print>

		delay_ms(100);
     3ba:	84 e6       	ldi	r24, 0x64	; 100
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	de cf       	rjmp	.-68     	; 0x37c <initialize+0x6c>
	}

	wait_for_button_release(BUTTON_B);
     3c0:	80 e1       	ldi	r24, 0x10	; 16
     3c2:	0e 94 57 0d 	call	0x1aae	; 0x1aae <wait_for_button_release>
	delay_ms(1000);
     3c6:	88 ee       	ldi	r24, 0xE8	; 232
     3c8:	93 e0       	ldi	r25, 0x03	; 3
     3ca:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
     3ce:	0c ee       	ldi	r16, 0xEC	; 236
     3d0:	1f ef       	ldi	r17, 0xFF	; 255

	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     3d2:	08 32       	cpi	r16, 0x28	; 40
     3d4:	11 05       	cpc	r17, r1
     3d6:	28 f0       	brcs	.+10     	; 0x3e2 <initialize+0xd2>
			set_motors(40,-40);
     3d8:	68 ed       	ldi	r22, 0xD8	; 216
     3da:	7f ef       	ldi	r23, 0xFF	; 255
     3dc:	88 e2       	ldi	r24, 0x28	; 40
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <initialize+0xda>
		else
			set_motors(-40,40);
     3e2:	68 e2       	ldi	r22, 0x28	; 40
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	88 ed       	ldi	r24, 0xD8	; 216
     3e8:	9f ef       	ldi	r25, 0xFF	; 255
     3ea:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <calibrate_line_sensors>
		delay_ms(20);
     3f4:	84 e1       	ldi	r24, 0x14	; 20
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
     3fc:	0f 5f       	subi	r16, 0xFF	; 255
     3fe:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	for(counter=0;counter<80;counter++)
     400:	0c 33       	cpi	r16, 0x3C	; 60
     402:	11 05       	cpc	r17, r1
     404:	31 f7       	brne	.-52     	; 0x3d2 <initialize+0xc2>
		else
			set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	set_motors(0,0);
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>

	while(!button_is_pressed(BUTTON_B))
     412:	80 e1       	ldi	r24, 0x10	; 16
     414:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <button_is_pressed>
     418:	81 11       	cpse	r24, r1
     41a:	1a c0       	rjmp	.+52     	; 0x450 <initialize+0x140>
	{
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <read_line>
     426:	8c 01       	movw	r16, r24

		clear();
     428:	0e 94 76 0b 	call	0x16ec	; 0x16ec <clear>
		print_long(position);
     42c:	b8 01       	movw	r22, r16
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <print_long>
		lcd_goto_xy(0,1);
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	0e 94 1e 0c 	call	0x183c	; 0x183c <lcd_goto_xy>
		display_readings(sensors);
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	0e 94 a6 00 	call	0x14c	; 0x14c <display_readings>

		delay_ms(100);
     446:	84 e6       	ldi	r24, 0x64	; 100
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
     44e:	e1 cf       	rjmp	.-62     	; 0x412 <initialize+0x102>
	}
	wait_for_button_release(BUTTON_B);
     450:	80 e1       	ldi	r24, 0x10	; 16
     452:	0e 94 57 0d 	call	0x1aae	; 0x1aae <wait_for_button_release>

	clear();
     456:	0e 94 76 0b 	call	0x16ec	; 0x16ec <clear>

	print("Go!");		
     45a:	86 e4       	ldi	r24, 0x46	; 70
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 8d 0b 	call	0x171a	; 0x171a <print>

	play_from_program_space(go);
     462:	86 e7       	ldi	r24, 0x76	; 118
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 33 0a 	call	0x1466	; 0x1466 <play_from_program_space>
	while(is_playing());
     46a:	0e 94 22 0a 	call	0x1444	; 0x1444 <is_playing>
     46e:	81 11       	cpse	r24, r1
     470:	fc cf       	rjmp	.-8      	; 0x46a <initialize+0x15a>
}
     472:	2a 96       	adiw	r28, 0x0a	; 10
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	08 95       	ret

00000488 <main>:


int main()
{
	initialize();//3pi initialization
     488:	0e 94 88 01 	call	0x310	; 0x310 <initialize>
	
	maze_solve(160); //std 160
     48c:	80 ea       	ldi	r24, 0xA0	; 160
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 51 03 	call	0x6a2	; 0x6a2 <maze_solve>
     494:	ff cf       	rjmp	.-2      	; 0x494 <main+0xc>

00000496 <sensor_data>:
uint16_t  node_number = 0;



uint8_t sensor_data(void)
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	2a 97       	sbiw	r28, 0x0a	; 10
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5], edge_th = 400, line_th = 300;
	uint8_t sn_dta = 0x00;
	read_line(sensors,IR_EMITTERS_ON);
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	ce 01       	movw	r24, r28
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <read_line>
	if (sensors[0] > edge_th)	sn_dta |= (1<<4);
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	81 39       	cpi	r24, 0x91	; 145
     4ba:	91 40       	sbci	r25, 0x01	; 1
     4bc:	10 f0       	brcs	.+4      	; 0x4c2 <sensor_data+0x2c>
     4be:	80 e1       	ldi	r24, 0x10	; 16
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <sensor_data+0x2e>
	else						sn_dta &= ~(1<<4);
     4c2:	80 e0       	ldi	r24, 0x00	; 0
	if (sensors[1] > line_th)	sn_dta |= (1<<3);
     4c4:	2b 81       	ldd	r18, Y+3	; 0x03
     4c6:	3c 81       	ldd	r19, Y+4	; 0x04
     4c8:	2d 32       	cpi	r18, 0x2D	; 45
     4ca:	31 40       	sbci	r19, 0x01	; 1
     4cc:	10 f0       	brcs	.+4      	; 0x4d2 <sensor_data+0x3c>
     4ce:	88 60       	ori	r24, 0x08	; 8
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <sensor_data+0x3e>
	else						sn_dta &= ~(1<<3);
     4d2:	87 7f       	andi	r24, 0xF7	; 247
	if (sensors[2] > line_th)	sn_dta |= (1<<2);
     4d4:	2d 81       	ldd	r18, Y+5	; 0x05
     4d6:	3e 81       	ldd	r19, Y+6	; 0x06
     4d8:	2d 32       	cpi	r18, 0x2D	; 45
     4da:	31 40       	sbci	r19, 0x01	; 1
     4dc:	10 f0       	brcs	.+4      	; 0x4e2 <sensor_data+0x4c>
     4de:	84 60       	ori	r24, 0x04	; 4
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <sensor_data+0x4e>
	else						sn_dta &= ~(1<<2);
     4e2:	8b 7f       	andi	r24, 0xFB	; 251
	if (sensors[3] > line_th)	sn_dta |= (1<<1);
     4e4:	2f 81       	ldd	r18, Y+7	; 0x07
     4e6:	38 85       	ldd	r19, Y+8	; 0x08
     4e8:	2d 32       	cpi	r18, 0x2D	; 45
     4ea:	31 40       	sbci	r19, 0x01	; 1
     4ec:	10 f0       	brcs	.+4      	; 0x4f2 <sensor_data+0x5c>
     4ee:	82 60       	ori	r24, 0x02	; 2
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <sensor_data+0x5e>
	else						sn_dta &= ~(1<<1);
     4f2:	8d 7f       	andi	r24, 0xFD	; 253
	if (sensors[4] > edge_th)	sn_dta |= (1<<0);
     4f4:	29 85       	ldd	r18, Y+9	; 0x09
     4f6:	3a 85       	ldd	r19, Y+10	; 0x0a
     4f8:	21 39       	cpi	r18, 0x91	; 145
     4fa:	31 40       	sbci	r19, 0x01	; 1
     4fc:	10 f0       	brcs	.+4      	; 0x502 <sensor_data+0x6c>
     4fe:	81 60       	ori	r24, 0x01	; 1
     500:	01 c0       	rjmp	.+2      	; 0x504 <sensor_data+0x6e>
	else						sn_dta &= ~(1<<0);
     502:	8e 7f       	andi	r24, 0xFE	; 254
	
	return sn_dta;
}
     504:	2a 96       	adiw	r28, 0x0a	; 10
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <sensor_data_verified>:

uint8_t sensor_data_verified(void)
{
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
void time_reset(void);

// This is inline for efficiency:
static inline void delay_us(unsigned int microseconds)
{
  __asm__ volatile (
     51c:	c4 e1       	ldi	r28, 0x14	; 20
     51e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t snsr_data;
re_data:
	snsr_data = sensor_data();
     520:	0e 94 4b 02 	call	0x496	; 0x496 <sensor_data>
     524:	18 2f       	mov	r17, r24
     526:	fe 01       	movw	r30, r28
     528:	6f 93       	push	r22
     52a:	64 e0       	ldi	r22, 0x04	; 4
     52c:	6a 95       	dec	r22
     52e:	f1 f7       	brne	.-4      	; 0x52c <sensor_data_verified+0x16>
     530:	6f 91       	pop	r22
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	c9 f7       	brne	.-14     	; 0x528 <sensor_data_verified+0x12>
	delay_us(20);
	if (snsr_data == sensor_data())
     536:	0e 94 4b 02 	call	0x496	; 0x496 <sensor_data>
     53a:	18 13       	cpse	r17, r24
     53c:	f1 cf       	rjmp	.-30     	; 0x520 <sensor_data_verified+0xa>
	{
		return snsr_data;
	}
	else goto re_data;
}
     53e:	81 2f       	mov	r24, r17
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	08 95       	ret

00000548 <process_u>:


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
			{
				directions_solved[i-1] = 's';
     54c:	43 e7       	ldi	r20, 0x73	; 115
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'r';
     54e:	52 e7       	ldi	r21, 0x72	; 114
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
			{
				directions_solved[i-1] = 'l';
     550:	6c e6       	ldi	r22, 0x6C	; 108


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     552:	dc 01       	movw	r26, r24
     554:	a1 54       	subi	r26, 0x41	; 65
     556:	be 4f       	sbci	r27, 0xFE	; 254
     558:	2c 91       	ld	r18, X
     55a:	22 23       	and	r18, r18
     55c:	e1 f1       	breq	.+120    	; 0x5d6 <process_u+0x8e>
	{
		if (directions_solved[i] == 'u')
     55e:	25 37       	cpi	r18, 0x75	; 117
     560:	c1 f5       	brne	.+112    	; 0x5d2 <process_u+0x8a>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
     562:	fc 01       	movw	r30, r24
     564:	e2 54       	subi	r30, 0x42	; 66
     566:	fe 4f       	sbci	r31, 0xFE	; 254
     568:	30 81       	ld	r19, Z
     56a:	32 37       	cpi	r19, 0x72	; 114
     56c:	29 f4       	brne	.+10     	; 0x578 <process_u+0x30>
     56e:	11 96       	adiw	r26, 0x01	; 1
     570:	3c 91       	ld	r19, X
     572:	33 37       	cpi	r19, 0x73	; 115
     574:	81 f4       	brne	.+32     	; 0x596 <process_u+0x4e>
     576:	06 c0       	rjmp	.+12     	; 0x584 <process_u+0x3c>
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
     578:	33 37       	cpi	r19, 0x73	; 115
     57a:	31 f4       	brne	.+12     	; 0x588 <process_u+0x40>
     57c:	11 96       	adiw	r26, 0x01	; 1
     57e:	3c 91       	ld	r19, X
     580:	32 37       	cpi	r19, 0x72	; 114
     582:	a1 f4       	brne	.+40     	; 0x5ac <process_u+0x64>
			{
				directions_solved[i-1] = 'l';
     584:	60 83       	st	Z, r22
     586:	19 c0       	rjmp	.+50     	; 0x5ba <process_u+0x72>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'r')
     588:	3c 36       	cpi	r19, 0x6C	; 108
     58a:	b9 f4       	brne	.+46     	; 0x5ba <process_u+0x72>
     58c:	11 96       	adiw	r26, 0x01	; 1
     58e:	3c 91       	ld	r19, X
     590:	32 37       	cpi	r19, 0x72	; 114
     592:	31 f4       	brne	.+12     	; 0x5a0 <process_u+0x58>
     594:	11 c0       	rjmp	.+34     	; 0x5b8 <process_u+0x70>
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'r')
     596:	32 37       	cpi	r19, 0x72	; 114
     598:	39 f0       	breq	.+14     	; 0x5a8 <process_u+0x60>
			{
				directions_solved[i-1] = 's';
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'l')
     59a:	3c 36       	cpi	r19, 0x6C	; 108
     59c:	71 f4       	brne	.+28     	; 0x5ba <process_u+0x72>
     59e:	0c c0       	rjmp	.+24     	; 0x5b8 <process_u+0x70>
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
     5a0:	33 37       	cpi	r19, 0x73	; 115
     5a2:	31 f0       	breq	.+12     	; 0x5b0 <process_u+0x68>
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
     5a4:	3c 36       	cpi	r19, 0x6C	; 108
     5a6:	49 f4       	brne	.+18     	; 0x5ba <process_u+0x72>
			{
				directions_solved[i-1] = 's';
     5a8:	40 83       	st	Z, r20
     5aa:	07 c0       	rjmp	.+14     	; 0x5ba <process_u+0x72>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'l')
     5ac:	3c 36       	cpi	r19, 0x6C	; 108
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <process_u+0x6c>
			{
				directions_solved[i-1] = 'r';
     5b0:	50 83       	st	Z, r21
     5b2:	03 c0       	rjmp	.+6      	; 0x5ba <process_u+0x72>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
     5b4:	33 37       	cpi	r19, 0x73	; 115
     5b6:	09 f4       	brne	.+2      	; 0x5ba <process_u+0x72>
			{
				directions_solved[i-1] = 'u';
     5b8:	20 83       	st	Z, r18
     5ba:	fc 01       	movw	r30, r24
     5bc:	e1 54       	subi	r30, 0x41	; 65
     5be:	fe 4f       	sbci	r31, 0xFE	; 254
			}

			
			while (directions_solved[i+2])
     5c0:	22 81       	ldd	r18, Z+2	; 0x02
     5c2:	22 23       	and	r18, r18
     5c4:	19 f0       	breq	.+6      	; 0x5cc <process_u+0x84>
			{
				directions_solved[i] = directions_solved[i+2];
     5c6:	20 83       	st	Z, r18
				i++;
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	f7 cf       	rjmp	.-18     	; 0x5ba <process_u+0x72>
			}
			directions_solved[i] = '\0';
     5cc:	10 82       	st	Z, r1
			i=0;
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	be cf       	rjmp	.-132    	; 0x552 <process_u+0xa>
			}
			directions_solved[i] = '\0';
			i=0;
		}
	}
}
     5d6:	08 95       	ret

000005d8 <process_array>:
		}
	}
}

void process_array(void)
{
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
     5e0:	8f eb       	ldi	r24, 0xBF	; 191
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	0e 94 6f 15 	call	0x2ade	; 0x2ade <strrev>
     5e8:	ef eb       	ldi	r30, 0xBF	; 191
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
		{
			directions_solved[i] = 'r';
		}
		else if (directions_solved[i] == 'r')
		{
			directions_solved[i] = 'l';
     5ec:	9c e6       	ldi	r25, 0x6C	; 108
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'l')
		{
			directions_solved[i] = 'r';
     5ee:	22 e7       	ldi	r18, 0x72	; 114
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
	
	for (i=0;directions_solved[i];i++)
     5f0:	80 81       	ld	r24, Z
     5f2:	88 23       	and	r24, r24
     5f4:	49 f0       	breq	.+18     	; 0x608 <process_array+0x30>
	{
		if (directions_solved[i] == 'l')
     5f6:	8c 36       	cpi	r24, 0x6C	; 108
     5f8:	11 f4       	brne	.+4      	; 0x5fe <process_array+0x26>
		{
			directions_solved[i] = 'r';
     5fa:	20 83       	st	Z, r18
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <process_array+0x2c>
		}
		else if (directions_solved[i] == 'r')
     5fe:	82 37       	cpi	r24, 0x72	; 114
     600:	09 f4       	brne	.+2      	; 0x604 <process_array+0x2c>
		{
			directions_solved[i] = 'l';
     602:	90 83       	st	Z, r25
     604:	31 96       	adiw	r30, 0x01	; 1
     606:	f4 cf       	rjmp	.-24     	; 0x5f0 <process_array+0x18>
		}
	}
	
	while(1)
	{
		length_sln_prev = strlen(directions_solved);
     608:	0f eb       	ldi	r16, 0xBF	; 191
     60a:	11 e0       	ldi	r17, 0x01	; 1
     60c:	e8 01       	movw	r28, r16
     60e:	09 90       	ld	r0, Y+
     610:	00 20       	and	r0, r0
     612:	e9 f7       	brne	.-6      	; 0x60e <process_array+0x36>
     614:	21 97       	sbiw	r28, 0x01	; 1
     616:	cf 5b       	subi	r28, 0xBF	; 191
     618:	d1 40       	sbci	r29, 0x01	; 1
		
		process_u();
     61a:	0e 94 a4 02 	call	0x548	; 0x548 <process_u>
		
		//process_loop();
		
		if (length_sln_prev == strlen(directions_solved))
     61e:	f8 01       	movw	r30, r16
     620:	01 90       	ld	r0, Z+
     622:	00 20       	and	r0, r0
     624:	e9 f7       	brne	.-6      	; 0x620 <process_array+0x48>
     626:	31 97       	sbiw	r30, 0x01	; 1
     628:	ef 5b       	subi	r30, 0xBF	; 191
     62a:	f1 40       	sbci	r31, 0x01	; 1
     62c:	ce 17       	cp	r28, r30
     62e:	df 07       	cpc	r29, r31
     630:	69 f7       	brne	.-38     	; 0x60c <process_array+0x34>
		{
			break;
		}
	}
}
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret

0000063c <evaluate_direction>:


void evaluate_direction(uint16_t speed)
{
     63c:	bc 01       	movw	r22, r24
	char evaluation = 0;
	evaluation = directions_solved[node_number];
     63e:	80 91 bd 01 	lds	r24, 0x01BD
     642:	90 91 be 01 	lds	r25, 0x01BE
     646:	fc 01       	movw	r30, r24
     648:	e1 54       	subi	r30, 0x41	; 65
     64a:	fe 4f       	sbci	r31, 0xFE	; 254
     64c:	20 81       	ld	r18, Z
	node_number = node_number + 1;
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	90 93 be 01 	sts	0x01BE, r25
     654:	80 93 bd 01 	sts	0x01BD, r24
	
	if (evaluation == 's')
     658:	23 37       	cpi	r18, 0x73	; 115
     65a:	11 f4       	brne	.+4      	; 0x660 <evaluate_direction+0x24>
	{
		turn('S',speed);
     65c:	83 e5       	ldi	r24, 0x53	; 83
     65e:	0b c0       	rjmp	.+22     	; 0x676 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'u')
     660:	25 37       	cpi	r18, 0x75	; 117
     662:	11 f4       	brne	.+4      	; 0x668 <evaluate_direction+0x2c>
	{
		turn('U',speed);
     664:	85 e5       	ldi	r24, 0x55	; 85
     666:	07 c0       	rjmp	.+14     	; 0x676 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'l')
     668:	2c 36       	cpi	r18, 0x6C	; 108
     66a:	11 f4       	brne	.+4      	; 0x670 <evaluate_direction+0x34>
	{
		turn('L',speed);
     66c:	8c e4       	ldi	r24, 0x4C	; 76
     66e:	03 c0       	rjmp	.+6      	; 0x676 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'r')
     670:	22 37       	cpi	r18, 0x72	; 114
     672:	19 f4       	brne	.+6      	; 0x67a <evaluate_direction+0x3e>
	{
		turn('R',speed);
     674:	82 e5       	ldi	r24, 0x52	; 82
     676:	0c 94 c5 04 	jmp	0x98a	; 0x98a <turn>
	}
	else
	{
		set_motors(0,0);
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
     686:	ff cf       	rjmp	.-2      	; 0x686 <evaluate_direction+0x4a>

00000688 <destination_operation>:
}


void destination_operation(int speed)
{
	directions_solved[node_number] = '\0';
     688:	e0 91 bd 01 	lds	r30, 0x01BD
     68c:	f0 91 be 01 	lds	r31, 0x01BE
     690:	e1 54       	subi	r30, 0x41	; 65
     692:	fe 4f       	sbci	r31, 0xFE	; 254
     694:	10 82       	st	Z, r1
	turn('D',speed);
     696:	bc 01       	movw	r22, r24
     698:	84 e4       	ldi	r24, 0x44	; 68
     69a:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
	process_array();
     69e:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <process_array>

000006a2 <maze_solve>:
}


void maze_solve(int speed)
{
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	1f 92       	push	r1
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	3c 01       	movw	r6, r24
	uint16_t destination = 0;
	const signed int speed_node = 100;
	char sensor_data_hold = 0, Right_trigged = 0, Left_trigged = 0, Forward_trigged = 0; 
     6ae:	a1 2c       	mov	r10, r1
     6b0:	91 2c       	mov	r9, r1
     6b2:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
			}
		}
		else if (sensor_data_hold == 0b00000) //-100
		{	
			directions_solved[node_number] = 'u';
     6b4:	85 e7       	ldi	r24, 0x75	; 117
     6b6:	e8 2e       	mov	r14, r24
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 'l';
     6b8:	9c e6       	ldi	r25, 0x6C	; 108
     6ba:	f9 2e       	mov	r15, r25
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 's';
     6bc:	23 e7       	ldi	r18, 0x73	; 115
     6be:	d2 2e       	mov	r13, r18
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
			{
				directions_solved[node_number] = 'r';
     6c0:	32 e7       	ldi	r19, 0x72	; 114
     6c2:	c3 2e       	mov	r12, r19
//****** Explore the path *****************************************************************************
///////////////////////////////////////////////////////////////////////////////////////////////////////

	while(1)
	{
		follow_segment(speed);
     6c4:	c3 01       	movw	r24, r6
     6c6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>
		
		sensor_data_hold = sensor_data_verified();
     6ca:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     6ce:	28 2f       	mov	r18, r24
		
		if(sensor_data_hold & 0b10000)  //left trigging 
     6d0:	84 ff       	sbrs	r24, 4
     6d2:	6e c0       	rjmp	.+220    	; 0x7b0 <maze_solve+0x10e>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     6d4:	64 e6       	ldi	r22, 0x64	; 100
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	84 e6       	ldi	r24, 0x64	; 100
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	29 83       	std	Y+1, r18	; 0x01
     6de:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
			destination = 0;
     6e2:	00 e0       	ldi	r16, 0x00	; 0
     6e4:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     6e6:	29 81       	ldd	r18, Y+1	; 0x01
     6e8:	21 71       	andi	r18, 0x11	; 17
     6ea:	c1 f0       	breq	.+48     	; 0x71c <maze_solve+0x7a>
			{
				sensor_data_hold = sensor_data_verified();
     6ec:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     6f0:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b00001) && (Right_trigged == 0))
     6f2:	80 ff       	sbrs	r24, 0
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <maze_solve+0x5c>
     6f6:	b1 10       	cpse	r11, r1
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <maze_solve+0x5c>
				{
					Right_trigged=1;
     6fa:	bb 24       	eor	r11, r11
     6fc:	b3 94       	inc	r11
				}
				if (sensor_data_hold == 0b11111)
     6fe:	2f 31       	cpi	r18, 0x1F	; 31
     700:	99 f7       	brne	.-26     	; 0x6e8 <maze_solve+0x46>
				{
					destination = destination + 1;
     702:	0f 5f       	subi	r16, 0xFF	; 255
     704:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 70)   // destination triggering
     706:	07 34       	cpi	r16, 0x47	; 71
     708:	11 05       	cpc	r17, r1
     70a:	70 f3       	brcs	.-36     	; 0x6e8 <maze_solve+0x46>
					{
						destination = 0x00;
						destination_operation(speed);
     70c:	c3 01       	movw	r24, r6
     70e:	0e 94 44 03 	call	0x688	; 0x688 <destination_operation>
	//****** Follow the Solved path************************************************************************
	///////////////////////////////////////////////////////////////////////////////////////////////////////

solv_maze:

node_number = 0x00;
     712:	10 92 be 01 	sts	0x01BE, r1
     716:	10 92 bd 01 	sts	0x01BD, r1
     71a:	e0 c0       	rjmp	.+448    	; 0x8dc <maze_solve+0x23a>
						goto solv_maze;
					}
				}
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
     71c:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
			if (sensor_data_hold & 0b00100)
     720:	82 fd       	sbrc	r24, 2
     722:	1f c1       	rjmp	.+574    	; 0x962 <__stack+0x63>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     724:	b1 10       	cpse	r11, r1
     726:	16 c0       	rjmp	.+44     	; 0x754 <maze_solve+0xb2>
     728:	a1 10       	cpse	r10, r1
     72a:	10 c0       	rjmp	.+32     	; 0x74c <maze_solve+0xaa>
			{
				directions_solved[node_number] = 'l';
     72c:	80 91 bd 01 	lds	r24, 0x01BD
     730:	90 91 be 01 	lds	r25, 0x01BE
     734:	fc 01       	movw	r30, r24
     736:	e1 54       	subi	r30, 0x41	; 65
     738:	fe 4f       	sbci	r31, 0xFE	; 254
     73a:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	90 93 be 01 	sts	0x01BE, r25
     742:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     746:	b3 01       	movw	r22, r6
     748:	8c e4       	ldi	r24, 0x4C	; 76
     74a:	bb c0       	rjmp	.+374    	; 0x8c2 <maze_solve+0x220>
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	a8 12       	cpse	r10, r24
     750:	b9 cf       	rjmp	.-142    	; 0x6c4 <maze_solve+0x22>
     752:	1b c0       	rjmp	.+54     	; 0x78a <maze_solve+0xe8>
				node_number = node_number + 1;
				turn('L',speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     754:	e1 e0       	ldi	r30, 0x01	; 1
     756:	be 12       	cpse	r11, r30
     758:	b5 cf       	rjmp	.-150    	; 0x6c4 <maze_solve+0x22>
     75a:	a1 10       	cpse	r10, r1
     75c:	13 c0       	rjmp	.+38     	; 0x784 <maze_solve+0xe2>
			{
				directions_solved[node_number] = 'l';
     75e:	80 91 bd 01 	lds	r24, 0x01BD
     762:	90 91 be 01 	lds	r25, 0x01BE
     766:	fc 01       	movw	r30, r24
     768:	e1 54       	subi	r30, 0x41	; 65
     76a:	fe 4f       	sbci	r31, 0xFE	; 254
     76c:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 be 01 	sts	0x01BE, r25
     774:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     778:	b3 01       	movw	r22, r6
     77a:	8c e4       	ldi	r24, 0x4C	; 76
     77c:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
				Right_trigged = 0;
     780:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
     782:	a0 cf       	rjmp	.-192    	; 0x6c4 <maze_solve+0x22>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
     784:	f1 e0       	ldi	r31, 0x01	; 1
     786:	af 12       	cpse	r10, r31
     788:	9d cf       	rjmp	.-198    	; 0x6c4 <maze_solve+0x22>
			{
				directions_solved[node_number] = 'l';
     78a:	80 91 bd 01 	lds	r24, 0x01BD
     78e:	90 91 be 01 	lds	r25, 0x01BE
     792:	fc 01       	movw	r30, r24
     794:	e1 54       	subi	r30, 0x41	; 65
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	90 93 be 01 	sts	0x01BE, r25
     7a0:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     7a4:	b3 01       	movw	r22, r6
     7a6:	8c e4       	ldi	r24, 0x4C	; 76
     7a8:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
				Right_trigged = 0;
				Forward_trigged = 0;
     7ac:	a1 2c       	mov	r10, r1
     7ae:	e8 cf       	rjmp	.-48     	; 0x780 <maze_solve+0xde>
			}
		}
		else if (sensor_data_hold & 0b00001) //right trigging
     7b0:	80 ff       	sbrs	r24, 0
     7b2:	76 c0       	rjmp	.+236    	; 0x8a0 <maze_solve+0x1fe>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     7b4:	64 e6       	ldi	r22, 0x64	; 100
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	84 e6       	ldi	r24, 0x64	; 100
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	29 83       	std	Y+1, r18	; 0x01
     7be:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
			destination = 0;
     7c2:	00 e0       	ldi	r16, 0x00	; 0
     7c4:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     7c6:	29 81       	ldd	r18, Y+1	; 0x01
     7c8:	21 71       	andi	r18, 0x11	; 17
     7ca:	89 f0       	breq	.+34     	; 0x7ee <maze_solve+0x14c>
			{
				sensor_data_hold = sensor_data_verified();
     7cc:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     7d0:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b10000) && (Left_trigged == 0))
     7d2:	84 ff       	sbrs	r24, 4
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <maze_solve+0x13c>
     7d6:	91 10       	cpse	r9, r1
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <maze_solve+0x13c>
				{
					Left_trigged=1;
     7da:	99 24       	eor	r9, r9
     7dc:	93 94       	inc	r9
				}
				if (sensor_data_hold == 0b11111)
     7de:	2f 31       	cpi	r18, 0x1F	; 31
     7e0:	99 f7       	brne	.-26     	; 0x7c8 <maze_solve+0x126>
				{
					destination = destination + 1;
     7e2:	0f 5f       	subi	r16, 0xFF	; 255
     7e4:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 70)   // destination triggering
     7e6:	07 34       	cpi	r16, 0x47	; 71
     7e8:	11 05       	cpc	r17, r1
     7ea:	70 f3       	brcs	.-36     	; 0x7c8 <maze_solve+0x126>
     7ec:	8f cf       	rjmp	.-226    	; 0x70c <maze_solve+0x6a>
						goto solv_maze;
					}
				}
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
     7ee:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
			if (sensor_data_hold & 0b00100)
     7f2:	82 fd       	sbrc	r24, 2
     7f4:	ba c0       	rjmp	.+372    	; 0x96a <__stack+0x6b>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     7f6:	91 10       	cpse	r9, r1
     7f8:	25 c0       	rjmp	.+74     	; 0x844 <maze_solve+0x1a2>
     7fa:	a1 10       	cpse	r10, r1
     7fc:	10 c0       	rjmp	.+32     	; 0x81e <maze_solve+0x17c>
			{
				directions_solved[node_number] = 'r';
     7fe:	80 91 bd 01 	lds	r24, 0x01BD
     802:	90 91 be 01 	lds	r25, 0x01BE
     806:	fc 01       	movw	r30, r24
     808:	e1 54       	subi	r30, 0x41	; 65
     80a:	fe 4f       	sbci	r31, 0xFE	; 254
     80c:	c0 82       	st	Z, r12
				node_number = node_number + 1;
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	90 93 be 01 	sts	0x01BE, r25
     814:	80 93 bd 01 	sts	0x01BD, r24
				turn('R',speed);
     818:	b3 01       	movw	r22, r6
     81a:	82 e5       	ldi	r24, 0x52	; 82
     81c:	52 c0       	rjmp	.+164    	; 0x8c2 <maze_solve+0x220>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	a8 12       	cpse	r10, r24
     822:	50 cf       	rjmp	.-352    	; 0x6c4 <maze_solve+0x22>
			{
				directions_solved[node_number] = 's';
     824:	80 91 bd 01 	lds	r24, 0x01BD
     828:	90 91 be 01 	lds	r25, 0x01BE
     82c:	fc 01       	movw	r30, r24
     82e:	e1 54       	subi	r30, 0x41	; 65
     830:	fe 4f       	sbci	r31, 0xFE	; 254
     832:	d0 82       	st	Z, r13
				node_number = node_number + 1;
     834:	01 96       	adiw	r24, 0x01	; 1
     836:	90 93 be 01 	sts	0x01BE, r25
     83a:	80 93 bd 01 	sts	0x01BD, r24
				turn('S',speed);
     83e:	b3 01       	movw	r22, r6
     840:	83 e5       	ldi	r24, 0x53	; 83
     842:	29 c0       	rjmp	.+82     	; 0x896 <maze_solve+0x1f4>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     844:	e1 e0       	ldi	r30, 0x01	; 1
     846:	9e 12       	cpse	r9, r30
     848:	3d cf       	rjmp	.-390    	; 0x6c4 <maze_solve+0x22>
     84a:	a1 10       	cpse	r10, r1
     84c:	12 c0       	rjmp	.+36     	; 0x872 <maze_solve+0x1d0>
			{
				directions_solved[node_number] = 'l';
     84e:	80 91 bd 01 	lds	r24, 0x01BD
     852:	90 91 be 01 	lds	r25, 0x01BE
     856:	fc 01       	movw	r30, r24
     858:	e1 54       	subi	r30, 0x41	; 65
     85a:	fe 4f       	sbci	r31, 0xFE	; 254
     85c:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	90 93 be 01 	sts	0x01BE, r25
     864:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     868:	b3 01       	movw	r22, r6
     86a:	8c e4       	ldi	r24, 0x4C	; 76
     86c:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
     870:	15 c0       	rjmp	.+42     	; 0x89c <maze_solve+0x1fa>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	af 12       	cpse	r10, r31
     876:	26 cf       	rjmp	.-436    	; 0x6c4 <maze_solve+0x22>
			{
				directions_solved[node_number] = 'l';
     878:	80 91 bd 01 	lds	r24, 0x01BD
     87c:	90 91 be 01 	lds	r25, 0x01BE
     880:	fc 01       	movw	r30, r24
     882:	e1 54       	subi	r30, 0x41	; 65
     884:	fe 4f       	sbci	r31, 0xFE	; 254
     886:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	90 93 be 01 	sts	0x01BE, r25
     88e:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     892:	b3 01       	movw	r22, r6
     894:	8c e4       	ldi	r24, 0x4C	; 76
     896:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
				Left_trigged = 0;
				Forward_trigged = 0;
     89a:	a1 2c       	mov	r10, r1
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 'l';
				node_number = node_number + 1;
				turn('L',speed);
				Left_trigged = 0;
     89c:	91 2c       	mov	r9, r1
     89e:	12 cf       	rjmp	.-476    	; 0x6c4 <maze_solve+0x22>
				Forward_trigged = 0;
			}
		}
		else if (sensor_data_hold == 0b00000) //-100
     8a0:	81 11       	cpse	r24, r1
     8a2:	10 cf       	rjmp	.-480    	; 0x6c4 <maze_solve+0x22>
		{	
			directions_solved[node_number] = 'u';
     8a4:	80 91 bd 01 	lds	r24, 0x01BD
     8a8:	90 91 be 01 	lds	r25, 0x01BE
     8ac:	fc 01       	movw	r30, r24
     8ae:	e1 54       	subi	r30, 0x41	; 65
     8b0:	fe 4f       	sbci	r31, 0xFE	; 254
     8b2:	e0 82       	st	Z, r14
			node_number = node_number + 1;
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	90 93 be 01 	sts	0x01BE, r25
     8ba:	80 93 bd 01 	sts	0x01BD, r24
			turn('U',speed);
     8be:	b3 01       	movw	r22, r6
     8c0:	85 e5       	ldi	r24, 0x55	; 85
     8c2:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
     8c6:	fe ce       	rjmp	.-516    	; 0x6c4 <maze_solve+0x22>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
			destination = 0;
			while (sensor_data_hold & 0b10001)
			{
				sensor_data_hold = sensor_data_verified();
     8c8:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     8cc:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b00001) && (Right_trigged == 0))
				{
					Right_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
     8ce:	8f 31       	cpi	r24, 0x1F	; 31
     8d0:	c1 f0       	breq	.+48     	; 0x902 <__stack+0x3>
		
		if(sensor_data_hold & 0b10000)  //left trigging 
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
			destination = 0;
			while (sensor_data_hold & 0b10001)
     8d2:	21 71       	andi	r18, 0x11	; 17
     8d4:	c9 f7       	brne	.-14     	; 0x8c8 <maze_solve+0x226>
						set_motors(0,0);
						while(1);
					}
				}
			}
			evaluate_direction(speed);
     8d6:	c3 01       	movw	r24, r6
     8d8:	0e 94 1e 03 	call	0x63c	; 0x63c <evaluate_direction>

node_number = 0x00;

	while(1)
	{
		follow_segment(speed);
     8dc:	c3 01       	movw	r24, r6
     8de:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>
		
		sensor_data_hold = sensor_data_verified();
     8e2:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     8e6:	28 2f       	mov	r18, r24
		
		if(sensor_data_hold & 0b10000)  //left trigging 
     8e8:	84 ff       	sbrs	r24, 4
     8ea:	18 c0       	rjmp	.+48     	; 0x91c <__stack+0x1d>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     8ec:	64 e6       	ldi	r22, 0x64	; 100
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	84 e6       	ldi	r24, 0x64	; 100
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	29 83       	std	Y+1, r18	; 0x01
     8f6:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
			destination = 0;
     8fa:	00 e0       	ldi	r16, 0x00	; 0
     8fc:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     8fe:	29 81       	ldd	r18, Y+1	; 0x01
     900:	e8 cf       	rjmp	.-48     	; 0x8d2 <maze_solve+0x230>
				{
					Right_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
				{
					destination = destination + 1;
     902:	0f 5f       	subi	r16, 0xFF	; 255
     904:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 5000)   // destination triggering
     906:	09 38       	cpi	r16, 0x89	; 137
     908:	83 e1       	ldi	r24, 0x13	; 19
     90a:	18 07       	cpc	r17, r24
     90c:	10 f3       	brcs	.-60     	; 0x8d2 <maze_solve+0x230>
					{
						set_motors(0,0);
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
     91a:	ff cf       	rjmp	.-2      	; 0x91a <__stack+0x1b>
					}
				}
			}
			evaluate_direction(speed);
		}
		else if (sensor_data_hold & 0b00001) //right trigging
     91c:	80 ff       	sbrs	r24, 0
     91e:	1e c0       	rjmp	.+60     	; 0x95c <__stack+0x5d>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     920:	64 e6       	ldi	r22, 0x64	; 100
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	84 e6       	ldi	r24, 0x64	; 100
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	29 83       	std	Y+1, r18	; 0x01
     92a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
			destination = 0;
     92e:	00 e0       	ldi	r16, 0x00	; 0
     930:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     932:	29 81       	ldd	r18, Y+1	; 0x01
     934:	21 71       	andi	r18, 0x11	; 17
     936:	79 f2       	breq	.-98     	; 0x8d6 <maze_solve+0x234>
			{
				sensor_data_hold = sensor_data_verified();
     938:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     93c:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b10000) && (Left_trigged == 0))
				{
					Left_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
     93e:	8f 31       	cpi	r24, 0x1F	; 31
     940:	c9 f7       	brne	.-14     	; 0x934 <__stack+0x35>
				{
					destination = destination + 1;
     942:	0f 5f       	subi	r16, 0xFF	; 255
     944:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 5000)   // destination triggering
     946:	09 38       	cpi	r16, 0x89	; 137
     948:	e3 e1       	ldi	r30, 0x13	; 19
     94a:	1e 07       	cpc	r17, r30
     94c:	98 f3       	brcs	.-26     	; 0x934 <__stack+0x35>
					{
						set_motors(0,0);
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
     95a:	ff cf       	rjmp	.-2      	; 0x95a <__stack+0x5b>
					}
				}
			}
			evaluate_direction(speed);
		}
		else if (sensor_data_hold == 0b00000) //-100
     95c:	81 11       	cpse	r24, r1
     95e:	be cf       	rjmp	.-132    	; 0x8dc <maze_solve+0x23a>
     960:	ba cf       	rjmp	.-140    	; 0x8d6 <maze_solve+0x234>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     962:	bb 20       	and	r11, r11
     964:	09 f4       	brne	.+2      	; 0x968 <__stack+0x69>
     966:	11 cf       	rjmp	.-478    	; 0x78a <maze_solve+0xe8>
     968:	04 c0       	rjmp	.+8      	; 0x972 <__stack+0x73>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     96a:	99 20       	and	r9, r9
     96c:	09 f4       	brne	.+2      	; 0x970 <__stack+0x71>
     96e:	5a cf       	rjmp	.-332    	; 0x824 <maze_solve+0x182>
     970:	05 c0       	rjmp	.+10     	; 0x97c <__stack+0x7d>
				node_number = node_number + 1;
				turn('L',speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     972:	f1 e0       	ldi	r31, 0x01	; 1
     974:	bf 16       	cp	r11, r31
     976:	09 f4       	brne	.+2      	; 0x97a <__stack+0x7b>
     978:	08 cf       	rjmp	.-496    	; 0x78a <maze_solve+0xe8>
     97a:	04 c0       	rjmp	.+8      	; 0x984 <__stack+0x85>
				node_number = node_number + 1;
				turn('S',speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	98 16       	cp	r9, r24
     980:	09 f4       	brne	.+2      	; 0x984 <__stack+0x85>
     982:	7a cf       	rjmp	.-268    	; 0x878 <maze_solve+0x1d6>
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
			if (sensor_data_hold & 0b00100)
			{
				Forward_trigged = 1;
     984:	aa 24       	eor	r10, r10
     986:	a3 94       	inc	r10
     988:	9d ce       	rjmp	.-710    	; 0x6c4 <maze_solve+0x22>

0000098a <turn>:

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
	
	if (dir == 'L')
     98a:	8c 34       	cpi	r24, 0x4C	; 76
     98c:	09 f0       	breq	.+2      	; 0x990 <turn+0x6>
     98e:	41 c0       	rjmp	.+130    	; 0xa12 <turn+0x88>
	{
		delay_ms(17); //25
     990:	81 e1       	ldi	r24, 0x11	; 17
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		set_motors(0,0);
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(10);
     9a4:	8a e0       	ldi	r24, 0x0A	; 10
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		set_motors(-200,-200);
     9ac:	68 e3       	ldi	r22, 0x38	; 56
     9ae:	7f ef       	ldi	r23, 0xFF	; 255
     9b0:	88 e3       	ldi	r24, 0x38	; 56
     9b2:	9f ef       	ldi	r25, 0xFF	; 255
     9b4:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(10);
     9b8:	8a e0       	ldi	r24, 0x0A	; 10
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		set_motors(0,0);
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(50);
     9cc:	82 e3       	ldi	r24, 0x32	; 50
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		
		set_motors(-60,60);
     9d4:	6c e3       	ldi	r22, 0x3C	; 60
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	84 ec       	ldi	r24, 0xC4	; 196
     9da:	9f ef       	ldi	r25, 0xFF	; 255
     9dc:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     9e0:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(50);
		
		set_motors(-60,60);
		
		while(!(sensor_data_save & 0b10000))
     9e2:	84 fd       	sbrc	r24, 4
     9e4:	03 c0       	rjmp	.+6      	; 0x9ec <turn+0x62>
		{
			sensor_data_save = sensor_data_verified();
     9e6:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     9ea:	fb cf       	rjmp	.-10     	; 0x9e2 <turn+0x58>
		}
		while(sensor_data_save & 0b10000)
     9ec:	84 ff       	sbrs	r24, 4
     9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <turn+0x6c>
		{
			sensor_data_save = sensor_data_verified();
     9f0:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     9f4:	fb cf       	rjmp	.-10     	; 0x9ec <turn+0x62>
		}
		while(!(sensor_data_save & 0b00010))
     9f6:	81 fd       	sbrc	r24, 1
     9f8:	03 c0       	rjmp	.+6      	; 0xa00 <turn+0x76>
		{
			sensor_data_save = sensor_data_verified();
     9fa:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     9fe:	fb cf       	rjmp	.-10     	; 0x9f6 <turn+0x6c>
		}
		
		set_motors(0,0);
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(10); //30
     a0c:	8a e0       	ldi	r24, 0x0A	; 10
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	e1 c0       	rjmp	.+450    	; 0xbd4 <turn+0x24a>
		delay_ms(50);
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);
	}
	else if (dir == 'R')
     a12:	82 35       	cpi	r24, 0x52	; 82
     a14:	09 f0       	breq	.+2      	; 0xa18 <turn+0x8e>
     a16:	47 c0       	rjmp	.+142    	; 0xaa6 <turn+0x11c>
	{
		delay_ms(17);  //25
     a18:	81 e1       	ldi	r24, 0x11	; 17
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		set_motors(0,0);
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(10);
     a2c:	8a e0       	ldi	r24, 0x0A	; 10
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		set_motors(-200,-200);
     a34:	68 e3       	ldi	r22, 0x38	; 56
     a36:	7f ef       	ldi	r23, 0xFF	; 255
     a38:	88 e3       	ldi	r24, 0x38	; 56
     a3a:	9f ef       	ldi	r25, 0xFF	; 255
     a3c:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(10);
     a40:	8a e0       	ldi	r24, 0x0A	; 10
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		set_motors(0,0);
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(50);
     a54:	82 e3       	ldi	r24, 0x32	; 50
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		
		set_motors(60,-60);
     a5c:	64 ec       	ldi	r22, 0xC4	; 196
     a5e:	7f ef       	ldi	r23, 0xFF	; 255
     a60:	8c e3       	ldi	r24, 0x3C	; 60
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     a68:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(50);
		
		set_motors(60,-60);
		
		while(!(sensor_data_save & 0b00001))
     a6a:	80 fd       	sbrc	r24, 0
     a6c:	03 c0       	rjmp	.+6      	; 0xa74 <turn+0xea>
		{
			sensor_data_save = sensor_data_verified();
     a6e:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     a72:	fb cf       	rjmp	.-10     	; 0xa6a <turn+0xe0>
		}
		while(sensor_data_save & 0b00001)
     a74:	80 ff       	sbrs	r24, 0
     a76:	03 c0       	rjmp	.+6      	; 0xa7e <turn+0xf4>
		{
			sensor_data_save = sensor_data_verified();
     a78:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     a7c:	fb cf       	rjmp	.-10     	; 0xa74 <turn+0xea>
		}
		while(!(sensor_data_save & 0b01000))
     a7e:	83 fd       	sbrc	r24, 3
     a80:	03 c0       	rjmp	.+6      	; 0xa88 <turn+0xfe>
		{
			sensor_data_save = sensor_data_verified();
     a82:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     a86:	fb cf       	rjmp	.-10     	; 0xa7e <turn+0xf4>
		}
		//delay_ms(7); // external 
		set_motors(0,0);
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(10);//30
     a94:	8a e0       	ldi	r24, 0x0A	; 10
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		set_motors(-100,100);
     a9c:	64 e6       	ldi	r22, 0x64	; 100
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	8c e9       	ldi	r24, 0x9C	; 156
     aa2:	9f ef       	ldi	r25, 0xFF	; 255
     aa4:	9d c0       	rjmp	.+314    	; 0xbe0 <turn+0x256>
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);

	}
	else if (dir == 'S')
     aa6:	83 35       	cpi	r24, 0x53	; 83
     aa8:	09 f4       	brne	.+2      	; 0xaac <turn+0x122>
     aaa:	aa c0       	rjmp	.+340    	; 0xc00 <turn+0x276>
		//delay_ms(10);
		//set_motors(0,0);
		//delay_ms(50);
		////follow_segment(speed);
	}
	else if (dir == 'U')
     aac:	85 35       	cpi	r24, 0x55	; 85
     aae:	c1 f5       	brne	.+112    	; 0xb20 <turn+0x196>
	{
		delay_ms(25);
     ab0:	89 e1       	ldi	r24, 0x19	; 25
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		set_motors(0,0);
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(10);
     ac4:	8a e0       	ldi	r24, 0x0A	; 10
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		set_motors(-200,-200);
     acc:	68 e3       	ldi	r22, 0x38	; 56
     ace:	7f ef       	ldi	r23, 0xFF	; 255
     ad0:	88 e3       	ldi	r24, 0x38	; 56
     ad2:	9f ef       	ldi	r25, 0xFF	; 255
     ad4:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(10);
     ad8:	8a e0       	ldi	r24, 0x0A	; 10
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		set_motors(0,0);
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(50);
     aec:	82 e3       	ldi	r24, 0x32	; 50
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		
		set_motors(-60,60);
     af4:	6c e3       	ldi	r22, 0x3C	; 60
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	84 ec       	ldi	r24, 0xC4	; 196
     afa:	9f ef       	ldi	r25, 0xFF	; 255
     afc:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     b00:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(50);
		
		set_motors(-60,60);
		
		while(!(sensor_data_save & 0b10000))
     b02:	84 fd       	sbrc	r24, 4
     b04:	03 c0       	rjmp	.+6      	; 0xb0c <turn+0x182>
		{
			sensor_data_save = sensor_data_verified();
     b06:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b0a:	fb cf       	rjmp	.-10     	; 0xb02 <turn+0x178>
		}
		while(sensor_data_save & 0b10000)
     b0c:	84 ff       	sbrs	r24, 4
     b0e:	03 c0       	rjmp	.+6      	; 0xb16 <turn+0x18c>
		{
			sensor_data_save = sensor_data_verified();
     b10:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b14:	fb cf       	rjmp	.-10     	; 0xb0c <turn+0x182>
		}
		while(!(sensor_data_save & 0b00010))
     b16:	81 fd       	sbrc	r24, 1
     b18:	55 c0       	rjmp	.+170    	; 0xbc4 <turn+0x23a>
		{
			sensor_data_save = sensor_data_verified();
     b1a:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b1e:	fb cf       	rjmp	.-10     	; 0xb16 <turn+0x18c>
		delay_ms(50);
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);
	}
	else if (dir == 'D')
     b20:	84 34       	cpi	r24, 0x44	; 68
     b22:	09 f0       	breq	.+2      	; 0xb26 <turn+0x19c>
     b24:	6d c0       	rjmp	.+218    	; 0xc00 <turn+0x276>
	{
		uint16_t sensor_data_hold;
		set_motors(0,0);
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(50);
     b32:	82 e3       	ldi	r24, 0x32	; 50
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		//set_motors(-100,-100);
		//delay_ms(50);
		//set_motors(0,0);
		//process_array();
		delay_ms(500);
     b3a:	84 ef       	ldi	r24, 0xF4	; 244
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		set_motors(-50,-50);
     b42:	6e ec       	ldi	r22, 0xCE	; 206
     b44:	7f ef       	ldi	r23, 0xFF	; 255
     b46:	8e ec       	ldi	r24, 0xCE	; 206
     b48:	9f ef       	ldi	r25, 0xFF	; 255
     b4a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		sensor_data_hold = sensor_data_verified();
		while((sensor_data_hold & 0b10001) == 0b10001)
		{
			sensor_data_hold = sensor_data_verified();
     b4e:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b52:	90 e0       	ldi	r25, 0x00	; 0
		//set_motors(0,0);
		//process_array();
		delay_ms(500);
		set_motors(-50,-50);
		sensor_data_hold = sensor_data_verified();
		while((sensor_data_hold & 0b10001) == 0b10001)
     b54:	81 71       	andi	r24, 0x11	; 17
     b56:	99 27       	eor	r25, r25
     b58:	41 97       	sbiw	r24, 0x11	; 17
     b5a:	c9 f3       	breq	.-14     	; 0xb4e <turn+0x1c4>
		{
			sensor_data_hold = sensor_data_verified();
		}
		set_motors(0,0);
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(50);
     b68:	82 e3       	ldi	r24, 0x32	; 50
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		set_motors(50,50);
     b70:	62 e3       	ldi	r22, 0x32	; 50
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	82 e3       	ldi	r24, 0x32	; 50
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(150);
     b7c:	86 e9       	ldi	r24, 0x96	; 150
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		//set_motors(-100,-100);
		//delay_ms(50);
		set_motors(0,0);
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(50);
     b90:	82 e3       	ldi	r24, 0x32	; 50
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		set_motors(-60,60);
     b98:	6c e3       	ldi	r22, 0x3C	; 60
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	84 ec       	ldi	r24, 0xC4	; 196
     b9e:	9f ef       	ldi	r25, 0xFF	; 255
     ba0:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(50);
     ba4:	82 e3       	ldi	r24, 0x32	; 50
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		while((sensor_data_verified() & 0b10000) != 0x00);
     bac:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     bb0:	84 fd       	sbrc	r24, 4
     bb2:	fc cf       	rjmp	.-8      	; 0xbac <turn+0x222>
		while((sensor_data_verified() & 0b10000) != 0b10000);
     bb4:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     bb8:	84 ff       	sbrs	r24, 4
     bba:	fc cf       	rjmp	.-8      	; 0xbb4 <turn+0x22a>
		while((sensor_data_verified() & 0b00010) != 0b00010);
     bbc:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     bc0:	81 ff       	sbrs	r24, 1
     bc2:	fc cf       	rjmp	.-8      	; 0xbbc <turn+0x232>
		while(!(sensor_data_save & 0b00010))
		{
			sensor_data_save = sensor_data_verified();
		}
		
		set_motors(0,0);
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(20);//30
     bd0:	84 e1       	ldi	r24, 0x14	; 20
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		set_motors(100,-100);
     bd8:	6c e9       	ldi	r22, 0x9C	; 156
     bda:	7f ef       	ldi	r23, 0xFF	; 255
     bdc:	84 e6       	ldi	r24, 0x64	; 100
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(10);
     be4:	8a e0       	ldi	r24, 0x0A	; 10
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
		set_motors(0,0);
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_motors>
		delay_ms(50);
     bf8:	82 e3       	ldi	r24, 0x32	; 50
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <delay_ms>
     c00:	08 95       	ret

00000c02 <_ZN15OrangutanAnalog7setModeEh>:
     c02:	88 23       	and	r24, r24
     c04:	21 f4       	brne	.+8      	; 0xc0e <_ZN15OrangutanAnalog7setModeEh+0xc>
     c06:	80 91 7c 00 	lds	r24, 0x007C
     c0a:	8f 7d       	andi	r24, 0xDF	; 223
     c0c:	03 c0       	rjmp	.+6      	; 0xc14 <_ZN15OrangutanAnalog7setModeEh+0x12>
     c0e:	80 91 7c 00 	lds	r24, 0x007C
     c12:	80 62       	ori	r24, 0x20	; 32
     c14:	80 93 7c 00 	sts	0x007C, r24
     c18:	08 95       	ret

00000c1a <_ZN15OrangutanAnalog7getModeEv>:
     c1a:	80 91 7c 00 	lds	r24, 0x007C
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	25 e0       	ldi	r18, 0x05	; 5
     c22:	95 95       	asr	r25
     c24:	87 95       	ror	r24
     c26:	2a 95       	dec	r18
     c28:	e1 f7       	brne	.-8      	; 0xc22 <_ZN15OrangutanAnalog7getModeEv+0x8>
     c2a:	81 70       	andi	r24, 0x01	; 1
     c2c:	08 95       	ret

00000c2e <_ZN15OrangutanAnalog12isConvertingEv>:
     c2e:	80 91 7a 00 	lds	r24, 0x007A
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	36 e0       	ldi	r19, 0x06	; 6
     c36:	95 95       	asr	r25
     c38:	87 95       	ror	r24
     c3a:	3a 95       	dec	r19
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <_ZN15OrangutanAnalog12isConvertingEv+0x8>
     c3e:	81 70       	andi	r24, 0x01	; 1
     c40:	08 95       	ret

00000c42 <_ZN15OrangutanAnalog16conversionResultEv>:
     c42:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN15OrangutanAnalog7getModeEv>
     c46:	88 23       	and	r24, r24
     c48:	21 f0       	breq	.+8      	; 0xc52 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     c4a:	20 91 79 00 	lds	r18, 0x0079
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	04 c0       	rjmp	.+8      	; 0xc5a <_ZN15OrangutanAnalog16conversionResultEv+0x18>
     c52:	20 91 78 00 	lds	r18, 0x0078
     c56:	30 91 79 00 	lds	r19, 0x0079
     c5a:	c9 01       	movw	r24, r18
     c5c:	08 95       	ret

00000c5e <_ZN15OrangutanAnalog15startConversionEhh>:
     c5e:	80 32       	cpi	r24, 0x20	; 32
     c60:	b0 f4       	brcc	.+44     	; 0xc8e <_ZN15OrangutanAnalog15startConversionEhh+0x30>
     c62:	97 e8       	ldi	r25, 0x87	; 135
     c64:	90 93 7a 00 	sts	0x007A, r25
     c68:	90 91 7c 00 	lds	r25, 0x007C
     c6c:	29 2f       	mov	r18, r25
     c6e:	20 64       	ori	r18, 0x40	; 64
     c70:	66 23       	and	r22, r22
     c72:	11 f0       	breq	.+4      	; 0xc78 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     c74:	90 6c       	ori	r25, 0xC0	; 192
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <_ZN15OrangutanAnalog15startConversionEhh+0x1e>
     c78:	92 2f       	mov	r25, r18
     c7a:	9f 77       	andi	r25, 0x7F	; 127
     c7c:	90 7e       	andi	r25, 0xE0	; 224
     c7e:	98 2b       	or	r25, r24
     c80:	90 93 7c 00 	sts	0x007C, r25
     c84:	80 91 7a 00 	lds	r24, 0x007A
     c88:	80 64       	ori	r24, 0x40	; 64
     c8a:	80 93 7a 00 	sts	0x007A, r24
     c8e:	08 95       	ret

00000c90 <_ZN15OrangutanAnalog11readAverageEhj>:
     c90:	a0 e0       	ldi	r26, 0x00	; 0
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	ee e4       	ldi	r30, 0x4E	; 78
     c96:	f6 e0       	ldi	r31, 0x06	; 6
     c98:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x14>
     c9c:	6b 01       	movw	r12, r22
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN15OrangutanAnalog15startConversionEhh>
     ca4:	0e 94 17 06 	call	0xc2e	; 0xc2e <_ZN15OrangutanAnalog12isConvertingEv>
     ca8:	88 23       	and	r24, r24
     caa:	e1 f7       	brne	.-8      	; 0xca4 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     cac:	e6 01       	movw	r28, r12
     cae:	ee 24       	eor	r14, r14
     cb0:	ff 24       	eor	r15, r15
     cb2:	87 01       	movw	r16, r14
     cb4:	80 91 7a 00 	lds	r24, 0x007A
     cb8:	80 64       	ori	r24, 0x40	; 64
     cba:	80 93 7a 00 	sts	0x007A, r24
     cbe:	0e 94 17 06 	call	0xc2e	; 0xc2e <_ZN15OrangutanAnalog12isConvertingEv>
     cc2:	88 23       	and	r24, r24
     cc4:	e1 f7       	brne	.-8      	; 0xcbe <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     cc6:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN15OrangutanAnalog16conversionResultEv>
     cca:	a0 e0       	ldi	r26, 0x00	; 0
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e8 0e       	add	r14, r24
     cd0:	f9 1e       	adc	r15, r25
     cd2:	0a 1f       	adc	r16, r26
     cd4:	1b 1f       	adc	r17, r27
     cd6:	21 97       	sbiw	r28, 0x01	; 1
     cd8:	69 f7       	brne	.-38     	; 0xcb4 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     cda:	c6 01       	movw	r24, r12
     cdc:	96 95       	lsr	r25
     cde:	87 95       	ror	r24
     ce0:	20 e4       	ldi	r18, 0x40	; 64
     ce2:	c2 16       	cp	r12, r18
     ce4:	d1 04       	cpc	r13, r1
     ce6:	40 f4       	brcc	.+16     	; 0xcf8 <_ZN15OrangutanAnalog11readAverageEhj+0x68>
     ce8:	8e 0d       	add	r24, r14
     cea:	9f 1d       	adc	r25, r15
     cec:	6c 2d       	mov	r22, r12
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	0e 94 88 13 	call	0x2710	; 0x2710 <__udivmodhi4>
     cf4:	cb 01       	movw	r24, r22
     cf6:	0d c0       	rjmp	.+26     	; 0xd12 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     cf8:	bc 01       	movw	r22, r24
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	6e 0d       	add	r22, r14
     d00:	7f 1d       	adc	r23, r15
     d02:	80 1f       	adc	r24, r16
     d04:	91 1f       	adc	r25, r17
     d06:	96 01       	movw	r18, r12
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	0e 94 b0 13 	call	0x2760	; 0x2760 <__udivmodsi4>
     d10:	c9 01       	movw	r24, r18
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	e8 e0       	ldi	r30, 0x08	; 8
     d18:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x14>

00000d1c <_ZN15OrangutanAnalog12toMillivoltsEj>:
     d1c:	a3 e0       	ldi	r26, 0x03	; 3
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e4 e9       	ldi	r30, 0x94	; 148
     d22:	f6 e0       	ldi	r31, 0x06	; 6
     d24:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__prologue_saves__+0x1e>
     d28:	bc 01       	movw	r22, r24
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	20 91 00 01 	lds	r18, 0x0100
     d32:	30 91 01 01 	lds	r19, 0x0101
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__mulsi3>
     d3e:	18 2f       	mov	r17, r24
     d40:	69 83       	std	Y+1, r22	; 0x01
     d42:	7a 83       	std	Y+2, r23	; 0x02
     d44:	9b 83       	std	Y+3, r25	; 0x03
     d46:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN15OrangutanAnalog7getModeEv>
     d4a:	69 81       	ldd	r22, Y+1	; 0x01
     d4c:	7a 81       	ldd	r23, Y+2	; 0x02
     d4e:	9b 81       	ldd	r25, Y+3	; 0x03
     d50:	88 23       	and	r24, r24
     d52:	71 f0       	breq	.+28     	; 0xd70 <_ZN15OrangutanAnalog12toMillivoltsEj+0x54>
     d54:	9b 01       	movw	r18, r22
     d56:	41 2f       	mov	r20, r17
     d58:	59 2f       	mov	r21, r25
     d5a:	ca 01       	movw	r24, r20
     d5c:	b9 01       	movw	r22, r18
     d5e:	61 58       	subi	r22, 0x81	; 129
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	8f 4f       	sbci	r24, 0xFF	; 255
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	2f ef       	ldi	r18, 0xFF	; 255
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	0d c0       	rjmp	.+26     	; 0xd8a <_ZN15OrangutanAnalog12toMillivoltsEj+0x6e>
     d70:	9b 01       	movw	r18, r22
     d72:	41 2f       	mov	r20, r17
     d74:	59 2f       	mov	r21, r25
     d76:	ca 01       	movw	r24, r20
     d78:	b9 01       	movw	r22, r18
     d7a:	61 50       	subi	r22, 0x01	; 1
     d7c:	7e 4f       	sbci	r23, 0xFE	; 254
     d7e:	8f 4f       	sbci	r24, 0xFF	; 255
     d80:	9f 4f       	sbci	r25, 0xFF	; 255
     d82:	2f ef       	ldi	r18, 0xFF	; 255
     d84:	33 e0       	ldi	r19, 0x03	; 3
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	0e 94 b0 13 	call	0x2760	; 0x2760 <__udivmodsi4>
     d8e:	c9 01       	movw	r24, r18
     d90:	23 96       	adiw	r28, 0x03	; 3
     d92:	e3 e0       	ldi	r30, 0x03	; 3
     d94:	0c 94 27 14 	jmp	0x284e	; 0x284e <__epilogue_restores__+0x1e>

00000d98 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     d98:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN15OrangutanAnalog11readAverageEhj>
     d9c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <_ZN15OrangutanAnalog12toMillivoltsEj>
     da0:	08 95       	ret

00000da2 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN15OrangutanAnalog7getModeEv>
     dac:	18 2f       	mov	r17, r24
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN15OrangutanAnalog7setModeEh>
     db4:	86 e0       	ldi	r24, 0x06	; 6
     db6:	6a e0       	ldi	r22, 0x0A	; 10
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     dbe:	ec 01       	movw	r28, r24
     dc0:	81 2f       	mov	r24, r17
     dc2:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN15OrangutanAnalog7setModeEh>
     dc6:	9e 01       	movw	r18, r28
     dc8:	22 0f       	add	r18, r18
     dca:	33 1f       	adc	r19, r19
     dcc:	2c 0f       	add	r18, r28
     dce:	3d 1f       	adc	r19, r29
     dd0:	2f 5f       	subi	r18, 0xFF	; 255
     dd2:	3f 4f       	sbci	r19, 0xFF	; 255
     dd4:	36 95       	lsr	r19
     dd6:	27 95       	ror	r18
     dd8:	c9 01       	movw	r24, r18
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	08 95       	ret

00000de2 <read_battery_millivolts_3pi>:
     de2:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     de6:	08 95       	ret

00000de8 <_ZL16currentCharacterv>:
     de8:	90 91 4f 01 	lds	r25, 0x014F
     dec:	e0 91 4b 01 	lds	r30, 0x014B
     df0:	f0 91 4c 01 	lds	r31, 0x014C
     df4:	99 23       	and	r25, r25
     df6:	11 f0       	breq	.+4      	; 0xdfc <_ZL16currentCharacterv+0x14>
     df8:	84 91       	lpm	r24, Z
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <_ZL16currentCharacterv+0x16>
     dfc:	80 81       	ld	r24, Z
     dfe:	28 2f       	mov	r18, r24
     e00:	21 54       	subi	r18, 0x41	; 65
     e02:	2a 31       	cpi	r18, 0x1A	; 26
     e04:	10 f4       	brcc	.+4      	; 0xe0a <_ZL16currentCharacterv+0x22>
     e06:	80 5e       	subi	r24, 0xE0	; 224
     e08:	08 95       	ret
     e0a:	80 32       	cpi	r24, 0x20	; 32
     e0c:	71 f4       	brne	.+28     	; 0xe2a <_ZL16currentCharacterv+0x42>
     e0e:	20 91 4b 01 	lds	r18, 0x014B
     e12:	30 91 4c 01 	lds	r19, 0x014C
     e16:	a9 01       	movw	r20, r18
     e18:	4f 5f       	subi	r20, 0xFF	; 255
     e1a:	5f 4f       	sbci	r21, 0xFF	; 255
     e1c:	50 93 4c 01 	sts	0x014C, r21
     e20:	40 93 4b 01 	sts	0x014B, r20
     e24:	21 15       	cp	r18, r1
     e26:	31 05       	cpc	r19, r1
     e28:	09 f7       	brne	.-62     	; 0xdec <_ZL16currentCharacterv+0x4>
     e2a:	08 95       	ret

00000e2c <_ZL9getNumberv>:
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZL16currentCharacterv>
     e38:	c0 e0       	ldi	r28, 0x00	; 0
     e3a:	d0 e0       	ldi	r29, 0x00	; 0
     e3c:	1b c0       	rjmp	.+54     	; 0xe74 <_ZL9getNumberv+0x48>
     e3e:	9e 01       	movw	r18, r28
     e40:	22 0f       	add	r18, r18
     e42:	33 1f       	adc	r19, r19
     e44:	93 e0       	ldi	r25, 0x03	; 3
     e46:	cc 0f       	add	r28, r28
     e48:	dd 1f       	adc	r29, r29
     e4a:	9a 95       	dec	r25
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <_ZL9getNumberv+0x1a>
     e4e:	c2 0f       	add	r28, r18
     e50:	d3 1f       	adc	r29, r19
     e52:	99 27       	eor	r25, r25
     e54:	87 fd       	sbrc	r24, 7
     e56:	90 95       	com	r25
     e58:	c8 0f       	add	r28, r24
     e5a:	d9 1f       	adc	r29, r25
     e5c:	e0 97       	sbiw	r28, 0x30	; 48
     e5e:	80 91 4b 01 	lds	r24, 0x014B
     e62:	90 91 4c 01 	lds	r25, 0x014C
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	90 93 4c 01 	sts	0x014C, r25
     e6c:	80 93 4b 01 	sts	0x014B, r24
     e70:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZL16currentCharacterv>
     e74:	98 2f       	mov	r25, r24
     e76:	90 53       	subi	r25, 0x30	; 48
     e78:	9a 30       	cpi	r25, 0x0A	; 10
     e7a:	08 f3       	brcs	.-62     	; 0xe3e <_ZL9getNumberv+0x12>
     e7c:	ce 01       	movw	r24, r28
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	08 95       	ret

00000e88 <_ZN15OrangutanBuzzer5init2Ev>:
     e88:	10 92 6f 00 	sts	0x006F, r1
     e8c:	83 e2       	ldi	r24, 0x23	; 35
     e8e:	80 93 80 00 	sts	0x0080, r24
     e92:	81 e1       	ldi	r24, 0x11	; 17
     e94:	80 93 81 00 	sts	0x0081, r24
     e98:	10 92 82 00 	sts	0x0082, r1
     e9c:	80 e1       	ldi	r24, 0x10	; 16
     e9e:	97 e2       	ldi	r25, 0x27	; 39
     ea0:	90 93 89 00 	sts	0x0089, r25
     ea4:	80 93 88 00 	sts	0x0088, r24
     ea8:	10 92 8b 00 	sts	0x008B, r1
     eac:	10 92 8a 00 	sts	0x008A, r1
     eb0:	22 9a       	sbi	0x04, 2	; 4
     eb2:	78 94       	sei
     eb4:	08 95       	ret

00000eb6 <_ZN15OrangutanBuzzer4initEv>:
     eb6:	80 91 4a 01 	lds	r24, 0x014A
     eba:	88 23       	and	r24, r24
     ebc:	29 f4       	brne	.+10     	; 0xec8 <_ZN15OrangutanBuzzer4initEv+0x12>
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	80 93 4a 01 	sts	0x014A, r24
     ec4:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN15OrangutanBuzzer5init2Ev>
     ec8:	08 95       	ret

00000eca <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     eca:	a0 e0       	ldi	r26, 0x00	; 0
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	eb e6       	ldi	r30, 0x6B	; 107
     ed0:	f7 e0       	ldi	r31, 0x07	; 7
     ed2:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__prologue_saves__+0xc>
     ed6:	8c 01       	movw	r16, r24
     ed8:	5b 01       	movw	r10, r22
     eda:	e4 2e       	mov	r14, r20
     edc:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN15OrangutanBuzzer4initEv>
     ee0:	10 92 02 01 	sts	0x0102, r1
     ee4:	17 ff       	sbrs	r17, 7
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x26>
     ee8:	1f 77       	andi	r17, 0x7F	; 127
     eea:	aa e0       	ldi	r26, 0x0A	; 10
     eec:	fa 2e       	mov	r15, r26
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
     ef0:	ff 24       	eor	r15, r15
     ef2:	f3 94       	inc	r15
     ef4:	c0 90 81 00 	lds	r12, 0x0081
     ef8:	dd 24       	eor	r13, r13
     efa:	28 ef       	ldi	r18, 0xF8	; 248
     efc:	c2 22       	and	r12, r18
     efe:	dd 24       	eor	r13, r13
     f00:	88 ec       	ldi	r24, 0xC8	; 200
     f02:	3f 2d       	mov	r19, r15
     f04:	38 9f       	mul	r19, r24
     f06:	c0 01       	movw	r24, r0
     f08:	11 24       	eor	r1, r1
     f0a:	80 17       	cp	r24, r16
     f0c:	91 07       	cpc	r25, r17
     f0e:	d8 f4       	brcc	.+54     	; 0xf46 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x7c>
     f10:	e8 01       	movw	r28, r16
     f12:	67 e2       	ldi	r22, 0x27	; 39
     f14:	01 31       	cpi	r16, 0x11	; 17
     f16:	16 07       	cpc	r17, r22
     f18:	10 f0       	brcs	.+4      	; 0xf1e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x54>
     f1a:	c0 e1       	ldi	r28, 0x10	; 16
     f1c:	d7 e2       	ldi	r29, 0x27	; 39
     f1e:	be 01       	movw	r22, r28
     f20:	76 95       	lsr	r23
     f22:	67 95       	ror	r22
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	60 58       	subi	r22, 0x80	; 128
     f2a:	79 46       	sbci	r23, 0x69	; 105
     f2c:	87 46       	sbci	r24, 0x67	; 103
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	9e 01       	movw	r18, r28
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	0e 94 b0 13 	call	0x2760	; 0x2760 <__udivmodsi4>
     f3a:	89 01       	movw	r16, r18
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	c8 2a       	or	r12, r24
     f42:	d9 2a       	or	r13, r25
     f44:	2c c0       	rjmp	.+88     	; 0xf9e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd4>
     f46:	98 e2       	ldi	r25, 0x28	; 40
     f48:	f9 9e       	mul	r15, r25
     f4a:	90 2d       	mov	r25, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	89 2e       	mov	r8, r25
     f52:	e4 01       	movw	r28, r8
     f54:	4e 01       	movw	r8, r28
     f56:	98 2e       	mov	r9, r24
     f58:	e4 01       	movw	r28, r8
     f5a:	80 16       	cp	r8, r16
     f5c:	91 06       	cpc	r9, r17
     f5e:	08 f4       	brcc	.+2      	; 0xf62 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x98>
     f60:	e8 01       	movw	r28, r16
     f62:	be 01       	movw	r22, r28
     f64:	76 95       	lsr	r23
     f66:	67 95       	ror	r22
     f68:	9e 01       	movw	r18, r28
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	8f 2d       	mov	r24, r15
     f70:	8a 30       	cpi	r24, 0x0A	; 10
     f72:	39 f4       	brne	.+14     	; 0xf82 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb8>
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	60 5e       	subi	r22, 0xE0	; 224
     f7a:	73 44       	sbci	r23, 0x43	; 67
     f7c:	81 44       	sbci	r24, 0x41	; 65
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	06 c0       	rjmp	.+12     	; 0xf8e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc4>
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	60 53       	subi	r22, 0x30	; 48
     f88:	7d 4e       	sbci	r23, 0xED	; 237
     f8a:	8c 4e       	sbci	r24, 0xEC	; 236
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	0e 94 b0 13 	call	0x2760	; 0x2760 <__udivmodsi4>
     f92:	89 01       	movw	r16, r18
     f94:	52 e0       	ldi	r21, 0x02	; 2
     f96:	85 2e       	mov	r8, r21
     f98:	91 2c       	mov	r9, r1
     f9a:	c8 28       	or	r12, r8
     f9c:	d9 28       	or	r13, r9
     f9e:	2f 2d       	mov	r18, r15
     fa0:	2a 30       	cpi	r18, 0x0A	; 10
     fa2:	39 f4       	brne	.+14     	; 0xfb2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe8>
     fa4:	ce 01       	movw	r24, r28
     fa6:	05 96       	adiw	r24, 0x05	; 5
     fa8:	6a e0       	ldi	r22, 0x0A	; 10
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	0e 94 88 13 	call	0x2710	; 0x2710 <__udivmodhi4>
     fb0:	eb 01       	movw	r28, r22
     fb2:	33 e0       	ldi	r19, 0x03	; 3
     fb4:	c8 3e       	cpi	r28, 0xE8	; 232
     fb6:	d3 07       	cpc	r29, r19
     fb8:	79 f0       	breq	.+30     	; 0xfd8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x10e>
     fba:	be 01       	movw	r22, r28
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	95 01       	movw	r18, r10
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__mulsi3>
     fca:	28 ee       	ldi	r18, 0xE8	; 232
     fcc:	33 e0       	ldi	r19, 0x03	; 3
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__divmodsi4>
     fd6:	01 c0       	rjmp	.+2      	; 0xfda <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
     fd8:	95 01       	movw	r18, r10
     fda:	10 92 6f 00 	sts	0x006F, r1
     fde:	c0 92 81 00 	sts	0x0081, r12
     fe2:	10 93 89 00 	sts	0x0089, r17
     fe6:	00 93 88 00 	sts	0x0088, r16
     fea:	40 91 88 00 	lds	r20, 0x0088
     fee:	50 91 89 00 	lds	r21, 0x0089
     ff2:	6e 2d       	mov	r22, r14
     ff4:	60 31       	cpi	r22, 0x10	; 16
     ff6:	08 f0       	brcs	.+2      	; 0xffa <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
     ff8:	6f e0       	ldi	r22, 0x0F	; 15
     ffa:	80 e1       	ldi	r24, 0x10	; 16
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	86 1b       	sub	r24, r22
    1000:	91 09       	sbc	r25, r1
    1002:	ba 01       	movw	r22, r20
    1004:	02 c0       	rjmp	.+4      	; 0x100a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1006:	76 95       	lsr	r23
    1008:	67 95       	ror	r22
    100a:	8a 95       	dec	r24
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    100e:	70 93 8b 00 	sts	0x008B, r23
    1012:	60 93 8a 00 	sts	0x008A, r22
    1016:	30 93 52 01 	sts	0x0152, r19
    101a:	20 93 51 01 	sts	0x0151, r18
    101e:	86 b3       	in	r24, 0x16	; 22
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	86 bb       	out	0x16, r24	; 22
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	80 93 6f 00 	sts	0x006F, r24
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	ec e0       	ldi	r30, 0x0C	; 12
    1030:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__epilogue_restores__+0xc>

00001034 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1034:	9b 01       	movw	r18, r22
    1036:	8f 3f       	cpi	r24, 0xFF	; 255
    1038:	11 f0       	breq	.+4      	; 0x103e <_ZN15OrangutanBuzzer8playNoteEhjh+0xa>
    103a:	44 23       	and	r20, r20
    103c:	29 f4       	brne	.+10     	; 0x1048 <_ZN15OrangutanBuzzer8playNoteEhjh+0x14>
    103e:	88 ee       	ldi	r24, 0xE8	; 232
    1040:	93 e0       	ldi	r25, 0x03	; 3
    1042:	b9 01       	movw	r22, r18
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	49 c0       	rjmp	.+146    	; 0x10da <_ZN15OrangutanBuzzer8playNoteEhjh+0xa6>
    1048:	81 31       	cpi	r24, 0x11	; 17
    104a:	30 f0       	brcs	.+12     	; 0x1058 <_ZN15OrangutanBuzzer8playNoteEhjh+0x24>
    104c:	58 2f       	mov	r21, r24
    104e:	50 51       	subi	r21, 0x10	; 16
    1050:	50 36       	cpi	r21, 0x60	; 96
    1052:	18 f0       	brcs	.+6      	; 0x105a <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    1054:	5f e5       	ldi	r21, 0x5F	; 95
    1056:	01 c0       	rjmp	.+2      	; 0x105a <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	85 2f       	mov	r24, r21
    105c:	6c e0       	ldi	r22, 0x0C	; 12
    105e:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__udivmodqi4>
    1062:	a8 2f       	mov	r26, r24
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e4 ef       	ldi	r30, 0xF4	; 244
    1068:	ff ef       	ldi	r31, 0xFF	; 255
    106a:	ae 9f       	mul	r26, r30
    106c:	b0 01       	movw	r22, r0
    106e:	af 9f       	mul	r26, r31
    1070:	70 0d       	add	r23, r0
    1072:	be 9f       	mul	r27, r30
    1074:	70 0d       	add	r23, r0
    1076:	11 24       	eor	r1, r1
    1078:	65 0f       	add	r22, r21
    107a:	71 1d       	adc	r23, r1
    107c:	6c 30       	cpi	r22, 0x0C	; 12
    107e:	71 05       	cpc	r23, r1
    1080:	40 f4       	brcc	.+16     	; 0x1092 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5e>
    1082:	fb 01       	movw	r30, r22
    1084:	ee 0f       	add	r30, r30
    1086:	ff 1f       	adc	r31, r31
    1088:	e4 5f       	subi	r30, 0xF4	; 244
    108a:	fe 4f       	sbci	r31, 0xFE	; 254
    108c:	60 81       	ld	r22, Z
    108e:	71 81       	ldd	r23, Z+1	; 0x01
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	87 30       	cpi	r24, 0x07	; 7
    1098:	81 f0       	breq	.+32     	; 0x10ba <_ZN15OrangutanBuzzer8playNoteEhjh+0x86>
    109a:	08 2e       	mov	r0, r24
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6e>
    109e:	66 0f       	add	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <_ZN15OrangutanBuzzer8playNoteEhjh+0x6a>
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	28 f0       	brcs	.+10     	; 0x10b4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x80>
    10aa:	cb 01       	movw	r24, r22
    10ac:	05 96       	adiw	r24, 0x05	; 5
    10ae:	6a e0       	ldi	r22, 0x0A	; 10
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	0c c0       	rjmp	.+24     	; 0x10cc <_ZN15OrangutanBuzzer8playNoteEhjh+0x98>
    10b4:	60 50       	subi	r22, 0x00	; 0
    10b6:	70 48       	sbci	r23, 0x80	; 128
    10b8:	0b c0       	rjmp	.+22     	; 0x10d0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    10ba:	cb 01       	movw	r24, r22
    10bc:	b6 e0       	ldi	r27, 0x06	; 6
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	ba 95       	dec	r27
    10c4:	e1 f7       	brne	.-8      	; 0x10be <_ZN15OrangutanBuzzer8playNoteEhjh+0x8a>
    10c6:	02 96       	adiw	r24, 0x02	; 2
    10c8:	65 e0       	ldi	r22, 0x05	; 5
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	0e 94 88 13 	call	0x2710	; 0x2710 <__udivmodhi4>
    10d0:	40 31       	cpi	r20, 0x10	; 16
    10d2:	08 f0       	brcs	.+2      	; 0x10d6 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa2>
    10d4:	4f e0       	ldi	r20, 0x0F	; 15
    10d6:	cb 01       	movw	r24, r22
    10d8:	b9 01       	movw	r22, r18
    10da:	0e 94 65 07 	call	0xeca	; 0xeca <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    10de:	08 95       	ret

000010e0 <_ZL8nextNotev>:
    10e0:	a0 e0       	ldi	r26, 0x00	; 0
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e6 e7       	ldi	r30, 0x76	; 118
    10e6:	f8 e0       	ldi	r31, 0x08	; 8
    10e8:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__prologue_saves__+0xa>
    10ec:	b0 90 03 01 	lds	r11, 0x0103
    10f0:	80 91 4d 01 	lds	r24, 0x014D
    10f4:	88 23       	and	r24, r24
    10f6:	61 f0       	breq	.+24     	; 0x1110 <_ZL8nextNotev+0x30>
    10f8:	60 91 4e 01 	lds	r22, 0x014E
    10fc:	66 23       	and	r22, r22
    10fe:	41 f0       	breq	.+16     	; 0x1110 <_ZL8nextNotev+0x30>
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN15OrangutanBuzzer8playNoteEhjh>
    110a:	10 92 4e 01 	sts	0x014E, r1
    110e:	34 c1       	rjmp	.+616    	; 0x1378 <_ZL8nextNotev+0x298>
    1110:	c0 ec       	ldi	r28, 0xC0	; 192
    1112:	dd e5       	ldi	r29, 0x5D	; 93
    1114:	aa 24       	eor	r10, r10
    1116:	a3 94       	inc	r10
    1118:	14 e0       	ldi	r17, 0x04	; 4
    111a:	71 2e       	mov	r7, r17
    111c:	00 ed       	ldi	r16, 0xD0	; 208
    111e:	17 e0       	ldi	r17, 0x07	; 7
    1120:	b4 e0       	ldi	r27, 0x04	; 4
    1122:	eb 2e       	mov	r14, r27
    1124:	f1 2c       	mov	r15, r1
    1126:	a4 ef       	ldi	r26, 0xF4	; 244
    1128:	ca 2e       	mov	r12, r26
    112a:	a1 e0       	ldi	r26, 0x01	; 1
    112c:	da 2e       	mov	r13, r26
    112e:	ff e0       	ldi	r31, 0x0F	; 15
    1130:	8f 2e       	mov	r8, r31
    1132:	91 2c       	mov	r9, r1
    1134:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZL16currentCharacterv>
    1138:	20 91 4b 01 	lds	r18, 0x014B
    113c:	30 91 4c 01 	lds	r19, 0x014C
    1140:	2f 5f       	subi	r18, 0xFF	; 255
    1142:	3f 4f       	sbci	r19, 0xFF	; 255
    1144:	30 93 4c 01 	sts	0x014C, r19
    1148:	20 93 4b 01 	sts	0x014B, r18
    114c:	86 36       	cpi	r24, 0x66	; 102
    114e:	f1 f1       	breq	.+124    	; 0x11cc <_ZL8nextNotev+0xec>
    1150:	87 36       	cpi	r24, 0x67	; 103
    1152:	cc f4       	brge	.+50     	; 0x1186 <_ZL8nextNotev+0xa6>
    1154:	82 36       	cpi	r24, 0x62	; 98
    1156:	09 f4       	brne	.+2      	; 0x115a <_ZL8nextNotev+0x7a>
    1158:	af c0       	rjmp	.+350    	; 0x12b8 <_ZL8nextNotev+0x1d8>
    115a:	83 36       	cpi	r24, 0x63	; 99
    115c:	7c f4       	brge	.+30     	; 0x117c <_ZL8nextNotev+0x9c>
    115e:	8e 33       	cpi	r24, 0x3E	; 62
    1160:	49 f1       	breq	.+82     	; 0x11b4 <_ZL8nextNotev+0xd4>
    1162:	8f 33       	cpi	r24, 0x3F	; 63
    1164:	3c f4       	brge	.+14     	; 0x1174 <_ZL8nextNotev+0x94>
    1166:	81 32       	cpi	r24, 0x21	; 33
    1168:	09 f4       	brne	.+2      	; 0x116c <_ZL8nextNotev+0x8c>
    116a:	87 c0       	rjmp	.+270    	; 0x127a <_ZL8nextNotev+0x19a>
    116c:	8c 33       	cpi	r24, 0x3C	; 60
    116e:	09 f0       	breq	.+2      	; 0x1172 <_ZL8nextNotev+0x92>
    1170:	9b c0       	rjmp	.+310    	; 0x12a8 <_ZL8nextNotev+0x1c8>
    1172:	22 c0       	rjmp	.+68     	; 0x11b8 <_ZL8nextNotev+0xd8>
    1174:	81 36       	cpi	r24, 0x61	; 97
    1176:	09 f0       	breq	.+2      	; 0x117a <_ZL8nextNotev+0x9a>
    1178:	97 c0       	rjmp	.+302    	; 0x12a8 <_ZL8nextNotev+0x1c8>
    117a:	9b c0       	rjmp	.+310    	; 0x12b2 <_ZL8nextNotev+0x1d2>
    117c:	84 36       	cpi	r24, 0x64	; 100
    117e:	01 f1       	breq	.+64     	; 0x11c0 <_ZL8nextNotev+0xe0>
    1180:	85 36       	cpi	r24, 0x65	; 101
    1182:	0c f5       	brge	.+66     	; 0x11c6 <_ZL8nextNotev+0xe6>
    1184:	1b c0       	rjmp	.+54     	; 0x11bc <_ZL8nextNotev+0xdc>
    1186:	8f 36       	cpi	r24, 0x6F	; 111
    1188:	09 f4       	brne	.+2      	; 0x118c <_ZL8nextNotev+0xac>
    118a:	47 c0       	rjmp	.+142    	; 0x121a <_ZL8nextNotev+0x13a>
    118c:	80 37       	cpi	r24, 0x70	; 112
    118e:	44 f4       	brge	.+16     	; 0x11a0 <_ZL8nextNotev+0xc0>
    1190:	8c 36       	cpi	r24, 0x6C	; 108
    1192:	11 f1       	breq	.+68     	; 0x11d8 <_ZL8nextNotev+0xf8>
    1194:	8d 36       	cpi	r24, 0x6D	; 109
    1196:	61 f1       	breq	.+88     	; 0x11f0 <_ZL8nextNotev+0x110>
    1198:	87 36       	cpi	r24, 0x67	; 103
    119a:	09 f0       	breq	.+2      	; 0x119e <_ZL8nextNotev+0xbe>
    119c:	85 c0       	rjmp	.+266    	; 0x12a8 <_ZL8nextNotev+0x1c8>
    119e:	19 c0       	rjmp	.+50     	; 0x11d2 <_ZL8nextNotev+0xf2>
    11a0:	84 37       	cpi	r24, 0x74	; 116
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <_ZL8nextNotev+0xc6>
    11a4:	44 c0       	rjmp	.+136    	; 0x122e <_ZL8nextNotev+0x14e>
    11a6:	86 37       	cpi	r24, 0x76	; 118
    11a8:	09 f4       	brne	.+2      	; 0x11ac <_ZL8nextNotev+0xcc>
    11aa:	60 c0       	rjmp	.+192    	; 0x126c <_ZL8nextNotev+0x18c>
    11ac:	82 37       	cpi	r24, 0x72	; 114
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <_ZL8nextNotev+0xd2>
    11b0:	7b c0       	rjmp	.+246    	; 0x12a8 <_ZL8nextNotev+0x1c8>
    11b2:	39 c0       	rjmp	.+114    	; 0x1226 <_ZL8nextNotev+0x146>
    11b4:	b3 94       	inc	r11
    11b6:	be cf       	rjmp	.-132    	; 0x1134 <_ZL8nextNotev+0x54>
    11b8:	ba 94       	dec	r11
    11ba:	bc cf       	rjmp	.-136    	; 0x1134 <_ZL8nextNotev+0x54>
    11bc:	ee 24       	eor	r14, r14
    11be:	35 c0       	rjmp	.+106    	; 0x122a <_ZL8nextNotev+0x14a>
    11c0:	ee 24       	eor	r14, r14
    11c2:	82 e0       	ldi	r24, 0x02	; 2
    11c4:	7b c0       	rjmp	.+246    	; 0x12bc <_ZL8nextNotev+0x1dc>
    11c6:	ee 24       	eor	r14, r14
    11c8:	84 e0       	ldi	r24, 0x04	; 4
    11ca:	78 c0       	rjmp	.+240    	; 0x12bc <_ZL8nextNotev+0x1dc>
    11cc:	ee 24       	eor	r14, r14
    11ce:	85 e0       	ldi	r24, 0x05	; 5
    11d0:	75 c0       	rjmp	.+234    	; 0x12bc <_ZL8nextNotev+0x1dc>
    11d2:	ee 24       	eor	r14, r14
    11d4:	87 e0       	ldi	r24, 0x07	; 7
    11d6:	72 c0       	rjmp	.+228    	; 0x12bc <_ZL8nextNotev+0x1dc>
    11d8:	0e 94 16 07 	call	0xe2c	; 0xe2c <_ZL9getNumberv>
    11dc:	bc 01       	movw	r22, r24
    11de:	90 93 05 01 	sts	0x0105, r25
    11e2:	80 93 04 01 	sts	0x0104, r24
    11e6:	80 91 06 01 	lds	r24, 0x0106
    11ea:	90 91 07 01 	lds	r25, 0x0107
    11ee:	37 c0       	rjmp	.+110    	; 0x125e <_ZL8nextNotev+0x17e>
    11f0:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZL16currentCharacterv>
    11f4:	8c 36       	cpi	r24, 0x6C	; 108
    11f6:	19 f4       	brne	.+6      	; 0x11fe <_ZL8nextNotev+0x11e>
    11f8:	10 92 4d 01 	sts	0x014D, r1
    11fc:	04 c0       	rjmp	.+8      	; 0x1206 <_ZL8nextNotev+0x126>
    11fe:	a0 92 4d 01 	sts	0x014D, r10
    1202:	10 92 4e 01 	sts	0x014E, r1
    1206:	80 91 4b 01 	lds	r24, 0x014B
    120a:	90 91 4c 01 	lds	r25, 0x014C
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	90 93 4c 01 	sts	0x014C, r25
    1214:	80 93 4b 01 	sts	0x014B, r24
    1218:	8d cf       	rjmp	.-230    	; 0x1134 <_ZL8nextNotev+0x54>
    121a:	0e 94 16 07 	call	0xe2c	; 0xe2c <_ZL9getNumberv>
    121e:	b8 2e       	mov	r11, r24
    1220:	80 93 03 01 	sts	0x0103, r24
    1224:	87 cf       	rjmp	.-242    	; 0x1134 <_ZL8nextNotev+0x54>
    1226:	ee 24       	eor	r14, r14
    1228:	e3 94       	inc	r14
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	47 c0       	rjmp	.+142    	; 0x12bc <_ZL8nextNotev+0x1dc>
    122e:	0e 94 16 07 	call	0xe2c	; 0xe2c <_ZL9getNumberv>
    1232:	bc 01       	movw	r22, r24
    1234:	ce 01       	movw	r24, r28
    1236:	0e 94 88 13 	call	0x2710	; 0x2710 <__udivmodhi4>
    123a:	cb 01       	movw	r24, r22
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	53 e0       	ldi	r21, 0x03	; 3
    1242:	66 0f       	add	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	5a 95       	dec	r21
    1248:	e1 f7       	brne	.-8      	; 0x1242 <_ZL8nextNotev+0x162>
    124a:	86 0f       	add	r24, r22
    124c:	97 1f       	adc	r25, r23
    124e:	90 93 07 01 	sts	0x0107, r25
    1252:	80 93 06 01 	sts	0x0106, r24
    1256:	60 91 04 01 	lds	r22, 0x0104
    125a:	70 91 05 01 	lds	r23, 0x0105
    125e:	0e 94 88 13 	call	0x2710	; 0x2710 <__udivmodhi4>
    1262:	70 93 09 01 	sts	0x0109, r23
    1266:	60 93 08 01 	sts	0x0108, r22
    126a:	64 cf       	rjmp	.-312    	; 0x1134 <_ZL8nextNotev+0x54>
    126c:	0e 94 16 07 	call	0xe2c	; 0xe2c <_ZL9getNumberv>
    1270:	90 93 0b 01 	sts	0x010B, r25
    1274:	80 93 0a 01 	sts	0x010A, r24
    1278:	5d cf       	rjmp	.-326    	; 0x1134 <_ZL8nextNotev+0x54>
    127a:	70 92 03 01 	sts	0x0103, r7
    127e:	10 93 07 01 	sts	0x0107, r17
    1282:	00 93 06 01 	sts	0x0106, r16
    1286:	f0 92 05 01 	sts	0x0105, r15
    128a:	e0 92 04 01 	sts	0x0104, r14
    128e:	d0 92 09 01 	sts	0x0109, r13
    1292:	c0 92 08 01 	sts	0x0108, r12
    1296:	90 92 0b 01 	sts	0x010B, r9
    129a:	80 92 0a 01 	sts	0x010A, r8
    129e:	10 92 4d 01 	sts	0x014D, r1
    12a2:	44 e0       	ldi	r20, 0x04	; 4
    12a4:	b4 2e       	mov	r11, r20
    12a6:	46 cf       	rjmp	.-372    	; 0x1134 <_ZL8nextNotev+0x54>
    12a8:	10 92 4c 01 	sts	0x014C, r1
    12ac:	10 92 4b 01 	sts	0x014B, r1
    12b0:	63 c0       	rjmp	.+198    	; 0x1378 <_ZL8nextNotev+0x298>
    12b2:	ee 24       	eor	r14, r14
    12b4:	89 e0       	ldi	r24, 0x09	; 9
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <_ZL8nextNotev+0x1dc>
    12b8:	ee 24       	eor	r14, r14
    12ba:	8b e0       	ldi	r24, 0x0B	; 11
    12bc:	9c e0       	ldi	r25, 0x0C	; 12
    12be:	b9 9e       	mul	r11, r25
    12c0:	b0 2c       	mov	r11, r0
    12c2:	11 24       	eor	r1, r1
    12c4:	b8 0e       	add	r11, r24
    12c6:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZL16currentCharacterv>
    12ca:	8b 32       	cpi	r24, 0x2B	; 43
    12cc:	11 f0       	breq	.+4      	; 0x12d2 <_ZL8nextNotev+0x1f2>
    12ce:	83 32       	cpi	r24, 0x23	; 35
    12d0:	b9 f4       	brne	.+46     	; 0x1300 <_ZL8nextNotev+0x220>
    12d2:	80 91 4b 01 	lds	r24, 0x014B
    12d6:	90 91 4c 01 	lds	r25, 0x014C
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	90 93 4c 01 	sts	0x014C, r25
    12e0:	80 93 4b 01 	sts	0x014B, r24
    12e4:	b3 94       	inc	r11
    12e6:	ef cf       	rjmp	.-34     	; 0x12c6 <_ZL8nextNotev+0x1e6>
    12e8:	80 91 4b 01 	lds	r24, 0x014B
    12ec:	90 91 4c 01 	lds	r25, 0x014C
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	90 93 4c 01 	sts	0x014C, r25
    12f6:	80 93 4b 01 	sts	0x014B, r24
    12fa:	ba 94       	dec	r11
    12fc:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZL16currentCharacterv>
    1300:	8d 32       	cpi	r24, 0x2D	; 45
    1302:	91 f3       	breq	.-28     	; 0x12e8 <_ZL8nextNotev+0x208>
    1304:	c0 91 08 01 	lds	r28, 0x0108
    1308:	d0 91 09 01 	lds	r29, 0x0109
    130c:	81 53       	subi	r24, 0x31	; 49
    130e:	88 30       	cpi	r24, 0x08	; 8
    1310:	58 f4       	brcc	.+22     	; 0x1328 <_ZL8nextNotev+0x248>
    1312:	c0 91 06 01 	lds	r28, 0x0106
    1316:	d0 91 07 01 	lds	r29, 0x0107
    131a:	0e 94 16 07 	call	0xe2c	; 0xe2c <_ZL9getNumberv>
    131e:	bc 01       	movw	r22, r24
    1320:	ce 01       	movw	r24, r28
    1322:	0e 94 88 13 	call	0x2710	; 0x2710 <__udivmodhi4>
    1326:	eb 01       	movw	r28, r22
    1328:	8e 01       	movw	r16, r28
    132a:	0b c0       	rjmp	.+22     	; 0x1342 <_ZL8nextNotev+0x262>
    132c:	80 91 4b 01 	lds	r24, 0x014B
    1330:	90 91 4c 01 	lds	r25, 0x014C
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	90 93 4c 01 	sts	0x014C, r25
    133a:	80 93 4b 01 	sts	0x014B, r24
    133e:	c0 0f       	add	r28, r16
    1340:	d1 1f       	adc	r29, r17
    1342:	16 95       	lsr	r17
    1344:	07 95       	ror	r16
    1346:	0e 94 f4 06 	call	0xde8	; 0xde8 <_ZL16currentCharacterv>
    134a:	8e 32       	cpi	r24, 0x2E	; 46
    134c:	79 f3       	breq	.-34     	; 0x132c <_ZL8nextNotev+0x24c>
    134e:	80 91 4d 01 	lds	r24, 0x014D
    1352:	88 23       	and	r24, r24
    1354:	39 f0       	breq	.+14     	; 0x1364 <_ZL8nextNotev+0x284>
    1356:	ce 01       	movw	r24, r28
    1358:	96 95       	lsr	r25
    135a:	87 95       	ror	r24
    135c:	80 93 4e 01 	sts	0x014E, r24
    1360:	c8 1b       	sub	r28, r24
    1362:	d1 09       	sbc	r29, r1
    1364:	ee 20       	and	r14, r14
    1366:	11 f0       	breq	.+4      	; 0x136c <_ZL8nextNotev+0x28c>
    1368:	bb 24       	eor	r11, r11
    136a:	ba 94       	dec	r11
    136c:	8b 2d       	mov	r24, r11
    136e:	be 01       	movw	r22, r28
    1370:	40 91 0a 01 	lds	r20, 0x010A
    1374:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN15OrangutanBuzzer8playNoteEhjh>
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	ed e0       	ldi	r30, 0x0D	; 13
    137e:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__epilogue_restores__+0xa>

00001382 <__vector_13>:
    1382:	1f 92       	push	r1
    1384:	0f 92       	push	r0
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	0f 92       	push	r0
    138a:	11 24       	eor	r1, r1
    138c:	2f 93       	push	r18
    138e:	3f 93       	push	r19
    1390:	4f 93       	push	r20
    1392:	5f 93       	push	r21
    1394:	6f 93       	push	r22
    1396:	7f 93       	push	r23
    1398:	8f 93       	push	r24
    139a:	9f 93       	push	r25
    139c:	af 93       	push	r26
    139e:	bf 93       	push	r27
    13a0:	ef 93       	push	r30
    13a2:	ff 93       	push	r31
    13a4:	80 91 51 01 	lds	r24, 0x0151
    13a8:	90 91 52 01 	lds	r25, 0x0152
    13ac:	9c 01       	movw	r18, r24
    13ae:	21 50       	subi	r18, 0x01	; 1
    13b0:	30 40       	sbci	r19, 0x00	; 0
    13b2:	30 93 52 01 	sts	0x0152, r19
    13b6:	20 93 51 01 	sts	0x0151, r18
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	11 f5       	brne	.+68     	; 0x1402 <__vector_13+0x80>
    13be:	10 92 6f 00 	sts	0x006F, r1
    13c2:	78 94       	sei
    13c4:	80 91 81 00 	lds	r24, 0x0081
    13c8:	88 7f       	andi	r24, 0xF8	; 248
    13ca:	81 60       	ori	r24, 0x01	; 1
    13cc:	80 93 81 00 	sts	0x0081, r24
    13d0:	80 e1       	ldi	r24, 0x10	; 16
    13d2:	97 e2       	ldi	r25, 0x27	; 39
    13d4:	90 93 89 00 	sts	0x0089, r25
    13d8:	80 93 88 00 	sts	0x0088, r24
    13dc:	10 92 8b 00 	sts	0x008B, r1
    13e0:	10 92 8a 00 	sts	0x008A, r1
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	80 93 02 01 	sts	0x0102, r24
    13ea:	80 91 4b 01 	lds	r24, 0x014B
    13ee:	90 91 4c 01 	lds	r25, 0x014C
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	31 f0       	breq	.+12     	; 0x1402 <__vector_13+0x80>
    13f6:	80 91 50 01 	lds	r24, 0x0150
    13fa:	88 23       	and	r24, r24
    13fc:	11 f4       	brne	.+4      	; 0x1402 <__vector_13+0x80>
    13fe:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZL8nextNotev>
    1402:	ff 91       	pop	r31
    1404:	ef 91       	pop	r30
    1406:	bf 91       	pop	r27
    1408:	af 91       	pop	r26
    140a:	9f 91       	pop	r25
    140c:	8f 91       	pop	r24
    140e:	7f 91       	pop	r23
    1410:	6f 91       	pop	r22
    1412:	5f 91       	pop	r21
    1414:	4f 91       	pop	r20
    1416:	3f 91       	pop	r19
    1418:	2f 91       	pop	r18
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	0f 90       	pop	r0
    1420:	1f 90       	pop	r1
    1422:	18 95       	reti

00001424 <_ZN15OrangutanBuzzer9isPlayingEv>:
    1424:	80 91 02 01 	lds	r24, 0x0102
    1428:	88 23       	and	r24, r24
    142a:	51 f0       	breq	.+20     	; 0x1440 <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	20 91 4b 01 	lds	r18, 0x014B
    1432:	30 91 4c 01 	lds	r19, 0x014C
    1436:	21 15       	cp	r18, r1
    1438:	31 05       	cpc	r19, r1
    143a:	19 f4       	brne	.+6      	; 0x1442 <_ZN15OrangutanBuzzer9isPlayingEv+0x1e>
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	08 95       	ret
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	08 95       	ret

00001444 <is_playing>:
    1444:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN15OrangutanBuzzer9isPlayingEv>
    1448:	08 95       	ret

0000144a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    144a:	10 92 6f 00 	sts	0x006F, r1
    144e:	90 93 4c 01 	sts	0x014C, r25
    1452:	80 93 4b 01 	sts	0x014B, r24
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	80 93 4f 01 	sts	0x014F, r24
    145c:	10 92 4e 01 	sts	0x014E, r1
    1460:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZL8nextNotev>
    1464:	08 95       	ret

00001466 <play_from_program_space>:
    1466:	0e 94 25 0a 	call	0x144a	; 0x144a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    146a:	08 95       	ret

0000146c <delayMicroseconds.clone.0>:
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	6f 93       	push	r22
    1472:	64 e0       	ldi	r22, 0x04	; 4
    1474:	6a 95       	dec	r22
    1476:	f1 f7       	brne	.-4      	; 0x1474 <delayMicroseconds.clone.0+0x8>
    1478:	6f 91       	pop	r22
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	c9 f7       	brne	.-14     	; 0x1470 <delayMicroseconds.clone.0+0x4>
    147e:	08 95       	ret

00001480 <_ZN12OrangutanLCD8busyWaitEv>:
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	1a b1       	in	r17, 0x0a	; 10
    148a:	57 98       	cbi	0x0a, 7	; 10
    148c:	5a 98       	cbi	0x0b, 2	; 11
    148e:	28 9a       	sbi	0x05, 0	; 5
    1490:	c0 e0       	ldi	r28, 0x00	; 0
    1492:	d0 e0       	ldi	r29, 0x00	; 0
    1494:	0e 94 36 0a 	call	0x146c	; 0x146c <delayMicroseconds.clone.0>
    1498:	5c 9a       	sbi	0x0b, 4	; 11
    149a:	0e 94 36 0a 	call	0x146c	; 0x146c <delayMicroseconds.clone.0>
    149e:	09 b1       	in	r16, 0x09	; 9
    14a0:	5c 98       	cbi	0x0b, 4	; 11
    14a2:	0e 94 36 0a 	call	0x146c	; 0x146c <delayMicroseconds.clone.0>
    14a6:	5c 9a       	sbi	0x0b, 4	; 11
    14a8:	0e 94 36 0a 	call	0x146c	; 0x146c <delayMicroseconds.clone.0>
    14ac:	5c 98       	cbi	0x0b, 4	; 11
    14ae:	07 ff       	sbrs	r16, 7
    14b0:	11 c0       	rjmp	.+34     	; 0x14d4 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    14b2:	24 96       	adiw	r28, 0x04	; 4
    14b4:	9e 01       	movw	r18, r28
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	80 91 57 01 	lds	r24, 0x0157
    14be:	90 91 58 01 	lds	r25, 0x0158
    14c2:	a0 91 59 01 	lds	r26, 0x0159
    14c6:	b0 91 5a 01 	lds	r27, 0x015A
    14ca:	28 17       	cp	r18, r24
    14cc:	39 07       	cpc	r19, r25
    14ce:	4a 07       	cpc	r20, r26
    14d0:	5b 07       	cpc	r21, r27
    14d2:	00 f3       	brcs	.-64     	; 0x1494 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    14d4:	1a b9       	out	0x0a, r17	; 10
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	08 95       	ret

000014e0 <_ZN12OrangutanLCD8sendDataEh>:
    14e0:	65 b1       	in	r22, 0x05	; 5
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	ac 01       	movw	r20, r24
    14e6:	41 70       	andi	r20, 0x01	; 1
    14e8:	50 70       	andi	r21, 0x00	; 0
    14ea:	44 0f       	add	r20, r20
    14ec:	55 1f       	adc	r21, r21
    14ee:	9c 01       	movw	r18, r24
    14f0:	26 70       	andi	r18, 0x06	; 6
    14f2:	30 70       	andi	r19, 0x00	; 0
    14f4:	53 e0       	ldi	r21, 0x03	; 3
    14f6:	22 0f       	add	r18, r18
    14f8:	33 1f       	adc	r19, r19
    14fa:	5a 95       	dec	r21
    14fc:	e1 f7       	brne	.-8      	; 0x14f6 <_ZN12OrangutanLCD8sendDataEh+0x16>
    14fe:	24 2b       	or	r18, r20
    1500:	6d 7c       	andi	r22, 0xCD	; 205
    1502:	26 2b       	or	r18, r22
    1504:	25 b9       	out	0x05, r18	; 5
    1506:	2b b1       	in	r18, 0x0b	; 11
    1508:	88 70       	andi	r24, 0x08	; 8
    150a:	90 70       	andi	r25, 0x00	; 0
    150c:	34 e0       	ldi	r19, 0x04	; 4
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	3a 95       	dec	r19
    1514:	e1 f7       	brne	.-8      	; 0x150e <_ZN12OrangutanLCD8sendDataEh+0x2e>
    1516:	2f 77       	andi	r18, 0x7F	; 127
    1518:	28 2b       	or	r18, r24
    151a:	2b b9       	out	0x0b, r18	; 11
    151c:	5c 9a       	sbi	0x0b, 4	; 11
    151e:	0e 94 36 0a 	call	0x146c	; 0x146c <delayMicroseconds.clone.0>
    1522:	5c 98       	cbi	0x0b, 4	; 11
    1524:	0e 94 36 0a 	call	0x146c	; 0x146c <delayMicroseconds.clone.0>
    1528:	08 95       	ret

0000152a <_ZN12OrangutanLCD4sendEhhh>:
    152a:	a2 e0       	ldi	r26, 0x02	; 2
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	eb e9       	ldi	r30, 0x9B	; 155
    1530:	fa e0       	ldi	r31, 0x0A	; 10
    1532:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x16>
    1536:	18 2f       	mov	r17, r24
    1538:	4a 83       	std	Y+2, r20	; 0x02
    153a:	69 83       	std	Y+1, r22	; 0x01
    153c:	0e 94 40 0b 	call	0x1680	; 0x1680 <_ZN12OrangutanLCD4initEv>
    1540:	0e 94 40 0a 	call	0x1480	; 0x1480 <_ZN12OrangutanLCD8busyWaitEv>
    1544:	f4 b0       	in	r15, 0x04	; 4
    1546:	05 b1       	in	r16, 0x05	; 5
    1548:	da b0       	in	r13, 0x0a	; 10
    154a:	eb b0       	in	r14, 0x0b	; 11
    154c:	28 98       	cbi	0x05, 0	; 5
    154e:	69 81       	ldd	r22, Y+1	; 0x01
    1550:	4a 81       	ldd	r20, Y+2	; 0x02
    1552:	66 23       	and	r22, r22
    1554:	11 f0       	breq	.+4      	; 0x155a <_ZN12OrangutanLCD4sendEhhh+0x30>
    1556:	5a 9a       	sbi	0x0b, 2	; 11
    1558:	01 c0       	rjmp	.+2      	; 0x155c <_ZN12OrangutanLCD4sendEhhh+0x32>
    155a:	5a 98       	cbi	0x0b, 2	; 11
    155c:	84 b1       	in	r24, 0x04	; 4
    155e:	82 63       	ori	r24, 0x32	; 50
    1560:	84 b9       	out	0x04, r24	; 4
    1562:	57 9a       	sbi	0x0a, 7	; 10
    1564:	41 30       	cpi	r20, 0x01	; 1
    1566:	29 f0       	breq	.+10     	; 0x1572 <_ZN12OrangutanLCD4sendEhhh+0x48>
    1568:	81 2f       	mov	r24, r17
    156a:	82 95       	swap	r24
    156c:	8f 70       	andi	r24, 0x0F	; 15
    156e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <_ZN12OrangutanLCD8sendDataEh>
    1572:	81 2f       	mov	r24, r17
    1574:	8f 70       	andi	r24, 0x0F	; 15
    1576:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <_ZN12OrangutanLCD8sendDataEh>
    157a:	da b8       	out	0x0a, r13	; 10
    157c:	eb b8       	out	0x0b, r14	; 11
    157e:	f4 b8       	out	0x04, r15	; 4
    1580:	05 b9       	out	0x05, r16	; 5
    1582:	22 96       	adiw	r28, 0x02	; 2
    1584:	e7 e0       	ldi	r30, 0x07	; 7
    1586:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x16>

0000158a <_ZN12OrangutanLCD8send_cmdEh>:
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	42 e0       	ldi	r20, 0x02	; 2
    158e:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZN12OrangutanLCD4sendEhhh>
    1592:	08 95       	ret

00001594 <_ZN12OrangutanLCD9send_dataEh>:
    1594:	61 e0       	ldi	r22, 0x01	; 1
    1596:	42 e0       	ldi	r20, 0x02	; 2
    1598:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZN12OrangutanLCD4sendEhhh>
    159c:	08 95       	ret

0000159e <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	1f 93       	push	r17
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	0f 92       	push	r0
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	66 0f       	add	r22, r22
    15b0:	66 0f       	add	r22, r22
    15b2:	66 0f       	add	r22, r22
    15b4:	48 2f       	mov	r20, r24
    15b6:	59 2f       	mov	r21, r25
    15b8:	7a 01       	movw	r14, r20
    15ba:	10 e0       	ldi	r17, 0x00	; 0
    15bc:	81 2f       	mov	r24, r17
    15be:	86 0f       	add	r24, r22
    15c0:	80 64       	ori	r24, 0x40	; 64
    15c2:	69 83       	std	Y+1, r22	; 0x01
    15c4:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN12OrangutanLCD8send_cmdEh>
    15c8:	f7 01       	movw	r30, r14
    15ca:	84 91       	lpm	r24, Z
    15cc:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN12OrangutanLCD9send_dataEh>
    15d0:	1f 5f       	subi	r17, 0xFF	; 255
    15d2:	08 94       	sec
    15d4:	e1 1c       	adc	r14, r1
    15d6:	f1 1c       	adc	r15, r1
    15d8:	69 81       	ldd	r22, Y+1	; 0x01
    15da:	18 30       	cpi	r17, 0x08	; 8
    15dc:	79 f7       	brne	.-34     	; 0x15bc <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x1e>
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	1f 91       	pop	r17
    15e6:	ff 90       	pop	r15
    15e8:	ef 90       	pop	r14
    15ea:	08 95       	ret

000015ec <lcd_load_custom_character>:
    15ec:	0e 94 cf 0a 	call	0x159e	; 0x159e <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    15f0:	08 95       	ret

000015f2 <print_character>:
    15f2:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN12OrangutanLCD9send_dataEh>
    15f6:	08 95       	ret

000015f8 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	41 e0       	ldi	r20, 0x01	; 1
    15fc:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZN12OrangutanLCD4sendEhhh>
    1600:	08 95       	ret

00001602 <_ZN12OrangutanLCD5init2Ev>:
    1602:	80 e1       	ldi	r24, 0x10	; 16
    1604:	97 e2       	ldi	r25, 0x27	; 39
    1606:	a0 e0       	ldi	r26, 0x00	; 0
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	80 93 57 01 	sts	0x0157, r24
    160e:	90 93 58 01 	sts	0x0158, r25
    1612:	a0 93 59 01 	sts	0x0159, r26
    1616:	b0 93 5a 01 	sts	0x015A, r27
    161a:	52 9a       	sbi	0x0a, 2	; 10
    161c:	20 9a       	sbi	0x04, 0	; 4
    161e:	54 9a       	sbi	0x0a, 4	; 10
    1620:	8e e1       	ldi	r24, 0x1E	; 30
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
    1628:	83 e0       	ldi	r24, 0x03	; 3
    162a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    162e:	86 e0       	ldi	r24, 0x06	; 6
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
    1636:	83 e0       	ldi	r24, 0x03	; 3
    1638:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    163c:	82 e0       	ldi	r24, 0x02	; 2
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
    1644:	83 e0       	ldi	r24, 0x03	; 3
    1646:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
    1652:	82 e0       	ldi	r24, 0x02	; 2
    1654:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1658:	82 e0       	ldi	r24, 0x02	; 2
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
    1660:	88 e2       	ldi	r24, 0x28	; 40
    1662:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN12OrangutanLCD8send_cmdEh>
    1666:	88 e0       	ldi	r24, 0x08	; 8
    1668:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN12OrangutanLCD8send_cmdEh>
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN12OrangutanLCD8send_cmdEh>
    1672:	86 e0       	ldi	r24, 0x06	; 6
    1674:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN12OrangutanLCD8send_cmdEh>
    1678:	8c e0       	ldi	r24, 0x0C	; 12
    167a:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN12OrangutanLCD8send_cmdEh>
    167e:	08 95       	ret

00001680 <_ZN12OrangutanLCD4initEv>:
    1680:	80 91 5b 01 	lds	r24, 0x015B
    1684:	88 23       	and	r24, r24
    1686:	29 f4       	brne	.+10     	; 0x1692 <_ZN12OrangutanLCD4initEv+0x12>
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	80 93 5b 01 	sts	0x015B, r24
    168e:	0e 94 01 0b 	call	0x1602	; 0x1602 <_ZN12OrangutanLCD5init2Ev>
    1692:	08 95       	ret

00001694 <_ZN12OrangutanLCD5clearEv>:
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN12OrangutanLCD8send_cmdEh>
    169a:	80 91 53 01 	lds	r24, 0x0153
    169e:	90 91 54 01 	lds	r25, 0x0154
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	11 f1       	breq	.+68     	; 0x16ea <_ZN12OrangutanLCD5clearEv+0x56>
    16a6:	a0 e0       	ldi	r26, 0x00	; 0
    16a8:	b0 e2       	ldi	r27, 0x20	; 32
    16aa:	08 c0       	rjmp	.+16     	; 0x16bc <_ZN12OrangutanLCD5clearEv+0x28>
    16ac:	e0 91 53 01 	lds	r30, 0x0153
    16b0:	f0 91 54 01 	lds	r31, 0x0154
    16b4:	e2 0f       	add	r30, r18
    16b6:	f3 1f       	adc	r31, r19
    16b8:	b0 83       	st	Z, r27
    16ba:	af 5f       	subi	r26, 0xFF	; 255
    16bc:	2a 2f       	mov	r18, r26
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	80 91 24 01 	lds	r24, 0x0124
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	60 91 25 01 	lds	r22, 0x0125
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	86 9f       	mul	r24, r22
    16d0:	a0 01       	movw	r20, r0
    16d2:	87 9f       	mul	r24, r23
    16d4:	50 0d       	add	r21, r0
    16d6:	96 9f       	mul	r25, r22
    16d8:	50 0d       	add	r21, r0
    16da:	11 24       	eor	r1, r1
    16dc:	24 17       	cp	r18, r20
    16de:	35 07       	cpc	r19, r21
    16e0:	2c f3       	brlt	.-54     	; 0x16ac <_ZN12OrangutanLCD5clearEv+0x18>
    16e2:	10 92 56 01 	sts	0x0156, r1
    16e6:	10 92 55 01 	sts	0x0155, r1
    16ea:	08 95       	ret

000016ec <clear>:
    16ec:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZN12OrangutanLCD5clearEv>
    16f0:	08 95       	ret

000016f2 <_ZN12OrangutanLCD5printEPKc>:
    16f2:	ef 92       	push	r14
    16f4:	ff 92       	push	r15
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	e8 2e       	mov	r14, r24
    16fc:	e7 01       	movw	r28, r14
    16fe:	7e 01       	movw	r14, r28
    1700:	f9 2e       	mov	r15, r25
    1702:	e7 01       	movw	r28, r14
    1704:	02 c0       	rjmp	.+4      	; 0x170a <_ZN12OrangutanLCD5printEPKc+0x18>
    1706:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN12OrangutanLCD9send_dataEh>
    170a:	89 91       	ld	r24, Y+
    170c:	88 23       	and	r24, r24
    170e:	d9 f7       	brne	.-10     	; 0x1706 <_ZN12OrangutanLCD5printEPKc+0x14>
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	ff 90       	pop	r15
    1716:	ef 90       	pop	r14
    1718:	08 95       	ret

0000171a <print>:
    171a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN12OrangutanLCD5printEPKc>
    171e:	08 95       	ret

00001720 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	ec 01       	movw	r28, r24
    1726:	03 c0       	rjmp	.+6      	; 0x172e <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    1728:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN12OrangutanLCD9send_dataEh>
    172c:	21 96       	adiw	r28, 0x01	; 1
    172e:	fe 01       	movw	r30, r28
    1730:	84 91       	lpm	r24, Z
    1732:	88 23       	and	r24, r24
    1734:	c9 f7       	brne	.-14     	; 0x1728 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <print_from_program_space>:
    173c:	0e 94 90 0b 	call	0x1720	; 0x1720 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    1740:	08 95       	ret

00001742 <_ZN12OrangutanLCD5printEm>:
    1742:	aa e0       	ldi	r26, 0x0A	; 10
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e7 ea       	ldi	r30, 0xA7	; 167
    1748:	fb e0       	ldi	r31, 0x0B	; 11
    174a:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__prologue_saves__+0x10>
    174e:	9b 01       	movw	r18, r22
    1750:	ac 01       	movw	r20, r24
    1752:	1a e0       	ldi	r17, 0x0A	; 10
    1754:	ea e0       	ldi	r30, 0x0A	; 10
    1756:	ce 2e       	mov	r12, r30
    1758:	d1 2c       	mov	r13, r1
    175a:	e1 2c       	mov	r14, r1
    175c:	f1 2c       	mov	r15, r1
    175e:	5e 01       	movw	r10, r28
    1760:	08 94       	sec
    1762:	a1 1c       	adc	r10, r1
    1764:	b1 1c       	adc	r11, r1
    1766:	02 2f       	mov	r16, r18
    1768:	ca 01       	movw	r24, r20
    176a:	b9 01       	movw	r22, r18
    176c:	a7 01       	movw	r20, r14
    176e:	96 01       	movw	r18, r12
    1770:	0e 94 b0 13 	call	0x2760	; 0x2760 <__udivmodsi4>
    1774:	11 50       	subi	r17, 0x01	; 1
    1776:	f5 01       	movw	r30, r10
    1778:	e1 0f       	add	r30, r17
    177a:	f1 1d       	adc	r31, r1
    177c:	00 5d       	subi	r16, 0xD0	; 208
    177e:	92 2f       	mov	r25, r18
    1780:	99 0f       	add	r25, r25
    1782:	89 2f       	mov	r24, r25
    1784:	88 0f       	add	r24, r24
    1786:	88 0f       	add	r24, r24
    1788:	89 0f       	add	r24, r25
    178a:	08 1b       	sub	r16, r24
    178c:	00 83       	st	Z, r16
    178e:	21 15       	cp	r18, r1
    1790:	31 05       	cpc	r19, r1
    1792:	41 05       	cpc	r20, r1
    1794:	51 05       	cpc	r21, r1
    1796:	39 f7       	brne	.-50     	; 0x1766 <_ZN12OrangutanLCD5printEm+0x24>
    1798:	08 c0       	rjmp	.+16     	; 0x17aa <_ZN12OrangutanLCD5printEm+0x68>
    179a:	f6 01       	movw	r30, r12
    179c:	e1 0f       	add	r30, r17
    179e:	f1 1d       	adc	r31, r1
    17a0:	80 81       	ld	r24, Z
    17a2:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN12OrangutanLCD9send_dataEh>
    17a6:	1f 5f       	subi	r17, 0xFF	; 255
    17a8:	04 c0       	rjmp	.+8      	; 0x17b2 <_ZN12OrangutanLCD5printEm+0x70>
    17aa:	6e 01       	movw	r12, r28
    17ac:	08 94       	sec
    17ae:	c1 1c       	adc	r12, r1
    17b0:	d1 1c       	adc	r13, r1
    17b2:	1a 30       	cpi	r17, 0x0A	; 10
    17b4:	90 f3       	brcs	.-28     	; 0x179a <_ZN12OrangutanLCD5printEm+0x58>
    17b6:	2a 96       	adiw	r28, 0x0a	; 10
    17b8:	ea e0       	ldi	r30, 0x0A	; 10
    17ba:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__epilogue_restores__+0x10>

000017be <_ZN12OrangutanLCD5printEl>:
    17be:	ef 92       	push	r14
    17c0:	ff 92       	push	r15
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	7b 01       	movw	r14, r22
    17c8:	8c 01       	movw	r16, r24
    17ca:	97 ff       	sbrs	r25, 7
    17cc:	0b c0       	rjmp	.+22     	; 0x17e4 <_ZN12OrangutanLCD5printEl+0x26>
    17ce:	10 95       	com	r17
    17d0:	00 95       	com	r16
    17d2:	f0 94       	com	r15
    17d4:	e0 94       	com	r14
    17d6:	e1 1c       	adc	r14, r1
    17d8:	f1 1c       	adc	r15, r1
    17da:	01 1d       	adc	r16, r1
    17dc:	11 1d       	adc	r17, r1
    17de:	8d e2       	ldi	r24, 0x2D	; 45
    17e0:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN12OrangutanLCD9send_dataEh>
    17e4:	c8 01       	movw	r24, r16
    17e6:	b7 01       	movw	r22, r14
    17e8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <_ZN12OrangutanLCD5printEm>
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	ff 90       	pop	r15
    17f2:	ef 90       	pop	r14
    17f4:	08 95       	ret

000017f6 <print_long>:
    17f6:	0e 94 df 0b 	call	0x17be	; 0x17be <_ZN12OrangutanLCD5printEl>
    17fa:	08 95       	ret

000017fc <_ZN12OrangutanLCD6gotoXYEhh>:
    17fc:	a5 e0       	ldi	r26, 0x05	; 5
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e4 e0       	ldi	r30, 0x04	; 4
    1802:	fc e0       	ldi	r31, 0x0C	; 12
    1804:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__prologue_saves__+0x1e>
    1808:	18 2f       	mov	r17, r24
    180a:	80 e8       	ldi	r24, 0x80	; 128
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	80 ec       	ldi	r24, 0xC0	; 192
    1810:	8a 83       	std	Y+2, r24	; 0x02
    1812:	84 e9       	ldi	r24, 0x94	; 148
    1814:	8b 83       	std	Y+3, r24	; 0x03
    1816:	84 ed       	ldi	r24, 0xD4	; 212
    1818:	8c 83       	std	Y+4, r24	; 0x04
    181a:	fe 01       	movw	r30, r28
    181c:	e6 0f       	add	r30, r22
    181e:	f1 1d       	adc	r31, r1
    1820:	81 81       	ldd	r24, Z+1	; 0x01
    1822:	81 0f       	add	r24, r17
    1824:	6d 83       	std	Y+5, r22	; 0x05
    1826:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN12OrangutanLCD8send_cmdEh>
    182a:	10 93 56 01 	sts	0x0156, r17
    182e:	6d 81       	ldd	r22, Y+5	; 0x05
    1830:	60 93 55 01 	sts	0x0155, r22
    1834:	25 96       	adiw	r28, 0x05	; 5
    1836:	e3 e0       	ldi	r30, 0x03	; 3
    1838:	0c 94 27 14 	jmp	0x284e	; 0x284e <__epilogue_restores__+0x1e>

0000183c <lcd_goto_xy>:
    183c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN12OrangutanLCD6gotoXYEhh>
    1840:	08 95       	ret

00001842 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    1842:	fc 01       	movw	r30, r24
    1844:	11 82       	std	Z+1, r1	; 0x01
    1846:	10 82       	st	Z, r1
    1848:	13 82       	std	Z+3, r1	; 0x03
    184a:	12 82       	std	Z+2, r1	; 0x02
    184c:	15 82       	std	Z+5, r1	; 0x05
    184e:	14 82       	std	Z+4, r1	; 0x04
    1850:	16 82       	std	Z+6, r1	; 0x06
    1852:	68 30       	cpi	r22, 0x08	; 8
    1854:	68 f4       	brcc	.+26     	; 0x1870 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    1856:	89 e2       	ldi	r24, 0x29	; 41
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	80 83       	st	Z, r24
    185e:	8b e2       	ldi	r24, 0x2B	; 43
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	93 83       	std	Z+3, r25	; 0x03
    1864:	82 83       	std	Z+2, r24	; 0x02
    1866:	8a e2       	ldi	r24, 0x2A	; 42
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	95 83       	std	Z+5, r25	; 0x05
    186c:	84 83       	std	Z+4, r24	; 0x04
    186e:	11 c0       	rjmp	.+34     	; 0x1892 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x50>
    1870:	6e 30       	cpi	r22, 0x0E	; 14
    1872:	c0 f4       	brcc	.+48     	; 0x18a4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x62>
    1874:	83 e2       	ldi	r24, 0x23	; 35
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	80 83       	st	Z, r24
    187c:	85 e2       	ldi	r24, 0x25	; 37
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	93 83       	std	Z+3, r25	; 0x03
    1882:	82 83       	std	Z+2, r24	; 0x02
    1884:	84 e2       	ldi	r24, 0x24	; 36
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	95 83       	std	Z+5, r25	; 0x05
    188a:	84 83       	std	Z+4, r24	; 0x04
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	68 50       	subi	r22, 0x08	; 8
    1890:	70 40       	sbci	r23, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 c0       	rjmp	.+4      	; 0x189c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x5a>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	6a 95       	dec	r22
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x56>
    18a0:	86 83       	std	Z+6, r24	; 0x06
    18a2:	08 95       	ret
    18a4:	65 31       	cpi	r22, 0x15	; 21
    18a6:	b8 f4       	brcc	.+46     	; 0x18d6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x94>
    18a8:	86 e2       	ldi	r24, 0x26	; 38
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
    18b0:	88 e2       	ldi	r24, 0x28	; 40
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	93 83       	std	Z+3, r25	; 0x03
    18b6:	82 83       	std	Z+2, r24	; 0x02
    18b8:	87 e2       	ldi	r24, 0x27	; 39
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	95 83       	std	Z+5, r25	; 0x05
    18be:	84 83       	std	Z+4, r24	; 0x04
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	6e 50       	subi	r22, 0x0E	; 14
    18c4:	70 40       	sbci	r23, 0x00	; 0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8e>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	6a 95       	dec	r22
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8a>
    18d4:	86 83       	std	Z+6, r24	; 0x06
    18d6:	08 95       	ret

000018d8 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>:
    18d8:	fc 01       	movw	r30, r24
    18da:	a4 81       	ldd	r26, Z+4	; 0x04
    18dc:	b5 81       	ldd	r27, Z+5	; 0x05
    18de:	86 81       	ldd	r24, Z+6	; 0x06
    18e0:	66 23       	and	r22, r22
    18e2:	21 f0       	breq	.+8      	; 0x18ec <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh+0x14>
    18e4:	9c 91       	ld	r25, X
    18e6:	98 2b       	or	r25, r24
    18e8:	9c 93       	st	X, r25
    18ea:	08 95       	ret
    18ec:	9c 91       	ld	r25, X
    18ee:	80 95       	com	r24
    18f0:	89 23       	and	r24, r25
    18f2:	8c 93       	st	X, r24
    18f4:	08 95       	ret

000018f6 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>:
    18f6:	fc 01       	movw	r30, r24
    18f8:	6f 3f       	cpi	r22, 0xFF	; 255
    18fa:	31 f4       	brne	.+12     	; 0x1908 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x12>
    18fc:	a2 81       	ldd	r26, Z+2	; 0x02
    18fe:	b3 81       	ldd	r27, Z+3	; 0x03
    1900:	8c 91       	ld	r24, X
    1902:	96 81       	ldd	r25, Z+6	; 0x06
    1904:	89 27       	eor	r24, r25
    1906:	0c c0       	rjmp	.+24     	; 0x1920 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x2a>
    1908:	a2 81       	ldd	r26, Z+2	; 0x02
    190a:	b3 81       	ldd	r27, Z+3	; 0x03
    190c:	86 81       	ldd	r24, Z+6	; 0x06
    190e:	66 23       	and	r22, r22
    1910:	21 f0       	breq	.+8      	; 0x191a <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x24>
    1912:	9c 91       	ld	r25, X
    1914:	98 2b       	or	r25, r24
    1916:	9c 93       	st	X, r25
    1918:	08 95       	ret
    191a:	9c 91       	ld	r25, X
    191c:	80 95       	com	r24
    191e:	89 23       	and	r24, r25
    1920:	8c 93       	st	X, r24
    1922:	08 95       	ret

00001924 <_ZN16OrangutanDigital9setOutputEhh>:
    1924:	a7 e0       	ldi	r26, 0x07	; 7
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e8 e9       	ldi	r30, 0x98	; 152
    192a:	fc e0       	ldi	r31, 0x0C	; 12
    192c:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__prologue_saves__+0x1a>
    1930:	28 2f       	mov	r18, r24
    1932:	f6 2e       	mov	r15, r22
    1934:	8e 01       	movw	r16, r28
    1936:	0f 5f       	subi	r16, 0xFF	; 255
    1938:	1f 4f       	sbci	r17, 0xFF	; 255
    193a:	c8 01       	movw	r24, r16
    193c:	62 2f       	mov	r22, r18
    193e:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1942:	c8 01       	movw	r24, r16
    1944:	6f 2d       	mov	r22, r15
    1946:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>
    194a:	c8 01       	movw	r24, r16
    194c:	61 e0       	ldi	r22, 0x01	; 1
    194e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>
    1952:	27 96       	adiw	r28, 0x07	; 7
    1954:	e5 e0       	ldi	r30, 0x05	; 5
    1956:	0c 94 25 14 	jmp	0x284a	; 0x284a <__epilogue_restores__+0x1a>

0000195a <_ZN15OrangutanMotors5init2Ev>:
    195a:	e0 eb       	ldi	r30, 0xB0	; 176
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	83 ef       	ldi	r24, 0xF3	; 243
    1960:	80 83       	st	Z, r24
    1962:	80 81       	ld	r24, Z
    1964:	84 bd       	out	0x24, r24	; 36
    1966:	e1 eb       	ldi	r30, 0xB1	; 177
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	80 83       	st	Z, r24
    196e:	80 81       	ld	r24, Z
    1970:	85 bd       	out	0x25, r24	; 37
    1972:	e4 eb       	ldi	r30, 0xB4	; 180
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	10 82       	st	Z, r1
    1978:	80 81       	ld	r24, Z
    197a:	e3 eb       	ldi	r30, 0xB3	; 179
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 83       	st	Z, r24
    1980:	80 81       	ld	r24, Z
    1982:	88 bd       	out	0x28, r24	; 40
    1984:	88 b5       	in	r24, 0x28	; 40
    1986:	87 bd       	out	0x27, r24	; 39
    1988:	86 e0       	ldi	r24, 0x06	; 6
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	0e 94 92 0c 	call	0x1924	; 0x1924 <_ZN16OrangutanDigital9setOutputEhh>
    1990:	85 e0       	ldi	r24, 0x05	; 5
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	0e 94 92 0c 	call	0x1924	; 0x1924 <_ZN16OrangutanDigital9setOutputEhh>
    1998:	8b e0       	ldi	r24, 0x0B	; 11
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	0e 94 92 0c 	call	0x1924	; 0x1924 <_ZN16OrangutanDigital9setOutputEhh>
    19a0:	83 e0       	ldi	r24, 0x03	; 3
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	0e 94 92 0c 	call	0x1924	; 0x1924 <_ZN16OrangutanDigital9setOutputEhh>
    19a8:	08 95       	ret

000019aa <_ZN15OrangutanMotors4initEv>:
    19aa:	80 91 5c 01 	lds	r24, 0x015C
    19ae:	88 23       	and	r24, r24
    19b0:	29 f4       	brne	.+10     	; 0x19bc <_ZN15OrangutanMotors4initEv+0x12>
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	80 93 5c 01 	sts	0x015C, r24
    19b8:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN15OrangutanMotors5init2Ev>
    19bc:	08 95       	ret

000019be <_ZN15OrangutanMotors10setM1SpeedEi>:
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	ec 01       	movw	r28, r24
    19c4:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <_ZN15OrangutanMotors4initEv>
    19c8:	d7 ff       	sbrs	r29, 7
    19ca:	05 c0       	rjmp	.+10     	; 0x19d6 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    19cc:	d0 95       	com	r29
    19ce:	c1 95       	neg	r28
    19d0:	df 4f       	sbci	r29, 0xFF	; 255
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	cf 3f       	cpi	r28, 0xFF	; 255
    19da:	d1 05       	cpc	r29, r1
    19dc:	19 f0       	breq	.+6      	; 0x19e4 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    19de:	14 f0       	brlt	.+4      	; 0x19e4 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    19e0:	cf ef       	ldi	r28, 0xFF	; 255
    19e2:	d0 e0       	ldi	r29, 0x00	; 0
    19e4:	88 23       	and	r24, r24
    19e6:	19 f0       	breq	.+6      	; 0x19ee <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    19e8:	18 bc       	out	0x28, r1	; 40
    19ea:	c7 bd       	out	0x27, r28	; 39
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    19ee:	c8 bd       	out	0x28, r28	; 40
    19f0:	17 bc       	out	0x27, r1	; 39
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	08 95       	ret

000019f8 <_ZN15OrangutanMotors10setM2SpeedEi>:
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	ec 01       	movw	r28, r24
    19fe:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <_ZN15OrangutanMotors4initEv>
    1a02:	d7 ff       	sbrs	r29, 7
    1a04:	05 c0       	rjmp	.+10     	; 0x1a10 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1a06:	d0 95       	com	r29
    1a08:	c1 95       	neg	r28
    1a0a:	df 4f       	sbci	r29, 0xFF	; 255
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	01 c0       	rjmp	.+2      	; 0x1a12 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	cf 3f       	cpi	r28, 0xFF	; 255
    1a14:	d1 05       	cpc	r29, r1
    1a16:	19 f0       	breq	.+6      	; 0x1a1e <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1a18:	14 f0       	brlt	.+4      	; 0x1a1e <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1a1a:	cf ef       	ldi	r28, 0xFF	; 255
    1a1c:	d0 e0       	ldi	r29, 0x00	; 0
    1a1e:	88 23       	and	r24, r24
    1a20:	29 f0       	breq	.+10     	; 0x1a2c <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1a22:	10 92 b4 00 	sts	0x00B4, r1
    1a26:	c0 93 b3 00 	sts	0x00B3, r28
    1a2a:	04 c0       	rjmp	.+8      	; 0x1a34 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1a2c:	c0 93 b4 00 	sts	0x00B4, r28
    1a30:	10 92 b3 00 	sts	0x00B3, r1
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <_ZN15OrangutanMotors9setSpeedsEii>:
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	eb 01       	movw	r28, r22
    1a40:	0e 94 df 0c 	call	0x19be	; 0x19be <_ZN15OrangutanMotors10setM1SpeedEi>
    1a44:	ce 01       	movw	r24, r28
    1a46:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN15OrangutanMotors10setM2SpeedEi>
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	08 95       	ret

00001a50 <set_motors>:
    1a50:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_ZN15OrangutanMotors9setSpeedsEii>
    1a54:	08 95       	ret

00001a56 <_ZN20OrangutanPushbuttons5init2Ev>:
    1a56:	84 b1       	in	r24, 0x04	; 4
    1a58:	8d 7c       	andi	r24, 0xCD	; 205
    1a5a:	84 b9       	out	0x04, r24	; 4
    1a5c:	85 b1       	in	r24, 0x05	; 5
    1a5e:	82 63       	ori	r24, 0x32	; 50
    1a60:	85 b9       	out	0x05, r24	; 5
    1a62:	85 e0       	ldi	r24, 0x05	; 5
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	6f 93       	push	r22
    1a68:	64 e0       	ldi	r22, 0x04	; 4
    1a6a:	6a 95       	dec	r22
    1a6c:	f1 f7       	brne	.-4      	; 0x1a6a <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1a6e:	6f 91       	pop	r22
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	c9 f7       	brne	.-14     	; 0x1a66 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1a74:	08 95       	ret

00001a76 <_ZN20OrangutanPushbuttons4initEv>:
    1a76:	80 91 5d 01 	lds	r24, 0x015D
    1a7a:	88 23       	and	r24, r24
    1a7c:	29 f4       	brne	.+10     	; 0x1a88 <_ZN20OrangutanPushbuttons4initEv+0x12>
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	80 93 5d 01 	sts	0x015D, r24
    1a84:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN20OrangutanPushbuttons5init2Ev>
    1a88:	08 95       	ret

00001a8a <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1a8a:	1f 93       	push	r17
    1a8c:	18 2f       	mov	r17, r24
    1a8e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <_ZN20OrangutanPushbuttons4initEv>
    1a92:	83 b1       	in	r24, 0x03	; 3
    1a94:	81 23       	and	r24, r17
    1a96:	e9 f3       	breq	.-6      	; 0x1a92 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1a98:	8a e0       	ldi	r24, 0x0A	; 10
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <delay_ms>
    1aa0:	83 b1       	in	r24, 0x03	; 3
    1aa2:	81 23       	and	r24, r17
    1aa4:	b1 f3       	breq	.-20     	; 0x1a92 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1aa6:	83 b1       	in	r24, 0x03	; 3
    1aa8:	81 23       	and	r24, r17
    1aaa:	1f 91       	pop	r17
    1aac:	08 95       	ret

00001aae <wait_for_button_release>:
    1aae:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    1ab2:	08 95       	ret

00001ab4 <_ZN20OrangutanPushbuttons9isPressedEh>:
    1ab4:	a1 e0       	ldi	r26, 0x01	; 1
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e0 e6       	ldi	r30, 0x60	; 96
    1aba:	fd e0       	ldi	r31, 0x0D	; 13
    1abc:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__prologue_saves__+0x20>
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <_ZN20OrangutanPushbuttons4initEv>
    1ac6:	93 b1       	in	r25, 0x03	; 3
    1ac8:	90 95       	com	r25
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	89 23       	and	r24, r25
    1ace:	21 96       	adiw	r28, 0x01	; 1
    1ad0:	e2 e0       	ldi	r30, 0x02	; 2
    1ad2:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__epilogue_restores__+0x20>

00001ad6 <button_is_pressed>:
    1ad6:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_ZN20OrangutanPushbuttons9isPressedEh>
    1ada:	08 95       	ret

00001adc <_ZN13OrangutanTime17delayMicrosecondsEj>:
    1adc:	6f 93       	push	r22
    1ade:	64 e0       	ldi	r22, 0x04	; 4
    1ae0:	6a 95       	dec	r22
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
    1ae4:	6f 91       	pop	r22
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	c9 f7       	brne	.-14     	; 0x1adc <_ZN13OrangutanTime17delayMicrosecondsEj>
    1aea:	08 95       	ret

00001aec <__vector_9>:
    1aec:	2f 92       	push	r2
    1aee:	8f 93       	push	r24
    1af0:	9f 93       	push	r25
    1af2:	2f b6       	in	r2, 0x3f	; 63
    1af4:	80 91 6b 01 	lds	r24, 0x016B
    1af8:	90 91 6c 01 	lds	r25, 0x016C
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	80 93 6b 01 	sts	0x016B, r24
    1b02:	90 93 6c 01 	sts	0x016C, r25
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	80 91 6d 01 	lds	r24, 0x016D
    1b0c:	89 1f       	adc	r24, r25
    1b0e:	80 93 6d 01 	sts	0x016D, r24
    1b12:	90 91 73 01 	lds	r25, 0x0173
    1b16:	9c 5f       	subi	r25, 0xFC	; 252
    1b18:	90 93 73 01 	sts	0x0173, r25
    1b1c:	80 91 72 01 	lds	r24, 0x0172
    1b20:	80 51       	subi	r24, 0x10	; 16
    1b22:	97 42       	sbci	r25, 0x27	; 39
    1b24:	c0 f0       	brcs	.+48     	; 0x1b56 <end>
    1b26:	90 93 73 01 	sts	0x0173, r25
    1b2a:	80 93 72 01 	sts	0x0172, r24
    1b2e:	80 91 6e 01 	lds	r24, 0x016E
    1b32:	90 91 6f 01 	lds	r25, 0x016F
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	80 93 6e 01 	sts	0x016E, r24
    1b3c:	90 93 6f 01 	sts	0x016F, r25
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	80 91 70 01 	lds	r24, 0x0170
    1b46:	89 1f       	adc	r24, r25
    1b48:	80 93 70 01 	sts	0x0170, r24
    1b4c:	80 91 71 01 	lds	r24, 0x0171
    1b50:	89 1f       	adc	r24, r25
    1b52:	80 93 71 01 	sts	0x0171, r24

00001b56 <end>:
    1b56:	2f be       	out	0x3f, r2	; 63
    1b58:	9f 91       	pop	r25
    1b5a:	8f 91       	pop	r24
    1b5c:	2f 90       	pop	r2
    1b5e:	18 95       	reti

00001b60 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	ec 01       	movw	r28, r24
    1b66:	05 c0       	rjmp	.+10     	; 0x1b72 <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
    1b68:	88 ee       	ldi	r24, 0xE8	; 232
    1b6a:	93 e0       	ldi	r25, 0x03	; 3
    1b6c:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_ZN13OrangutanTime17delayMicrosecondsEj>
    1b70:	21 97       	sbiw	r28, 0x01	; 1
    1b72:	20 97       	sbiw	r28, 0x00	; 0
    1b74:	c9 f7       	brne	.-14     	; 0x1b68 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	08 95       	ret

00001b7c <delay_ms>:
    1b7c:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN13OrangutanTime17delayMillisecondsEj>
    1b80:	08 95       	ret

00001b82 <_ZN13OrangutanTime5init2Ev>:
    1b82:	e0 e7       	ldi	r30, 0x70	; 112
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	8e 7f       	andi	r24, 0xFE	; 254
    1b8a:	80 83       	st	Z, r24
    1b8c:	a0 eb       	ldi	r26, 0xB0	; 176
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	8c 91       	ld	r24, X
    1b92:	83 60       	ori	r24, 0x03	; 3
    1b94:	8c 93       	st	X, r24
    1b96:	a1 eb       	ldi	r26, 0xB1	; 177
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	8c 91       	ld	r24, X
    1b9c:	80 7f       	andi	r24, 0xF0	; 240
    1b9e:	8c 93       	st	X, r24
    1ba0:	8c 91       	ld	r24, X
    1ba2:	82 60       	ori	r24, 0x02	; 2
    1ba4:	8c 93       	st	X, r24
    1ba6:	b8 9a       	sbi	0x17, 0	; 23
    1ba8:	80 81       	ld	r24, Z
    1baa:	81 60       	ori	r24, 0x01	; 1
    1bac:	80 83       	st	Z, r24
    1bae:	78 94       	sei
    1bb0:	08 95       	ret

00001bb2 <_ZN13OrangutanTime4initEv>:
    1bb2:	80 91 74 01 	lds	r24, 0x0174
    1bb6:	88 23       	and	r24, r24
    1bb8:	29 f4       	brne	.+10     	; 0x1bc4 <_ZN13OrangutanTime4initEv+0x12>
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	80 93 74 01 	sts	0x0174, r24
    1bc0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <_ZN13OrangutanTime5init2Ev>
    1bc4:	08 95       	ret

00001bc6 <_ZN13OrangutanTime5resetEv>:
    1bc6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_ZN13OrangutanTime4initEv>
    1bca:	e0 e7       	ldi	r30, 0x70	; 112
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	8e 7f       	andi	r24, 0xFE	; 254
    1bd2:	80 83       	st	Z, r24
    1bd4:	10 92 6e 01 	sts	0x016E, r1
    1bd8:	10 92 6f 01 	sts	0x016F, r1
    1bdc:	10 92 70 01 	sts	0x0170, r1
    1be0:	10 92 71 01 	sts	0x0171, r1
    1be4:	10 92 73 01 	sts	0x0173, r1
    1be8:	10 92 72 01 	sts	0x0172, r1
    1bec:	80 81       	ld	r24, Z
    1bee:	81 60       	ori	r24, 0x01	; 1
    1bf0:	80 83       	st	Z, r24
    1bf2:	08 95       	ret

00001bf4 <calibrate_line_sensors>:
    1bf4:	68 2f       	mov	r22, r24
    1bf6:	85 e7       	ldi	r24, 0x75	; 117
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	0e 94 2a 13 	call	0x2654	; 0x2654 <_ZN16PololuQTRSensors9calibrateEh>
    1bfe:	08 95       	ret

00001c00 <read_line>:
    1c00:	9c 01       	movw	r18, r24
    1c02:	46 2f       	mov	r20, r22
    1c04:	85 e7       	ldi	r24, 0x75	; 117
    1c06:	91 e0       	ldi	r25, 0x01	; 1
    1c08:	b9 01       	movw	r22, r18
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	0e 94 88 11 	call	0x2310	; 0x2310 <_ZN16PololuQTRSensors8readLineEPjhh>
    1c10:	08 95       	ret

00001c12 <_ZN9Pololu3pi4initEjh>:
    1c12:	0f 93       	push	r16
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <_ZN9Pololu3pi4initEjh+0x8>
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <_ZN9Pololu3pi4initEjh+0xa>
    1c1c:	0f 92       	push	r0
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	9c 01       	movw	r18, r24
    1c24:	96 2f       	mov	r25, r22
    1c26:	de 01       	movw	r26, r28
    1c28:	11 96       	adiw	r26, 0x01	; 1
    1c2a:	e6 e2       	ldi	r30, 0x26	; 38
    1c2c:	f1 e0       	ldi	r31, 0x01	; 1
    1c2e:	85 e0       	ldi	r24, 0x05	; 5
    1c30:	01 90       	ld	r0, Z+
    1c32:	0d 92       	st	X+, r0
    1c34:	81 50       	subi	r24, 0x01	; 1
    1c36:	e1 f7       	brne	.-8      	; 0x1c30 <_ZN9Pololu3pi4initEjh+0x1e>
    1c38:	be 01       	movw	r22, r28
    1c3a:	6f 5f       	subi	r22, 0xFF	; 255
    1c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3e:	99 23       	and	r25, r25
    1c40:	29 f0       	breq	.+10     	; 0x1c4c <_ZN9Pololu3pi4initEjh+0x3a>
    1c42:	85 e7       	ldi	r24, 0x75	; 117
    1c44:	91 e0       	ldi	r25, 0x01	; 1
    1c46:	45 e0       	ldi	r20, 0x05	; 5
    1c48:	0f ef       	ldi	r16, 0xFF	; 255
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <_ZN9Pololu3pi4initEjh+0x42>
    1c4c:	85 e7       	ldi	r24, 0x75	; 117
    1c4e:	91 e0       	ldi	r25, 0x01	; 1
    1c50:	45 e0       	ldi	r20, 0x05	; 5
    1c52:	03 e1       	ldi	r16, 0x13	; 19
    1c54:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1c58:	85 e7       	ldi	r24, 0x75	; 117
    1c5a:	91 e0       	ldi	r25, 0x01	; 1
    1c5c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <_ZN16PololuQTRSensors11emittersOffEv>
    1c60:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_ZN13OrangutanTime5resetEv>
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	0f 91       	pop	r16
    1c74:	08 95       	ret

00001c76 <pololu_3pi_init>:
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN9Pololu3pi4initEjh>
    1c7c:	08 95       	ret

00001c7e <_GLOBAL__I_pololu_3pi_init>:
    1c7e:	08 95       	ret

00001c80 <_GLOBAL__D_pololu_3pi_init>:
    1c80:	85 e7       	ldi	r24, 0x75	; 117
    1c82:	91 e0       	ldi	r25, 0x01	; 1
    1c84:	0e 94 4e 13 	call	0x269c	; 0x269c <_ZN16PololuQTRSensorsD1Ev>
    1c88:	08 95       	ret

00001c8a <delayMicroseconds>:
    1c8a:	6f 93       	push	r22
    1c8c:	64 e0       	ldi	r22, 0x04	; 4
    1c8e:	6a 95       	dec	r22
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <delayMicroseconds+0x4>
    1c92:	6f 91       	pop	r22
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	c9 f7       	brne	.-14     	; 0x1c8a <delayMicroseconds>
    1c98:	08 95       	ret

00001c9a <_ZN16PololuQTRSensors4initEhhh>:
    1c9a:	a7 e0       	ldi	r26, 0x07	; 7
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e3 e5       	ldi	r30, 0x53	; 83
    1ca0:	fe e0       	ldi	r31, 0x0E	; 14
    1ca2:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__+0x1c>
    1ca6:	8c 01       	movw	r16, r24
    1ca8:	fc 01       	movw	r30, r24
    1caa:	11 82       	std	Z+1, r1	; 0x01
    1cac:	10 82       	st	Z, r1
    1cae:	13 82       	std	Z+3, r1	; 0x03
    1cb0:	12 82       	std	Z+2, r1	; 0x02
    1cb2:	15 82       	std	Z+5, r1	; 0x05
    1cb4:	14 82       	std	Z+4, r1	; 0x04
    1cb6:	17 82       	std	Z+7, r1	; 0x07
    1cb8:	16 82       	std	Z+6, r1	; 0x06
    1cba:	61 31       	cpi	r22, 0x11	; 17
    1cbc:	18 f0       	brcs	.+6      	; 0x1cc4 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1cbe:	80 e1       	ldi	r24, 0x10	; 16
    1cc0:	80 87       	std	Z+8, r24	; 0x08
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	60 87       	std	Z+8, r22	; 0x08
    1cc8:	f8 01       	movw	r30, r16
    1cca:	20 8b       	std	Z+16, r18	; 0x10
    1ccc:	ce 01       	movw	r24, r28
    1cce:	01 96       	adiw	r24, 0x01	; 1
    1cd0:	64 2f       	mov	r22, r20
    1cd2:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1cd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd8:	f8 01       	movw	r30, r16
    1cda:	81 87       	std	Z+9, r24	; 0x09
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce0:	93 87       	std	Z+11, r25	; 0x0b
    1ce2:	82 87       	std	Z+10, r24	; 0x0a
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce8:	95 87       	std	Z+13, r25	; 0x0d
    1cea:	84 87       	std	Z+12, r24	; 0x0c
    1cec:	27 96       	adiw	r28, 0x07	; 7
    1cee:	e4 e0       	ldi	r30, 0x04	; 4
    1cf0:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__+0x1c>

00001cf4 <_ZN16PololuQTRSensors11emittersOffEv>:
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1cf8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1cfa:	10 97       	sbiw	r26, 0x00	; 0
    1cfc:	79 f0       	breq	.+30     	; 0x1d1c <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    1cfe:	8c 91       	ld	r24, X
    1d00:	91 85       	ldd	r25, Z+9	; 0x09
    1d02:	89 2b       	or	r24, r25
    1d04:	8c 93       	st	X, r24
    1d06:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d08:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d0a:	9c 91       	ld	r25, X
    1d0c:	81 85       	ldd	r24, Z+9	; 0x09
    1d0e:	80 95       	com	r24
    1d10:	89 23       	and	r24, r25
    1d12:	8c 93       	st	X, r24
    1d14:	88 ec       	ldi	r24, 0xC8	; 200
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <delayMicroseconds>
    1d1c:	08 95       	ret

00001d1e <_ZN16PololuQTRSensors10emittersOnEv>:
    1d1e:	fc 01       	movw	r30, r24
    1d20:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d22:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d24:	10 97       	sbiw	r26, 0x00	; 0
    1d26:	71 f0       	breq	.+28     	; 0x1d44 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    1d28:	8c 91       	ld	r24, X
    1d2a:	91 85       	ldd	r25, Z+9	; 0x09
    1d2c:	89 2b       	or	r24, r25
    1d2e:	8c 93       	st	X, r24
    1d30:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d32:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d34:	8c 91       	ld	r24, X
    1d36:	91 85       	ldd	r25, Z+9	; 0x09
    1d38:	89 2b       	or	r24, r25
    1d3a:	8c 93       	st	X, r24
    1d3c:	88 ec       	ldi	r24, 0xC8	; 200
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <delayMicroseconds>
    1d44:	08 95       	ret

00001d46 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    1d46:	a7 e0       	ldi	r26, 0x07	; 7
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e9 ea       	ldi	r30, 0xA9	; 169
    1d4c:	fe e0       	ldi	r31, 0x0E	; 14
    1d4e:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__prologue_saves__>
    1d52:	7c 01       	movw	r14, r24
    1d54:	1b 01       	movw	r2, r22
    1d56:	64 2f       	mov	r22, r20
    1d58:	39 01       	movw	r6, r18
    1d5a:	40 2f       	mov	r20, r16
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_ZN16PololuQTRSensors4initEhhh>
    1d62:	97 01       	movw	r18, r14
    1d64:	2f 5b       	subi	r18, 0xBF	; 191
    1d66:	3f 4f       	sbci	r19, 0xFF	; 255
    1d68:	f9 01       	movw	r30, r18
    1d6a:	10 82       	st	Z, r1
    1d6c:	d7 01       	movw	r26, r14
    1d6e:	ae 5b       	subi	r26, 0xBE	; 190
    1d70:	bf 4f       	sbci	r27, 0xFF	; 255
    1d72:	1c 92       	st	X, r1
    1d74:	c7 01       	movw	r24, r14
    1d76:	8d 5b       	subi	r24, 0xBD	; 189
    1d78:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	10 82       	st	Z, r1
    1d7e:	f7 01       	movw	r30, r14
    1d80:	77 86       	std	Z+15, r7	; 0x0f
    1d82:	66 86       	std	Z+14, r6	; 0x0e
    1d84:	66 24       	eor	r6, r6
    1d86:	2e 01       	movw	r4, r28
    1d88:	08 94       	sec
    1d8a:	41 1c       	adc	r4, r1
    1d8c:	51 1c       	adc	r5, r1
    1d8e:	6c 01       	movw	r12, r24
    1d90:	5d 01       	movw	r10, r26
    1d92:	49 01       	movw	r8, r18
    1d94:	29 c0       	rjmp	.+82     	; 0x1de8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1d96:	06 2d       	mov	r16, r6
    1d98:	10 e0       	ldi	r17, 0x00	; 0
    1d9a:	f1 01       	movw	r30, r2
    1d9c:	e0 0f       	add	r30, r16
    1d9e:	f1 1f       	adc	r31, r17
    1da0:	c2 01       	movw	r24, r4
    1da2:	60 81       	ld	r22, Z
    1da4:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1da8:	2f 81       	ldd	r18, Y+7	; 0x07
    1daa:	f7 01       	movw	r30, r14
    1dac:	e0 0f       	add	r30, r16
    1dae:	f1 1f       	adc	r31, r17
    1db0:	21 8b       	std	Z+17, r18	; 0x11
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	f8 01       	movw	r30, r16
    1db8:	ee 0f       	add	r30, r30
    1dba:	ff 1f       	adc	r31, r31
    1dbc:	ee 0d       	add	r30, r14
    1dbe:	ff 1d       	adc	r31, r15
    1dc0:	92 a3       	std	Z+34, r25	; 0x22
    1dc2:	81 a3       	std	Z+33, r24	; 0x21
    1dc4:	83 32       	cpi	r24, 0x23	; 35
    1dc6:	91 05       	cpc	r25, r1
    1dc8:	11 f4       	brne	.+4      	; 0x1dce <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1dca:	f4 01       	movw	r30, r8
    1dcc:	09 c0       	rjmp	.+18     	; 0x1de0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1dce:	86 32       	cpi	r24, 0x26	; 38
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	11 f4       	brne	.+4      	; 0x1dd8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1dd4:	f5 01       	movw	r30, r10
    1dd6:	04 c0       	rjmp	.+8      	; 0x1de0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1dd8:	89 32       	cpi	r24, 0x29	; 41
    1dda:	91 05       	cpc	r25, r1
    1ddc:	21 f4       	brne	.+8      	; 0x1de6 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa0>
    1dde:	f6 01       	movw	r30, r12
    1de0:	80 81       	ld	r24, Z
    1de2:	82 2b       	or	r24, r18
    1de4:	80 83       	st	Z, r24
    1de6:	63 94       	inc	r6
    1de8:	f7 01       	movw	r30, r14
    1dea:	80 85       	ldd	r24, Z+8	; 0x08
    1dec:	68 16       	cp	r6, r24
    1dee:	98 f2       	brcs	.-90     	; 0x1d96 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x50>
    1df0:	27 96       	adiw	r28, 0x07	; 7
    1df2:	e2 e1       	ldi	r30, 0x12	; 18
    1df4:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__epilogue_restores__>

00001df8 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e2 e0       	ldi	r30, 0x02	; 2
    1dfe:	ff e0       	ldi	r31, 0x0F	; 15
    1e00:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__prologue_saves__+0xa>
    1e04:	ec 01       	movw	r28, r24
    1e06:	5b 01       	movw	r10, r22
    1e08:	fc 01       	movw	r30, r24
    1e0a:	ef 5b       	subi	r30, 0xBF	; 191
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	90 80       	ld	r9, Z
    1e10:	fc 01       	movw	r30, r24
    1e12:	ee 5b       	subi	r30, 0xBE	; 190
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	80 80       	ld	r8, Z
    1e18:	fc 01       	movw	r30, r24
    1e1a:	ed 5b       	subi	r30, 0xBD	; 189
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	70 80       	ld	r7, Z
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	09 c0       	rjmp	.+18     	; 0x1e36 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x3e>
    1e24:	e8 2f       	mov	r30, r24
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	ee 0f       	add	r30, r30
    1e2a:	ff 1f       	adc	r31, r31
    1e2c:	ea 0d       	add	r30, r10
    1e2e:	fb 1d       	adc	r31, r11
    1e30:	11 82       	std	Z+1, r1	; 0x01
    1e32:	10 82       	st	Z, r1
    1e34:	8f 5f       	subi	r24, 0xFF	; 255
    1e36:	98 85       	ldd	r25, Y+8	; 0x08
    1e38:	89 17       	cp	r24, r25
    1e3a:	a0 f3       	brcs	.-24     	; 0x1e24 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x2c>
    1e3c:	84 b1       	in	r24, 0x04	; 4
    1e3e:	21 e4       	ldi	r18, 0x41	; 65
    1e40:	e2 2e       	mov	r14, r18
    1e42:	f1 2c       	mov	r15, r1
    1e44:	ec 0e       	add	r14, r28
    1e46:	fd 1e       	adc	r15, r29
    1e48:	d7 01       	movw	r26, r14
    1e4a:	9c 91       	ld	r25, X
    1e4c:	89 2b       	or	r24, r25
    1e4e:	84 b9       	out	0x04, r24	; 4
    1e50:	87 b1       	in	r24, 0x07	; 7
    1e52:	8e 01       	movw	r16, r28
    1e54:	0e 5b       	subi	r16, 0xBE	; 190
    1e56:	1f 4f       	sbci	r17, 0xFF	; 255
    1e58:	f8 01       	movw	r30, r16
    1e5a:	90 81       	ld	r25, Z
    1e5c:	89 2b       	or	r24, r25
    1e5e:	87 b9       	out	0x07, r24	; 7
    1e60:	8a b1       	in	r24, 0x0a	; 10
    1e62:	93 e4       	ldi	r25, 0x43	; 67
    1e64:	c9 2e       	mov	r12, r25
    1e66:	d1 2c       	mov	r13, r1
    1e68:	cc 0e       	add	r12, r28
    1e6a:	dd 1e       	adc	r13, r29
    1e6c:	d6 01       	movw	r26, r12
    1e6e:	9c 91       	ld	r25, X
    1e70:	89 2b       	or	r24, r25
    1e72:	8a b9       	out	0x0a, r24	; 10
    1e74:	85 b1       	in	r24, 0x05	; 5
    1e76:	f7 01       	movw	r30, r14
    1e78:	90 81       	ld	r25, Z
    1e7a:	89 2b       	or	r24, r25
    1e7c:	85 b9       	out	0x05, r24	; 5
    1e7e:	88 b1       	in	r24, 0x08	; 8
    1e80:	d8 01       	movw	r26, r16
    1e82:	9c 91       	ld	r25, X
    1e84:	89 2b       	or	r24, r25
    1e86:	88 b9       	out	0x08, r24	; 8
    1e88:	8b b1       	in	r24, 0x0b	; 11
    1e8a:	f6 01       	movw	r30, r12
    1e8c:	90 81       	ld	r25, Z
    1e8e:	89 2b       	or	r24, r25
    1e90:	8b b9       	out	0x0b, r24	; 11
    1e92:	8a e0       	ldi	r24, 0x0A	; 10
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <delayMicroseconds>
    1e9a:	94 b1       	in	r25, 0x04	; 4
    1e9c:	d7 01       	movw	r26, r14
    1e9e:	8c 91       	ld	r24, X
    1ea0:	80 95       	com	r24
    1ea2:	89 23       	and	r24, r25
    1ea4:	84 b9       	out	0x04, r24	; 4
    1ea6:	97 b1       	in	r25, 0x07	; 7
    1ea8:	f8 01       	movw	r30, r16
    1eaa:	80 81       	ld	r24, Z
    1eac:	80 95       	com	r24
    1eae:	89 23       	and	r24, r25
    1eb0:	87 b9       	out	0x07, r24	; 7
    1eb2:	9a b1       	in	r25, 0x0a	; 10
    1eb4:	d6 01       	movw	r26, r12
    1eb6:	8c 91       	ld	r24, X
    1eb8:	80 95       	com	r24
    1eba:	89 23       	and	r24, r25
    1ebc:	8a b9       	out	0x0a, r24	; 10
    1ebe:	95 b1       	in	r25, 0x05	; 5
    1ec0:	f7 01       	movw	r30, r14
    1ec2:	80 81       	ld	r24, Z
    1ec4:	80 95       	com	r24
    1ec6:	89 23       	and	r24, r25
    1ec8:	85 b9       	out	0x05, r24	; 5
    1eca:	98 b1       	in	r25, 0x08	; 8
    1ecc:	d8 01       	movw	r26, r16
    1ece:	8c 91       	ld	r24, X
    1ed0:	80 95       	com	r24
    1ed2:	89 23       	and	r24, r25
    1ed4:	88 b9       	out	0x08, r24	; 8
    1ed6:	9b b1       	in	r25, 0x0b	; 11
    1ed8:	f6 01       	movw	r30, r12
    1eda:	80 81       	ld	r24, Z
    1edc:	80 95       	com	r24
    1ede:	89 23       	and	r24, r25
    1ee0:	8b b9       	out	0x0b, r24	; 11
    1ee2:	c0 90 b0 00 	lds	r12, 0x00B0
    1ee6:	e0 90 b1 00 	lds	r14, 0x00B1
    1eea:	80 91 b0 00 	lds	r24, 0x00B0
    1eee:	83 60       	ori	r24, 0x03	; 3
    1ef0:	80 93 b0 00 	sts	0x00B0, r24
    1ef4:	82 e0       	ldi	r24, 0x02	; 2
    1ef6:	80 93 b1 00 	sts	0x00B1, r24
    1efa:	00 91 b2 00 	lds	r16, 0x00B2
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	39 c0       	rjmp	.+114    	; 0x1f76 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17e>
    1f04:	20 91 b2 00 	lds	r18, 0x00B2
    1f08:	20 1b       	sub	r18, r16
    1f0a:	82 0f       	add	r24, r18
    1f0c:	91 1d       	adc	r25, r1
    1f0e:	02 0f       	add	r16, r18
    1f10:	f3 b0       	in	r15, 0x03	; 3
    1f12:	f9 14       	cp	r15, r9
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x120>
    1f16:	4d c0       	rjmp	.+154    	; 0x1fb2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f18:	96 b0       	in	r9, 0x06	; 6
    1f1a:	98 14       	cp	r9, r8
    1f1c:	09 f0       	breq	.+2      	; 0x1f20 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x128>
    1f1e:	49 c0       	rjmp	.+146    	; 0x1fb2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f20:	29 b1       	in	r18, 0x09	; 9
    1f22:	27 15       	cp	r18, r7
    1f24:	09 f0       	breq	.+2      	; 0x1f28 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x130>
    1f26:	45 c0       	rjmp	.+138    	; 0x1fb2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f28:	24 c0       	rjmp	.+72     	; 0x1f72 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17a>
    1f2a:	21 2f       	mov	r18, r17
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	a9 01       	movw	r20, r18
    1f30:	44 0f       	add	r20, r20
    1f32:	55 1f       	adc	r21, r21
    1f34:	f5 01       	movw	r30, r10
    1f36:	e4 0f       	add	r30, r20
    1f38:	f5 1f       	adc	r31, r21
    1f3a:	60 81       	ld	r22, Z
    1f3c:	71 81       	ldd	r23, Z+1	; 0x01
    1f3e:	61 15       	cp	r22, r1
    1f40:	71 05       	cpc	r23, r1
    1f42:	99 f4       	brne	.+38     	; 0x1f6a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    1f44:	4c 0f       	add	r20, r28
    1f46:	5d 1f       	adc	r21, r29
    1f48:	da 01       	movw	r26, r20
    1f4a:	91 96       	adiw	r26, 0x21	; 33
    1f4c:	4d 91       	ld	r20, X+
    1f4e:	5c 91       	ld	r21, X
    1f50:	92 97       	sbiw	r26, 0x22	; 34
    1f52:	da 01       	movw	r26, r20
    1f54:	4c 91       	ld	r20, X
    1f56:	2c 0f       	add	r18, r28
    1f58:	3d 1f       	adc	r19, r29
    1f5a:	d9 01       	movw	r26, r18
    1f5c:	51 96       	adiw	r26, 0x11	; 17
    1f5e:	2c 91       	ld	r18, X
    1f60:	51 97       	sbiw	r26, 0x11	; 17
    1f62:	42 23       	and	r20, r18
    1f64:	11 f4       	brne	.+4      	; 0x1f6a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	80 83       	st	Z, r24
    1f6a:	1f 5f       	subi	r17, 0xFF	; 255
    1f6c:	28 85       	ldd	r18, Y+8	; 0x08
    1f6e:	12 17       	cp	r17, r18
    1f70:	e0 f2       	brcs	.-72     	; 0x1f2a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x132>
    1f72:	89 2c       	mov	r8, r9
    1f74:	9f 2c       	mov	r9, r15
    1f76:	2e 85       	ldd	r18, Y+14	; 0x0e
    1f78:	3f 85       	ldd	r19, Y+15	; 0x0f
    1f7a:	82 17       	cp	r24, r18
    1f7c:	93 07       	cpc	r25, r19
    1f7e:	10 f2       	brcs	.-124    	; 0x1f04 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x10c>
    1f80:	c0 92 b0 00 	sts	0x00B0, r12
    1f84:	e0 92 b1 00 	sts	0x00B1, r14
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b2>
    1f8c:	e2 2f       	mov	r30, r18
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	ee 0f       	add	r30, r30
    1f92:	ff 1f       	adc	r31, r31
    1f94:	ea 0d       	add	r30, r10
    1f96:	fb 1d       	adc	r31, r11
    1f98:	80 81       	ld	r24, Z
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	21 f4       	brne	.+8      	; 0x1fa8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b0>
    1fa0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fa2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fa4:	91 83       	std	Z+1, r25	; 0x01
    1fa6:	80 83       	st	Z, r24
    1fa8:	2f 5f       	subi	r18, 0xFF	; 255
    1faa:	88 85       	ldd	r24, Y+8	; 0x08
    1fac:	28 17       	cp	r18, r24
    1fae:	70 f3       	brcs	.-36     	; 0x1f8c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x194>
    1fb0:	05 c0       	rjmp	.+10     	; 0x1fbc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1c4>
    1fb2:	f3 b0       	in	r15, 0x03	; 3
    1fb4:	96 b0       	in	r9, 0x06	; 6
    1fb6:	79 b0       	in	r7, 0x09	; 9
    1fb8:	10 e0       	ldi	r17, 0x00	; 0
    1fba:	d8 cf       	rjmp	.-80     	; 0x1f6c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	ed e0       	ldi	r30, 0x0D	; 13
    1fc2:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__epilogue_restores__+0xa>

00001fc6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1fc6:	ef 92       	push	r14
    1fc8:	ff 92       	push	r15
    1fca:	0f 93       	push	r16
    1fcc:	1f 93       	push	r17
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	9b 01       	movw	r18, r22
    1fd6:	00 91 7c 00 	lds	r16, 0x007C
    1fda:	10 91 7a 00 	lds	r17, 0x007A
    1fde:	e7 b0       	in	r14, 0x07	; 7
    1fe0:	f8 b0       	in	r15, 0x08	; 8
    1fe2:	80 91 7a 00 	lds	r24, 0x007A
    1fe6:	86 fd       	sbrc	r24, 6
    1fe8:	fc cf       	rjmp	.-8      	; 0x1fe2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	0a c0       	rjmp	.+20     	; 0x2002 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3c>
    1fee:	a8 2f       	mov	r26, r24
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	aa 0f       	add	r26, r26
    1ff4:	bb 1f       	adc	r27, r27
    1ff6:	a2 0f       	add	r26, r18
    1ff8:	b3 1f       	adc	r27, r19
    1ffa:	11 96       	adiw	r26, 0x01	; 1
    1ffc:	1c 92       	st	X, r1
    1ffe:	1e 92       	st	-X, r1
    2000:	8f 5f       	subi	r24, 0xFF	; 255
    2002:	90 85       	ldd	r25, Z+8	; 0x08
    2004:	89 17       	cp	r24, r25
    2006:	98 f3       	brcs	.-26     	; 0x1fee <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x28>
    2008:	97 b1       	in	r25, 0x07	; 7
    200a:	82 a1       	ldd	r24, Z+34	; 0x22
    200c:	80 95       	com	r24
    200e:	89 23       	and	r24, r25
    2010:	87 b9       	out	0x07, r24	; 7
    2012:	98 b1       	in	r25, 0x08	; 8
    2014:	82 a1       	ldd	r24, Z+34	; 0x22
    2016:	80 95       	com	r24
    2018:	89 23       	and	r24, r25
    201a:	88 b9       	out	0x08, r24	; 8
    201c:	87 e8       	ldi	r24, 0x87	; 135
    201e:	80 93 7a 00 	sts	0x007A, r24
    2022:	70 e0       	ldi	r23, 0x00	; 0
    2024:	29 c0       	rjmp	.+82     	; 0x2078 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2026:	df 01       	movw	r26, r30
    2028:	a6 0f       	add	r26, r22
    202a:	b1 1d       	adc	r27, r1
    202c:	51 96       	adiw	r26, 0x11	; 17
    202e:	8c 91       	ld	r24, X
    2030:	51 97       	sbiw	r26, 0x11	; 17
    2032:	80 64       	ori	r24, 0x40	; 64
    2034:	80 93 7c 00 	sts	0x007C, r24
    2038:	80 91 7a 00 	lds	r24, 0x007A
    203c:	80 64       	ori	r24, 0x40	; 64
    203e:	80 93 7a 00 	sts	0x007A, r24
    2042:	80 91 7a 00 	lds	r24, 0x007A
    2046:	86 fd       	sbrc	r24, 6
    2048:	fc cf       	rjmp	.-8      	; 0x2042 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x7c>
    204a:	a6 2f       	mov	r26, r22
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	aa 0f       	add	r26, r26
    2050:	bb 1f       	adc	r27, r27
    2052:	a2 0f       	add	r26, r18
    2054:	b3 1f       	adc	r27, r19
    2056:	40 91 78 00 	lds	r20, 0x0078
    205a:	50 91 79 00 	lds	r21, 0x0079
    205e:	8d 91       	ld	r24, X+
    2060:	9c 91       	ld	r25, X
    2062:	11 97       	sbiw	r26, 0x01	; 1
    2064:	84 0f       	add	r24, r20
    2066:	95 1f       	adc	r25, r21
    2068:	11 96       	adiw	r26, 0x01	; 1
    206a:	9c 93       	st	X, r25
    206c:	8e 93       	st	-X, r24
    206e:	6f 5f       	subi	r22, 0xFF	; 255
    2070:	80 85       	ldd	r24, Z+8	; 0x08
    2072:	68 17       	cp	r22, r24
    2074:	c0 f2       	brcs	.-80     	; 0x2026 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x60>
    2076:	7f 5f       	subi	r23, 0xFF	; 255
    2078:	81 a1       	ldd	r24, Z+33	; 0x21
    207a:	78 17       	cp	r23, r24
    207c:	10 f4       	brcc	.+4      	; 0x2082 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xbc>
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	f7 cf       	rjmp	.-18     	; 0x2070 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xaa>
    2082:	40 e0       	ldi	r20, 0x00	; 0
    2084:	14 c0       	rjmp	.+40     	; 0x20ae <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe8>
    2086:	c4 2f       	mov	r28, r20
    2088:	d0 e0       	ldi	r29, 0x00	; 0
    208a:	cc 0f       	add	r28, r28
    208c:	dd 1f       	adc	r29, r29
    208e:	c2 0f       	add	r28, r18
    2090:	d3 1f       	adc	r29, r19
    2092:	61 a1       	ldd	r22, Z+33	; 0x21
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	cb 01       	movw	r24, r22
    2098:	95 95       	asr	r25
    209a:	87 95       	ror	r24
    209c:	a8 81       	ld	r26, Y
    209e:	b9 81       	ldd	r27, Y+1	; 0x01
    20a0:	8a 0f       	add	r24, r26
    20a2:	9b 1f       	adc	r25, r27
    20a4:	0e 94 88 13 	call	0x2710	; 0x2710 <__udivmodhi4>
    20a8:	79 83       	std	Y+1, r23	; 0x01
    20aa:	68 83       	st	Y, r22
    20ac:	4f 5f       	subi	r20, 0xFF	; 255
    20ae:	80 85       	ldd	r24, Z+8	; 0x08
    20b0:	48 17       	cp	r20, r24
    20b2:	48 f3       	brcs	.-46     	; 0x2086 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xc0>
    20b4:	00 93 7c 00 	sts	0x007C, r16
    20b8:	10 93 7a 00 	sts	0x007A, r17
    20bc:	f8 b8       	out	0x08, r15	; 8
    20be:	e7 b8       	out	0x07, r14	; 7
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	e6 e0       	ldi	r30, 0x06	; 6
    20c6:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__epilogue_restores__+0x18>

000020ca <_ZN16PololuQTRSensors4readEPjh>:
    20ca:	a0 e2       	ldi	r26, 0x20	; 32
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	eb e6       	ldi	r30, 0x6B	; 107
    20d0:	f0 e1       	ldi	r31, 0x10	; 16
    20d2:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x16>
    20d6:	8c 01       	movw	r16, r24
    20d8:	7b 01       	movw	r14, r22
    20da:	d4 2e       	mov	r13, r20
    20dc:	84 2f       	mov	r24, r20
    20de:	81 50       	subi	r24, 0x01	; 1
    20e0:	82 30       	cpi	r24, 0x02	; 2
    20e2:	18 f4       	brcc	.+6      	; 0x20ea <_ZN16PololuQTRSensors4readEPjh+0x20>
    20e4:	c8 01       	movw	r24, r16
    20e6:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <_ZN16PololuQTRSensors10emittersOnEv>
    20ea:	d8 01       	movw	r26, r16
    20ec:	50 96       	adiw	r26, 0x10	; 16
    20ee:	8c 91       	ld	r24, X
    20f0:	50 97       	sbiw	r26, 0x10	; 16
    20f2:	88 23       	and	r24, r24
    20f4:	89 f4       	brne	.+34     	; 0x2118 <_ZN16PololuQTRSensors4readEPjh+0x4e>
    20f6:	c8 01       	movw	r24, r16
    20f8:	b7 01       	movw	r22, r14
    20fa:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    20fe:	c8 01       	movw	r24, r16
    2100:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <_ZN16PololuQTRSensors11emittersOffEv>
    2104:	bd 2d       	mov	r27, r13
    2106:	b2 30       	cpi	r27, 0x02	; 2
    2108:	d9 f5       	brne	.+118    	; 0x2180 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    210a:	c8 01       	movw	r24, r16
    210c:	be 01       	movw	r22, r28
    210e:	6f 5f       	subi	r22, 0xFF	; 255
    2110:	7f 4f       	sbci	r23, 0xFF	; 255
    2112:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2116:	10 c0       	rjmp	.+32     	; 0x2138 <_ZN16PololuQTRSensors4readEPjh+0x6e>
    2118:	c8 01       	movw	r24, r16
    211a:	b7 01       	movw	r22, r14
    211c:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2120:	c8 01       	movw	r24, r16
    2122:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <_ZN16PololuQTRSensors11emittersOffEv>
    2126:	ed 2d       	mov	r30, r13
    2128:	e2 30       	cpi	r30, 0x02	; 2
    212a:	51 f5       	brne	.+84     	; 0x2180 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    212c:	c8 01       	movw	r24, r16
    212e:	be 01       	movw	r22, r28
    2130:	6f 5f       	subi	r22, 0xFF	; 255
    2132:	7f 4f       	sbci	r23, 0xFF	; 255
    2134:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	ae 01       	movw	r20, r28
    213c:	4f 5f       	subi	r20, 0xFF	; 255
    213e:	5f 4f       	sbci	r21, 0xFF	; 255
    2140:	1b c0       	rjmp	.+54     	; 0x2178 <_ZN16PololuQTRSensors4readEPjh+0xae>
    2142:	86 2f       	mov	r24, r22
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	f7 01       	movw	r30, r14
    214c:	e8 0f       	add	r30, r24
    214e:	f9 1f       	adc	r31, r25
    2150:	84 0f       	add	r24, r20
    2152:	95 1f       	adc	r25, r21
    2154:	d8 01       	movw	r26, r16
    2156:	1e 96       	adiw	r26, 0x0e	; 14
    2158:	2d 91       	ld	r18, X+
    215a:	3c 91       	ld	r19, X
    215c:	1f 97       	sbiw	r26, 0x0f	; 15
    215e:	dc 01       	movw	r26, r24
    2160:	8d 91       	ld	r24, X+
    2162:	9c 91       	ld	r25, X
    2164:	11 97       	sbiw	r26, 0x01	; 1
    2166:	28 1b       	sub	r18, r24
    2168:	39 0b       	sbc	r19, r25
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	82 0f       	add	r24, r18
    2170:	93 1f       	adc	r25, r19
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	80 83       	st	Z, r24
    2176:	6f 5f       	subi	r22, 0xFF	; 255
    2178:	f8 01       	movw	r30, r16
    217a:	80 85       	ldd	r24, Z+8	; 0x08
    217c:	68 17       	cp	r22, r24
    217e:	08 f3       	brcs	.-62     	; 0x2142 <_ZN16PololuQTRSensors4readEPjh+0x78>
    2180:	a0 96       	adiw	r28, 0x20	; 32
    2182:	e7 e0       	ldi	r30, 0x07	; 7
    2184:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x16>

00002188 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    2188:	8f 92       	push	r8
    218a:	9f 92       	push	r9
    218c:	af 92       	push	r10
    218e:	bf 92       	push	r11
    2190:	cf 92       	push	r12
    2192:	df 92       	push	r13
    2194:	ff 92       	push	r15
    2196:	0f 93       	push	r16
    2198:	1f 93       	push	r17
    219a:	cf 93       	push	r28
    219c:	df 93       	push	r29
    219e:	ec 01       	movw	r28, r24
    21a0:	c6 2e       	mov	r12, r22
    21a2:	07 2f       	mov	r16, r23
    21a4:	f4 2e       	mov	r15, r20
    21a6:	42 30       	cpi	r20, 0x02	; 2
    21a8:	11 f0       	breq	.+4      	; 0x21ae <_ZN16PololuQTRSensors14readCalibratedEPjh+0x26>
    21aa:	ff 20       	and	r15, r15
    21ac:	51 f4       	brne	.+20     	; 0x21c2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    21ae:	8c 81       	ldd	r24, Y+4	; 0x04
    21b0:	9d 81       	ldd	r25, Y+5	; 0x05
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x30>
    21b6:	a0 c0       	rjmp	.+320    	; 0x22f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21b8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ba:	9f 81       	ldd	r25, Y+7	; 0x07
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	09 f4       	brne	.+2      	; 0x21c2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    21c0:	9b c0       	rjmp	.+310    	; 0x22f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21c2:	8f 2d       	mov	r24, r15
    21c4:	81 50       	subi	r24, 0x01	; 1
    21c6:	82 30       	cpi	r24, 0x02	; 2
    21c8:	50 f4       	brcc	.+20     	; 0x21de <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    21ca:	88 81       	ld	r24, Y
    21cc:	99 81       	ldd	r25, Y+1	; 0x01
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x4c>
    21d2:	92 c0       	rjmp	.+292    	; 0x22f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	9b 81       	ldd	r25, Y+3	; 0x03
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	09 f4       	brne	.+2      	; 0x21de <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    21dc:	8d c0       	rjmp	.+282    	; 0x22f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21de:	ce 01       	movw	r24, r28
    21e0:	6c 2d       	mov	r22, r12
    21e2:	70 2f       	mov	r23, r16
    21e4:	4f 2d       	mov	r20, r15
    21e6:	0e 94 65 10 	call	0x20ca	; 0x20ca <_ZN16PololuQTRSensors4readEPjh>
    21ea:	ac 2c       	mov	r10, r12
    21ec:	b0 2e       	mov	r11, r16
    21ee:	00 e0       	ldi	r16, 0x00	; 0
    21f0:	10 e0       	ldi	r17, 0x00	; 0
    21f2:	88 24       	eor	r8, r8
    21f4:	99 24       	eor	r9, r9
    21f6:	7a c0       	rjmp	.+244    	; 0x22ec <_ZN16PololuQTRSensors14readCalibratedEPjh+0x164>
    21f8:	8f 2d       	mov	r24, r15
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	59 f4       	brne	.+22     	; 0x2214 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x8c>
    21fe:	ea 81       	ldd	r30, Y+2	; 0x02
    2200:	fb 81       	ldd	r31, Y+3	; 0x03
    2202:	e0 0f       	add	r30, r16
    2204:	f1 1f       	adc	r31, r17
    2206:	c0 80       	ld	r12, Z
    2208:	d1 80       	ldd	r13, Z+1	; 0x01
    220a:	e8 81       	ld	r30, Y
    220c:	f9 81       	ldd	r31, Y+1	; 0x01
    220e:	e0 0f       	add	r30, r16
    2210:	f1 1f       	adc	r31, r17
    2212:	0d c0       	rjmp	.+26     	; 0x222e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    2214:	8c 81       	ldd	r24, Y+4	; 0x04
    2216:	9d 81       	ldd	r25, Y+5	; 0x05
    2218:	ff 20       	and	r15, r15
    221a:	61 f4       	brne	.+24     	; 0x2234 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xac>
    221c:	ee 81       	ldd	r30, Y+6	; 0x06
    221e:	ff 81       	ldd	r31, Y+7	; 0x07
    2220:	e0 0f       	add	r30, r16
    2222:	f1 1f       	adc	r31, r17
    2224:	c0 80       	ld	r12, Z
    2226:	d1 80       	ldd	r13, Z+1	; 0x01
    2228:	80 0f       	add	r24, r16
    222a:	91 1f       	adc	r25, r17
    222c:	fc 01       	movw	r30, r24
    222e:	40 81       	ld	r20, Z
    2230:	51 81       	ldd	r21, Z+1	; 0x01
    2232:	2b c0       	rjmp	.+86     	; 0x228a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    2234:	80 0f       	add	r24, r16
    2236:	91 1f       	adc	r25, r17
    2238:	fc 01       	movw	r30, r24
    223a:	80 81       	ld	r24, Z
    223c:	91 81       	ldd	r25, Z+1	; 0x01
    223e:	e8 81       	ld	r30, Y
    2240:	f9 81       	ldd	r31, Y+1	; 0x01
    2242:	e0 0f       	add	r30, r16
    2244:	f1 1f       	adc	r31, r17
    2246:	40 81       	ld	r20, Z
    2248:	51 81       	ldd	r21, Z+1	; 0x01
    224a:	ce 84       	ldd	r12, Y+14	; 0x0e
    224c:	df 84       	ldd	r13, Y+15	; 0x0f
    224e:	84 17       	cp	r24, r20
    2250:	95 07       	cpc	r25, r21
    2252:	10 f4       	brcc	.+4      	; 0x2258 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd0>
    2254:	a6 01       	movw	r20, r12
    2256:	04 c0       	rjmp	.+8      	; 0x2260 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd8>
    2258:	4c 0d       	add	r20, r12
    225a:	5d 1d       	adc	r21, r13
    225c:	48 1b       	sub	r20, r24
    225e:	59 0b       	sbc	r21, r25
    2260:	ee 81       	ldd	r30, Y+6	; 0x06
    2262:	ff 81       	ldd	r31, Y+7	; 0x07
    2264:	e0 0f       	add	r30, r16
    2266:	f1 1f       	adc	r31, r17
    2268:	80 81       	ld	r24, Z
    226a:	91 81       	ldd	r25, Z+1	; 0x01
    226c:	ea 81       	ldd	r30, Y+2	; 0x02
    226e:	fb 81       	ldd	r31, Y+3	; 0x03
    2270:	e0 0f       	add	r30, r16
    2272:	f1 1f       	adc	r31, r17
    2274:	20 81       	ld	r18, Z
    2276:	31 81       	ldd	r19, Z+1	; 0x01
    2278:	ce 84       	ldd	r12, Y+14	; 0x0e
    227a:	df 84       	ldd	r13, Y+15	; 0x0f
    227c:	82 17       	cp	r24, r18
    227e:	93 07       	cpc	r25, r19
    2280:	20 f0       	brcs	.+8      	; 0x228a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    2282:	c2 0e       	add	r12, r18
    2284:	d3 1e       	adc	r13, r19
    2286:	c8 1a       	sub	r12, r24
    2288:	d9 0a       	sbc	r13, r25
    228a:	c4 1a       	sub	r12, r20
    228c:	d5 0a       	sbc	r13, r21
    228e:	d1 f0       	breq	.+52     	; 0x22c4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2290:	f5 01       	movw	r30, r10
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	9a 01       	movw	r18, r20
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	50 e0       	ldi	r21, 0x00	; 0
    22a0:	62 1b       	sub	r22, r18
    22a2:	73 0b       	sbc	r23, r19
    22a4:	84 0b       	sbc	r24, r20
    22a6:	95 0b       	sbc	r25, r21
    22a8:	28 ee       	ldi	r18, 0xE8	; 232
    22aa:	33 e0       	ldi	r19, 0x03	; 3
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__mulsi3>
    22b4:	96 01       	movw	r18, r12
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__divmodsi4>
    22be:	37 fd       	sbrc	r19, 7
    22c0:	0a c0       	rjmp	.+20     	; 0x22d6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x14e>
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x140>
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	f3 e0       	ldi	r31, 0x03	; 3
    22ca:	29 3e       	cpi	r18, 0xE9	; 233
    22cc:	3f 07       	cpc	r19, r31
    22ce:	2c f0       	brlt	.+10     	; 0x22da <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    22d0:	28 ee       	ldi	r18, 0xE8	; 232
    22d2:	33 e0       	ldi	r19, 0x03	; 3
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	f5 01       	movw	r30, r10
    22dc:	21 93       	st	Z+, r18
    22de:	31 93       	st	Z+, r19
    22e0:	5f 01       	movw	r10, r30
    22e2:	08 94       	sec
    22e4:	81 1c       	adc	r8, r1
    22e6:	91 1c       	adc	r9, r1
    22e8:	0e 5f       	subi	r16, 0xFE	; 254
    22ea:	1f 4f       	sbci	r17, 0xFF	; 255
    22ec:	88 85       	ldd	r24, Y+8	; 0x08
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	88 16       	cp	r8, r24
    22f2:	99 06       	cpc	r9, r25
    22f4:	0c f4       	brge	.+2      	; 0x22f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    22f6:	80 cf       	rjmp	.-256    	; 0x21f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x70>
    22f8:	df 91       	pop	r29
    22fa:	cf 91       	pop	r28
    22fc:	1f 91       	pop	r17
    22fe:	0f 91       	pop	r16
    2300:	ff 90       	pop	r15
    2302:	df 90       	pop	r13
    2304:	cf 90       	pop	r12
    2306:	bf 90       	pop	r11
    2308:	af 90       	pop	r10
    230a:	9f 90       	pop	r9
    230c:	8f 90       	pop	r8
    230e:	08 95       	ret

00002310 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2310:	a5 e0       	ldi	r26, 0x05	; 5
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	ee e8       	ldi	r30, 0x8E	; 142
    2316:	f1 e1       	ldi	r31, 0x11	; 17
    2318:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__prologue_saves__>
    231c:	4c 01       	movw	r8, r24
    231e:	c6 2e       	mov	r12, r22
    2320:	e7 2e       	mov	r14, r23
    2322:	2d 83       	std	Y+5, r18	; 0x05
    2324:	0e 94 c4 10 	call	0x2188	; 0x2188 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2328:	d4 01       	movw	r26, r8
    232a:	18 96       	adiw	r26, 0x08	; 8
    232c:	4c 90       	ld	r4, X
    232e:	18 97       	sbiw	r26, 0x08	; 8
    2330:	de 2c       	mov	r13, r14
    2332:	64 2d       	mov	r22, r4
    2334:	70 e0       	ldi	r23, 0x00	; 0
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	28 ee       	ldi	r18, 0xE8	; 232
    233c:	33 e0       	ldi	r19, 0x03	; 3
    233e:	40 e0       	ldi	r20, 0x00	; 0
    2340:	50 e0       	ldi	r21, 0x00	; 0
    2342:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__mulsi3>
    2346:	69 83       	std	Y+1, r22	; 0x01
    2348:	7a 83       	std	Y+2, r23	; 0x02
    234a:	8b 83       	std	Y+3, r24	; 0x03
    234c:	9c 83       	std	Y+4, r25	; 0x04
    234e:	ee 24       	eor	r14, r14
    2350:	ff 24       	eor	r15, r15
    2352:	87 01       	movw	r16, r14
    2354:	66 24       	eor	r6, r6
    2356:	77 24       	eor	r7, r7
    2358:	88 24       	eor	r8, r8
    235a:	99 24       	eor	r9, r9
    235c:	54 01       	movw	r10, r8
    235e:	55 24       	eor	r5, r5
    2360:	36 c0       	rjmp	.+108    	; 0x23ce <_ZN16PololuQTRSensors8readLineEPjhh+0xbe>
    2362:	f6 01       	movw	r30, r12
    2364:	30 81       	ld	r19, Z
    2366:	21 81       	ldd	r18, Z+1	; 0x01
    2368:	42 e0       	ldi	r20, 0x02	; 2
    236a:	24 2e       	mov	r2, r20
    236c:	31 2c       	mov	r3, r1
    236e:	c2 0c       	add	r12, r2
    2370:	d3 1c       	adc	r13, r3
    2372:	c9 01       	movw	r24, r18
    2374:	49 2f       	mov	r20, r25
    2376:	58 2f       	mov	r21, r24
    2378:	1a 01       	movw	r2, r20
    237a:	2d 81       	ldd	r18, Y+5	; 0x05
    237c:	22 23       	and	r18, r18
    237e:	29 f0       	breq	.+10     	; 0x238a <_ZN16PololuQTRSensors8readLineEPjhh+0x7a>
    2380:	88 ee       	ldi	r24, 0xE8	; 232
    2382:	93 e0       	ldi	r25, 0x03	; 3
    2384:	82 19       	sub	r24, r2
    2386:	93 09       	sbc	r25, r3
    2388:	1c 01       	movw	r2, r24
    238a:	99 ec       	ldi	r25, 0xC9	; 201
    238c:	29 16       	cp	r2, r25
    238e:	31 04       	cpc	r3, r1
    2390:	2c f4       	brge	.+10     	; 0x239c <_ZN16PololuQTRSensors8readLineEPjhh+0x8c>
    2392:	a3 e3       	ldi	r26, 0x33	; 51
    2394:	2a 16       	cp	r2, r26
    2396:	31 04       	cpc	r3, r1
    2398:	94 f0       	brlt	.+36     	; 0x23be <_ZN16PololuQTRSensors8readLineEPjhh+0xae>
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <_ZN16PololuQTRSensors8readLineEPjhh+0x90>
    239c:	55 24       	eor	r5, r5
    239e:	53 94       	inc	r5
    23a0:	b1 01       	movw	r22, r2
    23a2:	88 27       	eor	r24, r24
    23a4:	77 fd       	sbrc	r23, 7
    23a6:	80 95       	com	r24
    23a8:	98 2f       	mov	r25, r24
    23aa:	a8 01       	movw	r20, r16
    23ac:	97 01       	movw	r18, r14
    23ae:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__mulsi3>
    23b2:	86 0e       	add	r8, r22
    23b4:	97 1e       	adc	r9, r23
    23b6:	a8 1e       	adc	r10, r24
    23b8:	b9 1e       	adc	r11, r25
    23ba:	62 0c       	add	r6, r2
    23bc:	73 1c       	adc	r7, r3
    23be:	88 ee       	ldi	r24, 0xE8	; 232
    23c0:	93 e0       	ldi	r25, 0x03	; 3
    23c2:	a0 e0       	ldi	r26, 0x00	; 0
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e8 0e       	add	r14, r24
    23c8:	f9 1e       	adc	r15, r25
    23ca:	0a 1f       	adc	r16, r26
    23cc:	1b 1f       	adc	r17, r27
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	9a 81       	ldd	r25, Y+2	; 0x02
    23d2:	ab 81       	ldd	r26, Y+3	; 0x03
    23d4:	bc 81       	ldd	r27, Y+4	; 0x04
    23d6:	e8 16       	cp	r14, r24
    23d8:	f9 06       	cpc	r15, r25
    23da:	0a 07       	cpc	r16, r26
    23dc:	1b 07       	cpc	r17, r27
    23de:	09 f6       	brne	.-126    	; 0x2362 <_ZN16PololuQTRSensors8readLineEPjhh+0x52>
    23e0:	55 20       	and	r5, r5
    23e2:	f1 f4       	brne	.+60     	; 0x2420 <_ZN16PololuQTRSensors8readLineEPjhh+0x110>
    23e4:	55 24       	eor	r5, r5
    23e6:	08 94       	sec
    23e8:	41 08       	sbc	r4, r1
    23ea:	51 08       	sbc	r5, r1
    23ec:	24 ef       	ldi	r18, 0xF4	; 244
    23ee:	31 e0       	ldi	r19, 0x01	; 1
    23f0:	42 9e       	mul	r4, r18
    23f2:	c0 01       	movw	r24, r0
    23f4:	43 9e       	mul	r4, r19
    23f6:	90 0d       	add	r25, r0
    23f8:	52 9e       	mul	r5, r18
    23fa:	90 0d       	add	r25, r0
    23fc:	11 24       	eor	r1, r1
    23fe:	20 91 b9 01 	lds	r18, 0x01B9
    2402:	30 91 ba 01 	lds	r19, 0x01BA
    2406:	28 17       	cp	r18, r24
    2408:	39 07       	cpc	r19, r25
    240a:	b4 f0       	brlt	.+44     	; 0x2438 <_ZN16PololuQTRSensors8readLineEPjhh+0x128>
    240c:	88 ee       	ldi	r24, 0xE8	; 232
    240e:	93 e0       	ldi	r25, 0x03	; 3
    2410:	48 9e       	mul	r4, r24
    2412:	90 01       	movw	r18, r0
    2414:	49 9e       	mul	r4, r25
    2416:	30 0d       	add	r19, r0
    2418:	58 9e       	mul	r5, r24
    241a:	30 0d       	add	r19, r0
    241c:	11 24       	eor	r1, r1
    241e:	0e c0       	rjmp	.+28     	; 0x243c <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    2420:	93 01       	movw	r18, r6
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	c5 01       	movw	r24, r10
    2428:	b4 01       	movw	r22, r8
    242a:	0e 94 b0 13 	call	0x2760	; 0x2760 <__udivmodsi4>
    242e:	20 93 b9 01 	sts	0x01B9, r18
    2432:	30 93 ba 01 	sts	0x01BA, r19
    2436:	02 c0       	rjmp	.+4      	; 0x243c <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	c9 01       	movw	r24, r18
    243e:	25 96       	adiw	r28, 0x05	; 5
    2440:	e2 e1       	ldi	r30, 0x12	; 18
    2442:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__epilogue_restores__>

00002446 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    2446:	a7 e6       	ldi	r26, 0x67	; 103
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e9 e2       	ldi	r30, 0x29	; 41
    244c:	f2 e1       	ldi	r31, 0x12	; 18
    244e:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__prologue_saves__>
    2452:	8c 01       	movw	r16, r24
    2454:	4b 01       	movw	r8, r22
    2456:	6a 01       	movw	r12, r20
    2458:	a6 96       	adiw	r28, 0x26	; 38
    245a:	2f af       	std	Y+63, r18	; 0x3f
    245c:	a6 97       	sbiw	r28, 0x26	; 38
    245e:	da 01       	movw	r26, r20
    2460:	8d 91       	ld	r24, X+
    2462:	9c 91       	ld	r25, X
    2464:	11 97       	sbiw	r26, 0x01	; 1
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	e9 f4       	brne	.+58     	; 0x24a4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x5e>
    246a:	f8 01       	movw	r30, r16
    246c:	80 85       	ldd	r24, Z+8	; 0x08
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	88 0f       	add	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	0e 94 48 14 	call	0x2890	; 0x2890 <malloc>
    2478:	d6 01       	movw	r26, r12
    247a:	11 96       	adiw	r26, 0x01	; 1
    247c:	9c 93       	st	X, r25
    247e:	8e 93       	st	-X, r24
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	09 f4       	brne	.+2      	; 0x2486 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x40>
    2484:	e2 c0       	rjmp	.+452    	; 0x264a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    2486:	fc 01       	movw	r30, r24
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	03 c0       	rjmp	.+6      	; 0x2494 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x4e>
    248e:	11 92       	st	Z+, r1
    2490:	11 92       	st	Z+, r1
    2492:	01 96       	adiw	r24, 0x01	; 1
    2494:	d8 01       	movw	r26, r16
    2496:	18 96       	adiw	r26, 0x08	; 8
    2498:	2c 91       	ld	r18, X
    249a:	18 97       	sbiw	r26, 0x08	; 8
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	82 17       	cp	r24, r18
    24a0:	93 07       	cpc	r25, r19
    24a2:	ac f3       	brlt	.-22     	; 0x248e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x48>
    24a4:	f4 01       	movw	r30, r8
    24a6:	80 81       	ld	r24, Z
    24a8:	91 81       	ldd	r25, Z+1	; 0x01
    24aa:	00 97       	sbiw	r24, 0x00	; 0
    24ac:	89 f0       	breq	.+34     	; 0x24d0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8a>
    24ae:	ee 24       	eor	r14, r14
    24b0:	ff 24       	eor	r15, r15
    24b2:	5e 01       	movw	r10, r28
    24b4:	08 94       	sec
    24b6:	a1 1c       	adc	r10, r1
    24b8:	b1 1c       	adc	r11, r1
    24ba:	b1 e4       	ldi	r27, 0x41	; 65
    24bc:	6b 2e       	mov	r6, r27
    24be:	71 2c       	mov	r7, r1
    24c0:	6c 0e       	add	r6, r28
    24c2:	7d 1e       	adc	r7, r29
    24c4:	a1 e2       	ldi	r26, 0x21	; 33
    24c6:	4a 2e       	mov	r4, r26
    24c8:	51 2c       	mov	r5, r1
    24ca:	4c 0e       	add	r4, r28
    24cc:	5d 1e       	adc	r5, r29
    24ce:	23 c0       	rjmp	.+70     	; 0x2516 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    24d0:	d8 01       	movw	r26, r16
    24d2:	18 96       	adiw	r26, 0x08	; 8
    24d4:	8c 91       	ld	r24, X
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	0e 94 48 14 	call	0x2890	; 0x2890 <malloc>
    24e0:	f4 01       	movw	r30, r8
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	09 f4       	brne	.+2      	; 0x24ec <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xa6>
    24ea:	af c0       	rjmp	.+350    	; 0x264a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    24ec:	fc 01       	movw	r30, r24
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	d8 01       	movw	r26, r16
    24f4:	07 c0       	rjmp	.+14     	; 0x2504 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xbe>
    24f6:	1e 96       	adiw	r26, 0x0e	; 14
    24f8:	2d 91       	ld	r18, X+
    24fa:	3c 91       	ld	r19, X
    24fc:	1f 97       	sbiw	r26, 0x0f	; 15
    24fe:	21 93       	st	Z+, r18
    2500:	31 93       	st	Z+, r19
    2502:	01 96       	adiw	r24, 0x01	; 1
    2504:	18 96       	adiw	r26, 0x08	; 8
    2506:	2c 91       	ld	r18, X
    2508:	18 97       	sbiw	r26, 0x08	; 8
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	82 17       	cp	r24, r18
    250e:	93 07       	cpc	r25, r19
    2510:	94 f3       	brlt	.-28     	; 0x24f6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb0>
    2512:	8d 01       	movw	r16, r26
    2514:	cc cf       	rjmp	.-104    	; 0x24ae <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x68>
    2516:	c8 01       	movw	r24, r16
    2518:	b5 01       	movw	r22, r10
    251a:	a6 96       	adiw	r28, 0x26	; 38
    251c:	4f ad       	ldd	r20, Y+63	; 0x3f
    251e:	a6 97       	sbiw	r28, 0x26	; 38
    2520:	0e 94 65 10 	call	0x20ca	; 0x20ca <_ZN16PololuQTRSensors4readEPjh>
    2524:	d8 01       	movw	r26, r16
    2526:	18 96       	adiw	r26, 0x08	; 8
    2528:	8c 91       	ld	r24, X
    252a:	18 97       	sbiw	r26, 0x08	; 8
    252c:	e8 2f       	mov	r30, r24
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	a5 96       	adiw	r28, 0x25	; 37
    2532:	ff af       	std	Y+63, r31	; 0x3f
    2534:	ee af       	std	Y+62, r30	; 0x3e
    2536:	a5 97       	sbiw	r28, 0x25	; 37
    2538:	13 01       	movw	r2, r6
    253a:	f5 01       	movw	r30, r10
    253c:	a3 96       	adiw	r28, 0x23	; 35
    253e:	5f ae       	std	Y+63, r5	; 0x3f
    2540:	4e ae       	std	Y+62, r4	; 0x3e
    2542:	a3 97       	sbiw	r28, 0x23	; 35
    2544:	93 01       	movw	r18, r6
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	50 e0       	ldi	r21, 0x00	; 0
    254a:	a8 96       	adiw	r28, 0x28	; 40
    254c:	5f ae       	std	Y+63, r5	; 0x3f
    254e:	4e ae       	std	Y+62, r4	; 0x3e
    2550:	a8 97       	sbiw	r28, 0x28	; 40
    2552:	37 c0       	rjmp	.+110    	; 0x25c2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17c>
    2554:	e1 14       	cp	r14, r1
    2556:	f1 04       	cpc	r15, r1
    2558:	61 f0       	breq	.+24     	; 0x2572 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x12c>
    255a:	a8 96       	adiw	r28, 0x28	; 40
    255c:	ae ad       	ldd	r26, Y+62	; 0x3e
    255e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2560:	a8 97       	sbiw	r28, 0x28	; 40
    2562:	6d 91       	ld	r22, X+
    2564:	7c 91       	ld	r23, X
    2566:	11 97       	sbiw	r26, 0x01	; 1
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	68 17       	cp	r22, r24
    256e:	79 07       	cpc	r23, r25
    2570:	60 f4       	brcc	.+24     	; 0x258a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x144>
    2572:	80 81       	ld	r24, Z
    2574:	91 81       	ldd	r25, Z+1	; 0x01
    2576:	a8 96       	adiw	r28, 0x28	; 40
    2578:	ae ad       	ldd	r26, Y+62	; 0x3e
    257a:	bf ad       	ldd	r27, Y+63	; 0x3f
    257c:	a8 97       	sbiw	r28, 0x28	; 40
    257e:	11 96       	adiw	r26, 0x01	; 1
    2580:	9c 93       	st	X, r25
    2582:	8e 93       	st	-X, r24
    2584:	e1 14       	cp	r14, r1
    2586:	f1 04       	cpc	r15, r1
    2588:	49 f0       	breq	.+18     	; 0x259c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x156>
    258a:	d9 01       	movw	r26, r18
    258c:	6d 91       	ld	r22, X+
    258e:	7c 91       	ld	r23, X
    2590:	11 97       	sbiw	r26, 0x01	; 1
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	86 17       	cp	r24, r22
    2598:	97 07       	cpc	r25, r23
    259a:	28 f4       	brcc	.+10     	; 0x25a6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x160>
    259c:	80 81       	ld	r24, Z
    259e:	91 81       	ldd	r25, Z+1	; 0x01
    25a0:	d9 01       	movw	r26, r18
    25a2:	8d 93       	st	X+, r24
    25a4:	9c 93       	st	X, r25
    25a6:	4f 5f       	subi	r20, 0xFF	; 255
    25a8:	5f 4f       	sbci	r21, 0xFF	; 255
    25aa:	2e 5f       	subi	r18, 0xFE	; 254
    25ac:	3f 4f       	sbci	r19, 0xFF	; 255
    25ae:	32 96       	adiw	r30, 0x02	; 2
    25b0:	a8 96       	adiw	r28, 0x28	; 40
    25b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    25b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    25b6:	a8 97       	sbiw	r28, 0x28	; 40
    25b8:	02 96       	adiw	r24, 0x02	; 2
    25ba:	a8 96       	adiw	r28, 0x28	; 40
    25bc:	9f af       	std	Y+63, r25	; 0x3f
    25be:	8e af       	std	Y+62, r24	; 0x3e
    25c0:	a8 97       	sbiw	r28, 0x28	; 40
    25c2:	a5 96       	adiw	r28, 0x25	; 37
    25c4:	ae ad       	ldd	r26, Y+62	; 0x3e
    25c6:	bf ad       	ldd	r27, Y+63	; 0x3f
    25c8:	a5 97       	sbiw	r28, 0x25	; 37
    25ca:	4a 17       	cp	r20, r26
    25cc:	5b 07       	cpc	r21, r27
    25ce:	14 f2       	brlt	.-124    	; 0x2554 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x10e>
    25d0:	08 94       	sec
    25d2:	e1 1c       	adc	r14, r1
    25d4:	f1 1c       	adc	r15, r1
    25d6:	ba e0       	ldi	r27, 0x0A	; 10
    25d8:	eb 16       	cp	r14, r27
    25da:	f1 04       	cpc	r15, r1
    25dc:	09 f0       	breq	.+2      	; 0x25e0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x19a>
    25de:	9b cf       	rjmp	.-202    	; 0x2516 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	2c c0       	rjmp	.+88     	; 0x263e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f8>
    25e6:	f1 01       	movw	r30, r2
    25e8:	41 91       	ld	r20, Z+
    25ea:	51 91       	ld	r21, Z+
    25ec:	1f 01       	movw	r2, r30
    25ee:	bc 01       	movw	r22, r24
    25f0:	66 0f       	add	r22, r22
    25f2:	77 1f       	adc	r23, r23
    25f4:	d6 01       	movw	r26, r12
    25f6:	ed 91       	ld	r30, X+
    25f8:	fc 91       	ld	r31, X
    25fa:	11 97       	sbiw	r26, 0x01	; 1
    25fc:	e6 0f       	add	r30, r22
    25fe:	f7 1f       	adc	r31, r23
    2600:	20 81       	ld	r18, Z
    2602:	31 81       	ldd	r19, Z+1	; 0x01
    2604:	24 17       	cp	r18, r20
    2606:	35 07       	cpc	r19, r21
    2608:	10 f4       	brcc	.+4      	; 0x260e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1c8>
    260a:	51 83       	std	Z+1, r21	; 0x01
    260c:	40 83       	st	Z, r20
    260e:	a3 96       	adiw	r28, 0x23	; 35
    2610:	ee ad       	ldd	r30, Y+62	; 0x3e
    2612:	ff ad       	ldd	r31, Y+63	; 0x3f
    2614:	a3 97       	sbiw	r28, 0x23	; 35
    2616:	41 91       	ld	r20, Z+
    2618:	51 91       	ld	r21, Z+
    261a:	a3 96       	adiw	r28, 0x23	; 35
    261c:	ff af       	std	Y+63, r31	; 0x3f
    261e:	ee af       	std	Y+62, r30	; 0x3e
    2620:	a3 97       	sbiw	r28, 0x23	; 35
    2622:	d4 01       	movw	r26, r8
    2624:	ed 91       	ld	r30, X+
    2626:	fc 91       	ld	r31, X
    2628:	11 97       	sbiw	r26, 0x01	; 1
    262a:	e6 0f       	add	r30, r22
    262c:	f7 1f       	adc	r31, r23
    262e:	20 81       	ld	r18, Z
    2630:	31 81       	ldd	r19, Z+1	; 0x01
    2632:	42 17       	cp	r20, r18
    2634:	53 07       	cpc	r21, r19
    2636:	10 f4       	brcc	.+4      	; 0x263c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f6>
    2638:	51 83       	std	Z+1, r21	; 0x01
    263a:	40 83       	st	Z, r20
    263c:	01 96       	adiw	r24, 0x01	; 1
    263e:	f8 01       	movw	r30, r16
    2640:	20 85       	ldd	r18, Z+8	; 0x08
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	82 17       	cp	r24, r18
    2646:	93 07       	cpc	r25, r19
    2648:	74 f2       	brlt	.-100    	; 0x25e6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1a0>
    264a:	c9 59       	subi	r28, 0x99	; 153
    264c:	df 4f       	sbci	r29, 0xFF	; 255
    264e:	e2 e1       	ldi	r30, 0x12	; 18
    2650:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__epilogue_restores__>

00002654 <_ZN16PololuQTRSensors9calibrateEh>:
    2654:	1f 93       	push	r17
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	ec 01       	movw	r28, r24
    265c:	16 2f       	mov	r17, r22
    265e:	86 2f       	mov	r24, r22
    2660:	81 50       	subi	r24, 0x01	; 1
    2662:	82 30       	cpi	r24, 0x02	; 2
    2664:	58 f4       	brcc	.+22     	; 0x267c <_ZN16PololuQTRSensors9calibrateEh+0x28>
    2666:	ae 01       	movw	r20, r28
    2668:	4e 5f       	subi	r20, 0xFE	; 254
    266a:	5f 4f       	sbci	r21, 0xFF	; 255
    266c:	ce 01       	movw	r24, r28
    266e:	be 01       	movw	r22, r28
    2670:	21 e0       	ldi	r18, 0x01	; 1
    2672:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2676:	12 30       	cpi	r17, 0x02	; 2
    2678:	19 f0       	breq	.+6      	; 0x2680 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    267a:	0c c0       	rjmp	.+24     	; 0x2694 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    267c:	66 23       	and	r22, r22
    267e:	51 f4       	brne	.+20     	; 0x2694 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2680:	be 01       	movw	r22, r28
    2682:	6c 5f       	subi	r22, 0xFC	; 252
    2684:	7f 4f       	sbci	r23, 0xFF	; 255
    2686:	ae 01       	movw	r20, r28
    2688:	4a 5f       	subi	r20, 0xFA	; 250
    268a:	5f 4f       	sbci	r21, 0xFF	; 255
    268c:	ce 01       	movw	r24, r28
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	1f 91       	pop	r17
    269a:	08 95       	ret

0000269c <_ZN16PololuQTRSensorsD1Ev>:
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	ec 01       	movw	r28, r24
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	9b 81       	ldd	r25, Y+3	; 0x03
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	11 f0       	breq	.+4      	; 0x26ae <_ZN16PololuQTRSensorsD1Ev+0x12>
    26aa:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <free>
    26ae:	8e 81       	ldd	r24, Y+6	; 0x06
    26b0:	9f 81       	ldd	r25, Y+7	; 0x07
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	11 f0       	breq	.+4      	; 0x26ba <_ZN16PololuQTRSensorsD1Ev+0x1e>
    26b6:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <free>
    26ba:	88 81       	ld	r24, Y
    26bc:	99 81       	ldd	r25, Y+1	; 0x01
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	11 f0       	breq	.+4      	; 0x26c6 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    26c2:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <free>
    26c6:	8c 81       	ldd	r24, Y+4	; 0x04
    26c8:	9d 81       	ldd	r25, Y+5	; 0x05
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	11 f0       	breq	.+4      	; 0x26d2 <_ZN16PololuQTRSensorsD1Ev+0x36>
    26ce:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <free>
    26d2:	df 91       	pop	r29
    26d4:	cf 91       	pop	r28
    26d6:	08 95       	ret

000026d8 <__mulsi3>:
    26d8:	db 01       	movw	r26, r22
    26da:	8f 93       	push	r24
    26dc:	9f 93       	push	r25
    26de:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__muluhisi3>
    26e2:	bf 91       	pop	r27
    26e4:	af 91       	pop	r26
    26e6:	a2 9f       	mul	r26, r18
    26e8:	80 0d       	add	r24, r0
    26ea:	91 1d       	adc	r25, r1
    26ec:	a3 9f       	mul	r26, r19
    26ee:	90 0d       	add	r25, r0
    26f0:	b2 9f       	mul	r27, r18
    26f2:	90 0d       	add	r25, r0
    26f4:	11 24       	eor	r1, r1
    26f6:	08 95       	ret

000026f8 <__udivmodqi4>:
    26f8:	99 1b       	sub	r25, r25
    26fa:	79 e0       	ldi	r23, 0x09	; 9
    26fc:	04 c0       	rjmp	.+8      	; 0x2706 <__udivmodqi4_ep>

000026fe <__udivmodqi4_loop>:
    26fe:	99 1f       	adc	r25, r25
    2700:	96 17       	cp	r25, r22
    2702:	08 f0       	brcs	.+2      	; 0x2706 <__udivmodqi4_ep>
    2704:	96 1b       	sub	r25, r22

00002706 <__udivmodqi4_ep>:
    2706:	88 1f       	adc	r24, r24
    2708:	7a 95       	dec	r23
    270a:	c9 f7       	brne	.-14     	; 0x26fe <__udivmodqi4_loop>
    270c:	80 95       	com	r24
    270e:	08 95       	ret

00002710 <__udivmodhi4>:
    2710:	aa 1b       	sub	r26, r26
    2712:	bb 1b       	sub	r27, r27
    2714:	51 e1       	ldi	r21, 0x11	; 17
    2716:	07 c0       	rjmp	.+14     	; 0x2726 <__udivmodhi4_ep>

00002718 <__udivmodhi4_loop>:
    2718:	aa 1f       	adc	r26, r26
    271a:	bb 1f       	adc	r27, r27
    271c:	a6 17       	cp	r26, r22
    271e:	b7 07       	cpc	r27, r23
    2720:	10 f0       	brcs	.+4      	; 0x2726 <__udivmodhi4_ep>
    2722:	a6 1b       	sub	r26, r22
    2724:	b7 0b       	sbc	r27, r23

00002726 <__udivmodhi4_ep>:
    2726:	88 1f       	adc	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	5a 95       	dec	r21
    272c:	a9 f7       	brne	.-22     	; 0x2718 <__udivmodhi4_loop>
    272e:	80 95       	com	r24
    2730:	90 95       	com	r25
    2732:	bc 01       	movw	r22, r24
    2734:	cd 01       	movw	r24, r26
    2736:	08 95       	ret

00002738 <__divmodhi4>:
    2738:	97 fb       	bst	r25, 7
    273a:	07 2e       	mov	r0, r23
    273c:	16 f4       	brtc	.+4      	; 0x2742 <__divmodhi4+0xa>
    273e:	00 94       	com	r0
    2740:	07 d0       	rcall	.+14     	; 0x2750 <__divmodhi4_neg1>
    2742:	77 fd       	sbrc	r23, 7
    2744:	09 d0       	rcall	.+18     	; 0x2758 <__divmodhi4_neg2>
    2746:	0e 94 88 13 	call	0x2710	; 0x2710 <__udivmodhi4>
    274a:	07 fc       	sbrc	r0, 7
    274c:	05 d0       	rcall	.+10     	; 0x2758 <__divmodhi4_neg2>
    274e:	3e f4       	brtc	.+14     	; 0x275e <__divmodhi4_exit>

00002750 <__divmodhi4_neg1>:
    2750:	90 95       	com	r25
    2752:	81 95       	neg	r24
    2754:	9f 4f       	sbci	r25, 0xFF	; 255
    2756:	08 95       	ret

00002758 <__divmodhi4_neg2>:
    2758:	70 95       	com	r23
    275a:	61 95       	neg	r22
    275c:	7f 4f       	sbci	r23, 0xFF	; 255

0000275e <__divmodhi4_exit>:
    275e:	08 95       	ret

00002760 <__udivmodsi4>:
    2760:	a1 e2       	ldi	r26, 0x21	; 33
    2762:	1a 2e       	mov	r1, r26
    2764:	aa 1b       	sub	r26, r26
    2766:	bb 1b       	sub	r27, r27
    2768:	fd 01       	movw	r30, r26
    276a:	0d c0       	rjmp	.+26     	; 0x2786 <__udivmodsi4_ep>

0000276c <__udivmodsi4_loop>:
    276c:	aa 1f       	adc	r26, r26
    276e:	bb 1f       	adc	r27, r27
    2770:	ee 1f       	adc	r30, r30
    2772:	ff 1f       	adc	r31, r31
    2774:	a2 17       	cp	r26, r18
    2776:	b3 07       	cpc	r27, r19
    2778:	e4 07       	cpc	r30, r20
    277a:	f5 07       	cpc	r31, r21
    277c:	20 f0       	brcs	.+8      	; 0x2786 <__udivmodsi4_ep>
    277e:	a2 1b       	sub	r26, r18
    2780:	b3 0b       	sbc	r27, r19
    2782:	e4 0b       	sbc	r30, r20
    2784:	f5 0b       	sbc	r31, r21

00002786 <__udivmodsi4_ep>:
    2786:	66 1f       	adc	r22, r22
    2788:	77 1f       	adc	r23, r23
    278a:	88 1f       	adc	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	1a 94       	dec	r1
    2790:	69 f7       	brne	.-38     	; 0x276c <__udivmodsi4_loop>
    2792:	60 95       	com	r22
    2794:	70 95       	com	r23
    2796:	80 95       	com	r24
    2798:	90 95       	com	r25
    279a:	9b 01       	movw	r18, r22
    279c:	ac 01       	movw	r20, r24
    279e:	bd 01       	movw	r22, r26
    27a0:	cf 01       	movw	r24, r30
    27a2:	08 95       	ret

000027a4 <__divmodsi4>:
    27a4:	05 2e       	mov	r0, r21
    27a6:	97 fb       	bst	r25, 7
    27a8:	1e f4       	brtc	.+6      	; 0x27b0 <__divmodsi4+0xc>
    27aa:	00 94       	com	r0
    27ac:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__negsi2>
    27b0:	57 fd       	sbrc	r21, 7
    27b2:	07 d0       	rcall	.+14     	; 0x27c2 <__divmodsi4_neg2>
    27b4:	0e 94 b0 13 	call	0x2760	; 0x2760 <__udivmodsi4>
    27b8:	07 fc       	sbrc	r0, 7
    27ba:	03 d0       	rcall	.+6      	; 0x27c2 <__divmodsi4_neg2>
    27bc:	4e f4       	brtc	.+18     	; 0x27d0 <__divmodsi4_exit>
    27be:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__negsi2>

000027c2 <__divmodsi4_neg2>:
    27c2:	50 95       	com	r21
    27c4:	40 95       	com	r20
    27c6:	30 95       	com	r19
    27c8:	21 95       	neg	r18
    27ca:	3f 4f       	sbci	r19, 0xFF	; 255
    27cc:	4f 4f       	sbci	r20, 0xFF	; 255
    27ce:	5f 4f       	sbci	r21, 0xFF	; 255

000027d0 <__divmodsi4_exit>:
    27d0:	08 95       	ret

000027d2 <__negsi2>:
    27d2:	90 95       	com	r25
    27d4:	80 95       	com	r24
    27d6:	70 95       	com	r23
    27d8:	61 95       	neg	r22
    27da:	7f 4f       	sbci	r23, 0xFF	; 255
    27dc:	8f 4f       	sbci	r24, 0xFF	; 255
    27de:	9f 4f       	sbci	r25, 0xFF	; 255
    27e0:	08 95       	ret

000027e2 <__muluhisi3>:
    27e2:	0e 94 39 14 	call	0x2872	; 0x2872 <__umulhisi3>
    27e6:	a5 9f       	mul	r26, r21
    27e8:	90 0d       	add	r25, r0
    27ea:	b4 9f       	mul	r27, r20
    27ec:	90 0d       	add	r25, r0
    27ee:	a4 9f       	mul	r26, r20
    27f0:	80 0d       	add	r24, r0
    27f2:	91 1d       	adc	r25, r1
    27f4:	11 24       	eor	r1, r1
    27f6:	08 95       	ret

000027f8 <__prologue_saves__>:
    27f8:	2f 92       	push	r2
    27fa:	3f 92       	push	r3
    27fc:	4f 92       	push	r4
    27fe:	5f 92       	push	r5
    2800:	6f 92       	push	r6
    2802:	7f 92       	push	r7
    2804:	8f 92       	push	r8
    2806:	9f 92       	push	r9
    2808:	af 92       	push	r10
    280a:	bf 92       	push	r11
    280c:	cf 92       	push	r12
    280e:	df 92       	push	r13
    2810:	ef 92       	push	r14
    2812:	ff 92       	push	r15
    2814:	0f 93       	push	r16
    2816:	1f 93       	push	r17
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	ca 1b       	sub	r28, r26
    2822:	db 0b       	sbc	r29, r27
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	09 94       	ijmp

00002830 <__epilogue_restores__>:
    2830:	2a 88       	ldd	r2, Y+18	; 0x12
    2832:	39 88       	ldd	r3, Y+17	; 0x11
    2834:	48 88       	ldd	r4, Y+16	; 0x10
    2836:	5f 84       	ldd	r5, Y+15	; 0x0f
    2838:	6e 84       	ldd	r6, Y+14	; 0x0e
    283a:	7d 84       	ldd	r7, Y+13	; 0x0d
    283c:	8c 84       	ldd	r8, Y+12	; 0x0c
    283e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2840:	aa 84       	ldd	r10, Y+10	; 0x0a
    2842:	b9 84       	ldd	r11, Y+9	; 0x09
    2844:	c8 84       	ldd	r12, Y+8	; 0x08
    2846:	df 80       	ldd	r13, Y+7	; 0x07
    2848:	ee 80       	ldd	r14, Y+6	; 0x06
    284a:	fd 80       	ldd	r15, Y+5	; 0x05
    284c:	0c 81       	ldd	r16, Y+4	; 0x04
    284e:	1b 81       	ldd	r17, Y+3	; 0x03
    2850:	aa 81       	ldd	r26, Y+2	; 0x02
    2852:	b9 81       	ldd	r27, Y+1	; 0x01
    2854:	ce 0f       	add	r28, r30
    2856:	d1 1d       	adc	r29, r1
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	ed 01       	movw	r28, r26
    2864:	08 95       	ret

00002866 <__tablejump2__>:
    2866:	ee 0f       	add	r30, r30
    2868:	ff 1f       	adc	r31, r31

0000286a <__tablejump__>:
    286a:	05 90       	lpm	r0, Z+
    286c:	f4 91       	lpm	r31, Z
    286e:	e0 2d       	mov	r30, r0
    2870:	09 94       	ijmp

00002872 <__umulhisi3>:
    2872:	a2 9f       	mul	r26, r18
    2874:	b0 01       	movw	r22, r0
    2876:	b3 9f       	mul	r27, r19
    2878:	c0 01       	movw	r24, r0
    287a:	a3 9f       	mul	r26, r19
    287c:	70 0d       	add	r23, r0
    287e:	81 1d       	adc	r24, r1
    2880:	11 24       	eor	r1, r1
    2882:	91 1d       	adc	r25, r1
    2884:	b2 9f       	mul	r27, r18
    2886:	70 0d       	add	r23, r0
    2888:	81 1d       	adc	r24, r1
    288a:	11 24       	eor	r1, r1
    288c:	91 1d       	adc	r25, r1
    288e:	08 95       	ret

00002890 <malloc>:
    2890:	cf 93       	push	r28
    2892:	df 93       	push	r29
    2894:	82 30       	cpi	r24, 0x02	; 2
    2896:	91 05       	cpc	r25, r1
    2898:	10 f4       	brcc	.+4      	; 0x289e <malloc+0xe>
    289a:	82 e0       	ldi	r24, 0x02	; 2
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	e0 91 b5 03 	lds	r30, 0x03B5
    28a2:	f0 91 b6 03 	lds	r31, 0x03B6
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	a0 e0       	ldi	r26, 0x00	; 0
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	30 97       	sbiw	r30, 0x00	; 0
    28b0:	39 f1       	breq	.+78     	; 0x2900 <malloc+0x70>
    28b2:	40 81       	ld	r20, Z
    28b4:	51 81       	ldd	r21, Z+1	; 0x01
    28b6:	48 17       	cp	r20, r24
    28b8:	59 07       	cpc	r21, r25
    28ba:	b8 f0       	brcs	.+46     	; 0x28ea <malloc+0x5a>
    28bc:	48 17       	cp	r20, r24
    28be:	59 07       	cpc	r21, r25
    28c0:	71 f4       	brne	.+28     	; 0x28de <malloc+0x4e>
    28c2:	82 81       	ldd	r24, Z+2	; 0x02
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	10 97       	sbiw	r26, 0x00	; 0
    28c8:	29 f0       	breq	.+10     	; 0x28d4 <malloc+0x44>
    28ca:	13 96       	adiw	r26, 0x03	; 3
    28cc:	9c 93       	st	X, r25
    28ce:	8e 93       	st	-X, r24
    28d0:	12 97       	sbiw	r26, 0x02	; 2
    28d2:	2c c0       	rjmp	.+88     	; 0x292c <malloc+0x9c>
    28d4:	90 93 b6 03 	sts	0x03B6, r25
    28d8:	80 93 b5 03 	sts	0x03B5, r24
    28dc:	27 c0       	rjmp	.+78     	; 0x292c <malloc+0x9c>
    28de:	21 15       	cp	r18, r1
    28e0:	31 05       	cpc	r19, r1
    28e2:	31 f0       	breq	.+12     	; 0x28f0 <malloc+0x60>
    28e4:	42 17       	cp	r20, r18
    28e6:	53 07       	cpc	r21, r19
    28e8:	18 f0       	brcs	.+6      	; 0x28f0 <malloc+0x60>
    28ea:	a9 01       	movw	r20, r18
    28ec:	db 01       	movw	r26, r22
    28ee:	01 c0       	rjmp	.+2      	; 0x28f2 <malloc+0x62>
    28f0:	ef 01       	movw	r28, r30
    28f2:	9a 01       	movw	r18, r20
    28f4:	bd 01       	movw	r22, r26
    28f6:	df 01       	movw	r26, r30
    28f8:	02 80       	ldd	r0, Z+2	; 0x02
    28fa:	f3 81       	ldd	r31, Z+3	; 0x03
    28fc:	e0 2d       	mov	r30, r0
    28fe:	d7 cf       	rjmp	.-82     	; 0x28ae <malloc+0x1e>
    2900:	21 15       	cp	r18, r1
    2902:	31 05       	cpc	r19, r1
    2904:	f9 f0       	breq	.+62     	; 0x2944 <malloc+0xb4>
    2906:	28 1b       	sub	r18, r24
    2908:	39 0b       	sbc	r19, r25
    290a:	24 30       	cpi	r18, 0x04	; 4
    290c:	31 05       	cpc	r19, r1
    290e:	80 f4       	brcc	.+32     	; 0x2930 <malloc+0xa0>
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	9b 81       	ldd	r25, Y+3	; 0x03
    2914:	61 15       	cp	r22, r1
    2916:	71 05       	cpc	r23, r1
    2918:	21 f0       	breq	.+8      	; 0x2922 <malloc+0x92>
    291a:	fb 01       	movw	r30, r22
    291c:	93 83       	std	Z+3, r25	; 0x03
    291e:	82 83       	std	Z+2, r24	; 0x02
    2920:	04 c0       	rjmp	.+8      	; 0x292a <malloc+0x9a>
    2922:	90 93 b6 03 	sts	0x03B6, r25
    2926:	80 93 b5 03 	sts	0x03B5, r24
    292a:	fe 01       	movw	r30, r28
    292c:	32 96       	adiw	r30, 0x02	; 2
    292e:	44 c0       	rjmp	.+136    	; 0x29b8 <malloc+0x128>
    2930:	fe 01       	movw	r30, r28
    2932:	e2 0f       	add	r30, r18
    2934:	f3 1f       	adc	r31, r19
    2936:	81 93       	st	Z+, r24
    2938:	91 93       	st	Z+, r25
    293a:	22 50       	subi	r18, 0x02	; 2
    293c:	31 09       	sbc	r19, r1
    293e:	39 83       	std	Y+1, r19	; 0x01
    2940:	28 83       	st	Y, r18
    2942:	3a c0       	rjmp	.+116    	; 0x29b8 <malloc+0x128>
    2944:	20 91 b3 03 	lds	r18, 0x03B3
    2948:	30 91 b4 03 	lds	r19, 0x03B4
    294c:	23 2b       	or	r18, r19
    294e:	41 f4       	brne	.+16     	; 0x2960 <malloc+0xd0>
    2950:	20 91 2d 01 	lds	r18, 0x012D
    2954:	30 91 2e 01 	lds	r19, 0x012E
    2958:	30 93 b4 03 	sts	0x03B4, r19
    295c:	20 93 b3 03 	sts	0x03B3, r18
    2960:	20 91 2b 01 	lds	r18, 0x012B
    2964:	30 91 2c 01 	lds	r19, 0x012C
    2968:	21 15       	cp	r18, r1
    296a:	31 05       	cpc	r19, r1
    296c:	41 f4       	brne	.+16     	; 0x297e <malloc+0xee>
    296e:	2d b7       	in	r18, 0x3d	; 61
    2970:	3e b7       	in	r19, 0x3e	; 62
    2972:	40 91 2f 01 	lds	r20, 0x012F
    2976:	50 91 30 01 	lds	r21, 0x0130
    297a:	24 1b       	sub	r18, r20
    297c:	35 0b       	sbc	r19, r21
    297e:	e0 91 b3 03 	lds	r30, 0x03B3
    2982:	f0 91 b4 03 	lds	r31, 0x03B4
    2986:	e2 17       	cp	r30, r18
    2988:	f3 07       	cpc	r31, r19
    298a:	a0 f4       	brcc	.+40     	; 0x29b4 <malloc+0x124>
    298c:	2e 1b       	sub	r18, r30
    298e:	3f 0b       	sbc	r19, r31
    2990:	28 17       	cp	r18, r24
    2992:	39 07       	cpc	r19, r25
    2994:	78 f0       	brcs	.+30     	; 0x29b4 <malloc+0x124>
    2996:	ac 01       	movw	r20, r24
    2998:	4e 5f       	subi	r20, 0xFE	; 254
    299a:	5f 4f       	sbci	r21, 0xFF	; 255
    299c:	24 17       	cp	r18, r20
    299e:	35 07       	cpc	r19, r21
    29a0:	48 f0       	brcs	.+18     	; 0x29b4 <malloc+0x124>
    29a2:	4e 0f       	add	r20, r30
    29a4:	5f 1f       	adc	r21, r31
    29a6:	50 93 b4 03 	sts	0x03B4, r21
    29aa:	40 93 b3 03 	sts	0x03B3, r20
    29ae:	81 93       	st	Z+, r24
    29b0:	91 93       	st	Z+, r25
    29b2:	02 c0       	rjmp	.+4      	; 0x29b8 <malloc+0x128>
    29b4:	e0 e0       	ldi	r30, 0x00	; 0
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	cf 01       	movw	r24, r30
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	08 95       	ret

000029c0 <free>:
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	09 f4       	brne	.+2      	; 0x29ca <free+0xa>
    29c8:	87 c0       	rjmp	.+270    	; 0x2ad8 <free+0x118>
    29ca:	fc 01       	movw	r30, r24
    29cc:	32 97       	sbiw	r30, 0x02	; 2
    29ce:	13 82       	std	Z+3, r1	; 0x03
    29d0:	12 82       	std	Z+2, r1	; 0x02
    29d2:	c0 91 b5 03 	lds	r28, 0x03B5
    29d6:	d0 91 b6 03 	lds	r29, 0x03B6
    29da:	20 97       	sbiw	r28, 0x00	; 0
    29dc:	81 f4       	brne	.+32     	; 0x29fe <free+0x3e>
    29de:	20 81       	ld	r18, Z
    29e0:	31 81       	ldd	r19, Z+1	; 0x01
    29e2:	28 0f       	add	r18, r24
    29e4:	39 1f       	adc	r19, r25
    29e6:	80 91 b3 03 	lds	r24, 0x03B3
    29ea:	90 91 b4 03 	lds	r25, 0x03B4
    29ee:	82 17       	cp	r24, r18
    29f0:	93 07       	cpc	r25, r19
    29f2:	79 f5       	brne	.+94     	; 0x2a52 <free+0x92>
    29f4:	f0 93 b4 03 	sts	0x03B4, r31
    29f8:	e0 93 b3 03 	sts	0x03B3, r30
    29fc:	6d c0       	rjmp	.+218    	; 0x2ad8 <free+0x118>
    29fe:	de 01       	movw	r26, r28
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	ae 17       	cp	r26, r30
    2a06:	bf 07       	cpc	r27, r31
    2a08:	50 f4       	brcc	.+20     	; 0x2a1e <free+0x5e>
    2a0a:	12 96       	adiw	r26, 0x02	; 2
    2a0c:	4d 91       	ld	r20, X+
    2a0e:	5c 91       	ld	r21, X
    2a10:	13 97       	sbiw	r26, 0x03	; 3
    2a12:	9d 01       	movw	r18, r26
    2a14:	41 15       	cp	r20, r1
    2a16:	51 05       	cpc	r21, r1
    2a18:	09 f1       	breq	.+66     	; 0x2a5c <free+0x9c>
    2a1a:	da 01       	movw	r26, r20
    2a1c:	f3 cf       	rjmp	.-26     	; 0x2a04 <free+0x44>
    2a1e:	b3 83       	std	Z+3, r27	; 0x03
    2a20:	a2 83       	std	Z+2, r26	; 0x02
    2a22:	40 81       	ld	r20, Z
    2a24:	51 81       	ldd	r21, Z+1	; 0x01
    2a26:	84 0f       	add	r24, r20
    2a28:	95 1f       	adc	r25, r21
    2a2a:	8a 17       	cp	r24, r26
    2a2c:	9b 07       	cpc	r25, r27
    2a2e:	71 f4       	brne	.+28     	; 0x2a4c <free+0x8c>
    2a30:	8d 91       	ld	r24, X+
    2a32:	9c 91       	ld	r25, X
    2a34:	11 97       	sbiw	r26, 0x01	; 1
    2a36:	84 0f       	add	r24, r20
    2a38:	95 1f       	adc	r25, r21
    2a3a:	02 96       	adiw	r24, 0x02	; 2
    2a3c:	91 83       	std	Z+1, r25	; 0x01
    2a3e:	80 83       	st	Z, r24
    2a40:	12 96       	adiw	r26, 0x02	; 2
    2a42:	8d 91       	ld	r24, X+
    2a44:	9c 91       	ld	r25, X
    2a46:	13 97       	sbiw	r26, 0x03	; 3
    2a48:	93 83       	std	Z+3, r25	; 0x03
    2a4a:	82 83       	std	Z+2, r24	; 0x02
    2a4c:	21 15       	cp	r18, r1
    2a4e:	31 05       	cpc	r19, r1
    2a50:	29 f4       	brne	.+10     	; 0x2a5c <free+0x9c>
    2a52:	f0 93 b6 03 	sts	0x03B6, r31
    2a56:	e0 93 b5 03 	sts	0x03B5, r30
    2a5a:	3e c0       	rjmp	.+124    	; 0x2ad8 <free+0x118>
    2a5c:	d9 01       	movw	r26, r18
    2a5e:	13 96       	adiw	r26, 0x03	; 3
    2a60:	fc 93       	st	X, r31
    2a62:	ee 93       	st	-X, r30
    2a64:	12 97       	sbiw	r26, 0x02	; 2
    2a66:	4d 91       	ld	r20, X+
    2a68:	5d 91       	ld	r21, X+
    2a6a:	a4 0f       	add	r26, r20
    2a6c:	b5 1f       	adc	r27, r21
    2a6e:	ea 17       	cp	r30, r26
    2a70:	fb 07       	cpc	r31, r27
    2a72:	79 f4       	brne	.+30     	; 0x2a92 <free+0xd2>
    2a74:	80 81       	ld	r24, Z
    2a76:	91 81       	ldd	r25, Z+1	; 0x01
    2a78:	84 0f       	add	r24, r20
    2a7a:	95 1f       	adc	r25, r21
    2a7c:	02 96       	adiw	r24, 0x02	; 2
    2a7e:	d9 01       	movw	r26, r18
    2a80:	11 96       	adiw	r26, 0x01	; 1
    2a82:	9c 93       	st	X, r25
    2a84:	8e 93       	st	-X, r24
    2a86:	82 81       	ldd	r24, Z+2	; 0x02
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	13 96       	adiw	r26, 0x03	; 3
    2a8c:	9c 93       	st	X, r25
    2a8e:	8e 93       	st	-X, r24
    2a90:	12 97       	sbiw	r26, 0x02	; 2
    2a92:	e0 e0       	ldi	r30, 0x00	; 0
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	19 f0       	breq	.+6      	; 0x2aa4 <free+0xe4>
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	ec 01       	movw	r28, r24
    2aa2:	f9 cf       	rjmp	.-14     	; 0x2a96 <free+0xd6>
    2aa4:	ce 01       	movw	r24, r28
    2aa6:	02 96       	adiw	r24, 0x02	; 2
    2aa8:	28 81       	ld	r18, Y
    2aaa:	39 81       	ldd	r19, Y+1	; 0x01
    2aac:	82 0f       	add	r24, r18
    2aae:	93 1f       	adc	r25, r19
    2ab0:	20 91 b3 03 	lds	r18, 0x03B3
    2ab4:	30 91 b4 03 	lds	r19, 0x03B4
    2ab8:	28 17       	cp	r18, r24
    2aba:	39 07       	cpc	r19, r25
    2abc:	69 f4       	brne	.+26     	; 0x2ad8 <free+0x118>
    2abe:	30 97       	sbiw	r30, 0x00	; 0
    2ac0:	29 f4       	brne	.+10     	; 0x2acc <free+0x10c>
    2ac2:	10 92 b6 03 	sts	0x03B6, r1
    2ac6:	10 92 b5 03 	sts	0x03B5, r1
    2aca:	02 c0       	rjmp	.+4      	; 0x2ad0 <free+0x110>
    2acc:	13 82       	std	Z+3, r1	; 0x03
    2ace:	12 82       	std	Z+2, r1	; 0x02
    2ad0:	d0 93 b4 03 	sts	0x03B4, r29
    2ad4:	c0 93 b3 03 	sts	0x03B3, r28
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	08 95       	ret

00002ade <strrev>:
    2ade:	dc 01       	movw	r26, r24
    2ae0:	fc 01       	movw	r30, r24
    2ae2:	67 2f       	mov	r22, r23
    2ae4:	71 91       	ld	r23, Z+
    2ae6:	77 23       	and	r23, r23
    2ae8:	e1 f7       	brne	.-8      	; 0x2ae2 <strrev+0x4>
    2aea:	32 97       	sbiw	r30, 0x02	; 2
    2aec:	04 c0       	rjmp	.+8      	; 0x2af6 <strrev+0x18>
    2aee:	7c 91       	ld	r23, X
    2af0:	6d 93       	st	X+, r22
    2af2:	70 83       	st	Z, r23
    2af4:	62 91       	ld	r22, -Z
    2af6:	ae 17       	cp	r26, r30
    2af8:	bf 07       	cpc	r27, r31
    2afa:	c8 f3       	brcs	.-14     	; 0x2aee <strrev+0x10>
    2afc:	08 95       	ret

00002afe <__do_global_dtors>:
    2afe:	10 e0       	ldi	r17, 0x00	; 0
    2b00:	cc ea       	ldi	r28, 0xAC	; 172
    2b02:	d0 e0       	ldi	r29, 0x00	; 0
    2b04:	04 c0       	rjmp	.+8      	; 0x2b0e <__do_global_dtors+0x10>
    2b06:	fe 01       	movw	r30, r28
    2b08:	0e 94 35 14 	call	0x286a	; 0x286a <__tablejump__>
    2b0c:	22 96       	adiw	r28, 0x02	; 2
    2b0e:	ce 3a       	cpi	r28, 0xAE	; 174
    2b10:	d1 07       	cpc	r29, r17
    2b12:	c9 f7       	brne	.-14     	; 0x2b06 <__do_global_dtors+0x8>
    2b14:	f8 94       	cli

00002b16 <__stop_program>:
    2b16:	ff cf       	rjmp	.-2      	; 0x2b16 <__stop_program>
