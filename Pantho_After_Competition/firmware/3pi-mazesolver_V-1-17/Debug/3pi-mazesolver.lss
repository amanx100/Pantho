
3pi-mazesolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00002b32  00002bc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026d  0080014a  0080014a  00002c10  2**0
                  ALLOC
  3 .stab         00006624  00000000  00000000  00002c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008bbc  00000000  00000000  00009234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00011df0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  00011e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000018a6  00000000  00000000  00011f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007a9  00000000  00000000  000137d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010f4  00000000  00000000  00013f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000284  00000000  00000000  00015074  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000537  00000000  00000000  000152f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c71  00000000  00000000  0001582f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f0  00000000  00000000  000164a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__dtors_end>
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      24:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <__vector_9>
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      34:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__vector_13>
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      50:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <go>:
      76:	4c 31 36 20 63 64 65 67 72 65 67 34 00              L16 cdegreg4.

00000083 <welcome>:
      83:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000008d <demo_name_line2>:
      8d:	73 6f 6c 76 65 72 00                                solver.

00000094 <demo_name_line1>:
      94:	4d 61 7a 65 00                                      Maze.

00000099 <welcome_line2>:
      99:	33 f7 20 52 6f 62 6f 74 00                          3. Robot.

000000a2 <welcome_line1>:
      a2:	20 50 6f 6c 6f 6c 75 00                              Pololu.

000000aa <__ctors_start>:
      aa:	4c 0e       	add	r4, r28

000000ac <__ctors_end>:
      ac:	4d 0e       	add	r4, r29

000000ae <__dtors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	d8 e0       	ldi	r29, 0x08	; 8
      b6:	de bf       	out	0x3e, r29	; 62
      b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
      ba:	11 e0       	ldi	r17, 0x01	; 1
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	e2 e3       	ldi	r30, 0x32	; 50
      c2:	fb e2       	ldi	r31, 0x2B	; 43
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
      c6:	05 90       	lpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	aa 34       	cpi	r26, 0x4A	; 74
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
      d0:	23 e0       	ldi	r18, 0x03	; 3
      d2:	aa e4       	ldi	r26, 0x4A	; 74
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a7 3b       	cpi	r26, 0xB7	; 183
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>

000000e0 <__do_global_ctors>:
      e0:	10 e0       	ldi	r17, 0x00	; 0
      e2:	cc ea       	ldi	r28, 0xAC	; 172
      e4:	d0 e0       	ldi	r29, 0x00	; 0
      e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_global_ctors+0x10>
      e8:	22 97       	sbiw	r28, 0x02	; 2
      ea:	fe 01       	movw	r30, r28
      ec:	0e 94 42 14 	call	0x2884	; 0x2884 <__tablejump__>
      f0:	ca 3a       	cpi	r28, 0xAA	; 170
      f2:	d1 07       	cpc	r29, r17
      f4:	c9 f7       	brne	.-14     	; 0xe8 <__do_global_ctors+0x8>
      f6:	0e 94 44 02 	call	0x488	; 0x488 <main>
      fa:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__do_global_dtors>

000000fe <__bad_interrupt>:
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <load_custom_characters>:

// This function loads custom characters into the LCD.  Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	88 e6       	ldi	r24, 0x68	; 104
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 03 0b 	call	0x1606	; 0x1606 <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
     10c:	61 e0       	ldi	r22, 0x01	; 1
     10e:	89 e6       	ldi	r24, 0x69	; 105
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 03 0b 	call	0x1606	; 0x1606 <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
     116:	62 e0       	ldi	r22, 0x02	; 2
     118:	8a e6       	ldi	r24, 0x6A	; 106
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 03 0b 	call	0x1606	; 0x1606 <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     120:	63 e0       	ldi	r22, 0x03	; 3
     122:	8b e6       	ldi	r24, 0x6B	; 107
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 03 0b 	call	0x1606	; 0x1606 <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     12a:	64 e0       	ldi	r22, 0x04	; 4
     12c:	8c e6       	ldi	r24, 0x6C	; 108
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 03 0b 	call	0x1606	; 0x1606 <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     134:	65 e0       	ldi	r22, 0x05	; 5
     136:	8d e6       	ldi	r24, 0x6D	; 109
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 03 0b 	call	0x1606	; 0x1606 <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     13e:	66 e0       	ldi	r22, 0x06	; 6
     140:	8e e6       	ldi	r24, 0x6E	; 110
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 03 0b 	call	0x1606	; 0x1606 <lcd_load_custom_character>
	clear(); // the LCD must be cleared for the characters to take effect
     148:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <clear>

0000014c <display_readings>:
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	2a 97       	sbiw	r28, 0x0a	; 10
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
     16c:	8c 01       	movw	r16, r24
	unsigned char i;

	for(i=0;i<5;i++) {
     16e:	d1 2c       	mov	r13, r1
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     170:	8a e0       	ldi	r24, 0x0A	; 10
     172:	c8 2e       	mov	r12, r24

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     174:	95 e6       	ldi	r25, 0x65	; 101
     176:	e9 2e       	mov	r14, r25
     178:	f1 2c       	mov	r15, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     17a:	e1 e3       	ldi	r30, 0x31	; 49
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	de 01       	movw	r26, r28
     180:	11 96       	adiw	r26, 0x01	; 1
     182:	8c 2d       	mov	r24, r12
     184:	01 90       	ld	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	8a 95       	dec	r24
     18a:	e1 f7       	brne	.-8      	; 0x184 <display_readings+0x38>

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     18c:	f8 01       	movw	r30, r16
     18e:	81 91       	ld	r24, Z+
     190:	91 91       	ld	r25, Z+
     192:	8f 01       	movw	r16, r30
     194:	b7 01       	movw	r22, r14
     196:	0e 94 95 13 	call	0x272a	; 0x272a <__udivmodhi4>
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	8c 0f       	add	r24, r28
     1a0:	9d 1f       	adc	r25, r29
     1a2:	68 0f       	add	r22, r24
     1a4:	79 1f       	adc	r23, r25

		// Display the bar graph character.
		print_character(c);
     1a6:	fb 01       	movw	r30, r22
     1a8:	80 81       	ld	r24, Z
     1aa:	0e 94 06 0b 	call	0x160c	; 0x160c <print_character>
// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     1ae:	d3 94       	inc	r13
     1b0:	f5 e0       	ldi	r31, 0x05	; 5
     1b2:	df 12       	cpse	r13, r31
     1b4:	e2 cf       	rjmp	.-60     	; 0x17a <display_readings+0x2e>
		char c = display_characters[calibrated_values[i]/101];

		// Display the bar graph character.
		print_character(c);
	}
}
     1b6:	2a 96       	adiw	r28, 0x0a	; 10
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	08 95       	ret

000001d4 <follow_segment>:
#include <pololu/3pi.h>

void follow_segment(int max)
{
     1d4:	2f 92       	push	r2
     1d6:	3f 92       	push	r3
     1d8:	4f 92       	push	r4
     1da:	5f 92       	push	r5
     1dc:	6f 92       	push	r6
     1de:	7f 92       	push	r7
     1e0:	8f 92       	push	r8
     1e2:	9f 92       	push	r9
     1e4:	af 92       	push	r10
     1e6:	bf 92       	push	r11
     1e8:	cf 92       	push	r12
     1ea:	df 92       	push	r13
     1ec:	ef 92       	push	r14
     1ee:	ff 92       	push	r15
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	2a 97       	sbiw	r28, 0x0a	; 10
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
     208:	8c 01       	movw	r16, r24
	int last_proportional = 0;
	long integral=0;
     20a:	c1 2c       	mov	r12, r1
     20c:	d1 2c       	mov	r13, r1
     20e:	76 01       	movw	r14, r12
#include <pololu/3pi.h>

void follow_segment(int max)
{
	int last_proportional = 0;
     210:	21 2c       	mov	r2, r1
     212:	31 2c       	mov	r3, r1
		int derivative = proportional - last_proportional;
		integral += proportional;

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     214:	50 e1       	ldi	r21, 0x10	; 16
     216:	45 2e       	mov	r4, r21
     218:	57 e2       	ldi	r21, 0x27	; 39
     21a:	55 2e       	mov	r5, r21
     21c:	61 2c       	mov	r6, r1
     21e:	71 2c       	mov	r7, r1

		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
     220:	88 24       	eor	r8, r8
     222:	99 24       	eor	r9, r9
     224:	88 1a       	sub	r8, r24
     226:	99 0a       	sbc	r9, r25
	long integral=0;

	while(1)
	{
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	ce 01       	movw	r24, r28
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <read_line>

		int proportional = ((int)position) - 2000;
     232:	80 5d       	subi	r24, 0xD0	; 208
     234:	97 40       	sbci	r25, 0x07	; 7
     236:	5c 01       	movw	r10, r24

		int derivative = proportional - last_proportional;
		integral += proportional;
     238:	aa 27       	eor	r26, r26
     23a:	97 fd       	sbrc	r25, 7
     23c:	a0 95       	com	r26
     23e:	ba 2f       	mov	r27, r26
     240:	c8 0e       	add	r12, r24
     242:	d9 1e       	adc	r13, r25
     244:	ea 1e       	adc	r14, r26
     246:	fb 1e       	adc	r15, r27

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     248:	c7 01       	movw	r24, r14
     24a:	b6 01       	movw	r22, r12
     24c:	a3 01       	movw	r20, r6
     24e:	92 01       	movw	r18, r4
     250:	0e 94 df 13 	call	0x27be	; 0x27be <__divmodsi4>
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);

		int proportional = ((int)position) - 2000;

		int derivative = proportional - last_proportional;
     254:	b5 01       	movw	r22, r10
     256:	62 19       	sub	r22, r2
     258:	73 09       	sbc	r23, r3
		integral += proportional;

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     25a:	cb 01       	movw	r24, r22
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	86 0f       	add	r24, r22
     262:	97 1f       	adc	r25, r23
     264:	97 fd       	sbrc	r25, 7
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	fc 01       	movw	r30, r24
     26a:	f5 95       	asr	r31
     26c:	e7 95       	ror	r30
     26e:	e2 0f       	add	r30, r18
     270:	f3 1f       	adc	r31, r19
     272:	c5 01       	movw	r24, r10
     274:	64 e1       	ldi	r22, 0x14	; 20
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	0e 94 a9 13 	call	0x2752	; 0x2752 <__divmodhi4>
     27c:	e6 0f       	add	r30, r22
     27e:	f7 1f       	adc	r31, r23
     280:	0e 17       	cp	r16, r30
     282:	1f 07       	cpc	r17, r31
     284:	0c f4       	brge	.+2      	; 0x288 <follow_segment+0xb4>
     286:	f8 01       	movw	r30, r16
     288:	cf 01       	movw	r24, r30
     28a:	e8 15       	cp	r30, r8
     28c:	f9 05       	cpc	r31, r9
     28e:	0c f4       	brge	.+2      	; 0x292 <follow_segment+0xbe>
     290:	c4 01       	movw	r24, r8
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
     292:	b8 01       	movw	r22, r16
		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
		
		if(power_difference < 0)
     294:	97 ff       	sbrs	r25, 7
     296:	03 c0       	rjmp	.+6      	; 0x29e <follow_segment+0xca>
			set_motors(max+power_difference,max);
     298:	80 0f       	add	r24, r16
     29a:	91 1f       	adc	r25, r17
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <follow_segment+0xd0>
		else
			set_motors(max,max-power_difference);
     29e:	68 1b       	sub	r22, r24
     2a0:	79 0b       	sbc	r23, r25
     2a2:	c8 01       	movw	r24, r16
     2a4:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>

		if(sensors[1] < 100 && sensors[2] < 100 && sensors[3] < 100)
     2a8:	8b 81       	ldd	r24, Y+3	; 0x03
     2aa:	9c 81       	ldd	r25, Y+4	; 0x04
     2ac:	84 36       	cpi	r24, 0x64	; 100
     2ae:	91 05       	cpc	r25, r1
     2b0:	50 f4       	brcc	.+20     	; 0x2c6 <follow_segment+0xf2>
     2b2:	8d 81       	ldd	r24, Y+5	; 0x05
     2b4:	9e 81       	ldd	r25, Y+6	; 0x06
     2b6:	84 36       	cpi	r24, 0x64	; 100
     2b8:	91 05       	cpc	r25, r1
     2ba:	28 f4       	brcc	.+10     	; 0x2c6 <follow_segment+0xf2>
     2bc:	8f 81       	ldd	r24, Y+7	; 0x07
     2be:	98 85       	ldd	r25, Y+8	; 0x08
     2c0:	84 36       	cpi	r24, 0x64	; 100
     2c2:	91 05       	cpc	r25, r1
     2c4:	60 f0       	brcs	.+24     	; 0x2de <follow_segment+0x10a>
		{
			return;
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ca:	89 3c       	cpi	r24, 0xC9	; 201
     2cc:	91 05       	cpc	r25, r1
     2ce:	38 f4       	brcc	.+14     	; 0x2de <follow_segment+0x10a>
     2d0:	89 85       	ldd	r24, Y+9	; 0x09
     2d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     2d4:	89 3c       	cpi	r24, 0xC9	; 201
     2d6:	91 05       	cpc	r25, r1
     2d8:	10 f4       	brcc	.+4      	; 0x2de <follow_segment+0x10a>
		int proportional = ((int)position) - 2000;

		int derivative = proportional - last_proportional;
		integral += proportional;

		last_proportional = proportional;
     2da:	15 01       	movw	r2, r10
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
		{
			return;
		}
	}
     2dc:	a5 cf       	rjmp	.-182    	; 0x228 <follow_segment+0x54>
     2de:	2a 96       	adiw	r28, 0x0a	; 10
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	df 90       	pop	r13
     2f8:	cf 90       	pop	r12
     2fa:	bf 90       	pop	r11
     2fc:	af 90       	pop	r10
     2fe:	9f 90       	pop	r9
     300:	8f 90       	pop	r8
     302:	7f 90       	pop	r7
     304:	6f 90       	pop	r6
     306:	5f 90       	pop	r5
     308:	4f 90       	pop	r4
     30a:	3f 90       	pop	r3
     30c:	2f 90       	pop	r2
     30e:	08 95       	ret

00000310 <initialize>:

const char welcome[] PROGMEM = ">g32>>c32";
const char go[] PROGMEM = "L16 cdegreg4";

void initialize()
{
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	2a 97       	sbiw	r28, 0x0a	; 10
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
	unsigned int counter; 
	unsigned int sensors[5]; 
	
	pololu_3pi_init(2000);
     328:	80 ed       	ldi	r24, 0xD0	; 208
     32a:	97 e0       	ldi	r25, 0x07	; 7
     32c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <pololu_3pi_init>
	load_custom_characters();
     330:	0e 94 81 00 	call	0x102	; 0x102 <load_custom_characters>
	
	print_from_program_space(welcome_line1);
     334:	82 ea       	ldi	r24, 0xA2	; 162
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 ab 0b 	call	0x1756	; 0x1756 <print_from_program_space>
	lcd_goto_xy(0,1);
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	0e 94 2b 0c 	call	0x1856	; 0x1856 <lcd_goto_xy>
	print_from_program_space(welcome_line2);
     344:	89 e9       	ldi	r24, 0x99	; 153
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 ab 0b 	call	0x1756	; 0x1756 <print_from_program_space>
	play_from_program_space(welcome);
     34c:	83 e8       	ldi	r24, 0x83	; 131
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 40 0a 	call	0x1480	; 0x1480 <play_from_program_space>
	delay_ms(1000);
     354:	88 ee       	ldi	r24, 0xE8	; 232
     356:	93 e0       	ldi	r25, 0x03	; 3
     358:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>

	clear();
     35c:	0e 94 83 0b 	call	0x1706	; 0x1706 <clear>
	print_from_program_space(demo_name_line1);
     360:	84 e9       	ldi	r24, 0x94	; 148
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 ab 0b 	call	0x1756	; 0x1756 <print_from_program_space>
	lcd_goto_xy(0,1);
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	0e 94 2b 0c 	call	0x1856	; 0x1856 <lcd_goto_xy>
	print_from_program_space(demo_name_line2);
     370:	8d e8       	ldi	r24, 0x8D	; 141
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 ab 0b 	call	0x1756	; 0x1756 <print_from_program_space>
	delay_ms(1000);
     378:	88 ee       	ldi	r24, 0xE8	; 232
     37a:	93 e0       	ldi	r25, 0x03	; 3
		print_long(bat);
		print("mV");
		lcd_goto_xy(0,1);
		print("Press B");

		delay_ms(100);
     37c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
	print_from_program_space(demo_name_line1);
	lcd_goto_xy(0,1);
	print_from_program_space(demo_name_line2);
	delay_ms(1000);

	while(!button_is_pressed(BUTTON_B))
     380:	80 e1       	ldi	r24, 0x10	; 16
     382:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <button_is_pressed>
     386:	81 11       	cpse	r24, r1
     388:	1b c0       	rjmp	.+54     	; 0x3c0 <initialize+0xb0>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     38a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <read_battery_millivolts_3pi>
     38e:	8c 01       	movw	r16, r24
	{
		int bat = read_battery_millivolts();

		clear();
     390:	0e 94 83 0b 	call	0x1706	; 0x1706 <clear>
		print_long(bat);
     394:	b8 01       	movw	r22, r16
     396:	88 27       	eor	r24, r24
     398:	77 fd       	sbrc	r23, 7
     39a:	80 95       	com	r24
     39c:	98 2f       	mov	r25, r24
     39e:	0e 94 08 0c 	call	0x1810	; 0x1810 <print_long>
		print("mV");
     3a2:	8b e3       	ldi	r24, 0x3B	; 59
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 9a 0b 	call	0x1734	; 0x1734 <print>
		lcd_goto_xy(0,1);
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 2b 0c 	call	0x1856	; 0x1856 <lcd_goto_xy>
		print("Press B");
     3b2:	8e e3       	ldi	r24, 0x3E	; 62
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	0e 94 9a 0b 	call	0x1734	; 0x1734 <print>

		delay_ms(100);
     3ba:	84 e6       	ldi	r24, 0x64	; 100
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	de cf       	rjmp	.-68     	; 0x37c <initialize+0x6c>
	}

	wait_for_button_release(BUTTON_B);
     3c0:	80 e1       	ldi	r24, 0x10	; 16
     3c2:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <wait_for_button_release>
	delay_ms(1000);
     3c6:	88 ee       	ldi	r24, 0xE8	; 232
     3c8:	93 e0       	ldi	r25, 0x03	; 3
     3ca:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
     3ce:	0c ee       	ldi	r16, 0xEC	; 236
     3d0:	1f ef       	ldi	r17, 0xFF	; 255

	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     3d2:	08 32       	cpi	r16, 0x28	; 40
     3d4:	11 05       	cpc	r17, r1
     3d6:	28 f0       	brcs	.+10     	; 0x3e2 <initialize+0xd2>
			set_motors(40,-40);
     3d8:	68 ed       	ldi	r22, 0xD8	; 216
     3da:	7f ef       	ldi	r23, 0xFF	; 255
     3dc:	88 e2       	ldi	r24, 0x28	; 40
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <initialize+0xda>
		else
			set_motors(-40,40);
     3e2:	68 e2       	ldi	r22, 0x28	; 40
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	88 ed       	ldi	r24, 0xD8	; 216
     3e8:	9f ef       	ldi	r25, 0xFF	; 255
     3ea:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <calibrate_line_sensors>
		delay_ms(20);
     3f4:	84 e1       	ldi	r24, 0x14	; 20
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
     3fc:	0f 5f       	subi	r16, 0xFF	; 255
     3fe:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	for(counter=0;counter<80;counter++)
     400:	0c 33       	cpi	r16, 0x3C	; 60
     402:	11 05       	cpc	r17, r1
     404:	31 f7       	brne	.-52     	; 0x3d2 <initialize+0xc2>
		else
			set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	set_motors(0,0);
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>

	while(!button_is_pressed(BUTTON_B))
     412:	80 e1       	ldi	r24, 0x10	; 16
     414:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <button_is_pressed>
     418:	81 11       	cpse	r24, r1
     41a:	1a c0       	rjmp	.+52     	; 0x450 <initialize+0x140>
	{
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <read_line>
     426:	8c 01       	movw	r16, r24

		clear();
     428:	0e 94 83 0b 	call	0x1706	; 0x1706 <clear>
		print_long(position);
     42c:	b8 01       	movw	r22, r16
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 08 0c 	call	0x1810	; 0x1810 <print_long>
		lcd_goto_xy(0,1);
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <lcd_goto_xy>
		display_readings(sensors);
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	0e 94 a6 00 	call	0x14c	; 0x14c <display_readings>

		delay_ms(100);
     446:	84 e6       	ldi	r24, 0x64	; 100
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
     44e:	e1 cf       	rjmp	.-62     	; 0x412 <initialize+0x102>
	}
	wait_for_button_release(BUTTON_B);
     450:	80 e1       	ldi	r24, 0x10	; 16
     452:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <wait_for_button_release>

	clear();
     456:	0e 94 83 0b 	call	0x1706	; 0x1706 <clear>

	print("Go!");		
     45a:	86 e4       	ldi	r24, 0x46	; 70
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <print>

	play_from_program_space(go);
     462:	86 e7       	ldi	r24, 0x76	; 118
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 40 0a 	call	0x1480	; 0x1480 <play_from_program_space>
	while(is_playing());
     46a:	0e 94 2f 0a 	call	0x145e	; 0x145e <is_playing>
     46e:	81 11       	cpse	r24, r1
     470:	fc cf       	rjmp	.-8      	; 0x46a <initialize+0x15a>
}
     472:	2a 96       	adiw	r28, 0x0a	; 10
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	08 95       	ret

00000488 <main>:


int main()
{
	initialize();//3pi initialization
     488:	0e 94 88 01 	call	0x310	; 0x310 <initialize>
	
	maze_solve(170); //std 160
     48c:	8a ea       	ldi	r24, 0xAA	; 170
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 51 03 	call	0x6a2	; 0x6a2 <maze_solve>
     494:	ff cf       	rjmp	.-2      	; 0x494 <main+0xc>

00000496 <sensor_data>:
uint16_t  node_number = 0;



uint8_t sensor_data(void)
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	2a 97       	sbiw	r28, 0x0a	; 10
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5], edge_th = 400, line_th = 300;
	uint8_t sn_dta = 0x00;
	read_line(sensors,IR_EMITTERS_ON);
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	ce 01       	movw	r24, r28
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <read_line>
	if (sensors[0] > edge_th)	sn_dta |= (1<<4);
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	81 39       	cpi	r24, 0x91	; 145
     4ba:	91 40       	sbci	r25, 0x01	; 1
     4bc:	10 f0       	brcs	.+4      	; 0x4c2 <sensor_data+0x2c>
     4be:	80 e1       	ldi	r24, 0x10	; 16
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <sensor_data+0x2e>
	else						sn_dta &= ~(1<<4);
     4c2:	80 e0       	ldi	r24, 0x00	; 0
	if (sensors[1] > line_th)	sn_dta |= (1<<3);
     4c4:	2b 81       	ldd	r18, Y+3	; 0x03
     4c6:	3c 81       	ldd	r19, Y+4	; 0x04
     4c8:	2d 32       	cpi	r18, 0x2D	; 45
     4ca:	31 40       	sbci	r19, 0x01	; 1
     4cc:	10 f0       	brcs	.+4      	; 0x4d2 <sensor_data+0x3c>
     4ce:	88 60       	ori	r24, 0x08	; 8
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <sensor_data+0x3e>
	else						sn_dta &= ~(1<<3);
     4d2:	87 7f       	andi	r24, 0xF7	; 247
	if (sensors[2] > line_th)	sn_dta |= (1<<2);
     4d4:	2d 81       	ldd	r18, Y+5	; 0x05
     4d6:	3e 81       	ldd	r19, Y+6	; 0x06
     4d8:	2d 32       	cpi	r18, 0x2D	; 45
     4da:	31 40       	sbci	r19, 0x01	; 1
     4dc:	10 f0       	brcs	.+4      	; 0x4e2 <sensor_data+0x4c>
     4de:	84 60       	ori	r24, 0x04	; 4
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <sensor_data+0x4e>
	else						sn_dta &= ~(1<<2);
     4e2:	8b 7f       	andi	r24, 0xFB	; 251
	if (sensors[3] > line_th)	sn_dta |= (1<<1);
     4e4:	2f 81       	ldd	r18, Y+7	; 0x07
     4e6:	38 85       	ldd	r19, Y+8	; 0x08
     4e8:	2d 32       	cpi	r18, 0x2D	; 45
     4ea:	31 40       	sbci	r19, 0x01	; 1
     4ec:	10 f0       	brcs	.+4      	; 0x4f2 <sensor_data+0x5c>
     4ee:	82 60       	ori	r24, 0x02	; 2
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <sensor_data+0x5e>
	else						sn_dta &= ~(1<<1);
     4f2:	8d 7f       	andi	r24, 0xFD	; 253
	if (sensors[4] > edge_th)	sn_dta |= (1<<0);
     4f4:	29 85       	ldd	r18, Y+9	; 0x09
     4f6:	3a 85       	ldd	r19, Y+10	; 0x0a
     4f8:	21 39       	cpi	r18, 0x91	; 145
     4fa:	31 40       	sbci	r19, 0x01	; 1
     4fc:	10 f0       	brcs	.+4      	; 0x502 <sensor_data+0x6c>
     4fe:	81 60       	ori	r24, 0x01	; 1
     500:	01 c0       	rjmp	.+2      	; 0x504 <sensor_data+0x6e>
	else						sn_dta &= ~(1<<0);
     502:	8e 7f       	andi	r24, 0xFE	; 254
	
	return sn_dta;
}
     504:	2a 96       	adiw	r28, 0x0a	; 10
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <sensor_data_verified>:

uint8_t sensor_data_verified(void)
{
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
void time_reset(void);

// This is inline for efficiency:
static inline void delay_us(unsigned int microseconds)
{
  __asm__ volatile (
     51c:	c4 e1       	ldi	r28, 0x14	; 20
     51e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t snsr_data;
re_data:
	snsr_data = sensor_data();
     520:	0e 94 4b 02 	call	0x496	; 0x496 <sensor_data>
     524:	18 2f       	mov	r17, r24
     526:	fe 01       	movw	r30, r28
     528:	6f 93       	push	r22
     52a:	64 e0       	ldi	r22, 0x04	; 4
     52c:	6a 95       	dec	r22
     52e:	f1 f7       	brne	.-4      	; 0x52c <sensor_data_verified+0x16>
     530:	6f 91       	pop	r22
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	c9 f7       	brne	.-14     	; 0x528 <sensor_data_verified+0x12>
	delay_us(20);
	if (snsr_data == sensor_data())
     536:	0e 94 4b 02 	call	0x496	; 0x496 <sensor_data>
     53a:	18 13       	cpse	r17, r24
     53c:	f1 cf       	rjmp	.-30     	; 0x520 <sensor_data_verified+0xa>
	{
		return snsr_data;
	}
	else goto re_data;
}
     53e:	81 2f       	mov	r24, r17
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	08 95       	ret

00000548 <process_u>:


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
			{
				directions_solved[i-1] = 's';
     54c:	43 e7       	ldi	r20, 0x73	; 115
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'r';
     54e:	52 e7       	ldi	r21, 0x72	; 114
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
			{
				directions_solved[i-1] = 'l';
     550:	6c e6       	ldi	r22, 0x6C	; 108


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     552:	dc 01       	movw	r26, r24
     554:	a1 54       	subi	r26, 0x41	; 65
     556:	be 4f       	sbci	r27, 0xFE	; 254
     558:	2c 91       	ld	r18, X
     55a:	22 23       	and	r18, r18
     55c:	e1 f1       	breq	.+120    	; 0x5d6 <process_u+0x8e>
	{
		if (directions_solved[i] == 'u')
     55e:	25 37       	cpi	r18, 0x75	; 117
     560:	c1 f5       	brne	.+112    	; 0x5d2 <process_u+0x8a>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
     562:	fc 01       	movw	r30, r24
     564:	e2 54       	subi	r30, 0x42	; 66
     566:	fe 4f       	sbci	r31, 0xFE	; 254
     568:	30 81       	ld	r19, Z
     56a:	32 37       	cpi	r19, 0x72	; 114
     56c:	29 f4       	brne	.+10     	; 0x578 <process_u+0x30>
     56e:	11 96       	adiw	r26, 0x01	; 1
     570:	3c 91       	ld	r19, X
     572:	33 37       	cpi	r19, 0x73	; 115
     574:	81 f4       	brne	.+32     	; 0x596 <process_u+0x4e>
     576:	06 c0       	rjmp	.+12     	; 0x584 <process_u+0x3c>
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
     578:	33 37       	cpi	r19, 0x73	; 115
     57a:	31 f4       	brne	.+12     	; 0x588 <process_u+0x40>
     57c:	11 96       	adiw	r26, 0x01	; 1
     57e:	3c 91       	ld	r19, X
     580:	32 37       	cpi	r19, 0x72	; 114
     582:	a1 f4       	brne	.+40     	; 0x5ac <process_u+0x64>
			{
				directions_solved[i-1] = 'l';
     584:	60 83       	st	Z, r22
     586:	19 c0       	rjmp	.+50     	; 0x5ba <process_u+0x72>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'r')
     588:	3c 36       	cpi	r19, 0x6C	; 108
     58a:	b9 f4       	brne	.+46     	; 0x5ba <process_u+0x72>
     58c:	11 96       	adiw	r26, 0x01	; 1
     58e:	3c 91       	ld	r19, X
     590:	32 37       	cpi	r19, 0x72	; 114
     592:	31 f4       	brne	.+12     	; 0x5a0 <process_u+0x58>
     594:	11 c0       	rjmp	.+34     	; 0x5b8 <process_u+0x70>
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'r')
     596:	32 37       	cpi	r19, 0x72	; 114
     598:	39 f0       	breq	.+14     	; 0x5a8 <process_u+0x60>
			{
				directions_solved[i-1] = 's';
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'l')
     59a:	3c 36       	cpi	r19, 0x6C	; 108
     59c:	71 f4       	brne	.+28     	; 0x5ba <process_u+0x72>
     59e:	0c c0       	rjmp	.+24     	; 0x5b8 <process_u+0x70>
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
     5a0:	33 37       	cpi	r19, 0x73	; 115
     5a2:	31 f0       	breq	.+12     	; 0x5b0 <process_u+0x68>
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
     5a4:	3c 36       	cpi	r19, 0x6C	; 108
     5a6:	49 f4       	brne	.+18     	; 0x5ba <process_u+0x72>
			{
				directions_solved[i-1] = 's';
     5a8:	40 83       	st	Z, r20
     5aa:	07 c0       	rjmp	.+14     	; 0x5ba <process_u+0x72>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'l')
     5ac:	3c 36       	cpi	r19, 0x6C	; 108
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <process_u+0x6c>
			{
				directions_solved[i-1] = 'r';
     5b0:	50 83       	st	Z, r21
     5b2:	03 c0       	rjmp	.+6      	; 0x5ba <process_u+0x72>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
     5b4:	33 37       	cpi	r19, 0x73	; 115
     5b6:	09 f4       	brne	.+2      	; 0x5ba <process_u+0x72>
			{
				directions_solved[i-1] = 'u';
     5b8:	20 83       	st	Z, r18
     5ba:	fc 01       	movw	r30, r24
     5bc:	e1 54       	subi	r30, 0x41	; 65
     5be:	fe 4f       	sbci	r31, 0xFE	; 254
			}

			
			while (directions_solved[i+2])
     5c0:	22 81       	ldd	r18, Z+2	; 0x02
     5c2:	22 23       	and	r18, r18
     5c4:	19 f0       	breq	.+6      	; 0x5cc <process_u+0x84>
			{
				directions_solved[i] = directions_solved[i+2];
     5c6:	20 83       	st	Z, r18
				i++;
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	f7 cf       	rjmp	.-18     	; 0x5ba <process_u+0x72>
			}
			directions_solved[i] = '\0';
     5cc:	10 82       	st	Z, r1
			i=0;
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	be cf       	rjmp	.-132    	; 0x552 <process_u+0xa>
			}
			directions_solved[i] = '\0';
			i=0;
		}
	}
}
     5d6:	08 95       	ret

000005d8 <process_array>:
		}
	}
}

void process_array(void)
{
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
     5e0:	8f eb       	ldi	r24, 0xBF	; 191
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <strrev>
     5e8:	ef eb       	ldi	r30, 0xBF	; 191
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
		{
			directions_solved[i] = 'r';
		}
		else if (directions_solved[i] == 'r')
		{
			directions_solved[i] = 'l';
     5ec:	9c e6       	ldi	r25, 0x6C	; 108
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'l')
		{
			directions_solved[i] = 'r';
     5ee:	22 e7       	ldi	r18, 0x72	; 114
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
	
	for (i=0;directions_solved[i];i++)
     5f0:	80 81       	ld	r24, Z
     5f2:	88 23       	and	r24, r24
     5f4:	49 f0       	breq	.+18     	; 0x608 <process_array+0x30>
	{
		if (directions_solved[i] == 'l')
     5f6:	8c 36       	cpi	r24, 0x6C	; 108
     5f8:	11 f4       	brne	.+4      	; 0x5fe <process_array+0x26>
		{
			directions_solved[i] = 'r';
     5fa:	20 83       	st	Z, r18
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <process_array+0x2c>
		}
		else if (directions_solved[i] == 'r')
     5fe:	82 37       	cpi	r24, 0x72	; 114
     600:	09 f4       	brne	.+2      	; 0x604 <process_array+0x2c>
		{
			directions_solved[i] = 'l';
     602:	90 83       	st	Z, r25
     604:	31 96       	adiw	r30, 0x01	; 1
     606:	f4 cf       	rjmp	.-24     	; 0x5f0 <process_array+0x18>
		}
	}
	
	while(1)
	{
		length_sln_prev = strlen(directions_solved);
     608:	0f eb       	ldi	r16, 0xBF	; 191
     60a:	11 e0       	ldi	r17, 0x01	; 1
     60c:	e8 01       	movw	r28, r16
     60e:	09 90       	ld	r0, Y+
     610:	00 20       	and	r0, r0
     612:	e9 f7       	brne	.-6      	; 0x60e <process_array+0x36>
     614:	21 97       	sbiw	r28, 0x01	; 1
     616:	cf 5b       	subi	r28, 0xBF	; 191
     618:	d1 40       	sbci	r29, 0x01	; 1
		
		process_u();
     61a:	0e 94 a4 02 	call	0x548	; 0x548 <process_u>
		
		//process_loop();
		
		if (length_sln_prev == strlen(directions_solved))
     61e:	f8 01       	movw	r30, r16
     620:	01 90       	ld	r0, Z+
     622:	00 20       	and	r0, r0
     624:	e9 f7       	brne	.-6      	; 0x620 <process_array+0x48>
     626:	31 97       	sbiw	r30, 0x01	; 1
     628:	ef 5b       	subi	r30, 0xBF	; 191
     62a:	f1 40       	sbci	r31, 0x01	; 1
     62c:	ce 17       	cp	r28, r30
     62e:	df 07       	cpc	r29, r31
     630:	69 f7       	brne	.-38     	; 0x60c <process_array+0x34>
		{
			break;
		}
	}
}
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret

0000063c <evaluate_direction>:


void evaluate_direction(uint16_t speed)
{
     63c:	bc 01       	movw	r22, r24
	char evaluation = 0;
	evaluation = directions_solved[node_number];
     63e:	80 91 bd 01 	lds	r24, 0x01BD
     642:	90 91 be 01 	lds	r25, 0x01BE
     646:	fc 01       	movw	r30, r24
     648:	e1 54       	subi	r30, 0x41	; 65
     64a:	fe 4f       	sbci	r31, 0xFE	; 254
     64c:	20 81       	ld	r18, Z
	node_number = node_number + 1;
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	90 93 be 01 	sts	0x01BE, r25
     654:	80 93 bd 01 	sts	0x01BD, r24
	
	if (evaluation == 's')
     658:	23 37       	cpi	r18, 0x73	; 115
     65a:	11 f4       	brne	.+4      	; 0x660 <evaluate_direction+0x24>
	{
		turn('S',speed);
     65c:	83 e5       	ldi	r24, 0x53	; 83
     65e:	0b c0       	rjmp	.+22     	; 0x676 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'u')
     660:	25 37       	cpi	r18, 0x75	; 117
     662:	11 f4       	brne	.+4      	; 0x668 <evaluate_direction+0x2c>
	{
		turn('U',speed);
     664:	85 e5       	ldi	r24, 0x55	; 85
     666:	07 c0       	rjmp	.+14     	; 0x676 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'l')
     668:	2c 36       	cpi	r18, 0x6C	; 108
     66a:	11 f4       	brne	.+4      	; 0x670 <evaluate_direction+0x34>
	{
		turn('L',speed);
     66c:	8c e4       	ldi	r24, 0x4C	; 76
     66e:	03 c0       	rjmp	.+6      	; 0x676 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'r')
     670:	22 37       	cpi	r18, 0x72	; 114
     672:	19 f4       	brne	.+6      	; 0x67a <evaluate_direction+0x3e>
	{
		turn('R',speed);
     674:	82 e5       	ldi	r24, 0x52	; 82
     676:	0c 94 c3 04 	jmp	0x986	; 0x986 <turn>
	}
	else
	{
		set_motors(0,0);
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
     686:	ff cf       	rjmp	.-2      	; 0x686 <evaluate_direction+0x4a>

00000688 <destination_operation>:
}


void destination_operation(int speed)
{
	directions_solved[node_number] = '\0';
     688:	e0 91 bd 01 	lds	r30, 0x01BD
     68c:	f0 91 be 01 	lds	r31, 0x01BE
     690:	e1 54       	subi	r30, 0x41	; 65
     692:	fe 4f       	sbci	r31, 0xFE	; 254
     694:	10 82       	st	Z, r1
	turn('D',speed);
     696:	bc 01       	movw	r22, r24
     698:	84 e4       	ldi	r24, 0x44	; 68
     69a:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
	process_array();
     69e:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <process_array>

000006a2 <maze_solve>:
}


void maze_solve(int speed)
{
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	1f 92       	push	r1
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	3c 01       	movw	r6, r24
	uint16_t destination = 0;
	const signed int speed_node = 100;
	char sensor_data_hold = 0, Right_trigged = 0, Left_trigged = 0, Forward_trigged = 0; 
     6ae:	a1 2c       	mov	r10, r1
     6b0:	91 2c       	mov	r9, r1
     6b2:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
			}
		}
		else if (sensor_data_hold == 0b00000) //-100
		{	
			directions_solved[node_number] = 'u';
     6b4:	85 e7       	ldi	r24, 0x75	; 117
     6b6:	e8 2e       	mov	r14, r24
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 'l';
     6b8:	9c e6       	ldi	r25, 0x6C	; 108
     6ba:	f9 2e       	mov	r15, r25
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 's';
     6bc:	23 e7       	ldi	r18, 0x73	; 115
     6be:	d2 2e       	mov	r13, r18
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
			{
				directions_solved[node_number] = 'r';
     6c0:	32 e7       	ldi	r19, 0x72	; 114
     6c2:	c3 2e       	mov	r12, r19
//****** Explore the path *****************************************************************************
///////////////////////////////////////////////////////////////////////////////////////////////////////

	while(1)
	{
		follow_segment(speed);
     6c4:	c3 01       	movw	r24, r6
     6c6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>
		
		sensor_data_hold = sensor_data_verified();
     6ca:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     6ce:	28 2f       	mov	r18, r24
		
		if(sensor_data_hold & 0b10000)  //left trigging 
     6d0:	84 ff       	sbrs	r24, 4
     6d2:	6e c0       	rjmp	.+220    	; 0x7b0 <maze_solve+0x10e>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     6d4:	64 e6       	ldi	r22, 0x64	; 100
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	84 e6       	ldi	r24, 0x64	; 100
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	29 83       	std	Y+1, r18	; 0x01
     6de:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
			destination = 0;
     6e2:	00 e0       	ldi	r16, 0x00	; 0
     6e4:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     6e6:	29 81       	ldd	r18, Y+1	; 0x01
     6e8:	21 71       	andi	r18, 0x11	; 17
     6ea:	c1 f0       	breq	.+48     	; 0x71c <maze_solve+0x7a>
			{
				sensor_data_hold = sensor_data_verified();
     6ec:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     6f0:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b00001) && (Right_trigged == 0))
     6f2:	80 ff       	sbrs	r24, 0
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <maze_solve+0x5c>
     6f6:	b1 10       	cpse	r11, r1
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <maze_solve+0x5c>
				{
					Right_trigged=1;
     6fa:	bb 24       	eor	r11, r11
     6fc:	b3 94       	inc	r11
				}
				if (sensor_data_hold == 0b11111)
     6fe:	2f 31       	cpi	r18, 0x1F	; 31
     700:	99 f7       	brne	.-26     	; 0x6e8 <maze_solve+0x46>
				{
					destination = destination + 1;
     702:	0f 5f       	subi	r16, 0xFF	; 255
     704:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     706:	03 33       	cpi	r16, 0x33	; 51
     708:	11 05       	cpc	r17, r1
     70a:	70 f3       	brcs	.-36     	; 0x6e8 <maze_solve+0x46>
					{
						destination = 0x00;
						destination_operation(speed);
     70c:	c3 01       	movw	r24, r6
     70e:	0e 94 44 03 	call	0x688	; 0x688 <destination_operation>
	//****** Follow the Solved path************************************************************************
	///////////////////////////////////////////////////////////////////////////////////////////////////////

solv_maze:

node_number = 0x00;
     712:	10 92 be 01 	sts	0x01BE, r1
     716:	10 92 bd 01 	sts	0x01BD, r1
     71a:	e0 c0       	rjmp	.+448    	; 0x8dc <maze_solve+0x23a>
						goto solv_maze;
					}
				}
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
     71c:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
			if (sensor_data_hold & 0b00100)
     720:	82 fd       	sbrc	r24, 2
     722:	1d c1       	rjmp	.+570    	; 0x95e <__stack+0x5f>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     724:	b1 10       	cpse	r11, r1
     726:	16 c0       	rjmp	.+44     	; 0x754 <maze_solve+0xb2>
     728:	a1 10       	cpse	r10, r1
     72a:	10 c0       	rjmp	.+32     	; 0x74c <maze_solve+0xaa>
			{
				directions_solved[node_number] = 'l';
     72c:	80 91 bd 01 	lds	r24, 0x01BD
     730:	90 91 be 01 	lds	r25, 0x01BE
     734:	fc 01       	movw	r30, r24
     736:	e1 54       	subi	r30, 0x41	; 65
     738:	fe 4f       	sbci	r31, 0xFE	; 254
     73a:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	90 93 be 01 	sts	0x01BE, r25
     742:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     746:	b3 01       	movw	r22, r6
     748:	8c e4       	ldi	r24, 0x4C	; 76
     74a:	bb c0       	rjmp	.+374    	; 0x8c2 <maze_solve+0x220>
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	a8 12       	cpse	r10, r24
     750:	b9 cf       	rjmp	.-142    	; 0x6c4 <maze_solve+0x22>
     752:	1b c0       	rjmp	.+54     	; 0x78a <maze_solve+0xe8>
				node_number = node_number + 1;
				turn('L',speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     754:	e1 e0       	ldi	r30, 0x01	; 1
     756:	be 12       	cpse	r11, r30
     758:	b5 cf       	rjmp	.-150    	; 0x6c4 <maze_solve+0x22>
     75a:	a1 10       	cpse	r10, r1
     75c:	13 c0       	rjmp	.+38     	; 0x784 <maze_solve+0xe2>
			{
				directions_solved[node_number] = 'l';
     75e:	80 91 bd 01 	lds	r24, 0x01BD
     762:	90 91 be 01 	lds	r25, 0x01BE
     766:	fc 01       	movw	r30, r24
     768:	e1 54       	subi	r30, 0x41	; 65
     76a:	fe 4f       	sbci	r31, 0xFE	; 254
     76c:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 be 01 	sts	0x01BE, r25
     774:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     778:	b3 01       	movw	r22, r6
     77a:	8c e4       	ldi	r24, 0x4C	; 76
     77c:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
				Right_trigged = 0;
     780:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
     782:	a0 cf       	rjmp	.-192    	; 0x6c4 <maze_solve+0x22>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
     784:	f1 e0       	ldi	r31, 0x01	; 1
     786:	af 12       	cpse	r10, r31
     788:	9d cf       	rjmp	.-198    	; 0x6c4 <maze_solve+0x22>
			{
				directions_solved[node_number] = 'l';
     78a:	80 91 bd 01 	lds	r24, 0x01BD
     78e:	90 91 be 01 	lds	r25, 0x01BE
     792:	fc 01       	movw	r30, r24
     794:	e1 54       	subi	r30, 0x41	; 65
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	90 93 be 01 	sts	0x01BE, r25
     7a0:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     7a4:	b3 01       	movw	r22, r6
     7a6:	8c e4       	ldi	r24, 0x4C	; 76
     7a8:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
				Right_trigged = 0;
				Forward_trigged = 0;
     7ac:	a1 2c       	mov	r10, r1
     7ae:	e8 cf       	rjmp	.-48     	; 0x780 <maze_solve+0xde>
			}
		}
		else if (sensor_data_hold & 0b00001) //right trigging
     7b0:	80 ff       	sbrs	r24, 0
     7b2:	76 c0       	rjmp	.+236    	; 0x8a0 <maze_solve+0x1fe>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     7b4:	64 e6       	ldi	r22, 0x64	; 100
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	84 e6       	ldi	r24, 0x64	; 100
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	29 83       	std	Y+1, r18	; 0x01
     7be:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
			destination = 0;
     7c2:	00 e0       	ldi	r16, 0x00	; 0
     7c4:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     7c6:	29 81       	ldd	r18, Y+1	; 0x01
     7c8:	21 71       	andi	r18, 0x11	; 17
     7ca:	89 f0       	breq	.+34     	; 0x7ee <maze_solve+0x14c>
			{
				sensor_data_hold = sensor_data_verified();
     7cc:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     7d0:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b10000) && (Left_trigged == 0))
     7d2:	84 ff       	sbrs	r24, 4
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <maze_solve+0x13c>
     7d6:	91 10       	cpse	r9, r1
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <maze_solve+0x13c>
				{
					Left_trigged=1;
     7da:	99 24       	eor	r9, r9
     7dc:	93 94       	inc	r9
				}
				if (sensor_data_hold == 0b11111)
     7de:	2f 31       	cpi	r18, 0x1F	; 31
     7e0:	99 f7       	brne	.-26     	; 0x7c8 <maze_solve+0x126>
				{
					destination = destination + 1;
     7e2:	0f 5f       	subi	r16, 0xFF	; 255
     7e4:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     7e6:	03 33       	cpi	r16, 0x33	; 51
     7e8:	11 05       	cpc	r17, r1
     7ea:	70 f3       	brcs	.-36     	; 0x7c8 <maze_solve+0x126>
     7ec:	8f cf       	rjmp	.-226    	; 0x70c <maze_solve+0x6a>
						goto solv_maze;
					}
				}
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
     7ee:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
			if (sensor_data_hold & 0b00100)
     7f2:	82 fd       	sbrc	r24, 2
     7f4:	b8 c0       	rjmp	.+368    	; 0x966 <__stack+0x67>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     7f6:	91 10       	cpse	r9, r1
     7f8:	25 c0       	rjmp	.+74     	; 0x844 <maze_solve+0x1a2>
     7fa:	a1 10       	cpse	r10, r1
     7fc:	10 c0       	rjmp	.+32     	; 0x81e <maze_solve+0x17c>
			{
				directions_solved[node_number] = 'r';
     7fe:	80 91 bd 01 	lds	r24, 0x01BD
     802:	90 91 be 01 	lds	r25, 0x01BE
     806:	fc 01       	movw	r30, r24
     808:	e1 54       	subi	r30, 0x41	; 65
     80a:	fe 4f       	sbci	r31, 0xFE	; 254
     80c:	c0 82       	st	Z, r12
				node_number = node_number + 1;
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	90 93 be 01 	sts	0x01BE, r25
     814:	80 93 bd 01 	sts	0x01BD, r24
				turn('R',speed);
     818:	b3 01       	movw	r22, r6
     81a:	82 e5       	ldi	r24, 0x52	; 82
     81c:	52 c0       	rjmp	.+164    	; 0x8c2 <maze_solve+0x220>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	a8 12       	cpse	r10, r24
     822:	50 cf       	rjmp	.-352    	; 0x6c4 <maze_solve+0x22>
			{
				directions_solved[node_number] = 's';
     824:	80 91 bd 01 	lds	r24, 0x01BD
     828:	90 91 be 01 	lds	r25, 0x01BE
     82c:	fc 01       	movw	r30, r24
     82e:	e1 54       	subi	r30, 0x41	; 65
     830:	fe 4f       	sbci	r31, 0xFE	; 254
     832:	d0 82       	st	Z, r13
				node_number = node_number + 1;
     834:	01 96       	adiw	r24, 0x01	; 1
     836:	90 93 be 01 	sts	0x01BE, r25
     83a:	80 93 bd 01 	sts	0x01BD, r24
				turn('S',speed);
     83e:	b3 01       	movw	r22, r6
     840:	83 e5       	ldi	r24, 0x53	; 83
     842:	29 c0       	rjmp	.+82     	; 0x896 <maze_solve+0x1f4>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     844:	e1 e0       	ldi	r30, 0x01	; 1
     846:	9e 12       	cpse	r9, r30
     848:	3d cf       	rjmp	.-390    	; 0x6c4 <maze_solve+0x22>
     84a:	a1 10       	cpse	r10, r1
     84c:	12 c0       	rjmp	.+36     	; 0x872 <maze_solve+0x1d0>
			{
				directions_solved[node_number] = 'l';
     84e:	80 91 bd 01 	lds	r24, 0x01BD
     852:	90 91 be 01 	lds	r25, 0x01BE
     856:	fc 01       	movw	r30, r24
     858:	e1 54       	subi	r30, 0x41	; 65
     85a:	fe 4f       	sbci	r31, 0xFE	; 254
     85c:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	90 93 be 01 	sts	0x01BE, r25
     864:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     868:	b3 01       	movw	r22, r6
     86a:	8c e4       	ldi	r24, 0x4C	; 76
     86c:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
     870:	15 c0       	rjmp	.+42     	; 0x89c <maze_solve+0x1fa>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	af 12       	cpse	r10, r31
     876:	26 cf       	rjmp	.-436    	; 0x6c4 <maze_solve+0x22>
			{
				directions_solved[node_number] = 'l';
     878:	80 91 bd 01 	lds	r24, 0x01BD
     87c:	90 91 be 01 	lds	r25, 0x01BE
     880:	fc 01       	movw	r30, r24
     882:	e1 54       	subi	r30, 0x41	; 65
     884:	fe 4f       	sbci	r31, 0xFE	; 254
     886:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	90 93 be 01 	sts	0x01BE, r25
     88e:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     892:	b3 01       	movw	r22, r6
     894:	8c e4       	ldi	r24, 0x4C	; 76
     896:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
				Left_trigged = 0;
				Forward_trigged = 0;
     89a:	a1 2c       	mov	r10, r1
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 'l';
				node_number = node_number + 1;
				turn('L',speed);
				Left_trigged = 0;
     89c:	91 2c       	mov	r9, r1
     89e:	12 cf       	rjmp	.-476    	; 0x6c4 <maze_solve+0x22>
				Forward_trigged = 0;
			}
		}
		else if (sensor_data_hold == 0b00000) //-100
     8a0:	81 11       	cpse	r24, r1
     8a2:	10 cf       	rjmp	.-480    	; 0x6c4 <maze_solve+0x22>
		{	
			directions_solved[node_number] = 'u';
     8a4:	80 91 bd 01 	lds	r24, 0x01BD
     8a8:	90 91 be 01 	lds	r25, 0x01BE
     8ac:	fc 01       	movw	r30, r24
     8ae:	e1 54       	subi	r30, 0x41	; 65
     8b0:	fe 4f       	sbci	r31, 0xFE	; 254
     8b2:	e0 82       	st	Z, r14
			node_number = node_number + 1;
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	90 93 be 01 	sts	0x01BE, r25
     8ba:	80 93 bd 01 	sts	0x01BD, r24
			turn('U',speed);
     8be:	b3 01       	movw	r22, r6
     8c0:	85 e5       	ldi	r24, 0x55	; 85
     8c2:	0e 94 c3 04 	call	0x986	; 0x986 <turn>
     8c6:	fe ce       	rjmp	.-516    	; 0x6c4 <maze_solve+0x22>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
			destination = 0;
			while (sensor_data_hold & 0b10001)
			{
				sensor_data_hold = sensor_data_verified();
     8c8:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     8cc:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b00001) && (Right_trigged == 0))
				{
					Right_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
     8ce:	8f 31       	cpi	r24, 0x1F	; 31
     8d0:	c1 f0       	breq	.+48     	; 0x902 <__stack+0x3>
		
		if(sensor_data_hold & 0b10000)  //left trigging 
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
			destination = 0;
			while (sensor_data_hold & 0b10001)
     8d2:	21 71       	andi	r18, 0x11	; 17
     8d4:	c9 f7       	brne	.-14     	; 0x8c8 <maze_solve+0x226>
						set_motors(0,0);
						while(1);
					}
				}
			}
			evaluate_direction(speed);
     8d6:	c3 01       	movw	r24, r6
     8d8:	0e 94 1e 03 	call	0x63c	; 0x63c <evaluate_direction>

node_number = 0x00;

	while(1)
	{
		follow_segment(speed);
     8dc:	c3 01       	movw	r24, r6
     8de:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>
		
		sensor_data_hold = sensor_data_verified();
     8e2:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     8e6:	28 2f       	mov	r18, r24
		
		if(sensor_data_hold & 0b10000)  //left trigging 
     8e8:	84 ff       	sbrs	r24, 4
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__stack+0x1b>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     8ec:	64 e6       	ldi	r22, 0x64	; 100
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	84 e6       	ldi	r24, 0x64	; 100
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	29 83       	std	Y+1, r18	; 0x01
     8f6:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
			destination = 0;
     8fa:	00 e0       	ldi	r16, 0x00	; 0
     8fc:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     8fe:	29 81       	ldd	r18, Y+1	; 0x01
     900:	e8 cf       	rjmp	.-48     	; 0x8d2 <maze_solve+0x230>
				{
					Right_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
				{
					destination = destination + 1;
     902:	0f 5f       	subi	r16, 0xFF	; 255
     904:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     906:	03 33       	cpi	r16, 0x33	; 51
     908:	11 05       	cpc	r17, r1
     90a:	18 f3       	brcs	.-58     	; 0x8d2 <maze_solve+0x230>
					{
						set_motors(0,0);
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
     918:	ff cf       	rjmp	.-2      	; 0x918 <__stack+0x19>
					}
				}
			}
			evaluate_direction(speed);
		}
		else if (sensor_data_hold & 0b00001) //right trigging
     91a:	80 ff       	sbrs	r24, 0
     91c:	1d c0       	rjmp	.+58     	; 0x958 <__stack+0x59>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     91e:	64 e6       	ldi	r22, 0x64	; 100
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	84 e6       	ldi	r24, 0x64	; 100
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	29 83       	std	Y+1, r18	; 0x01
     928:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
			destination = 0;
     92c:	00 e0       	ldi	r16, 0x00	; 0
     92e:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     930:	29 81       	ldd	r18, Y+1	; 0x01
     932:	21 71       	andi	r18, 0x11	; 17
     934:	81 f2       	breq	.-96     	; 0x8d6 <maze_solve+0x234>
			{
				sensor_data_hold = sensor_data_verified();
     936:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     93a:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b10000) && (Left_trigged == 0))
				{
					Left_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
     93c:	8f 31       	cpi	r24, 0x1F	; 31
     93e:	c9 f7       	brne	.-14     	; 0x932 <__stack+0x33>
				{
					destination = destination + 1;
     940:	0f 5f       	subi	r16, 0xFF	; 255
     942:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     944:	03 33       	cpi	r16, 0x33	; 51
     946:	11 05       	cpc	r17, r1
     948:	a0 f3       	brcs	.-24     	; 0x932 <__stack+0x33>
					{
						set_motors(0,0);
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
     956:	ff cf       	rjmp	.-2      	; 0x956 <__stack+0x57>
					}
				}
			}
			evaluate_direction(speed);
		}
		else if (sensor_data_hold == 0b00000) //-100
     958:	81 11       	cpse	r24, r1
     95a:	c0 cf       	rjmp	.-128    	; 0x8dc <maze_solve+0x23a>
     95c:	bc cf       	rjmp	.-136    	; 0x8d6 <maze_solve+0x234>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     95e:	bb 20       	and	r11, r11
     960:	09 f4       	brne	.+2      	; 0x964 <__stack+0x65>
     962:	13 cf       	rjmp	.-474    	; 0x78a <maze_solve+0xe8>
     964:	04 c0       	rjmp	.+8      	; 0x96e <__stack+0x6f>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     966:	99 20       	and	r9, r9
     968:	09 f4       	brne	.+2      	; 0x96c <__stack+0x6d>
     96a:	5c cf       	rjmp	.-328    	; 0x824 <maze_solve+0x182>
     96c:	05 c0       	rjmp	.+10     	; 0x978 <__stack+0x79>
				node_number = node_number + 1;
				turn('L',speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	b8 16       	cp	r11, r24
     972:	09 f4       	brne	.+2      	; 0x976 <__stack+0x77>
     974:	0a cf       	rjmp	.-492    	; 0x78a <maze_solve+0xe8>
     976:	04 c0       	rjmp	.+8      	; 0x980 <__stack+0x81>
				node_number = node_number + 1;
				turn('S',speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     978:	e1 e0       	ldi	r30, 0x01	; 1
     97a:	9e 16       	cp	r9, r30
     97c:	09 f4       	brne	.+2      	; 0x980 <__stack+0x81>
     97e:	7c cf       	rjmp	.-264    	; 0x878 <maze_solve+0x1d6>
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
			if (sensor_data_hold & 0b00100)
			{
				Forward_trigged = 1;
     980:	aa 24       	eor	r10, r10
     982:	a3 94       	inc	r10
     984:	9f ce       	rjmp	.-706    	; 0x6c4 <maze_solve+0x22>

00000986 <turn>:

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
	
	if (dir == 'L')
     986:	8c 34       	cpi	r24, 0x4C	; 76
     988:	e1 f5       	brne	.+120    	; 0xa02 <turn+0x7c>
	{
		delay_ms(17); //25
     98a:	81 e1       	ldi	r24, 0x11	; 17
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(0,0);
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(10);
     99e:	8a e0       	ldi	r24, 0x0A	; 10
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(-200,-200);
     9a6:	68 e3       	ldi	r22, 0x38	; 56
     9a8:	7f ef       	ldi	r23, 0xFF	; 255
     9aa:	88 e3       	ldi	r24, 0x38	; 56
     9ac:	9f ef       	ldi	r25, 0xFF	; 255
     9ae:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(10);
     9b2:	8a e0       	ldi	r24, 0x0A	; 10
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(0,0);
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(20);
     9c6:	84 e1       	ldi	r24, 0x14	; 20
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		
		set_motors(-90,90);
     9ce:	6a e5       	ldi	r22, 0x5A	; 90
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	86 ea       	ldi	r24, 0xA6	; 166
     9d4:	9f ef       	ldi	r25, 0xFF	; 255
     9d6:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     9da:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(20);
		
		set_motors(-90,90);
		
		while(!(sensor_data_save & 0b10000))
     9dc:	84 fd       	sbrc	r24, 4
     9de:	03 c0       	rjmp	.+6      	; 0x9e6 <turn+0x60>
		{
			sensor_data_save = sensor_data_verified();
     9e0:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     9e4:	fb cf       	rjmp	.-10     	; 0x9dc <turn+0x56>
		}
		while(sensor_data_save & 0b10000)
     9e6:	84 ff       	sbrs	r24, 4
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <turn+0x6a>
		{
			sensor_data_save = sensor_data_verified();
     9ea:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     9ee:	fb cf       	rjmp	.-10     	; 0x9e6 <turn+0x60>
		//while(!(sensor_data_save & 0b00010))
		//{
		//	sensor_data_save = sensor_data_verified();
		//}
		
		set_motors(0,0);
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(1); //30
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	99 c0       	rjmp	.+306    	; 0xb34 <turn+0x1ae>
		
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);
	}
	else if (dir == 'R')
     a02:	82 35       	cpi	r24, 0x52	; 82
     a04:	09 f0       	breq	.+2      	; 0xa08 <turn+0x82>
     a06:	50 c0       	rjmp	.+160    	; 0xaa8 <turn+0x122>
	{
		delay_ms(17);  //25
     a08:	81 e1       	ldi	r24, 0x11	; 17
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(0,0);
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(10);
     a1c:	8a e0       	ldi	r24, 0x0A	; 10
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(-200,-200);
     a24:	68 e3       	ldi	r22, 0x38	; 56
     a26:	7f ef       	ldi	r23, 0xFF	; 255
     a28:	88 e3       	ldi	r24, 0x38	; 56
     a2a:	9f ef       	ldi	r25, 0xFF	; 255
     a2c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(10);
     a30:	8a e0       	ldi	r24, 0x0A	; 10
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(0,0);
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(20);
     a44:	84 e1       	ldi	r24, 0x14	; 20
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		
		set_motors(90,-90);
     a4c:	66 ea       	ldi	r22, 0xA6	; 166
     a4e:	7f ef       	ldi	r23, 0xFF	; 255
     a50:	8a e5       	ldi	r24, 0x5A	; 90
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     a58:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(20);
		
		set_motors(90,-90);
		
		while(!(sensor_data_save & 0b00001))
     a5a:	80 fd       	sbrc	r24, 0
     a5c:	03 c0       	rjmp	.+6      	; 0xa64 <turn+0xde>
		{
			sensor_data_save = sensor_data_verified();
     a5e:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     a62:	fb cf       	rjmp	.-10     	; 0xa5a <turn+0xd4>
		}
		while(sensor_data_save & 0b00001)
     a64:	80 ff       	sbrs	r24, 0
     a66:	03 c0       	rjmp	.+6      	; 0xa6e <turn+0xe8>
		{
			sensor_data_save = sensor_data_verified();
     a68:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     a6c:	fb cf       	rjmp	.-10     	; 0xa64 <turn+0xde>
		//while(!(sensor_data_save & 0b01000))
		//{
		//	sensor_data_save = sensor_data_verified();
		//}
		//delay_ms(7); // external 
		set_motors(0,0);
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(1);//30
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(-100,100);
     a82:	64 e6       	ldi	r22, 0x64	; 100
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	8c e9       	ldi	r24, 0x9C	; 156
     a88:	9f ef       	ldi	r25, 0xFF	; 255
     a8a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(10);
     a8e:	8a e0       	ldi	r24, 0x0A	; 10
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(0,0);
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(20);
     aa2:	84 e1       	ldi	r24, 0x14	; 20
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	b7 c0       	rjmp	.+366    	; 0xc16 <turn+0x290>
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);

	}
	else if (dir == 'S')
     aa8:	83 35       	cpi	r24, 0x53	; 83
     aaa:	09 f4       	brne	.+2      	; 0xaae <turn+0x128>
     aac:	b6 c0       	rjmp	.+364    	; 0xc1a <turn+0x294>
		//delay_ms(10);
		//set_motors(0,0);
		//delay_ms(50);
		////follow_segment(speed);
	}
	else if (dir == 'U')
     aae:	85 35       	cpi	r24, 0x55	; 85
     ab0:	09 f0       	breq	.+2      	; 0xab4 <turn+0x12e>
     ab2:	47 c0       	rjmp	.+142    	; 0xb42 <turn+0x1bc>
	{
		delay_ms(25);
     ab4:	89 e1       	ldi	r24, 0x19	; 25
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(0,0);
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(10);
     ac8:	8a e0       	ldi	r24, 0x0A	; 10
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(-200,-200);
     ad0:	68 e3       	ldi	r22, 0x38	; 56
     ad2:	7f ef       	ldi	r23, 0xFF	; 255
     ad4:	88 e3       	ldi	r24, 0x38	; 56
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(10);
     adc:	8a e0       	ldi	r24, 0x0A	; 10
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(0,0);
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(20);
     af0:	84 e1       	ldi	r24, 0x14	; 20
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		
		set_motors(-90,90);
     af8:	6a e5       	ldi	r22, 0x5A	; 90
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	86 ea       	ldi	r24, 0xA6	; 166
     afe:	9f ef       	ldi	r25, 0xFF	; 255
     b00:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     b04:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(20);
		
		set_motors(-90,90);
		
		while(!(sensor_data_save & 0b10000))
     b06:	84 fd       	sbrc	r24, 4
     b08:	03 c0       	rjmp	.+6      	; 0xb10 <turn+0x18a>
		{
			sensor_data_save = sensor_data_verified();
     b0a:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b0e:	fb cf       	rjmp	.-10     	; 0xb06 <turn+0x180>
		}
		while(sensor_data_save & 0b10000)
     b10:	84 ff       	sbrs	r24, 4
     b12:	03 c0       	rjmp	.+6      	; 0xb1a <turn+0x194>
		{
			sensor_data_save = sensor_data_verified();
     b14:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b18:	fb cf       	rjmp	.-10     	; 0xb10 <turn+0x18a>
		}
		while(!(sensor_data_save & 0b00010))
     b1a:	81 fd       	sbrc	r24, 1
     b1c:	03 c0       	rjmp	.+6      	; 0xb24 <turn+0x19e>
		{
			sensor_data_save = sensor_data_verified();
     b1e:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b22:	fb cf       	rjmp	.-10     	; 0xb1a <turn+0x194>
		}
		
		set_motors(0,0);
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(10);//30
     b30:	8a e0       	ldi	r24, 0x0A	; 10
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(100,-100);
     b38:	6c e9       	ldi	r22, 0x9C	; 156
     b3a:	7f ef       	ldi	r23, 0xFF	; 255
     b3c:	84 e6       	ldi	r24, 0x64	; 100
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a4 cf       	rjmp	.-184    	; 0xa8a <turn+0x104>
		delay_ms(20);
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);
	}
	else if (dir == 'D')
     b42:	84 34       	cpi	r24, 0x44	; 68
     b44:	09 f0       	breq	.+2      	; 0xb48 <turn+0x1c2>
     b46:	69 c0       	rjmp	.+210    	; 0xc1a <turn+0x294>
	{
		uint16_t sensor_data_hold;
		set_motors(0,0);
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		//delay_ms(50);
		//set_motors(-100,-100);
		//delay_ms(50);
		//set_motors(0,0);
		//process_array();
		delay_ms(200);
     b54:	88 ec       	ldi	r24, 0xC8	; 200
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(-50,-50);
     b5c:	6e ec       	ldi	r22, 0xCE	; 206
     b5e:	7f ef       	ldi	r23, 0xFF	; 255
     b60:	8e ec       	ldi	r24, 0xCE	; 206
     b62:	9f ef       	ldi	r25, 0xFF	; 255
     b64:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		sensor_data_hold = sensor_data_verified();
		while((sensor_data_hold & 0b10001) == 0b10001)
		{
			sensor_data_hold = sensor_data_verified();
     b68:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     b6c:	90 e0       	ldi	r25, 0x00	; 0
		//set_motors(0,0);
		//process_array();
		delay_ms(200);
		set_motors(-50,-50);
		sensor_data_hold = sensor_data_verified();
		while((sensor_data_hold & 0b10001) == 0b10001)
     b6e:	81 71       	andi	r24, 0x11	; 17
     b70:	99 27       	eor	r25, r25
     b72:	41 97       	sbiw	r24, 0x11	; 17
     b74:	c9 f3       	breq	.-14     	; 0xb68 <turn+0x1e2>
		{
			sensor_data_hold = sensor_data_verified();
		}
		set_motors(0,0);
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(50);
     b82:	82 e3       	ldi	r24, 0x32	; 50
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(50,50);
     b8a:	62 e3       	ldi	r22, 0x32	; 50
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	82 e3       	ldi	r24, 0x32	; 50
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(150);
     b96:	86 e9       	ldi	r24, 0x96	; 150
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		//set_motors(-100,-100);
		//delay_ms(50);
		set_motors(0,0);
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(50);
     baa:	82 e3       	ldi	r24, 0x32	; 50
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(-60,60);
     bb2:	6c e3       	ldi	r22, 0x3C	; 60
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	84 ec       	ldi	r24, 0xC4	; 196
     bb8:	9f ef       	ldi	r25, 0xFF	; 255
     bba:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(50);
     bbe:	82 e3       	ldi	r24, 0x32	; 50
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		while((sensor_data_verified() & 0b10000) != 0x00);
     bc6:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     bca:	84 fd       	sbrc	r24, 4
     bcc:	fc cf       	rjmp	.-8      	; 0xbc6 <turn+0x240>
		while((sensor_data_verified() & 0b10000) != 0b10000);
     bce:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     bd2:	84 ff       	sbrs	r24, 4
     bd4:	fc cf       	rjmp	.-8      	; 0xbce <turn+0x248>
		while((sensor_data_verified() & 0b00010) != 0b00010);
     bd6:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     bda:	81 ff       	sbrs	r24, 1
     bdc:	fc cf       	rjmp	.-8      	; 0xbd6 <turn+0x250>
		////while(sensor_data() & (3<<3)) != (3<<3));
		//delay_ms(20);
		//set_motors(0,0);
		//delay_ms(50);
		
		set_motors(0,0);
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(20); //30
     bea:	84 e1       	ldi	r24, 0x14	; 20
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(100,-100);
     bf2:	6c e9       	ldi	r22, 0x9C	; 156
     bf4:	7f ef       	ldi	r23, 0xFF	; 255
     bf6:	84 e6       	ldi	r24, 0x64	; 100
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(10);
     bfe:	8a e0       	ldi	r24, 0x0A	; 10
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
		set_motors(0,0);
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <set_motors>
		delay_ms(50);
     c12:	82 e3       	ldi	r24, 0x32	; 50
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <delay_ms>
     c1a:	08 95       	ret

00000c1c <_ZN15OrangutanAnalog7setModeEh>:
     c1c:	88 23       	and	r24, r24
     c1e:	21 f4       	brne	.+8      	; 0xc28 <_ZN15OrangutanAnalog7setModeEh+0xc>
     c20:	80 91 7c 00 	lds	r24, 0x007C
     c24:	8f 7d       	andi	r24, 0xDF	; 223
     c26:	03 c0       	rjmp	.+6      	; 0xc2e <_ZN15OrangutanAnalog7setModeEh+0x12>
     c28:	80 91 7c 00 	lds	r24, 0x007C
     c2c:	80 62       	ori	r24, 0x20	; 32
     c2e:	80 93 7c 00 	sts	0x007C, r24
     c32:	08 95       	ret

00000c34 <_ZN15OrangutanAnalog7getModeEv>:
     c34:	80 91 7c 00 	lds	r24, 0x007C
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	25 e0       	ldi	r18, 0x05	; 5
     c3c:	95 95       	asr	r25
     c3e:	87 95       	ror	r24
     c40:	2a 95       	dec	r18
     c42:	e1 f7       	brne	.-8      	; 0xc3c <_ZN15OrangutanAnalog7getModeEv+0x8>
     c44:	81 70       	andi	r24, 0x01	; 1
     c46:	08 95       	ret

00000c48 <_ZN15OrangutanAnalog12isConvertingEv>:
     c48:	80 91 7a 00 	lds	r24, 0x007A
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	36 e0       	ldi	r19, 0x06	; 6
     c50:	95 95       	asr	r25
     c52:	87 95       	ror	r24
     c54:	3a 95       	dec	r19
     c56:	e1 f7       	brne	.-8      	; 0xc50 <_ZN15OrangutanAnalog12isConvertingEv+0x8>
     c58:	81 70       	andi	r24, 0x01	; 1
     c5a:	08 95       	ret

00000c5c <_ZN15OrangutanAnalog16conversionResultEv>:
     c5c:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN15OrangutanAnalog7getModeEv>
     c60:	88 23       	and	r24, r24
     c62:	21 f0       	breq	.+8      	; 0xc6c <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     c64:	20 91 79 00 	lds	r18, 0x0079
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <_ZN15OrangutanAnalog16conversionResultEv+0x18>
     c6c:	20 91 78 00 	lds	r18, 0x0078
     c70:	30 91 79 00 	lds	r19, 0x0079
     c74:	c9 01       	movw	r24, r18
     c76:	08 95       	ret

00000c78 <_ZN15OrangutanAnalog15startConversionEhh>:
     c78:	80 32       	cpi	r24, 0x20	; 32
     c7a:	b0 f4       	brcc	.+44     	; 0xca8 <_ZN15OrangutanAnalog15startConversionEhh+0x30>
     c7c:	97 e8       	ldi	r25, 0x87	; 135
     c7e:	90 93 7a 00 	sts	0x007A, r25
     c82:	90 91 7c 00 	lds	r25, 0x007C
     c86:	29 2f       	mov	r18, r25
     c88:	20 64       	ori	r18, 0x40	; 64
     c8a:	66 23       	and	r22, r22
     c8c:	11 f0       	breq	.+4      	; 0xc92 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     c8e:	90 6c       	ori	r25, 0xC0	; 192
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <_ZN15OrangutanAnalog15startConversionEhh+0x1e>
     c92:	92 2f       	mov	r25, r18
     c94:	9f 77       	andi	r25, 0x7F	; 127
     c96:	90 7e       	andi	r25, 0xE0	; 224
     c98:	98 2b       	or	r25, r24
     c9a:	90 93 7c 00 	sts	0x007C, r25
     c9e:	80 91 7a 00 	lds	r24, 0x007A
     ca2:	80 64       	ori	r24, 0x40	; 64
     ca4:	80 93 7a 00 	sts	0x007A, r24
     ca8:	08 95       	ret

00000caa <_ZN15OrangutanAnalog11readAverageEhj>:
     caa:	a0 e0       	ldi	r26, 0x00	; 0
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	eb e5       	ldi	r30, 0x5B	; 91
     cb0:	f6 e0       	ldi	r31, 0x06	; 6
     cb2:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__prologue_saves__+0x14>
     cb6:	6b 01       	movw	r12, r22
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN15OrangutanAnalog15startConversionEhh>
     cbe:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZN15OrangutanAnalog12isConvertingEv>
     cc2:	88 23       	and	r24, r24
     cc4:	e1 f7       	brne	.-8      	; 0xcbe <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     cc6:	e6 01       	movw	r28, r12
     cc8:	ee 24       	eor	r14, r14
     cca:	ff 24       	eor	r15, r15
     ccc:	87 01       	movw	r16, r14
     cce:	80 91 7a 00 	lds	r24, 0x007A
     cd2:	80 64       	ori	r24, 0x40	; 64
     cd4:	80 93 7a 00 	sts	0x007A, r24
     cd8:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZN15OrangutanAnalog12isConvertingEv>
     cdc:	88 23       	and	r24, r24
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     ce0:	0e 94 2e 06 	call	0xc5c	; 0xc5c <_ZN15OrangutanAnalog16conversionResultEv>
     ce4:	a0 e0       	ldi	r26, 0x00	; 0
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e8 0e       	add	r14, r24
     cea:	f9 1e       	adc	r15, r25
     cec:	0a 1f       	adc	r16, r26
     cee:	1b 1f       	adc	r17, r27
     cf0:	21 97       	sbiw	r28, 0x01	; 1
     cf2:	69 f7       	brne	.-38     	; 0xcce <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     cf4:	c6 01       	movw	r24, r12
     cf6:	96 95       	lsr	r25
     cf8:	87 95       	ror	r24
     cfa:	20 e4       	ldi	r18, 0x40	; 64
     cfc:	c2 16       	cp	r12, r18
     cfe:	d1 04       	cpc	r13, r1
     d00:	40 f4       	brcc	.+16     	; 0xd12 <_ZN15OrangutanAnalog11readAverageEhj+0x68>
     d02:	8e 0d       	add	r24, r14
     d04:	9f 1d       	adc	r25, r15
     d06:	6c 2d       	mov	r22, r12
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	0e 94 95 13 	call	0x272a	; 0x272a <__udivmodhi4>
     d0e:	cb 01       	movw	r24, r22
     d10:	0d c0       	rjmp	.+26     	; 0xd2c <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     d12:	bc 01       	movw	r22, r24
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	6e 0d       	add	r22, r14
     d1a:	7f 1d       	adc	r23, r15
     d1c:	80 1f       	adc	r24, r16
     d1e:	91 1f       	adc	r25, r17
     d20:	96 01       	movw	r18, r12
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	0e 94 bd 13 	call	0x277a	; 0x277a <__udivmodsi4>
     d2a:	c9 01       	movw	r24, r18
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	e8 e0       	ldi	r30, 0x08	; 8
     d32:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__epilogue_restores__+0x14>

00000d36 <_ZN15OrangutanAnalog12toMillivoltsEj>:
     d36:	a3 e0       	ldi	r26, 0x03	; 3
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e1 ea       	ldi	r30, 0xA1	; 161
     d3c:	f6 e0       	ldi	r31, 0x06	; 6
     d3e:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__prologue_saves__+0x1e>
     d42:	bc 01       	movw	r22, r24
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	20 91 00 01 	lds	r18, 0x0100
     d4c:	30 91 01 01 	lds	r19, 0x0101
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsi3>
     d58:	18 2f       	mov	r17, r24
     d5a:	69 83       	std	Y+1, r22	; 0x01
     d5c:	7a 83       	std	Y+2, r23	; 0x02
     d5e:	9b 83       	std	Y+3, r25	; 0x03
     d60:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN15OrangutanAnalog7getModeEv>
     d64:	69 81       	ldd	r22, Y+1	; 0x01
     d66:	7a 81       	ldd	r23, Y+2	; 0x02
     d68:	9b 81       	ldd	r25, Y+3	; 0x03
     d6a:	88 23       	and	r24, r24
     d6c:	71 f0       	breq	.+28     	; 0xd8a <_ZN15OrangutanAnalog12toMillivoltsEj+0x54>
     d6e:	9b 01       	movw	r18, r22
     d70:	41 2f       	mov	r20, r17
     d72:	59 2f       	mov	r21, r25
     d74:	ca 01       	movw	r24, r20
     d76:	b9 01       	movw	r22, r18
     d78:	61 58       	subi	r22, 0x81	; 129
     d7a:	7f 4f       	sbci	r23, 0xFF	; 255
     d7c:	8f 4f       	sbci	r24, 0xFF	; 255
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	2f ef       	ldi	r18, 0xFF	; 255
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	0d c0       	rjmp	.+26     	; 0xda4 <_ZN15OrangutanAnalog12toMillivoltsEj+0x6e>
     d8a:	9b 01       	movw	r18, r22
     d8c:	41 2f       	mov	r20, r17
     d8e:	59 2f       	mov	r21, r25
     d90:	ca 01       	movw	r24, r20
     d92:	b9 01       	movw	r22, r18
     d94:	61 50       	subi	r22, 0x01	; 1
     d96:	7e 4f       	sbci	r23, 0xFE	; 254
     d98:	8f 4f       	sbci	r24, 0xFF	; 255
     d9a:	9f 4f       	sbci	r25, 0xFF	; 255
     d9c:	2f ef       	ldi	r18, 0xFF	; 255
     d9e:	33 e0       	ldi	r19, 0x03	; 3
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	0e 94 bd 13 	call	0x277a	; 0x277a <__udivmodsi4>
     da8:	c9 01       	movw	r24, r18
     daa:	23 96       	adiw	r28, 0x03	; 3
     dac:	e3 e0       	ldi	r30, 0x03	; 3
     dae:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__epilogue_restores__+0x1e>

00000db2 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     db2:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN15OrangutanAnalog11readAverageEhj>
     db6:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN15OrangutanAnalog12toMillivoltsEj>
     dba:	08 95       	ret

00000dbc <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN15OrangutanAnalog7getModeEv>
     dc6:	18 2f       	mov	r17, r24
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	0e 94 0e 06 	call	0xc1c	; 0xc1c <_ZN15OrangutanAnalog7setModeEh>
     dce:	86 e0       	ldi	r24, 0x06	; 6
     dd0:	6a e0       	ldi	r22, 0x0A	; 10
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     dd8:	ec 01       	movw	r28, r24
     dda:	81 2f       	mov	r24, r17
     ddc:	0e 94 0e 06 	call	0xc1c	; 0xc1c <_ZN15OrangutanAnalog7setModeEh>
     de0:	9e 01       	movw	r18, r28
     de2:	22 0f       	add	r18, r18
     de4:	33 1f       	adc	r19, r19
     de6:	2c 0f       	add	r18, r28
     de8:	3d 1f       	adc	r19, r29
     dea:	2f 5f       	subi	r18, 0xFF	; 255
     dec:	3f 4f       	sbci	r19, 0xFF	; 255
     dee:	36 95       	lsr	r19
     df0:	27 95       	ror	r18
     df2:	c9 01       	movw	r24, r18
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	08 95       	ret

00000dfc <read_battery_millivolts_3pi>:
     dfc:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     e00:	08 95       	ret

00000e02 <_ZL16currentCharacterv>:
     e02:	90 91 4f 01 	lds	r25, 0x014F
     e06:	e0 91 4b 01 	lds	r30, 0x014B
     e0a:	f0 91 4c 01 	lds	r31, 0x014C
     e0e:	99 23       	and	r25, r25
     e10:	11 f0       	breq	.+4      	; 0xe16 <_ZL16currentCharacterv+0x14>
     e12:	84 91       	lpm	r24, Z
     e14:	01 c0       	rjmp	.+2      	; 0xe18 <_ZL16currentCharacterv+0x16>
     e16:	80 81       	ld	r24, Z
     e18:	28 2f       	mov	r18, r24
     e1a:	21 54       	subi	r18, 0x41	; 65
     e1c:	2a 31       	cpi	r18, 0x1A	; 26
     e1e:	10 f4       	brcc	.+4      	; 0xe24 <_ZL16currentCharacterv+0x22>
     e20:	80 5e       	subi	r24, 0xE0	; 224
     e22:	08 95       	ret
     e24:	80 32       	cpi	r24, 0x20	; 32
     e26:	71 f4       	brne	.+28     	; 0xe44 <_ZL16currentCharacterv+0x42>
     e28:	20 91 4b 01 	lds	r18, 0x014B
     e2c:	30 91 4c 01 	lds	r19, 0x014C
     e30:	a9 01       	movw	r20, r18
     e32:	4f 5f       	subi	r20, 0xFF	; 255
     e34:	5f 4f       	sbci	r21, 0xFF	; 255
     e36:	50 93 4c 01 	sts	0x014C, r21
     e3a:	40 93 4b 01 	sts	0x014B, r20
     e3e:	21 15       	cp	r18, r1
     e40:	31 05       	cpc	r19, r1
     e42:	09 f7       	brne	.-62     	; 0xe06 <_ZL16currentCharacterv+0x4>
     e44:	08 95       	ret

00000e46 <_ZL9getNumberv>:
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	0e 94 01 07 	call	0xe02	; 0xe02 <_ZL16currentCharacterv>
     e52:	c0 e0       	ldi	r28, 0x00	; 0
     e54:	d0 e0       	ldi	r29, 0x00	; 0
     e56:	1b c0       	rjmp	.+54     	; 0xe8e <_ZL9getNumberv+0x48>
     e58:	9e 01       	movw	r18, r28
     e5a:	22 0f       	add	r18, r18
     e5c:	33 1f       	adc	r19, r19
     e5e:	93 e0       	ldi	r25, 0x03	; 3
     e60:	cc 0f       	add	r28, r28
     e62:	dd 1f       	adc	r29, r29
     e64:	9a 95       	dec	r25
     e66:	e1 f7       	brne	.-8      	; 0xe60 <_ZL9getNumberv+0x1a>
     e68:	c2 0f       	add	r28, r18
     e6a:	d3 1f       	adc	r29, r19
     e6c:	99 27       	eor	r25, r25
     e6e:	87 fd       	sbrc	r24, 7
     e70:	90 95       	com	r25
     e72:	c8 0f       	add	r28, r24
     e74:	d9 1f       	adc	r29, r25
     e76:	e0 97       	sbiw	r28, 0x30	; 48
     e78:	80 91 4b 01 	lds	r24, 0x014B
     e7c:	90 91 4c 01 	lds	r25, 0x014C
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	90 93 4c 01 	sts	0x014C, r25
     e86:	80 93 4b 01 	sts	0x014B, r24
     e8a:	0e 94 01 07 	call	0xe02	; 0xe02 <_ZL16currentCharacterv>
     e8e:	98 2f       	mov	r25, r24
     e90:	90 53       	subi	r25, 0x30	; 48
     e92:	9a 30       	cpi	r25, 0x0A	; 10
     e94:	08 f3       	brcs	.-62     	; 0xe58 <_ZL9getNumberv+0x12>
     e96:	ce 01       	movw	r24, r28
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	08 95       	ret

00000ea2 <_ZN15OrangutanBuzzer5init2Ev>:
     ea2:	10 92 6f 00 	sts	0x006F, r1
     ea6:	83 e2       	ldi	r24, 0x23	; 35
     ea8:	80 93 80 00 	sts	0x0080, r24
     eac:	81 e1       	ldi	r24, 0x11	; 17
     eae:	80 93 81 00 	sts	0x0081, r24
     eb2:	10 92 82 00 	sts	0x0082, r1
     eb6:	80 e1       	ldi	r24, 0x10	; 16
     eb8:	97 e2       	ldi	r25, 0x27	; 39
     eba:	90 93 89 00 	sts	0x0089, r25
     ebe:	80 93 88 00 	sts	0x0088, r24
     ec2:	10 92 8b 00 	sts	0x008B, r1
     ec6:	10 92 8a 00 	sts	0x008A, r1
     eca:	22 9a       	sbi	0x04, 2	; 4
     ecc:	78 94       	sei
     ece:	08 95       	ret

00000ed0 <_ZN15OrangutanBuzzer4initEv>:
     ed0:	80 91 4a 01 	lds	r24, 0x014A
     ed4:	88 23       	and	r24, r24
     ed6:	29 f4       	brne	.+10     	; 0xee2 <_ZN15OrangutanBuzzer4initEv+0x12>
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	80 93 4a 01 	sts	0x014A, r24
     ede:	0e 94 51 07 	call	0xea2	; 0xea2 <_ZN15OrangutanBuzzer5init2Ev>
     ee2:	08 95       	ret

00000ee4 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e7       	ldi	r30, 0x78	; 120
     eea:	f7 e0       	ldi	r31, 0x07	; 7
     eec:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__prologue_saves__+0xc>
     ef0:	8c 01       	movw	r16, r24
     ef2:	5b 01       	movw	r10, r22
     ef4:	e4 2e       	mov	r14, r20
     ef6:	0e 94 68 07 	call	0xed0	; 0xed0 <_ZN15OrangutanBuzzer4initEv>
     efa:	10 92 02 01 	sts	0x0102, r1
     efe:	17 ff       	sbrs	r17, 7
     f00:	04 c0       	rjmp	.+8      	; 0xf0a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x26>
     f02:	1f 77       	andi	r17, 0x7F	; 127
     f04:	aa e0       	ldi	r26, 0x0A	; 10
     f06:	fa 2e       	mov	r15, r26
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
     f0a:	ff 24       	eor	r15, r15
     f0c:	f3 94       	inc	r15
     f0e:	c0 90 81 00 	lds	r12, 0x0081
     f12:	dd 24       	eor	r13, r13
     f14:	28 ef       	ldi	r18, 0xF8	; 248
     f16:	c2 22       	and	r12, r18
     f18:	dd 24       	eor	r13, r13
     f1a:	88 ec       	ldi	r24, 0xC8	; 200
     f1c:	3f 2d       	mov	r19, r15
     f1e:	38 9f       	mul	r19, r24
     f20:	c0 01       	movw	r24, r0
     f22:	11 24       	eor	r1, r1
     f24:	80 17       	cp	r24, r16
     f26:	91 07       	cpc	r25, r17
     f28:	d8 f4       	brcc	.+54     	; 0xf60 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x7c>
     f2a:	e8 01       	movw	r28, r16
     f2c:	67 e2       	ldi	r22, 0x27	; 39
     f2e:	01 31       	cpi	r16, 0x11	; 17
     f30:	16 07       	cpc	r17, r22
     f32:	10 f0       	brcs	.+4      	; 0xf38 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x54>
     f34:	c0 e1       	ldi	r28, 0x10	; 16
     f36:	d7 e2       	ldi	r29, 0x27	; 39
     f38:	be 01       	movw	r22, r28
     f3a:	76 95       	lsr	r23
     f3c:	67 95       	ror	r22
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	60 58       	subi	r22, 0x80	; 128
     f44:	79 46       	sbci	r23, 0x69	; 105
     f46:	87 46       	sbci	r24, 0x67	; 103
     f48:	9f 4f       	sbci	r25, 0xFF	; 255
     f4a:	9e 01       	movw	r18, r28
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	0e 94 bd 13 	call	0x277a	; 0x277a <__udivmodsi4>
     f54:	89 01       	movw	r16, r18
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	c8 2a       	or	r12, r24
     f5c:	d9 2a       	or	r13, r25
     f5e:	2c c0       	rjmp	.+88     	; 0xfb8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd4>
     f60:	98 e2       	ldi	r25, 0x28	; 40
     f62:	f9 9e       	mul	r15, r25
     f64:	90 2d       	mov	r25, r0
     f66:	11 24       	eor	r1, r1
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	89 2e       	mov	r8, r25
     f6c:	e4 01       	movw	r28, r8
     f6e:	4e 01       	movw	r8, r28
     f70:	98 2e       	mov	r9, r24
     f72:	e4 01       	movw	r28, r8
     f74:	80 16       	cp	r8, r16
     f76:	91 06       	cpc	r9, r17
     f78:	08 f4       	brcc	.+2      	; 0xf7c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x98>
     f7a:	e8 01       	movw	r28, r16
     f7c:	be 01       	movw	r22, r28
     f7e:	76 95       	lsr	r23
     f80:	67 95       	ror	r22
     f82:	9e 01       	movw	r18, r28
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	8f 2d       	mov	r24, r15
     f8a:	8a 30       	cpi	r24, 0x0A	; 10
     f8c:	39 f4       	brne	.+14     	; 0xf9c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb8>
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	60 5e       	subi	r22, 0xE0	; 224
     f94:	73 44       	sbci	r23, 0x43	; 67
     f96:	81 44       	sbci	r24, 0x41	; 65
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	06 c0       	rjmp	.+12     	; 0xfa8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc4>
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	60 53       	subi	r22, 0x30	; 48
     fa2:	7d 4e       	sbci	r23, 0xED	; 237
     fa4:	8c 4e       	sbci	r24, 0xEC	; 236
     fa6:	9f 4f       	sbci	r25, 0xFF	; 255
     fa8:	0e 94 bd 13 	call	0x277a	; 0x277a <__udivmodsi4>
     fac:	89 01       	movw	r16, r18
     fae:	52 e0       	ldi	r21, 0x02	; 2
     fb0:	85 2e       	mov	r8, r21
     fb2:	91 2c       	mov	r9, r1
     fb4:	c8 28       	or	r12, r8
     fb6:	d9 28       	or	r13, r9
     fb8:	2f 2d       	mov	r18, r15
     fba:	2a 30       	cpi	r18, 0x0A	; 10
     fbc:	39 f4       	brne	.+14     	; 0xfcc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe8>
     fbe:	ce 01       	movw	r24, r28
     fc0:	05 96       	adiw	r24, 0x05	; 5
     fc2:	6a e0       	ldi	r22, 0x0A	; 10
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	0e 94 95 13 	call	0x272a	; 0x272a <__udivmodhi4>
     fca:	eb 01       	movw	r28, r22
     fcc:	33 e0       	ldi	r19, 0x03	; 3
     fce:	c8 3e       	cpi	r28, 0xE8	; 232
     fd0:	d3 07       	cpc	r29, r19
     fd2:	79 f0       	breq	.+30     	; 0xff2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x10e>
     fd4:	be 01       	movw	r22, r28
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	95 01       	movw	r18, r10
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsi3>
     fe4:	28 ee       	ldi	r18, 0xE8	; 232
     fe6:	33 e0       	ldi	r19, 0x03	; 3
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	0e 94 df 13 	call	0x27be	; 0x27be <__divmodsi4>
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
     ff2:	95 01       	movw	r18, r10
     ff4:	10 92 6f 00 	sts	0x006F, r1
     ff8:	c0 92 81 00 	sts	0x0081, r12
     ffc:	10 93 89 00 	sts	0x0089, r17
    1000:	00 93 88 00 	sts	0x0088, r16
    1004:	40 91 88 00 	lds	r20, 0x0088
    1008:	50 91 89 00 	lds	r21, 0x0089
    100c:	6e 2d       	mov	r22, r14
    100e:	60 31       	cpi	r22, 0x10	; 16
    1010:	08 f0       	brcs	.+2      	; 0x1014 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1012:	6f e0       	ldi	r22, 0x0F	; 15
    1014:	80 e1       	ldi	r24, 0x10	; 16
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	86 1b       	sub	r24, r22
    101a:	91 09       	sbc	r25, r1
    101c:	ba 01       	movw	r22, r20
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1020:	76 95       	lsr	r23
    1022:	67 95       	ror	r22
    1024:	8a 95       	dec	r24
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1028:	70 93 8b 00 	sts	0x008B, r23
    102c:	60 93 8a 00 	sts	0x008A, r22
    1030:	30 93 52 01 	sts	0x0152, r19
    1034:	20 93 51 01 	sts	0x0151, r18
    1038:	86 b3       	in	r24, 0x16	; 22
    103a:	8f ef       	ldi	r24, 0xFF	; 255
    103c:	86 bb       	out	0x16, r24	; 22
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	80 93 6f 00 	sts	0x006F, r24
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	ec e0       	ldi	r30, 0x0C	; 12
    104a:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__epilogue_restores__+0xc>

0000104e <_ZN15OrangutanBuzzer8playNoteEhjh>:
    104e:	9b 01       	movw	r18, r22
    1050:	8f 3f       	cpi	r24, 0xFF	; 255
    1052:	11 f0       	breq	.+4      	; 0x1058 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa>
    1054:	44 23       	and	r20, r20
    1056:	29 f4       	brne	.+10     	; 0x1062 <_ZN15OrangutanBuzzer8playNoteEhjh+0x14>
    1058:	88 ee       	ldi	r24, 0xE8	; 232
    105a:	93 e0       	ldi	r25, 0x03	; 3
    105c:	b9 01       	movw	r22, r18
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	49 c0       	rjmp	.+146    	; 0x10f4 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa6>
    1062:	81 31       	cpi	r24, 0x11	; 17
    1064:	30 f0       	brcs	.+12     	; 0x1072 <_ZN15OrangutanBuzzer8playNoteEhjh+0x24>
    1066:	58 2f       	mov	r21, r24
    1068:	50 51       	subi	r21, 0x10	; 16
    106a:	50 36       	cpi	r21, 0x60	; 96
    106c:	18 f0       	brcs	.+6      	; 0x1074 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    106e:	5f e5       	ldi	r21, 0x5F	; 95
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	85 2f       	mov	r24, r21
    1076:	6c e0       	ldi	r22, 0x0C	; 12
    1078:	0e 94 89 13 	call	0x2712	; 0x2712 <__udivmodqi4>
    107c:	a8 2f       	mov	r26, r24
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e4 ef       	ldi	r30, 0xF4	; 244
    1082:	ff ef       	ldi	r31, 0xFF	; 255
    1084:	ae 9f       	mul	r26, r30
    1086:	b0 01       	movw	r22, r0
    1088:	af 9f       	mul	r26, r31
    108a:	70 0d       	add	r23, r0
    108c:	be 9f       	mul	r27, r30
    108e:	70 0d       	add	r23, r0
    1090:	11 24       	eor	r1, r1
    1092:	65 0f       	add	r22, r21
    1094:	71 1d       	adc	r23, r1
    1096:	6c 30       	cpi	r22, 0x0C	; 12
    1098:	71 05       	cpc	r23, r1
    109a:	40 f4       	brcc	.+16     	; 0x10ac <_ZN15OrangutanBuzzer8playNoteEhjh+0x5e>
    109c:	fb 01       	movw	r30, r22
    109e:	ee 0f       	add	r30, r30
    10a0:	ff 1f       	adc	r31, r31
    10a2:	e4 5f       	subi	r30, 0xF4	; 244
    10a4:	fe 4f       	sbci	r31, 0xFE	; 254
    10a6:	60 81       	ld	r22, Z
    10a8:	71 81       	ldd	r23, Z+1	; 0x01
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	87 30       	cpi	r24, 0x07	; 7
    10b2:	81 f0       	breq	.+32     	; 0x10d4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x86>
    10b4:	08 2e       	mov	r0, r24
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <_ZN15OrangutanBuzzer8playNoteEhjh+0x6e>
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6a>
    10c0:	82 30       	cpi	r24, 0x02	; 2
    10c2:	28 f0       	brcs	.+10     	; 0x10ce <_ZN15OrangutanBuzzer8playNoteEhjh+0x80>
    10c4:	cb 01       	movw	r24, r22
    10c6:	05 96       	adiw	r24, 0x05	; 5
    10c8:	6a e0       	ldi	r22, 0x0A	; 10
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	0c c0       	rjmp	.+24     	; 0x10e6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x98>
    10ce:	60 50       	subi	r22, 0x00	; 0
    10d0:	70 48       	sbci	r23, 0x80	; 128
    10d2:	0b c0       	rjmp	.+22     	; 0x10ea <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    10d4:	cb 01       	movw	r24, r22
    10d6:	b6 e0       	ldi	r27, 0x06	; 6
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	ba 95       	dec	r27
    10de:	e1 f7       	brne	.-8      	; 0x10d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x8a>
    10e0:	02 96       	adiw	r24, 0x02	; 2
    10e2:	65 e0       	ldi	r22, 0x05	; 5
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	0e 94 95 13 	call	0x272a	; 0x272a <__udivmodhi4>
    10ea:	40 31       	cpi	r20, 0x10	; 16
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa2>
    10ee:	4f e0       	ldi	r20, 0x0F	; 15
    10f0:	cb 01       	movw	r24, r22
    10f2:	b9 01       	movw	r22, r18
    10f4:	0e 94 72 07 	call	0xee4	; 0xee4 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    10f8:	08 95       	ret

000010fa <_ZL8nextNotev>:
    10fa:	a0 e0       	ldi	r26, 0x00	; 0
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e3 e8       	ldi	r30, 0x83	; 131
    1100:	f8 e0       	ldi	r31, 0x08	; 8
    1102:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__prologue_saves__+0xa>
    1106:	b0 90 03 01 	lds	r11, 0x0103
    110a:	80 91 4d 01 	lds	r24, 0x014D
    110e:	88 23       	and	r24, r24
    1110:	61 f0       	breq	.+24     	; 0x112a <_ZL8nextNotev+0x30>
    1112:	60 91 4e 01 	lds	r22, 0x014E
    1116:	66 23       	and	r22, r22
    1118:	41 f0       	breq	.+16     	; 0x112a <_ZL8nextNotev+0x30>
    111a:	8f ef       	ldi	r24, 0xFF	; 255
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN15OrangutanBuzzer8playNoteEhjh>
    1124:	10 92 4e 01 	sts	0x014E, r1
    1128:	34 c1       	rjmp	.+616    	; 0x1392 <_ZL8nextNotev+0x298>
    112a:	c0 ec       	ldi	r28, 0xC0	; 192
    112c:	dd e5       	ldi	r29, 0x5D	; 93
    112e:	aa 24       	eor	r10, r10
    1130:	a3 94       	inc	r10
    1132:	14 e0       	ldi	r17, 0x04	; 4
    1134:	71 2e       	mov	r7, r17
    1136:	00 ed       	ldi	r16, 0xD0	; 208
    1138:	17 e0       	ldi	r17, 0x07	; 7
    113a:	b4 e0       	ldi	r27, 0x04	; 4
    113c:	eb 2e       	mov	r14, r27
    113e:	f1 2c       	mov	r15, r1
    1140:	a4 ef       	ldi	r26, 0xF4	; 244
    1142:	ca 2e       	mov	r12, r26
    1144:	a1 e0       	ldi	r26, 0x01	; 1
    1146:	da 2e       	mov	r13, r26
    1148:	ff e0       	ldi	r31, 0x0F	; 15
    114a:	8f 2e       	mov	r8, r31
    114c:	91 2c       	mov	r9, r1
    114e:	0e 94 01 07 	call	0xe02	; 0xe02 <_ZL16currentCharacterv>
    1152:	20 91 4b 01 	lds	r18, 0x014B
    1156:	30 91 4c 01 	lds	r19, 0x014C
    115a:	2f 5f       	subi	r18, 0xFF	; 255
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	30 93 4c 01 	sts	0x014C, r19
    1162:	20 93 4b 01 	sts	0x014B, r18
    1166:	86 36       	cpi	r24, 0x66	; 102
    1168:	f1 f1       	breq	.+124    	; 0x11e6 <_ZL8nextNotev+0xec>
    116a:	87 36       	cpi	r24, 0x67	; 103
    116c:	cc f4       	brge	.+50     	; 0x11a0 <_ZL8nextNotev+0xa6>
    116e:	82 36       	cpi	r24, 0x62	; 98
    1170:	09 f4       	brne	.+2      	; 0x1174 <_ZL8nextNotev+0x7a>
    1172:	af c0       	rjmp	.+350    	; 0x12d2 <_ZL8nextNotev+0x1d8>
    1174:	83 36       	cpi	r24, 0x63	; 99
    1176:	7c f4       	brge	.+30     	; 0x1196 <_ZL8nextNotev+0x9c>
    1178:	8e 33       	cpi	r24, 0x3E	; 62
    117a:	49 f1       	breq	.+82     	; 0x11ce <_ZL8nextNotev+0xd4>
    117c:	8f 33       	cpi	r24, 0x3F	; 63
    117e:	3c f4       	brge	.+14     	; 0x118e <_ZL8nextNotev+0x94>
    1180:	81 32       	cpi	r24, 0x21	; 33
    1182:	09 f4       	brne	.+2      	; 0x1186 <_ZL8nextNotev+0x8c>
    1184:	87 c0       	rjmp	.+270    	; 0x1294 <_ZL8nextNotev+0x19a>
    1186:	8c 33       	cpi	r24, 0x3C	; 60
    1188:	09 f0       	breq	.+2      	; 0x118c <_ZL8nextNotev+0x92>
    118a:	9b c0       	rjmp	.+310    	; 0x12c2 <_ZL8nextNotev+0x1c8>
    118c:	22 c0       	rjmp	.+68     	; 0x11d2 <_ZL8nextNotev+0xd8>
    118e:	81 36       	cpi	r24, 0x61	; 97
    1190:	09 f0       	breq	.+2      	; 0x1194 <_ZL8nextNotev+0x9a>
    1192:	97 c0       	rjmp	.+302    	; 0x12c2 <_ZL8nextNotev+0x1c8>
    1194:	9b c0       	rjmp	.+310    	; 0x12cc <_ZL8nextNotev+0x1d2>
    1196:	84 36       	cpi	r24, 0x64	; 100
    1198:	01 f1       	breq	.+64     	; 0x11da <_ZL8nextNotev+0xe0>
    119a:	85 36       	cpi	r24, 0x65	; 101
    119c:	0c f5       	brge	.+66     	; 0x11e0 <_ZL8nextNotev+0xe6>
    119e:	1b c0       	rjmp	.+54     	; 0x11d6 <_ZL8nextNotev+0xdc>
    11a0:	8f 36       	cpi	r24, 0x6F	; 111
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <_ZL8nextNotev+0xac>
    11a4:	47 c0       	rjmp	.+142    	; 0x1234 <_ZL8nextNotev+0x13a>
    11a6:	80 37       	cpi	r24, 0x70	; 112
    11a8:	44 f4       	brge	.+16     	; 0x11ba <_ZL8nextNotev+0xc0>
    11aa:	8c 36       	cpi	r24, 0x6C	; 108
    11ac:	11 f1       	breq	.+68     	; 0x11f2 <_ZL8nextNotev+0xf8>
    11ae:	8d 36       	cpi	r24, 0x6D	; 109
    11b0:	61 f1       	breq	.+88     	; 0x120a <_ZL8nextNotev+0x110>
    11b2:	87 36       	cpi	r24, 0x67	; 103
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <_ZL8nextNotev+0xbe>
    11b6:	85 c0       	rjmp	.+266    	; 0x12c2 <_ZL8nextNotev+0x1c8>
    11b8:	19 c0       	rjmp	.+50     	; 0x11ec <_ZL8nextNotev+0xf2>
    11ba:	84 37       	cpi	r24, 0x74	; 116
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <_ZL8nextNotev+0xc6>
    11be:	44 c0       	rjmp	.+136    	; 0x1248 <_ZL8nextNotev+0x14e>
    11c0:	86 37       	cpi	r24, 0x76	; 118
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <_ZL8nextNotev+0xcc>
    11c4:	60 c0       	rjmp	.+192    	; 0x1286 <_ZL8nextNotev+0x18c>
    11c6:	82 37       	cpi	r24, 0x72	; 114
    11c8:	09 f0       	breq	.+2      	; 0x11cc <_ZL8nextNotev+0xd2>
    11ca:	7b c0       	rjmp	.+246    	; 0x12c2 <_ZL8nextNotev+0x1c8>
    11cc:	39 c0       	rjmp	.+114    	; 0x1240 <_ZL8nextNotev+0x146>
    11ce:	b3 94       	inc	r11
    11d0:	be cf       	rjmp	.-132    	; 0x114e <_ZL8nextNotev+0x54>
    11d2:	ba 94       	dec	r11
    11d4:	bc cf       	rjmp	.-136    	; 0x114e <_ZL8nextNotev+0x54>
    11d6:	ee 24       	eor	r14, r14
    11d8:	35 c0       	rjmp	.+106    	; 0x1244 <_ZL8nextNotev+0x14a>
    11da:	ee 24       	eor	r14, r14
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	7b c0       	rjmp	.+246    	; 0x12d6 <_ZL8nextNotev+0x1dc>
    11e0:	ee 24       	eor	r14, r14
    11e2:	84 e0       	ldi	r24, 0x04	; 4
    11e4:	78 c0       	rjmp	.+240    	; 0x12d6 <_ZL8nextNotev+0x1dc>
    11e6:	ee 24       	eor	r14, r14
    11e8:	85 e0       	ldi	r24, 0x05	; 5
    11ea:	75 c0       	rjmp	.+234    	; 0x12d6 <_ZL8nextNotev+0x1dc>
    11ec:	ee 24       	eor	r14, r14
    11ee:	87 e0       	ldi	r24, 0x07	; 7
    11f0:	72 c0       	rjmp	.+228    	; 0x12d6 <_ZL8nextNotev+0x1dc>
    11f2:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZL9getNumberv>
    11f6:	bc 01       	movw	r22, r24
    11f8:	90 93 05 01 	sts	0x0105, r25
    11fc:	80 93 04 01 	sts	0x0104, r24
    1200:	80 91 06 01 	lds	r24, 0x0106
    1204:	90 91 07 01 	lds	r25, 0x0107
    1208:	37 c0       	rjmp	.+110    	; 0x1278 <_ZL8nextNotev+0x17e>
    120a:	0e 94 01 07 	call	0xe02	; 0xe02 <_ZL16currentCharacterv>
    120e:	8c 36       	cpi	r24, 0x6C	; 108
    1210:	19 f4       	brne	.+6      	; 0x1218 <_ZL8nextNotev+0x11e>
    1212:	10 92 4d 01 	sts	0x014D, r1
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <_ZL8nextNotev+0x126>
    1218:	a0 92 4d 01 	sts	0x014D, r10
    121c:	10 92 4e 01 	sts	0x014E, r1
    1220:	80 91 4b 01 	lds	r24, 0x014B
    1224:	90 91 4c 01 	lds	r25, 0x014C
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	90 93 4c 01 	sts	0x014C, r25
    122e:	80 93 4b 01 	sts	0x014B, r24
    1232:	8d cf       	rjmp	.-230    	; 0x114e <_ZL8nextNotev+0x54>
    1234:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZL9getNumberv>
    1238:	b8 2e       	mov	r11, r24
    123a:	80 93 03 01 	sts	0x0103, r24
    123e:	87 cf       	rjmp	.-242    	; 0x114e <_ZL8nextNotev+0x54>
    1240:	ee 24       	eor	r14, r14
    1242:	e3 94       	inc	r14
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	47 c0       	rjmp	.+142    	; 0x12d6 <_ZL8nextNotev+0x1dc>
    1248:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZL9getNumberv>
    124c:	bc 01       	movw	r22, r24
    124e:	ce 01       	movw	r24, r28
    1250:	0e 94 95 13 	call	0x272a	; 0x272a <__udivmodhi4>
    1254:	cb 01       	movw	r24, r22
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	53 e0       	ldi	r21, 0x03	; 3
    125c:	66 0f       	add	r22, r22
    125e:	77 1f       	adc	r23, r23
    1260:	5a 95       	dec	r21
    1262:	e1 f7       	brne	.-8      	; 0x125c <_ZL8nextNotev+0x162>
    1264:	86 0f       	add	r24, r22
    1266:	97 1f       	adc	r25, r23
    1268:	90 93 07 01 	sts	0x0107, r25
    126c:	80 93 06 01 	sts	0x0106, r24
    1270:	60 91 04 01 	lds	r22, 0x0104
    1274:	70 91 05 01 	lds	r23, 0x0105
    1278:	0e 94 95 13 	call	0x272a	; 0x272a <__udivmodhi4>
    127c:	70 93 09 01 	sts	0x0109, r23
    1280:	60 93 08 01 	sts	0x0108, r22
    1284:	64 cf       	rjmp	.-312    	; 0x114e <_ZL8nextNotev+0x54>
    1286:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZL9getNumberv>
    128a:	90 93 0b 01 	sts	0x010B, r25
    128e:	80 93 0a 01 	sts	0x010A, r24
    1292:	5d cf       	rjmp	.-326    	; 0x114e <_ZL8nextNotev+0x54>
    1294:	70 92 03 01 	sts	0x0103, r7
    1298:	10 93 07 01 	sts	0x0107, r17
    129c:	00 93 06 01 	sts	0x0106, r16
    12a0:	f0 92 05 01 	sts	0x0105, r15
    12a4:	e0 92 04 01 	sts	0x0104, r14
    12a8:	d0 92 09 01 	sts	0x0109, r13
    12ac:	c0 92 08 01 	sts	0x0108, r12
    12b0:	90 92 0b 01 	sts	0x010B, r9
    12b4:	80 92 0a 01 	sts	0x010A, r8
    12b8:	10 92 4d 01 	sts	0x014D, r1
    12bc:	44 e0       	ldi	r20, 0x04	; 4
    12be:	b4 2e       	mov	r11, r20
    12c0:	46 cf       	rjmp	.-372    	; 0x114e <_ZL8nextNotev+0x54>
    12c2:	10 92 4c 01 	sts	0x014C, r1
    12c6:	10 92 4b 01 	sts	0x014B, r1
    12ca:	63 c0       	rjmp	.+198    	; 0x1392 <_ZL8nextNotev+0x298>
    12cc:	ee 24       	eor	r14, r14
    12ce:	89 e0       	ldi	r24, 0x09	; 9
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <_ZL8nextNotev+0x1dc>
    12d2:	ee 24       	eor	r14, r14
    12d4:	8b e0       	ldi	r24, 0x0B	; 11
    12d6:	9c e0       	ldi	r25, 0x0C	; 12
    12d8:	b9 9e       	mul	r11, r25
    12da:	b0 2c       	mov	r11, r0
    12dc:	11 24       	eor	r1, r1
    12de:	b8 0e       	add	r11, r24
    12e0:	0e 94 01 07 	call	0xe02	; 0xe02 <_ZL16currentCharacterv>
    12e4:	8b 32       	cpi	r24, 0x2B	; 43
    12e6:	11 f0       	breq	.+4      	; 0x12ec <_ZL8nextNotev+0x1f2>
    12e8:	83 32       	cpi	r24, 0x23	; 35
    12ea:	b9 f4       	brne	.+46     	; 0x131a <_ZL8nextNotev+0x220>
    12ec:	80 91 4b 01 	lds	r24, 0x014B
    12f0:	90 91 4c 01 	lds	r25, 0x014C
    12f4:	01 96       	adiw	r24, 0x01	; 1
    12f6:	90 93 4c 01 	sts	0x014C, r25
    12fa:	80 93 4b 01 	sts	0x014B, r24
    12fe:	b3 94       	inc	r11
    1300:	ef cf       	rjmp	.-34     	; 0x12e0 <_ZL8nextNotev+0x1e6>
    1302:	80 91 4b 01 	lds	r24, 0x014B
    1306:	90 91 4c 01 	lds	r25, 0x014C
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	90 93 4c 01 	sts	0x014C, r25
    1310:	80 93 4b 01 	sts	0x014B, r24
    1314:	ba 94       	dec	r11
    1316:	0e 94 01 07 	call	0xe02	; 0xe02 <_ZL16currentCharacterv>
    131a:	8d 32       	cpi	r24, 0x2D	; 45
    131c:	91 f3       	breq	.-28     	; 0x1302 <_ZL8nextNotev+0x208>
    131e:	c0 91 08 01 	lds	r28, 0x0108
    1322:	d0 91 09 01 	lds	r29, 0x0109
    1326:	81 53       	subi	r24, 0x31	; 49
    1328:	88 30       	cpi	r24, 0x08	; 8
    132a:	58 f4       	brcc	.+22     	; 0x1342 <_ZL8nextNotev+0x248>
    132c:	c0 91 06 01 	lds	r28, 0x0106
    1330:	d0 91 07 01 	lds	r29, 0x0107
    1334:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZL9getNumberv>
    1338:	bc 01       	movw	r22, r24
    133a:	ce 01       	movw	r24, r28
    133c:	0e 94 95 13 	call	0x272a	; 0x272a <__udivmodhi4>
    1340:	eb 01       	movw	r28, r22
    1342:	8e 01       	movw	r16, r28
    1344:	0b c0       	rjmp	.+22     	; 0x135c <_ZL8nextNotev+0x262>
    1346:	80 91 4b 01 	lds	r24, 0x014B
    134a:	90 91 4c 01 	lds	r25, 0x014C
    134e:	01 96       	adiw	r24, 0x01	; 1
    1350:	90 93 4c 01 	sts	0x014C, r25
    1354:	80 93 4b 01 	sts	0x014B, r24
    1358:	c0 0f       	add	r28, r16
    135a:	d1 1f       	adc	r29, r17
    135c:	16 95       	lsr	r17
    135e:	07 95       	ror	r16
    1360:	0e 94 01 07 	call	0xe02	; 0xe02 <_ZL16currentCharacterv>
    1364:	8e 32       	cpi	r24, 0x2E	; 46
    1366:	79 f3       	breq	.-34     	; 0x1346 <_ZL8nextNotev+0x24c>
    1368:	80 91 4d 01 	lds	r24, 0x014D
    136c:	88 23       	and	r24, r24
    136e:	39 f0       	breq	.+14     	; 0x137e <_ZL8nextNotev+0x284>
    1370:	ce 01       	movw	r24, r28
    1372:	96 95       	lsr	r25
    1374:	87 95       	ror	r24
    1376:	80 93 4e 01 	sts	0x014E, r24
    137a:	c8 1b       	sub	r28, r24
    137c:	d1 09       	sbc	r29, r1
    137e:	ee 20       	and	r14, r14
    1380:	11 f0       	breq	.+4      	; 0x1386 <_ZL8nextNotev+0x28c>
    1382:	bb 24       	eor	r11, r11
    1384:	ba 94       	dec	r11
    1386:	8b 2d       	mov	r24, r11
    1388:	be 01       	movw	r22, r28
    138a:	40 91 0a 01 	lds	r20, 0x010A
    138e:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN15OrangutanBuzzer8playNoteEhjh>
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	ed e0       	ldi	r30, 0x0D	; 13
    1398:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__epilogue_restores__+0xa>

0000139c <__vector_13>:
    139c:	1f 92       	push	r1
    139e:	0f 92       	push	r0
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	0f 92       	push	r0
    13a4:	11 24       	eor	r1, r1
    13a6:	2f 93       	push	r18
    13a8:	3f 93       	push	r19
    13aa:	4f 93       	push	r20
    13ac:	5f 93       	push	r21
    13ae:	6f 93       	push	r22
    13b0:	7f 93       	push	r23
    13b2:	8f 93       	push	r24
    13b4:	9f 93       	push	r25
    13b6:	af 93       	push	r26
    13b8:	bf 93       	push	r27
    13ba:	ef 93       	push	r30
    13bc:	ff 93       	push	r31
    13be:	80 91 51 01 	lds	r24, 0x0151
    13c2:	90 91 52 01 	lds	r25, 0x0152
    13c6:	9c 01       	movw	r18, r24
    13c8:	21 50       	subi	r18, 0x01	; 1
    13ca:	30 40       	sbci	r19, 0x00	; 0
    13cc:	30 93 52 01 	sts	0x0152, r19
    13d0:	20 93 51 01 	sts	0x0151, r18
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	11 f5       	brne	.+68     	; 0x141c <__vector_13+0x80>
    13d8:	10 92 6f 00 	sts	0x006F, r1
    13dc:	78 94       	sei
    13de:	80 91 81 00 	lds	r24, 0x0081
    13e2:	88 7f       	andi	r24, 0xF8	; 248
    13e4:	81 60       	ori	r24, 0x01	; 1
    13e6:	80 93 81 00 	sts	0x0081, r24
    13ea:	80 e1       	ldi	r24, 0x10	; 16
    13ec:	97 e2       	ldi	r25, 0x27	; 39
    13ee:	90 93 89 00 	sts	0x0089, r25
    13f2:	80 93 88 00 	sts	0x0088, r24
    13f6:	10 92 8b 00 	sts	0x008B, r1
    13fa:	10 92 8a 00 	sts	0x008A, r1
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	80 93 02 01 	sts	0x0102, r24
    1404:	80 91 4b 01 	lds	r24, 0x014B
    1408:	90 91 4c 01 	lds	r25, 0x014C
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	31 f0       	breq	.+12     	; 0x141c <__vector_13+0x80>
    1410:	80 91 50 01 	lds	r24, 0x0150
    1414:	88 23       	and	r24, r24
    1416:	11 f4       	brne	.+4      	; 0x141c <__vector_13+0x80>
    1418:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZL8nextNotev>
    141c:	ff 91       	pop	r31
    141e:	ef 91       	pop	r30
    1420:	bf 91       	pop	r27
    1422:	af 91       	pop	r26
    1424:	9f 91       	pop	r25
    1426:	8f 91       	pop	r24
    1428:	7f 91       	pop	r23
    142a:	6f 91       	pop	r22
    142c:	5f 91       	pop	r21
    142e:	4f 91       	pop	r20
    1430:	3f 91       	pop	r19
    1432:	2f 91       	pop	r18
    1434:	0f 90       	pop	r0
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	0f 90       	pop	r0
    143a:	1f 90       	pop	r1
    143c:	18 95       	reti

0000143e <_ZN15OrangutanBuzzer9isPlayingEv>:
    143e:	80 91 02 01 	lds	r24, 0x0102
    1442:	88 23       	and	r24, r24
    1444:	51 f0       	breq	.+20     	; 0x145a <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	20 91 4b 01 	lds	r18, 0x014B
    144c:	30 91 4c 01 	lds	r19, 0x014C
    1450:	21 15       	cp	r18, r1
    1452:	31 05       	cpc	r19, r1
    1454:	19 f4       	brne	.+6      	; 0x145c <_ZN15OrangutanBuzzer9isPlayingEv+0x1e>
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	08 95       	ret
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	08 95       	ret

0000145e <is_playing>:
    145e:	0e 94 1f 0a 	call	0x143e	; 0x143e <_ZN15OrangutanBuzzer9isPlayingEv>
    1462:	08 95       	ret

00001464 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    1464:	10 92 6f 00 	sts	0x006F, r1
    1468:	90 93 4c 01 	sts	0x014C, r25
    146c:	80 93 4b 01 	sts	0x014B, r24
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	80 93 4f 01 	sts	0x014F, r24
    1476:	10 92 4e 01 	sts	0x014E, r1
    147a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZL8nextNotev>
    147e:	08 95       	ret

00001480 <play_from_program_space>:
    1480:	0e 94 32 0a 	call	0x1464	; 0x1464 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1484:	08 95       	ret

00001486 <delayMicroseconds.clone.0>:
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	6f 93       	push	r22
    148c:	64 e0       	ldi	r22, 0x04	; 4
    148e:	6a 95       	dec	r22
    1490:	f1 f7       	brne	.-4      	; 0x148e <delayMicroseconds.clone.0+0x8>
    1492:	6f 91       	pop	r22
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	c9 f7       	brne	.-14     	; 0x148a <delayMicroseconds.clone.0+0x4>
    1498:	08 95       	ret

0000149a <_ZN12OrangutanLCD8busyWaitEv>:
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	1a b1       	in	r17, 0x0a	; 10
    14a4:	57 98       	cbi	0x0a, 7	; 10
    14a6:	5a 98       	cbi	0x0b, 2	; 11
    14a8:	28 9a       	sbi	0x05, 0	; 5
    14aa:	c0 e0       	ldi	r28, 0x00	; 0
    14ac:	d0 e0       	ldi	r29, 0x00	; 0
    14ae:	0e 94 43 0a 	call	0x1486	; 0x1486 <delayMicroseconds.clone.0>
    14b2:	5c 9a       	sbi	0x0b, 4	; 11
    14b4:	0e 94 43 0a 	call	0x1486	; 0x1486 <delayMicroseconds.clone.0>
    14b8:	09 b1       	in	r16, 0x09	; 9
    14ba:	5c 98       	cbi	0x0b, 4	; 11
    14bc:	0e 94 43 0a 	call	0x1486	; 0x1486 <delayMicroseconds.clone.0>
    14c0:	5c 9a       	sbi	0x0b, 4	; 11
    14c2:	0e 94 43 0a 	call	0x1486	; 0x1486 <delayMicroseconds.clone.0>
    14c6:	5c 98       	cbi	0x0b, 4	; 11
    14c8:	07 ff       	sbrs	r16, 7
    14ca:	11 c0       	rjmp	.+34     	; 0x14ee <_ZN12OrangutanLCD8busyWaitEv+0x54>
    14cc:	24 96       	adiw	r28, 0x04	; 4
    14ce:	9e 01       	movw	r18, r28
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	80 91 57 01 	lds	r24, 0x0157
    14d8:	90 91 58 01 	lds	r25, 0x0158
    14dc:	a0 91 59 01 	lds	r26, 0x0159
    14e0:	b0 91 5a 01 	lds	r27, 0x015A
    14e4:	28 17       	cp	r18, r24
    14e6:	39 07       	cpc	r19, r25
    14e8:	4a 07       	cpc	r20, r26
    14ea:	5b 07       	cpc	r21, r27
    14ec:	00 f3       	brcs	.-64     	; 0x14ae <_ZN12OrangutanLCD8busyWaitEv+0x14>
    14ee:	1a b9       	out	0x0a, r17	; 10
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	08 95       	ret

000014fa <_ZN12OrangutanLCD8sendDataEh>:
    14fa:	65 b1       	in	r22, 0x05	; 5
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	ac 01       	movw	r20, r24
    1500:	41 70       	andi	r20, 0x01	; 1
    1502:	50 70       	andi	r21, 0x00	; 0
    1504:	44 0f       	add	r20, r20
    1506:	55 1f       	adc	r21, r21
    1508:	9c 01       	movw	r18, r24
    150a:	26 70       	andi	r18, 0x06	; 6
    150c:	30 70       	andi	r19, 0x00	; 0
    150e:	53 e0       	ldi	r21, 0x03	; 3
    1510:	22 0f       	add	r18, r18
    1512:	33 1f       	adc	r19, r19
    1514:	5a 95       	dec	r21
    1516:	e1 f7       	brne	.-8      	; 0x1510 <_ZN12OrangutanLCD8sendDataEh+0x16>
    1518:	24 2b       	or	r18, r20
    151a:	6d 7c       	andi	r22, 0xCD	; 205
    151c:	26 2b       	or	r18, r22
    151e:	25 b9       	out	0x05, r18	; 5
    1520:	2b b1       	in	r18, 0x0b	; 11
    1522:	88 70       	andi	r24, 0x08	; 8
    1524:	90 70       	andi	r25, 0x00	; 0
    1526:	34 e0       	ldi	r19, 0x04	; 4
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	3a 95       	dec	r19
    152e:	e1 f7       	brne	.-8      	; 0x1528 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    1530:	2f 77       	andi	r18, 0x7F	; 127
    1532:	28 2b       	or	r18, r24
    1534:	2b b9       	out	0x0b, r18	; 11
    1536:	5c 9a       	sbi	0x0b, 4	; 11
    1538:	0e 94 43 0a 	call	0x1486	; 0x1486 <delayMicroseconds.clone.0>
    153c:	5c 98       	cbi	0x0b, 4	; 11
    153e:	0e 94 43 0a 	call	0x1486	; 0x1486 <delayMicroseconds.clone.0>
    1542:	08 95       	ret

00001544 <_ZN12OrangutanLCD4sendEhhh>:
    1544:	a2 e0       	ldi	r26, 0x02	; 2
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e8 ea       	ldi	r30, 0xA8	; 168
    154a:	fa e0       	ldi	r31, 0x0A	; 10
    154c:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__prologue_saves__+0x16>
    1550:	18 2f       	mov	r17, r24
    1552:	4a 83       	std	Y+2, r20	; 0x02
    1554:	69 83       	std	Y+1, r22	; 0x01
    1556:	0e 94 4d 0b 	call	0x169a	; 0x169a <_ZN12OrangutanLCD4initEv>
    155a:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN12OrangutanLCD8busyWaitEv>
    155e:	f4 b0       	in	r15, 0x04	; 4
    1560:	05 b1       	in	r16, 0x05	; 5
    1562:	da b0       	in	r13, 0x0a	; 10
    1564:	eb b0       	in	r14, 0x0b	; 11
    1566:	28 98       	cbi	0x05, 0	; 5
    1568:	69 81       	ldd	r22, Y+1	; 0x01
    156a:	4a 81       	ldd	r20, Y+2	; 0x02
    156c:	66 23       	and	r22, r22
    156e:	11 f0       	breq	.+4      	; 0x1574 <_ZN12OrangutanLCD4sendEhhh+0x30>
    1570:	5a 9a       	sbi	0x0b, 2	; 11
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <_ZN12OrangutanLCD4sendEhhh+0x32>
    1574:	5a 98       	cbi	0x0b, 2	; 11
    1576:	84 b1       	in	r24, 0x04	; 4
    1578:	82 63       	ori	r24, 0x32	; 50
    157a:	84 b9       	out	0x04, r24	; 4
    157c:	57 9a       	sbi	0x0a, 7	; 10
    157e:	41 30       	cpi	r20, 0x01	; 1
    1580:	29 f0       	breq	.+10     	; 0x158c <_ZN12OrangutanLCD4sendEhhh+0x48>
    1582:	81 2f       	mov	r24, r17
    1584:	82 95       	swap	r24
    1586:	8f 70       	andi	r24, 0x0F	; 15
    1588:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_ZN12OrangutanLCD8sendDataEh>
    158c:	81 2f       	mov	r24, r17
    158e:	8f 70       	andi	r24, 0x0F	; 15
    1590:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_ZN12OrangutanLCD8sendDataEh>
    1594:	da b8       	out	0x0a, r13	; 10
    1596:	eb b8       	out	0x0b, r14	; 11
    1598:	f4 b8       	out	0x04, r15	; 4
    159a:	05 b9       	out	0x05, r16	; 5
    159c:	22 96       	adiw	r28, 0x02	; 2
    159e:	e7 e0       	ldi	r30, 0x07	; 7
    15a0:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__epilogue_restores__+0x16>

000015a4 <_ZN12OrangutanLCD8send_cmdEh>:
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	42 e0       	ldi	r20, 0x02	; 2
    15a8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_ZN12OrangutanLCD4sendEhhh>
    15ac:	08 95       	ret

000015ae <_ZN12OrangutanLCD9send_dataEh>:
    15ae:	61 e0       	ldi	r22, 0x01	; 1
    15b0:	42 e0       	ldi	r20, 0x02	; 2
    15b2:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_ZN12OrangutanLCD4sendEhhh>
    15b6:	08 95       	ret

000015b8 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	1f 93       	push	r17
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	0f 92       	push	r0
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	66 0f       	add	r22, r22
    15ca:	66 0f       	add	r22, r22
    15cc:	66 0f       	add	r22, r22
    15ce:	48 2f       	mov	r20, r24
    15d0:	59 2f       	mov	r21, r25
    15d2:	7a 01       	movw	r14, r20
    15d4:	10 e0       	ldi	r17, 0x00	; 0
    15d6:	81 2f       	mov	r24, r17
    15d8:	86 0f       	add	r24, r22
    15da:	80 64       	ori	r24, 0x40	; 64
    15dc:	69 83       	std	Y+1, r22	; 0x01
    15de:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN12OrangutanLCD8send_cmdEh>
    15e2:	f7 01       	movw	r30, r14
    15e4:	84 91       	lpm	r24, Z
    15e6:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN12OrangutanLCD9send_dataEh>
    15ea:	1f 5f       	subi	r17, 0xFF	; 255
    15ec:	08 94       	sec
    15ee:	e1 1c       	adc	r14, r1
    15f0:	f1 1c       	adc	r15, r1
    15f2:	69 81       	ldd	r22, Y+1	; 0x01
    15f4:	18 30       	cpi	r17, 0x08	; 8
    15f6:	79 f7       	brne	.-34     	; 0x15d6 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x1e>
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	1f 91       	pop	r17
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	08 95       	ret

00001606 <lcd_load_custom_character>:
    1606:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    160a:	08 95       	ret

0000160c <print_character>:
    160c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN12OrangutanLCD9send_dataEh>
    1610:	08 95       	ret

00001612 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	41 e0       	ldi	r20, 0x01	; 1
    1616:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_ZN12OrangutanLCD4sendEhhh>
    161a:	08 95       	ret

0000161c <_ZN12OrangutanLCD5init2Ev>:
    161c:	80 e1       	ldi	r24, 0x10	; 16
    161e:	97 e2       	ldi	r25, 0x27	; 39
    1620:	a0 e0       	ldi	r26, 0x00	; 0
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	80 93 57 01 	sts	0x0157, r24
    1628:	90 93 58 01 	sts	0x0158, r25
    162c:	a0 93 59 01 	sts	0x0159, r26
    1630:	b0 93 5a 01 	sts	0x015A, r27
    1634:	52 9a       	sbi	0x0a, 2	; 10
    1636:	20 9a       	sbi	0x04, 0	; 4
    1638:	54 9a       	sbi	0x0a, 4	; 10
    163a:	8e e1       	ldi	r24, 0x1E	; 30
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
    1642:	83 e0       	ldi	r24, 0x03	; 3
    1644:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1648:	86 e0       	ldi	r24, 0x06	; 6
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
    1650:	83 e0       	ldi	r24, 0x03	; 3
    1652:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
    165e:	83 e0       	ldi	r24, 0x03	; 3
    1660:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1664:	82 e0       	ldi	r24, 0x02	; 2
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
    166c:	82 e0       	ldi	r24, 0x02	; 2
    166e:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1672:	82 e0       	ldi	r24, 0x02	; 2
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
    167a:	88 e2       	ldi	r24, 0x28	; 40
    167c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN12OrangutanLCD8send_cmdEh>
    1680:	88 e0       	ldi	r24, 0x08	; 8
    1682:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN12OrangutanLCD8send_cmdEh>
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN12OrangutanLCD8send_cmdEh>
    168c:	86 e0       	ldi	r24, 0x06	; 6
    168e:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN12OrangutanLCD8send_cmdEh>
    1692:	8c e0       	ldi	r24, 0x0C	; 12
    1694:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN12OrangutanLCD8send_cmdEh>
    1698:	08 95       	ret

0000169a <_ZN12OrangutanLCD4initEv>:
    169a:	80 91 5b 01 	lds	r24, 0x015B
    169e:	88 23       	and	r24, r24
    16a0:	29 f4       	brne	.+10     	; 0x16ac <_ZN12OrangutanLCD4initEv+0x12>
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	80 93 5b 01 	sts	0x015B, r24
    16a8:	0e 94 0e 0b 	call	0x161c	; 0x161c <_ZN12OrangutanLCD5init2Ev>
    16ac:	08 95       	ret

000016ae <_ZN12OrangutanLCD5clearEv>:
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN12OrangutanLCD8send_cmdEh>
    16b4:	80 91 53 01 	lds	r24, 0x0153
    16b8:	90 91 54 01 	lds	r25, 0x0154
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	11 f1       	breq	.+68     	; 0x1704 <_ZN12OrangutanLCD5clearEv+0x56>
    16c0:	a0 e0       	ldi	r26, 0x00	; 0
    16c2:	b0 e2       	ldi	r27, 0x20	; 32
    16c4:	08 c0       	rjmp	.+16     	; 0x16d6 <_ZN12OrangutanLCD5clearEv+0x28>
    16c6:	e0 91 53 01 	lds	r30, 0x0153
    16ca:	f0 91 54 01 	lds	r31, 0x0154
    16ce:	e2 0f       	add	r30, r18
    16d0:	f3 1f       	adc	r31, r19
    16d2:	b0 83       	st	Z, r27
    16d4:	af 5f       	subi	r26, 0xFF	; 255
    16d6:	2a 2f       	mov	r18, r26
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	80 91 24 01 	lds	r24, 0x0124
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	60 91 25 01 	lds	r22, 0x0125
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	86 9f       	mul	r24, r22
    16ea:	a0 01       	movw	r20, r0
    16ec:	87 9f       	mul	r24, r23
    16ee:	50 0d       	add	r21, r0
    16f0:	96 9f       	mul	r25, r22
    16f2:	50 0d       	add	r21, r0
    16f4:	11 24       	eor	r1, r1
    16f6:	24 17       	cp	r18, r20
    16f8:	35 07       	cpc	r19, r21
    16fa:	2c f3       	brlt	.-54     	; 0x16c6 <_ZN12OrangutanLCD5clearEv+0x18>
    16fc:	10 92 56 01 	sts	0x0156, r1
    1700:	10 92 55 01 	sts	0x0155, r1
    1704:	08 95       	ret

00001706 <clear>:
    1706:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_ZN12OrangutanLCD5clearEv>
    170a:	08 95       	ret

0000170c <_ZN12OrangutanLCD5printEPKc>:
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	e8 2e       	mov	r14, r24
    1716:	e7 01       	movw	r28, r14
    1718:	7e 01       	movw	r14, r28
    171a:	f9 2e       	mov	r15, r25
    171c:	e7 01       	movw	r28, r14
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <_ZN12OrangutanLCD5printEPKc+0x18>
    1720:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN12OrangutanLCD9send_dataEh>
    1724:	89 91       	ld	r24, Y+
    1726:	88 23       	and	r24, r24
    1728:	d9 f7       	brne	.-10     	; 0x1720 <_ZN12OrangutanLCD5printEPKc+0x14>
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	ff 90       	pop	r15
    1730:	ef 90       	pop	r14
    1732:	08 95       	ret

00001734 <print>:
    1734:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN12OrangutanLCD5printEPKc>
    1738:	08 95       	ret

0000173a <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	ec 01       	movw	r28, r24
    1740:	03 c0       	rjmp	.+6      	; 0x1748 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    1742:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN12OrangutanLCD9send_dataEh>
    1746:	21 96       	adiw	r28, 0x01	; 1
    1748:	fe 01       	movw	r30, r28
    174a:	84 91       	lpm	r24, Z
    174c:	88 23       	and	r24, r24
    174e:	c9 f7       	brne	.-14     	; 0x1742 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	08 95       	ret

00001756 <print_from_program_space>:
    1756:	0e 94 9d 0b 	call	0x173a	; 0x173a <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    175a:	08 95       	ret

0000175c <_ZN12OrangutanLCD5printEm>:
    175c:	aa e0       	ldi	r26, 0x0A	; 10
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e4 eb       	ldi	r30, 0xB4	; 180
    1762:	fb e0       	ldi	r31, 0x0B	; 11
    1764:	0c 94 11 14 	jmp	0x2822	; 0x2822 <__prologue_saves__+0x10>
    1768:	9b 01       	movw	r18, r22
    176a:	ac 01       	movw	r20, r24
    176c:	1a e0       	ldi	r17, 0x0A	; 10
    176e:	ea e0       	ldi	r30, 0x0A	; 10
    1770:	ce 2e       	mov	r12, r30
    1772:	d1 2c       	mov	r13, r1
    1774:	e1 2c       	mov	r14, r1
    1776:	f1 2c       	mov	r15, r1
    1778:	5e 01       	movw	r10, r28
    177a:	08 94       	sec
    177c:	a1 1c       	adc	r10, r1
    177e:	b1 1c       	adc	r11, r1
    1780:	02 2f       	mov	r16, r18
    1782:	ca 01       	movw	r24, r20
    1784:	b9 01       	movw	r22, r18
    1786:	a7 01       	movw	r20, r14
    1788:	96 01       	movw	r18, r12
    178a:	0e 94 bd 13 	call	0x277a	; 0x277a <__udivmodsi4>
    178e:	11 50       	subi	r17, 0x01	; 1
    1790:	f5 01       	movw	r30, r10
    1792:	e1 0f       	add	r30, r17
    1794:	f1 1d       	adc	r31, r1
    1796:	00 5d       	subi	r16, 0xD0	; 208
    1798:	92 2f       	mov	r25, r18
    179a:	99 0f       	add	r25, r25
    179c:	89 2f       	mov	r24, r25
    179e:	88 0f       	add	r24, r24
    17a0:	88 0f       	add	r24, r24
    17a2:	89 0f       	add	r24, r25
    17a4:	08 1b       	sub	r16, r24
    17a6:	00 83       	st	Z, r16
    17a8:	21 15       	cp	r18, r1
    17aa:	31 05       	cpc	r19, r1
    17ac:	41 05       	cpc	r20, r1
    17ae:	51 05       	cpc	r21, r1
    17b0:	39 f7       	brne	.-50     	; 0x1780 <_ZN12OrangutanLCD5printEm+0x24>
    17b2:	08 c0       	rjmp	.+16     	; 0x17c4 <_ZN12OrangutanLCD5printEm+0x68>
    17b4:	f6 01       	movw	r30, r12
    17b6:	e1 0f       	add	r30, r17
    17b8:	f1 1d       	adc	r31, r1
    17ba:	80 81       	ld	r24, Z
    17bc:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN12OrangutanLCD9send_dataEh>
    17c0:	1f 5f       	subi	r17, 0xFF	; 255
    17c2:	04 c0       	rjmp	.+8      	; 0x17cc <_ZN12OrangutanLCD5printEm+0x70>
    17c4:	6e 01       	movw	r12, r28
    17c6:	08 94       	sec
    17c8:	c1 1c       	adc	r12, r1
    17ca:	d1 1c       	adc	r13, r1
    17cc:	1a 30       	cpi	r17, 0x0A	; 10
    17ce:	90 f3       	brcs	.-28     	; 0x17b4 <_ZN12OrangutanLCD5printEm+0x58>
    17d0:	2a 96       	adiw	r28, 0x0a	; 10
    17d2:	ea e0       	ldi	r30, 0x0A	; 10
    17d4:	0c 94 2d 14 	jmp	0x285a	; 0x285a <__epilogue_restores__+0x10>

000017d8 <_ZN12OrangutanLCD5printEl>:
    17d8:	ef 92       	push	r14
    17da:	ff 92       	push	r15
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	7b 01       	movw	r14, r22
    17e2:	8c 01       	movw	r16, r24
    17e4:	97 ff       	sbrs	r25, 7
    17e6:	0b c0       	rjmp	.+22     	; 0x17fe <_ZN12OrangutanLCD5printEl+0x26>
    17e8:	10 95       	com	r17
    17ea:	00 95       	com	r16
    17ec:	f0 94       	com	r15
    17ee:	e0 94       	com	r14
    17f0:	e1 1c       	adc	r14, r1
    17f2:	f1 1c       	adc	r15, r1
    17f4:	01 1d       	adc	r16, r1
    17f6:	11 1d       	adc	r17, r1
    17f8:	8d e2       	ldi	r24, 0x2D	; 45
    17fa:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN12OrangutanLCD9send_dataEh>
    17fe:	c8 01       	movw	r24, r16
    1800:	b7 01       	movw	r22, r14
    1802:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN12OrangutanLCD5printEm>
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	ff 90       	pop	r15
    180c:	ef 90       	pop	r14
    180e:	08 95       	ret

00001810 <print_long>:
    1810:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN12OrangutanLCD5printEl>
    1814:	08 95       	ret

00001816 <_ZN12OrangutanLCD6gotoXYEhh>:
    1816:	a5 e0       	ldi	r26, 0x05	; 5
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e1 e1       	ldi	r30, 0x11	; 17
    181c:	fc e0       	ldi	r31, 0x0C	; 12
    181e:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__prologue_saves__+0x1e>
    1822:	18 2f       	mov	r17, r24
    1824:	80 e8       	ldi	r24, 0x80	; 128
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	80 ec       	ldi	r24, 0xC0	; 192
    182a:	8a 83       	std	Y+2, r24	; 0x02
    182c:	84 e9       	ldi	r24, 0x94	; 148
    182e:	8b 83       	std	Y+3, r24	; 0x03
    1830:	84 ed       	ldi	r24, 0xD4	; 212
    1832:	8c 83       	std	Y+4, r24	; 0x04
    1834:	fe 01       	movw	r30, r28
    1836:	e6 0f       	add	r30, r22
    1838:	f1 1d       	adc	r31, r1
    183a:	81 81       	ldd	r24, Z+1	; 0x01
    183c:	81 0f       	add	r24, r17
    183e:	6d 83       	std	Y+5, r22	; 0x05
    1840:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN12OrangutanLCD8send_cmdEh>
    1844:	10 93 56 01 	sts	0x0156, r17
    1848:	6d 81       	ldd	r22, Y+5	; 0x05
    184a:	60 93 55 01 	sts	0x0155, r22
    184e:	25 96       	adiw	r28, 0x05	; 5
    1850:	e3 e0       	ldi	r30, 0x03	; 3
    1852:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__epilogue_restores__+0x1e>

00001856 <lcd_goto_xy>:
    1856:	0e 94 0b 0c 	call	0x1816	; 0x1816 <_ZN12OrangutanLCD6gotoXYEhh>
    185a:	08 95       	ret

0000185c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    185c:	fc 01       	movw	r30, r24
    185e:	11 82       	std	Z+1, r1	; 0x01
    1860:	10 82       	st	Z, r1
    1862:	13 82       	std	Z+3, r1	; 0x03
    1864:	12 82       	std	Z+2, r1	; 0x02
    1866:	15 82       	std	Z+5, r1	; 0x05
    1868:	14 82       	std	Z+4, r1	; 0x04
    186a:	16 82       	std	Z+6, r1	; 0x06
    186c:	68 30       	cpi	r22, 0x08	; 8
    186e:	68 f4       	brcc	.+26     	; 0x188a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    1870:	89 e2       	ldi	r24, 0x29	; 41
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	91 83       	std	Z+1, r25	; 0x01
    1876:	80 83       	st	Z, r24
    1878:	8b e2       	ldi	r24, 0x2B	; 43
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	93 83       	std	Z+3, r25	; 0x03
    187e:	82 83       	std	Z+2, r24	; 0x02
    1880:	8a e2       	ldi	r24, 0x2A	; 42
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	95 83       	std	Z+5, r25	; 0x05
    1886:	84 83       	std	Z+4, r24	; 0x04
    1888:	11 c0       	rjmp	.+34     	; 0x18ac <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x50>
    188a:	6e 30       	cpi	r22, 0x0E	; 14
    188c:	c0 f4       	brcc	.+48     	; 0x18be <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x62>
    188e:	83 e2       	ldi	r24, 0x23	; 35
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
    1896:	85 e2       	ldi	r24, 0x25	; 37
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	93 83       	std	Z+3, r25	; 0x03
    189c:	82 83       	std	Z+2, r24	; 0x02
    189e:	84 e2       	ldi	r24, 0x24	; 36
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	95 83       	std	Z+5, r25	; 0x05
    18a4:	84 83       	std	Z+4, r24	; 0x04
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	68 50       	subi	r22, 0x08	; 8
    18aa:	70 40       	sbci	r23, 0x00	; 0
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x5a>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	6a 95       	dec	r22
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x56>
    18ba:	86 83       	std	Z+6, r24	; 0x06
    18bc:	08 95       	ret
    18be:	65 31       	cpi	r22, 0x15	; 21
    18c0:	b8 f4       	brcc	.+46     	; 0x18f0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x94>
    18c2:	86 e2       	ldi	r24, 0x26	; 38
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	80 83       	st	Z, r24
    18ca:	88 e2       	ldi	r24, 0x28	; 40
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	93 83       	std	Z+3, r25	; 0x03
    18d0:	82 83       	std	Z+2, r24	; 0x02
    18d2:	87 e2       	ldi	r24, 0x27	; 39
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	95 83       	std	Z+5, r25	; 0x05
    18d8:	84 83       	std	Z+4, r24	; 0x04
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	6e 50       	subi	r22, 0x0E	; 14
    18de:	70 40       	sbci	r23, 0x00	; 0
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8e>
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	6a 95       	dec	r22
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8a>
    18ee:	86 83       	std	Z+6, r24	; 0x06
    18f0:	08 95       	ret

000018f2 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>:
    18f2:	fc 01       	movw	r30, r24
    18f4:	a4 81       	ldd	r26, Z+4	; 0x04
    18f6:	b5 81       	ldd	r27, Z+5	; 0x05
    18f8:	86 81       	ldd	r24, Z+6	; 0x06
    18fa:	66 23       	and	r22, r22
    18fc:	21 f0       	breq	.+8      	; 0x1906 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh+0x14>
    18fe:	9c 91       	ld	r25, X
    1900:	98 2b       	or	r25, r24
    1902:	9c 93       	st	X, r25
    1904:	08 95       	ret
    1906:	9c 91       	ld	r25, X
    1908:	80 95       	com	r24
    190a:	89 23       	and	r24, r25
    190c:	8c 93       	st	X, r24
    190e:	08 95       	ret

00001910 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>:
    1910:	fc 01       	movw	r30, r24
    1912:	6f 3f       	cpi	r22, 0xFF	; 255
    1914:	31 f4       	brne	.+12     	; 0x1922 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x12>
    1916:	a2 81       	ldd	r26, Z+2	; 0x02
    1918:	b3 81       	ldd	r27, Z+3	; 0x03
    191a:	8c 91       	ld	r24, X
    191c:	96 81       	ldd	r25, Z+6	; 0x06
    191e:	89 27       	eor	r24, r25
    1920:	0c c0       	rjmp	.+24     	; 0x193a <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x2a>
    1922:	a2 81       	ldd	r26, Z+2	; 0x02
    1924:	b3 81       	ldd	r27, Z+3	; 0x03
    1926:	86 81       	ldd	r24, Z+6	; 0x06
    1928:	66 23       	and	r22, r22
    192a:	21 f0       	breq	.+8      	; 0x1934 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x24>
    192c:	9c 91       	ld	r25, X
    192e:	98 2b       	or	r25, r24
    1930:	9c 93       	st	X, r25
    1932:	08 95       	ret
    1934:	9c 91       	ld	r25, X
    1936:	80 95       	com	r24
    1938:	89 23       	and	r24, r25
    193a:	8c 93       	st	X, r24
    193c:	08 95       	ret

0000193e <_ZN16OrangutanDigital9setOutputEhh>:
    193e:	a7 e0       	ldi	r26, 0x07	; 7
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e5 ea       	ldi	r30, 0xA5	; 165
    1944:	fc e0       	ldi	r31, 0x0C	; 12
    1946:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x1a>
    194a:	28 2f       	mov	r18, r24
    194c:	f6 2e       	mov	r15, r22
    194e:	8e 01       	movw	r16, r28
    1950:	0f 5f       	subi	r16, 0xFF	; 255
    1952:	1f 4f       	sbci	r17, 0xFF	; 255
    1954:	c8 01       	movw	r24, r16
    1956:	62 2f       	mov	r22, r18
    1958:	0e 94 2e 0c 	call	0x185c	; 0x185c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    195c:	c8 01       	movw	r24, r16
    195e:	6f 2d       	mov	r22, r15
    1960:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>
    1964:	c8 01       	movw	r24, r16
    1966:	61 e0       	ldi	r22, 0x01	; 1
    1968:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>
    196c:	27 96       	adiw	r28, 0x07	; 7
    196e:	e5 e0       	ldi	r30, 0x05	; 5
    1970:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x1a>

00001974 <_ZN15OrangutanMotors5init2Ev>:
    1974:	e0 eb       	ldi	r30, 0xB0	; 176
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	83 ef       	ldi	r24, 0xF3	; 243
    197a:	80 83       	st	Z, r24
    197c:	80 81       	ld	r24, Z
    197e:	84 bd       	out	0x24, r24	; 36
    1980:	e1 eb       	ldi	r30, 0xB1	; 177
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	82 e0       	ldi	r24, 0x02	; 2
    1986:	80 83       	st	Z, r24
    1988:	80 81       	ld	r24, Z
    198a:	85 bd       	out	0x25, r24	; 37
    198c:	e4 eb       	ldi	r30, 0xB4	; 180
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	10 82       	st	Z, r1
    1992:	80 81       	ld	r24, Z
    1994:	e3 eb       	ldi	r30, 0xB3	; 179
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 83       	st	Z, r24
    199a:	80 81       	ld	r24, Z
    199c:	88 bd       	out	0x28, r24	; 40
    199e:	88 b5       	in	r24, 0x28	; 40
    19a0:	87 bd       	out	0x27, r24	; 39
    19a2:	86 e0       	ldi	r24, 0x06	; 6
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	0e 94 9f 0c 	call	0x193e	; 0x193e <_ZN16OrangutanDigital9setOutputEhh>
    19aa:	85 e0       	ldi	r24, 0x05	; 5
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	0e 94 9f 0c 	call	0x193e	; 0x193e <_ZN16OrangutanDigital9setOutputEhh>
    19b2:	8b e0       	ldi	r24, 0x0B	; 11
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	0e 94 9f 0c 	call	0x193e	; 0x193e <_ZN16OrangutanDigital9setOutputEhh>
    19ba:	83 e0       	ldi	r24, 0x03	; 3
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	0e 94 9f 0c 	call	0x193e	; 0x193e <_ZN16OrangutanDigital9setOutputEhh>
    19c2:	08 95       	ret

000019c4 <_ZN15OrangutanMotors4initEv>:
    19c4:	80 91 5c 01 	lds	r24, 0x015C
    19c8:	88 23       	and	r24, r24
    19ca:	29 f4       	brne	.+10     	; 0x19d6 <_ZN15OrangutanMotors4initEv+0x12>
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	80 93 5c 01 	sts	0x015C, r24
    19d2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN15OrangutanMotors5init2Ev>
    19d6:	08 95       	ret

000019d8 <_ZN15OrangutanMotors10setM1SpeedEi>:
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	ec 01       	movw	r28, r24
    19de:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN15OrangutanMotors4initEv>
    19e2:	d7 ff       	sbrs	r29, 7
    19e4:	05 c0       	rjmp	.+10     	; 0x19f0 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    19e6:	d0 95       	com	r29
    19e8:	c1 95       	neg	r28
    19ea:	df 4f       	sbci	r29, 0xFF	; 255
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	01 c0       	rjmp	.+2      	; 0x19f2 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	cf 3f       	cpi	r28, 0xFF	; 255
    19f4:	d1 05       	cpc	r29, r1
    19f6:	19 f0       	breq	.+6      	; 0x19fe <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    19f8:	14 f0       	brlt	.+4      	; 0x19fe <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    19fa:	cf ef       	ldi	r28, 0xFF	; 255
    19fc:	d0 e0       	ldi	r29, 0x00	; 0
    19fe:	88 23       	and	r24, r24
    1a00:	19 f0       	breq	.+6      	; 0x1a08 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1a02:	18 bc       	out	0x28, r1	; 40
    1a04:	c7 bd       	out	0x27, r28	; 39
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1a08:	c8 bd       	out	0x28, r28	; 40
    1a0a:	17 bc       	out	0x27, r1	; 39
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <_ZN15OrangutanMotors10setM2SpeedEi>:
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	ec 01       	movw	r28, r24
    1a18:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN15OrangutanMotors4initEv>
    1a1c:	d7 ff       	sbrs	r29, 7
    1a1e:	05 c0       	rjmp	.+10     	; 0x1a2a <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1a20:	d0 95       	com	r29
    1a22:	c1 95       	neg	r28
    1a24:	df 4f       	sbci	r29, 0xFF	; 255
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	01 c0       	rjmp	.+2      	; 0x1a2c <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	cf 3f       	cpi	r28, 0xFF	; 255
    1a2e:	d1 05       	cpc	r29, r1
    1a30:	19 f0       	breq	.+6      	; 0x1a38 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1a32:	14 f0       	brlt	.+4      	; 0x1a38 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1a34:	cf ef       	ldi	r28, 0xFF	; 255
    1a36:	d0 e0       	ldi	r29, 0x00	; 0
    1a38:	88 23       	and	r24, r24
    1a3a:	29 f0       	breq	.+10     	; 0x1a46 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1a3c:	10 92 b4 00 	sts	0x00B4, r1
    1a40:	c0 93 b3 00 	sts	0x00B3, r28
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1a46:	c0 93 b4 00 	sts	0x00B4, r28
    1a4a:	10 92 b3 00 	sts	0x00B3, r1
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	08 95       	ret

00001a54 <_ZN15OrangutanMotors9setSpeedsEii>:
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	eb 01       	movw	r28, r22
    1a5a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN15OrangutanMotors10setM1SpeedEi>
    1a5e:	ce 01       	movw	r24, r28
    1a60:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_ZN15OrangutanMotors10setM2SpeedEi>
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	08 95       	ret

00001a6a <set_motors>:
    1a6a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN15OrangutanMotors9setSpeedsEii>
    1a6e:	08 95       	ret

00001a70 <_ZN20OrangutanPushbuttons5init2Ev>:
    1a70:	84 b1       	in	r24, 0x04	; 4
    1a72:	8d 7c       	andi	r24, 0xCD	; 205
    1a74:	84 b9       	out	0x04, r24	; 4
    1a76:	85 b1       	in	r24, 0x05	; 5
    1a78:	82 63       	ori	r24, 0x32	; 50
    1a7a:	85 b9       	out	0x05, r24	; 5
    1a7c:	85 e0       	ldi	r24, 0x05	; 5
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	6f 93       	push	r22
    1a82:	64 e0       	ldi	r22, 0x04	; 4
    1a84:	6a 95       	dec	r22
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1a88:	6f 91       	pop	r22
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	c9 f7       	brne	.-14     	; 0x1a80 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1a8e:	08 95       	ret

00001a90 <_ZN20OrangutanPushbuttons4initEv>:
    1a90:	80 91 5d 01 	lds	r24, 0x015D
    1a94:	88 23       	and	r24, r24
    1a96:	29 f4       	brne	.+10     	; 0x1aa2 <_ZN20OrangutanPushbuttons4initEv+0x12>
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	80 93 5d 01 	sts	0x015D, r24
    1a9e:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <_ZN20OrangutanPushbuttons5init2Ev>
    1aa2:	08 95       	ret

00001aa4 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1aa4:	1f 93       	push	r17
    1aa6:	18 2f       	mov	r17, r24
    1aa8:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN20OrangutanPushbuttons4initEv>
    1aac:	83 b1       	in	r24, 0x03	; 3
    1aae:	81 23       	and	r24, r17
    1ab0:	e9 f3       	breq	.-6      	; 0x1aac <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1ab2:	8a e0       	ldi	r24, 0x0A	; 10
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <delay_ms>
    1aba:	83 b1       	in	r24, 0x03	; 3
    1abc:	81 23       	and	r24, r17
    1abe:	b1 f3       	breq	.-20     	; 0x1aac <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1ac0:	83 b1       	in	r24, 0x03	; 3
    1ac2:	81 23       	and	r24, r17
    1ac4:	1f 91       	pop	r17
    1ac6:	08 95       	ret

00001ac8 <wait_for_button_release>:
    1ac8:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    1acc:	08 95       	ret

00001ace <_ZN20OrangutanPushbuttons9isPressedEh>:
    1ace:	a1 e0       	ldi	r26, 0x01	; 1
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	ed e6       	ldi	r30, 0x6D	; 109
    1ad4:	fd e0       	ldi	r31, 0x0D	; 13
    1ad6:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__prologue_saves__+0x20>
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN20OrangutanPushbuttons4initEv>
    1ae0:	93 b1       	in	r25, 0x03	; 3
    1ae2:	90 95       	com	r25
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	89 23       	and	r24, r25
    1ae8:	21 96       	adiw	r28, 0x01	; 1
    1aea:	e2 e0       	ldi	r30, 0x02	; 2
    1aec:	0c 94 35 14 	jmp	0x286a	; 0x286a <__epilogue_restores__+0x20>

00001af0 <button_is_pressed>:
    1af0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN20OrangutanPushbuttons9isPressedEh>
    1af4:	08 95       	ret

00001af6 <_ZN13OrangutanTime17delayMicrosecondsEj>:
    1af6:	6f 93       	push	r22
    1af8:	64 e0       	ldi	r22, 0x04	; 4
    1afa:	6a 95       	dec	r22
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
    1afe:	6f 91       	pop	r22
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	c9 f7       	brne	.-14     	; 0x1af6 <_ZN13OrangutanTime17delayMicrosecondsEj>
    1b04:	08 95       	ret

00001b06 <__vector_9>:
    1b06:	2f 92       	push	r2
    1b08:	8f 93       	push	r24
    1b0a:	9f 93       	push	r25
    1b0c:	2f b6       	in	r2, 0x3f	; 63
    1b0e:	80 91 6b 01 	lds	r24, 0x016B
    1b12:	90 91 6c 01 	lds	r25, 0x016C
    1b16:	01 96       	adiw	r24, 0x01	; 1
    1b18:	80 93 6b 01 	sts	0x016B, r24
    1b1c:	90 93 6c 01 	sts	0x016C, r25
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	80 91 6d 01 	lds	r24, 0x016D
    1b26:	89 1f       	adc	r24, r25
    1b28:	80 93 6d 01 	sts	0x016D, r24
    1b2c:	90 91 73 01 	lds	r25, 0x0173
    1b30:	9c 5f       	subi	r25, 0xFC	; 252
    1b32:	90 93 73 01 	sts	0x0173, r25
    1b36:	80 91 72 01 	lds	r24, 0x0172
    1b3a:	80 51       	subi	r24, 0x10	; 16
    1b3c:	97 42       	sbci	r25, 0x27	; 39
    1b3e:	c0 f0       	brcs	.+48     	; 0x1b70 <end>
    1b40:	90 93 73 01 	sts	0x0173, r25
    1b44:	80 93 72 01 	sts	0x0172, r24
    1b48:	80 91 6e 01 	lds	r24, 0x016E
    1b4c:	90 91 6f 01 	lds	r25, 0x016F
    1b50:	01 96       	adiw	r24, 0x01	; 1
    1b52:	80 93 6e 01 	sts	0x016E, r24
    1b56:	90 93 6f 01 	sts	0x016F, r25
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	80 91 70 01 	lds	r24, 0x0170
    1b60:	89 1f       	adc	r24, r25
    1b62:	80 93 70 01 	sts	0x0170, r24
    1b66:	80 91 71 01 	lds	r24, 0x0171
    1b6a:	89 1f       	adc	r24, r25
    1b6c:	80 93 71 01 	sts	0x0171, r24

00001b70 <end>:
    1b70:	2f be       	out	0x3f, r2	; 63
    1b72:	9f 91       	pop	r25
    1b74:	8f 91       	pop	r24
    1b76:	2f 90       	pop	r2
    1b78:	18 95       	reti

00001b7a <_ZN13OrangutanTime17delayMillisecondsEj>:
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	ec 01       	movw	r28, r24
    1b80:	05 c0       	rjmp	.+10     	; 0x1b8c <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
    1b82:	88 ee       	ldi	r24, 0xE8	; 232
    1b84:	93 e0       	ldi	r25, 0x03	; 3
    1b86:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_ZN13OrangutanTime17delayMicrosecondsEj>
    1b8a:	21 97       	sbiw	r28, 0x01	; 1
    1b8c:	20 97       	sbiw	r28, 0x00	; 0
    1b8e:	c9 f7       	brne	.-14     	; 0x1b82 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	08 95       	ret

00001b96 <delay_ms>:
    1b96:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN13OrangutanTime17delayMillisecondsEj>
    1b9a:	08 95       	ret

00001b9c <_ZN13OrangutanTime5init2Ev>:
    1b9c:	e0 e7       	ldi	r30, 0x70	; 112
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8e 7f       	andi	r24, 0xFE	; 254
    1ba4:	80 83       	st	Z, r24
    1ba6:	a0 eb       	ldi	r26, 0xB0	; 176
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	8c 91       	ld	r24, X
    1bac:	83 60       	ori	r24, 0x03	; 3
    1bae:	8c 93       	st	X, r24
    1bb0:	a1 eb       	ldi	r26, 0xB1	; 177
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	8c 91       	ld	r24, X
    1bb6:	80 7f       	andi	r24, 0xF0	; 240
    1bb8:	8c 93       	st	X, r24
    1bba:	8c 91       	ld	r24, X
    1bbc:	82 60       	ori	r24, 0x02	; 2
    1bbe:	8c 93       	st	X, r24
    1bc0:	b8 9a       	sbi	0x17, 0	; 23
    1bc2:	80 81       	ld	r24, Z
    1bc4:	81 60       	ori	r24, 0x01	; 1
    1bc6:	80 83       	st	Z, r24
    1bc8:	78 94       	sei
    1bca:	08 95       	ret

00001bcc <_ZN13OrangutanTime4initEv>:
    1bcc:	80 91 74 01 	lds	r24, 0x0174
    1bd0:	88 23       	and	r24, r24
    1bd2:	29 f4       	brne	.+10     	; 0x1bde <_ZN13OrangutanTime4initEv+0x12>
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	80 93 74 01 	sts	0x0174, r24
    1bda:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_ZN13OrangutanTime5init2Ev>
    1bde:	08 95       	ret

00001be0 <_ZN13OrangutanTime5resetEv>:
    1be0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <_ZN13OrangutanTime4initEv>
    1be4:	e0 e7       	ldi	r30, 0x70	; 112
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	8e 7f       	andi	r24, 0xFE	; 254
    1bec:	80 83       	st	Z, r24
    1bee:	10 92 6e 01 	sts	0x016E, r1
    1bf2:	10 92 6f 01 	sts	0x016F, r1
    1bf6:	10 92 70 01 	sts	0x0170, r1
    1bfa:	10 92 71 01 	sts	0x0171, r1
    1bfe:	10 92 73 01 	sts	0x0173, r1
    1c02:	10 92 72 01 	sts	0x0172, r1
    1c06:	80 81       	ld	r24, Z
    1c08:	81 60       	ori	r24, 0x01	; 1
    1c0a:	80 83       	st	Z, r24
    1c0c:	08 95       	ret

00001c0e <calibrate_line_sensors>:
    1c0e:	68 2f       	mov	r22, r24
    1c10:	85 e7       	ldi	r24, 0x75	; 117
    1c12:	91 e0       	ldi	r25, 0x01	; 1
    1c14:	0e 94 37 13 	call	0x266e	; 0x266e <_ZN16PololuQTRSensors9calibrateEh>
    1c18:	08 95       	ret

00001c1a <read_line>:
    1c1a:	9c 01       	movw	r18, r24
    1c1c:	46 2f       	mov	r20, r22
    1c1e:	85 e7       	ldi	r24, 0x75	; 117
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	b9 01       	movw	r22, r18
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	0e 94 95 11 	call	0x232a	; 0x232a <_ZN16PololuQTRSensors8readLineEPjhh>
    1c2a:	08 95       	ret

00001c2c <_ZN9Pololu3pi4initEjh>:
    1c2c:	0f 93       	push	r16
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <_ZN9Pololu3pi4initEjh+0x8>
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <_ZN9Pololu3pi4initEjh+0xa>
    1c36:	0f 92       	push	r0
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	9c 01       	movw	r18, r24
    1c3e:	96 2f       	mov	r25, r22
    1c40:	de 01       	movw	r26, r28
    1c42:	11 96       	adiw	r26, 0x01	; 1
    1c44:	e6 e2       	ldi	r30, 0x26	; 38
    1c46:	f1 e0       	ldi	r31, 0x01	; 1
    1c48:	85 e0       	ldi	r24, 0x05	; 5
    1c4a:	01 90       	ld	r0, Z+
    1c4c:	0d 92       	st	X+, r0
    1c4e:	81 50       	subi	r24, 0x01	; 1
    1c50:	e1 f7       	brne	.-8      	; 0x1c4a <_ZN9Pololu3pi4initEjh+0x1e>
    1c52:	be 01       	movw	r22, r28
    1c54:	6f 5f       	subi	r22, 0xFF	; 255
    1c56:	7f 4f       	sbci	r23, 0xFF	; 255
    1c58:	99 23       	and	r25, r25
    1c5a:	29 f0       	breq	.+10     	; 0x1c66 <_ZN9Pololu3pi4initEjh+0x3a>
    1c5c:	85 e7       	ldi	r24, 0x75	; 117
    1c5e:	91 e0       	ldi	r25, 0x01	; 1
    1c60:	45 e0       	ldi	r20, 0x05	; 5
    1c62:	0f ef       	ldi	r16, 0xFF	; 255
    1c64:	04 c0       	rjmp	.+8      	; 0x1c6e <_ZN9Pololu3pi4initEjh+0x42>
    1c66:	85 e7       	ldi	r24, 0x75	; 117
    1c68:	91 e0       	ldi	r25, 0x01	; 1
    1c6a:	45 e0       	ldi	r20, 0x05	; 5
    1c6c:	03 e1       	ldi	r16, 0x13	; 19
    1c6e:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1c72:	85 e7       	ldi	r24, 0x75	; 117
    1c74:	91 e0       	ldi	r25, 0x01	; 1
    1c76:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <_ZN16PololuQTRSensors11emittersOffEv>
    1c7a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_ZN13OrangutanTime5resetEv>
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	0f 91       	pop	r16
    1c8e:	08 95       	ret

00001c90 <pololu_3pi_init>:
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <_ZN9Pololu3pi4initEjh>
    1c96:	08 95       	ret

00001c98 <_GLOBAL__I_pololu_3pi_init>:
    1c98:	08 95       	ret

00001c9a <_GLOBAL__D_pololu_3pi_init>:
    1c9a:	85 e7       	ldi	r24, 0x75	; 117
    1c9c:	91 e0       	ldi	r25, 0x01	; 1
    1c9e:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <_ZN16PololuQTRSensorsD1Ev>
    1ca2:	08 95       	ret

00001ca4 <delayMicroseconds>:
    1ca4:	6f 93       	push	r22
    1ca6:	64 e0       	ldi	r22, 0x04	; 4
    1ca8:	6a 95       	dec	r22
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <delayMicroseconds+0x4>
    1cac:	6f 91       	pop	r22
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	c9 f7       	brne	.-14     	; 0x1ca4 <delayMicroseconds>
    1cb2:	08 95       	ret

00001cb4 <_ZN16PololuQTRSensors4initEhhh>:
    1cb4:	a7 e0       	ldi	r26, 0x07	; 7
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e0 e6       	ldi	r30, 0x60	; 96
    1cba:	fe e0       	ldi	r31, 0x0E	; 14
    1cbc:	0c 94 17 14 	jmp	0x282e	; 0x282e <__prologue_saves__+0x1c>
    1cc0:	8c 01       	movw	r16, r24
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	11 82       	std	Z+1, r1	; 0x01
    1cc6:	10 82       	st	Z, r1
    1cc8:	13 82       	std	Z+3, r1	; 0x03
    1cca:	12 82       	std	Z+2, r1	; 0x02
    1ccc:	15 82       	std	Z+5, r1	; 0x05
    1cce:	14 82       	std	Z+4, r1	; 0x04
    1cd0:	17 82       	std	Z+7, r1	; 0x07
    1cd2:	16 82       	std	Z+6, r1	; 0x06
    1cd4:	61 31       	cpi	r22, 0x11	; 17
    1cd6:	18 f0       	brcs	.+6      	; 0x1cde <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1cd8:	80 e1       	ldi	r24, 0x10	; 16
    1cda:	80 87       	std	Z+8, r24	; 0x08
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1cde:	fc 01       	movw	r30, r24
    1ce0:	60 87       	std	Z+8, r22	; 0x08
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	20 8b       	std	Z+16, r18	; 0x10
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	64 2f       	mov	r22, r20
    1cec:	0e 94 2e 0c 	call	0x185c	; 0x185c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1cf0:	8f 81       	ldd	r24, Y+7	; 0x07
    1cf2:	f8 01       	movw	r30, r16
    1cf4:	81 87       	std	Z+9, r24	; 0x09
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	93 87       	std	Z+11, r25	; 0x0b
    1cfc:	82 87       	std	Z+10, r24	; 0x0a
    1cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1d00:	9e 81       	ldd	r25, Y+6	; 0x06
    1d02:	95 87       	std	Z+13, r25	; 0x0d
    1d04:	84 87       	std	Z+12, r24	; 0x0c
    1d06:	27 96       	adiw	r28, 0x07	; 7
    1d08:	e4 e0       	ldi	r30, 0x04	; 4
    1d0a:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__epilogue_restores__+0x1c>

00001d0e <_ZN16PololuQTRSensors11emittersOffEv>:
    1d0e:	fc 01       	movw	r30, r24
    1d10:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d12:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d14:	10 97       	sbiw	r26, 0x00	; 0
    1d16:	79 f0       	breq	.+30     	; 0x1d36 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    1d18:	8c 91       	ld	r24, X
    1d1a:	91 85       	ldd	r25, Z+9	; 0x09
    1d1c:	89 2b       	or	r24, r25
    1d1e:	8c 93       	st	X, r24
    1d20:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d22:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d24:	9c 91       	ld	r25, X
    1d26:	81 85       	ldd	r24, Z+9	; 0x09
    1d28:	80 95       	com	r24
    1d2a:	89 23       	and	r24, r25
    1d2c:	8c 93       	st	X, r24
    1d2e:	88 ec       	ldi	r24, 0xC8	; 200
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <delayMicroseconds>
    1d36:	08 95       	ret

00001d38 <_ZN16PololuQTRSensors10emittersOnEv>:
    1d38:	fc 01       	movw	r30, r24
    1d3a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d3c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d3e:	10 97       	sbiw	r26, 0x00	; 0
    1d40:	71 f0       	breq	.+28     	; 0x1d5e <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    1d42:	8c 91       	ld	r24, X
    1d44:	91 85       	ldd	r25, Z+9	; 0x09
    1d46:	89 2b       	or	r24, r25
    1d48:	8c 93       	st	X, r24
    1d4a:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d4c:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d4e:	8c 91       	ld	r24, X
    1d50:	91 85       	ldd	r25, Z+9	; 0x09
    1d52:	89 2b       	or	r24, r25
    1d54:	8c 93       	st	X, r24
    1d56:	88 ec       	ldi	r24, 0xC8	; 200
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <delayMicroseconds>
    1d5e:	08 95       	ret

00001d60 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    1d60:	a7 e0       	ldi	r26, 0x07	; 7
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e6 eb       	ldi	r30, 0xB6	; 182
    1d66:	fe e0       	ldi	r31, 0x0E	; 14
    1d68:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__prologue_saves__>
    1d6c:	7c 01       	movw	r14, r24
    1d6e:	1b 01       	movw	r2, r22
    1d70:	64 2f       	mov	r22, r20
    1d72:	39 01       	movw	r6, r18
    1d74:	40 2f       	mov	r20, r16
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <_ZN16PololuQTRSensors4initEhhh>
    1d7c:	97 01       	movw	r18, r14
    1d7e:	2f 5b       	subi	r18, 0xBF	; 191
    1d80:	3f 4f       	sbci	r19, 0xFF	; 255
    1d82:	f9 01       	movw	r30, r18
    1d84:	10 82       	st	Z, r1
    1d86:	d7 01       	movw	r26, r14
    1d88:	ae 5b       	subi	r26, 0xBE	; 190
    1d8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d8c:	1c 92       	st	X, r1
    1d8e:	c7 01       	movw	r24, r14
    1d90:	8d 5b       	subi	r24, 0xBD	; 189
    1d92:	9f 4f       	sbci	r25, 0xFF	; 255
    1d94:	fc 01       	movw	r30, r24
    1d96:	10 82       	st	Z, r1
    1d98:	f7 01       	movw	r30, r14
    1d9a:	77 86       	std	Z+15, r7	; 0x0f
    1d9c:	66 86       	std	Z+14, r6	; 0x0e
    1d9e:	66 24       	eor	r6, r6
    1da0:	2e 01       	movw	r4, r28
    1da2:	08 94       	sec
    1da4:	41 1c       	adc	r4, r1
    1da6:	51 1c       	adc	r5, r1
    1da8:	6c 01       	movw	r12, r24
    1daa:	5d 01       	movw	r10, r26
    1dac:	49 01       	movw	r8, r18
    1dae:	29 c0       	rjmp	.+82     	; 0x1e02 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1db0:	06 2d       	mov	r16, r6
    1db2:	10 e0       	ldi	r17, 0x00	; 0
    1db4:	f1 01       	movw	r30, r2
    1db6:	e0 0f       	add	r30, r16
    1db8:	f1 1f       	adc	r31, r17
    1dba:	c2 01       	movw	r24, r4
    1dbc:	60 81       	ld	r22, Z
    1dbe:	0e 94 2e 0c 	call	0x185c	; 0x185c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1dc2:	2f 81       	ldd	r18, Y+7	; 0x07
    1dc4:	f7 01       	movw	r30, r14
    1dc6:	e0 0f       	add	r30, r16
    1dc8:	f1 1f       	adc	r31, r17
    1dca:	21 8b       	std	Z+17, r18	; 0x11
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd0:	f8 01       	movw	r30, r16
    1dd2:	ee 0f       	add	r30, r30
    1dd4:	ff 1f       	adc	r31, r31
    1dd6:	ee 0d       	add	r30, r14
    1dd8:	ff 1d       	adc	r31, r15
    1dda:	92 a3       	std	Z+34, r25	; 0x22
    1ddc:	81 a3       	std	Z+33, r24	; 0x21
    1dde:	83 32       	cpi	r24, 0x23	; 35
    1de0:	91 05       	cpc	r25, r1
    1de2:	11 f4       	brne	.+4      	; 0x1de8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1de4:	f4 01       	movw	r30, r8
    1de6:	09 c0       	rjmp	.+18     	; 0x1dfa <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1de8:	86 32       	cpi	r24, 0x26	; 38
    1dea:	91 05       	cpc	r25, r1
    1dec:	11 f4       	brne	.+4      	; 0x1df2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1dee:	f5 01       	movw	r30, r10
    1df0:	04 c0       	rjmp	.+8      	; 0x1dfa <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1df2:	89 32       	cpi	r24, 0x29	; 41
    1df4:	91 05       	cpc	r25, r1
    1df6:	21 f4       	brne	.+8      	; 0x1e00 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa0>
    1df8:	f6 01       	movw	r30, r12
    1dfa:	80 81       	ld	r24, Z
    1dfc:	82 2b       	or	r24, r18
    1dfe:	80 83       	st	Z, r24
    1e00:	63 94       	inc	r6
    1e02:	f7 01       	movw	r30, r14
    1e04:	80 85       	ldd	r24, Z+8	; 0x08
    1e06:	68 16       	cp	r6, r24
    1e08:	98 f2       	brcs	.-90     	; 0x1db0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x50>
    1e0a:	27 96       	adiw	r28, 0x07	; 7
    1e0c:	e2 e1       	ldi	r30, 0x12	; 18
    1e0e:	0c 94 25 14 	jmp	0x284a	; 0x284a <__epilogue_restores__>

00001e12 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1e12:	a0 e0       	ldi	r26, 0x00	; 0
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	ef e0       	ldi	r30, 0x0F	; 15
    1e18:	ff e0       	ldi	r31, 0x0F	; 15
    1e1a:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__prologue_saves__+0xa>
    1e1e:	ec 01       	movw	r28, r24
    1e20:	5b 01       	movw	r10, r22
    1e22:	fc 01       	movw	r30, r24
    1e24:	ef 5b       	subi	r30, 0xBF	; 191
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	90 80       	ld	r9, Z
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	ee 5b       	subi	r30, 0xBE	; 190
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 80       	ld	r8, Z
    1e32:	fc 01       	movw	r30, r24
    1e34:	ed 5b       	subi	r30, 0xBD	; 189
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	70 80       	ld	r7, Z
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	09 c0       	rjmp	.+18     	; 0x1e50 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x3e>
    1e3e:	e8 2f       	mov	r30, r24
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	ee 0f       	add	r30, r30
    1e44:	ff 1f       	adc	r31, r31
    1e46:	ea 0d       	add	r30, r10
    1e48:	fb 1d       	adc	r31, r11
    1e4a:	11 82       	std	Z+1, r1	; 0x01
    1e4c:	10 82       	st	Z, r1
    1e4e:	8f 5f       	subi	r24, 0xFF	; 255
    1e50:	98 85       	ldd	r25, Y+8	; 0x08
    1e52:	89 17       	cp	r24, r25
    1e54:	a0 f3       	brcs	.-24     	; 0x1e3e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x2c>
    1e56:	84 b1       	in	r24, 0x04	; 4
    1e58:	21 e4       	ldi	r18, 0x41	; 65
    1e5a:	e2 2e       	mov	r14, r18
    1e5c:	f1 2c       	mov	r15, r1
    1e5e:	ec 0e       	add	r14, r28
    1e60:	fd 1e       	adc	r15, r29
    1e62:	d7 01       	movw	r26, r14
    1e64:	9c 91       	ld	r25, X
    1e66:	89 2b       	or	r24, r25
    1e68:	84 b9       	out	0x04, r24	; 4
    1e6a:	87 b1       	in	r24, 0x07	; 7
    1e6c:	8e 01       	movw	r16, r28
    1e6e:	0e 5b       	subi	r16, 0xBE	; 190
    1e70:	1f 4f       	sbci	r17, 0xFF	; 255
    1e72:	f8 01       	movw	r30, r16
    1e74:	90 81       	ld	r25, Z
    1e76:	89 2b       	or	r24, r25
    1e78:	87 b9       	out	0x07, r24	; 7
    1e7a:	8a b1       	in	r24, 0x0a	; 10
    1e7c:	93 e4       	ldi	r25, 0x43	; 67
    1e7e:	c9 2e       	mov	r12, r25
    1e80:	d1 2c       	mov	r13, r1
    1e82:	cc 0e       	add	r12, r28
    1e84:	dd 1e       	adc	r13, r29
    1e86:	d6 01       	movw	r26, r12
    1e88:	9c 91       	ld	r25, X
    1e8a:	89 2b       	or	r24, r25
    1e8c:	8a b9       	out	0x0a, r24	; 10
    1e8e:	85 b1       	in	r24, 0x05	; 5
    1e90:	f7 01       	movw	r30, r14
    1e92:	90 81       	ld	r25, Z
    1e94:	89 2b       	or	r24, r25
    1e96:	85 b9       	out	0x05, r24	; 5
    1e98:	88 b1       	in	r24, 0x08	; 8
    1e9a:	d8 01       	movw	r26, r16
    1e9c:	9c 91       	ld	r25, X
    1e9e:	89 2b       	or	r24, r25
    1ea0:	88 b9       	out	0x08, r24	; 8
    1ea2:	8b b1       	in	r24, 0x0b	; 11
    1ea4:	f6 01       	movw	r30, r12
    1ea6:	90 81       	ld	r25, Z
    1ea8:	89 2b       	or	r24, r25
    1eaa:	8b b9       	out	0x0b, r24	; 11
    1eac:	8a e0       	ldi	r24, 0x0A	; 10
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <delayMicroseconds>
    1eb4:	94 b1       	in	r25, 0x04	; 4
    1eb6:	d7 01       	movw	r26, r14
    1eb8:	8c 91       	ld	r24, X
    1eba:	80 95       	com	r24
    1ebc:	89 23       	and	r24, r25
    1ebe:	84 b9       	out	0x04, r24	; 4
    1ec0:	97 b1       	in	r25, 0x07	; 7
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	80 81       	ld	r24, Z
    1ec6:	80 95       	com	r24
    1ec8:	89 23       	and	r24, r25
    1eca:	87 b9       	out	0x07, r24	; 7
    1ecc:	9a b1       	in	r25, 0x0a	; 10
    1ece:	d6 01       	movw	r26, r12
    1ed0:	8c 91       	ld	r24, X
    1ed2:	80 95       	com	r24
    1ed4:	89 23       	and	r24, r25
    1ed6:	8a b9       	out	0x0a, r24	; 10
    1ed8:	95 b1       	in	r25, 0x05	; 5
    1eda:	f7 01       	movw	r30, r14
    1edc:	80 81       	ld	r24, Z
    1ede:	80 95       	com	r24
    1ee0:	89 23       	and	r24, r25
    1ee2:	85 b9       	out	0x05, r24	; 5
    1ee4:	98 b1       	in	r25, 0x08	; 8
    1ee6:	d8 01       	movw	r26, r16
    1ee8:	8c 91       	ld	r24, X
    1eea:	80 95       	com	r24
    1eec:	89 23       	and	r24, r25
    1eee:	88 b9       	out	0x08, r24	; 8
    1ef0:	9b b1       	in	r25, 0x0b	; 11
    1ef2:	f6 01       	movw	r30, r12
    1ef4:	80 81       	ld	r24, Z
    1ef6:	80 95       	com	r24
    1ef8:	89 23       	and	r24, r25
    1efa:	8b b9       	out	0x0b, r24	; 11
    1efc:	c0 90 b0 00 	lds	r12, 0x00B0
    1f00:	e0 90 b1 00 	lds	r14, 0x00B1
    1f04:	80 91 b0 00 	lds	r24, 0x00B0
    1f08:	83 60       	ori	r24, 0x03	; 3
    1f0a:	80 93 b0 00 	sts	0x00B0, r24
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	80 93 b1 00 	sts	0x00B1, r24
    1f14:	00 91 b2 00 	lds	r16, 0x00B2
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	39 c0       	rjmp	.+114    	; 0x1f90 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17e>
    1f1e:	20 91 b2 00 	lds	r18, 0x00B2
    1f22:	20 1b       	sub	r18, r16
    1f24:	82 0f       	add	r24, r18
    1f26:	91 1d       	adc	r25, r1
    1f28:	02 0f       	add	r16, r18
    1f2a:	f3 b0       	in	r15, 0x03	; 3
    1f2c:	f9 14       	cp	r15, r9
    1f2e:	09 f0       	breq	.+2      	; 0x1f32 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x120>
    1f30:	4d c0       	rjmp	.+154    	; 0x1fcc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f32:	96 b0       	in	r9, 0x06	; 6
    1f34:	98 14       	cp	r9, r8
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x128>
    1f38:	49 c0       	rjmp	.+146    	; 0x1fcc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f3a:	29 b1       	in	r18, 0x09	; 9
    1f3c:	27 15       	cp	r18, r7
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x130>
    1f40:	45 c0       	rjmp	.+138    	; 0x1fcc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f42:	24 c0       	rjmp	.+72     	; 0x1f8c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17a>
    1f44:	21 2f       	mov	r18, r17
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	a9 01       	movw	r20, r18
    1f4a:	44 0f       	add	r20, r20
    1f4c:	55 1f       	adc	r21, r21
    1f4e:	f5 01       	movw	r30, r10
    1f50:	e4 0f       	add	r30, r20
    1f52:	f5 1f       	adc	r31, r21
    1f54:	60 81       	ld	r22, Z
    1f56:	71 81       	ldd	r23, Z+1	; 0x01
    1f58:	61 15       	cp	r22, r1
    1f5a:	71 05       	cpc	r23, r1
    1f5c:	99 f4       	brne	.+38     	; 0x1f84 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    1f5e:	4c 0f       	add	r20, r28
    1f60:	5d 1f       	adc	r21, r29
    1f62:	da 01       	movw	r26, r20
    1f64:	91 96       	adiw	r26, 0x21	; 33
    1f66:	4d 91       	ld	r20, X+
    1f68:	5c 91       	ld	r21, X
    1f6a:	92 97       	sbiw	r26, 0x22	; 34
    1f6c:	da 01       	movw	r26, r20
    1f6e:	4c 91       	ld	r20, X
    1f70:	2c 0f       	add	r18, r28
    1f72:	3d 1f       	adc	r19, r29
    1f74:	d9 01       	movw	r26, r18
    1f76:	51 96       	adiw	r26, 0x11	; 17
    1f78:	2c 91       	ld	r18, X
    1f7a:	51 97       	sbiw	r26, 0x11	; 17
    1f7c:	42 23       	and	r20, r18
    1f7e:	11 f4       	brne	.+4      	; 0x1f84 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	80 83       	st	Z, r24
    1f84:	1f 5f       	subi	r17, 0xFF	; 255
    1f86:	28 85       	ldd	r18, Y+8	; 0x08
    1f88:	12 17       	cp	r17, r18
    1f8a:	e0 f2       	brcs	.-72     	; 0x1f44 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x132>
    1f8c:	89 2c       	mov	r8, r9
    1f8e:	9f 2c       	mov	r9, r15
    1f90:	2e 85       	ldd	r18, Y+14	; 0x0e
    1f92:	3f 85       	ldd	r19, Y+15	; 0x0f
    1f94:	82 17       	cp	r24, r18
    1f96:	93 07       	cpc	r25, r19
    1f98:	10 f2       	brcs	.-124    	; 0x1f1e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x10c>
    1f9a:	c0 92 b0 00 	sts	0x00B0, r12
    1f9e:	e0 92 b1 00 	sts	0x00B1, r14
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	0f c0       	rjmp	.+30     	; 0x1fc4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b2>
    1fa6:	e2 2f       	mov	r30, r18
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	ee 0f       	add	r30, r30
    1fac:	ff 1f       	adc	r31, r31
    1fae:	ea 0d       	add	r30, r10
    1fb0:	fb 1d       	adc	r31, r11
    1fb2:	80 81       	ld	r24, Z
    1fb4:	91 81       	ldd	r25, Z+1	; 0x01
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	21 f4       	brne	.+8      	; 0x1fc2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b0>
    1fba:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fbc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	80 83       	st	Z, r24
    1fc2:	2f 5f       	subi	r18, 0xFF	; 255
    1fc4:	88 85       	ldd	r24, Y+8	; 0x08
    1fc6:	28 17       	cp	r18, r24
    1fc8:	70 f3       	brcs	.-36     	; 0x1fa6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x194>
    1fca:	05 c0       	rjmp	.+10     	; 0x1fd6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1c4>
    1fcc:	f3 b0       	in	r15, 0x03	; 3
    1fce:	96 b0       	in	r9, 0x06	; 6
    1fd0:	79 b0       	in	r7, 0x09	; 9
    1fd2:	10 e0       	ldi	r17, 0x00	; 0
    1fd4:	d8 cf       	rjmp	.-80     	; 0x1f86 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	ed e0       	ldi	r30, 0x0D	; 13
    1fdc:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__epilogue_restores__+0xa>

00001fe0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1fe0:	ef 92       	push	r14
    1fe2:	ff 92       	push	r15
    1fe4:	0f 93       	push	r16
    1fe6:	1f 93       	push	r17
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	fc 01       	movw	r30, r24
    1fee:	9b 01       	movw	r18, r22
    1ff0:	00 91 7c 00 	lds	r16, 0x007C
    1ff4:	10 91 7a 00 	lds	r17, 0x007A
    1ff8:	e7 b0       	in	r14, 0x07	; 7
    1ffa:	f8 b0       	in	r15, 0x08	; 8
    1ffc:	80 91 7a 00 	lds	r24, 0x007A
    2000:	86 fd       	sbrc	r24, 6
    2002:	fc cf       	rjmp	.-8      	; 0x1ffc <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	0a c0       	rjmp	.+20     	; 0x201c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3c>
    2008:	a8 2f       	mov	r26, r24
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	aa 0f       	add	r26, r26
    200e:	bb 1f       	adc	r27, r27
    2010:	a2 0f       	add	r26, r18
    2012:	b3 1f       	adc	r27, r19
    2014:	11 96       	adiw	r26, 0x01	; 1
    2016:	1c 92       	st	X, r1
    2018:	1e 92       	st	-X, r1
    201a:	8f 5f       	subi	r24, 0xFF	; 255
    201c:	90 85       	ldd	r25, Z+8	; 0x08
    201e:	89 17       	cp	r24, r25
    2020:	98 f3       	brcs	.-26     	; 0x2008 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x28>
    2022:	97 b1       	in	r25, 0x07	; 7
    2024:	82 a1       	ldd	r24, Z+34	; 0x22
    2026:	80 95       	com	r24
    2028:	89 23       	and	r24, r25
    202a:	87 b9       	out	0x07, r24	; 7
    202c:	98 b1       	in	r25, 0x08	; 8
    202e:	82 a1       	ldd	r24, Z+34	; 0x22
    2030:	80 95       	com	r24
    2032:	89 23       	and	r24, r25
    2034:	88 b9       	out	0x08, r24	; 8
    2036:	87 e8       	ldi	r24, 0x87	; 135
    2038:	80 93 7a 00 	sts	0x007A, r24
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	29 c0       	rjmp	.+82     	; 0x2092 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2040:	df 01       	movw	r26, r30
    2042:	a6 0f       	add	r26, r22
    2044:	b1 1d       	adc	r27, r1
    2046:	51 96       	adiw	r26, 0x11	; 17
    2048:	8c 91       	ld	r24, X
    204a:	51 97       	sbiw	r26, 0x11	; 17
    204c:	80 64       	ori	r24, 0x40	; 64
    204e:	80 93 7c 00 	sts	0x007C, r24
    2052:	80 91 7a 00 	lds	r24, 0x007A
    2056:	80 64       	ori	r24, 0x40	; 64
    2058:	80 93 7a 00 	sts	0x007A, r24
    205c:	80 91 7a 00 	lds	r24, 0x007A
    2060:	86 fd       	sbrc	r24, 6
    2062:	fc cf       	rjmp	.-8      	; 0x205c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x7c>
    2064:	a6 2f       	mov	r26, r22
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	aa 0f       	add	r26, r26
    206a:	bb 1f       	adc	r27, r27
    206c:	a2 0f       	add	r26, r18
    206e:	b3 1f       	adc	r27, r19
    2070:	40 91 78 00 	lds	r20, 0x0078
    2074:	50 91 79 00 	lds	r21, 0x0079
    2078:	8d 91       	ld	r24, X+
    207a:	9c 91       	ld	r25, X
    207c:	11 97       	sbiw	r26, 0x01	; 1
    207e:	84 0f       	add	r24, r20
    2080:	95 1f       	adc	r25, r21
    2082:	11 96       	adiw	r26, 0x01	; 1
    2084:	9c 93       	st	X, r25
    2086:	8e 93       	st	-X, r24
    2088:	6f 5f       	subi	r22, 0xFF	; 255
    208a:	80 85       	ldd	r24, Z+8	; 0x08
    208c:	68 17       	cp	r22, r24
    208e:	c0 f2       	brcs	.-80     	; 0x2040 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x60>
    2090:	7f 5f       	subi	r23, 0xFF	; 255
    2092:	81 a1       	ldd	r24, Z+33	; 0x21
    2094:	78 17       	cp	r23, r24
    2096:	10 f4       	brcc	.+4      	; 0x209c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xbc>
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	f7 cf       	rjmp	.-18     	; 0x208a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xaa>
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe8>
    20a0:	c4 2f       	mov	r28, r20
    20a2:	d0 e0       	ldi	r29, 0x00	; 0
    20a4:	cc 0f       	add	r28, r28
    20a6:	dd 1f       	adc	r29, r29
    20a8:	c2 0f       	add	r28, r18
    20aa:	d3 1f       	adc	r29, r19
    20ac:	61 a1       	ldd	r22, Z+33	; 0x21
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	cb 01       	movw	r24, r22
    20b2:	95 95       	asr	r25
    20b4:	87 95       	ror	r24
    20b6:	a8 81       	ld	r26, Y
    20b8:	b9 81       	ldd	r27, Y+1	; 0x01
    20ba:	8a 0f       	add	r24, r26
    20bc:	9b 1f       	adc	r25, r27
    20be:	0e 94 95 13 	call	0x272a	; 0x272a <__udivmodhi4>
    20c2:	79 83       	std	Y+1, r23	; 0x01
    20c4:	68 83       	st	Y, r22
    20c6:	4f 5f       	subi	r20, 0xFF	; 255
    20c8:	80 85       	ldd	r24, Z+8	; 0x08
    20ca:	48 17       	cp	r20, r24
    20cc:	48 f3       	brcs	.-46     	; 0x20a0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xc0>
    20ce:	00 93 7c 00 	sts	0x007C, r16
    20d2:	10 93 7a 00 	sts	0x007A, r17
    20d6:	f8 b8       	out	0x08, r15	; 8
    20d8:	e7 b8       	out	0x07, r14	; 7
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	e6 e0       	ldi	r30, 0x06	; 6
    20e0:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__epilogue_restores__+0x18>

000020e4 <_ZN16PololuQTRSensors4readEPjh>:
    20e4:	a0 e2       	ldi	r26, 0x20	; 32
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e8 e7       	ldi	r30, 0x78	; 120
    20ea:	f0 e1       	ldi	r31, 0x10	; 16
    20ec:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__prologue_saves__+0x16>
    20f0:	8c 01       	movw	r16, r24
    20f2:	7b 01       	movw	r14, r22
    20f4:	d4 2e       	mov	r13, r20
    20f6:	84 2f       	mov	r24, r20
    20f8:	81 50       	subi	r24, 0x01	; 1
    20fa:	82 30       	cpi	r24, 0x02	; 2
    20fc:	18 f4       	brcc	.+6      	; 0x2104 <_ZN16PololuQTRSensors4readEPjh+0x20>
    20fe:	c8 01       	movw	r24, r16
    2100:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <_ZN16PololuQTRSensors10emittersOnEv>
    2104:	d8 01       	movw	r26, r16
    2106:	50 96       	adiw	r26, 0x10	; 16
    2108:	8c 91       	ld	r24, X
    210a:	50 97       	sbiw	r26, 0x10	; 16
    210c:	88 23       	and	r24, r24
    210e:	89 f4       	brne	.+34     	; 0x2132 <_ZN16PololuQTRSensors4readEPjh+0x4e>
    2110:	c8 01       	movw	r24, r16
    2112:	b7 01       	movw	r22, r14
    2114:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2118:	c8 01       	movw	r24, r16
    211a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <_ZN16PololuQTRSensors11emittersOffEv>
    211e:	bd 2d       	mov	r27, r13
    2120:	b2 30       	cpi	r27, 0x02	; 2
    2122:	d9 f5       	brne	.+118    	; 0x219a <_ZN16PololuQTRSensors4readEPjh+0xb6>
    2124:	c8 01       	movw	r24, r16
    2126:	be 01       	movw	r22, r28
    2128:	6f 5f       	subi	r22, 0xFF	; 255
    212a:	7f 4f       	sbci	r23, 0xFF	; 255
    212c:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2130:	10 c0       	rjmp	.+32     	; 0x2152 <_ZN16PololuQTRSensors4readEPjh+0x6e>
    2132:	c8 01       	movw	r24, r16
    2134:	b7 01       	movw	r22, r14
    2136:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    213a:	c8 01       	movw	r24, r16
    213c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <_ZN16PololuQTRSensors11emittersOffEv>
    2140:	ed 2d       	mov	r30, r13
    2142:	e2 30       	cpi	r30, 0x02	; 2
    2144:	51 f5       	brne	.+84     	; 0x219a <_ZN16PololuQTRSensors4readEPjh+0xb6>
    2146:	c8 01       	movw	r24, r16
    2148:	be 01       	movw	r22, r28
    214a:	6f 5f       	subi	r22, 0xFF	; 255
    214c:	7f 4f       	sbci	r23, 0xFF	; 255
    214e:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	ae 01       	movw	r20, r28
    2156:	4f 5f       	subi	r20, 0xFF	; 255
    2158:	5f 4f       	sbci	r21, 0xFF	; 255
    215a:	1b c0       	rjmp	.+54     	; 0x2192 <_ZN16PololuQTRSensors4readEPjh+0xae>
    215c:	86 2f       	mov	r24, r22
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	88 0f       	add	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	f7 01       	movw	r30, r14
    2166:	e8 0f       	add	r30, r24
    2168:	f9 1f       	adc	r31, r25
    216a:	84 0f       	add	r24, r20
    216c:	95 1f       	adc	r25, r21
    216e:	d8 01       	movw	r26, r16
    2170:	1e 96       	adiw	r26, 0x0e	; 14
    2172:	2d 91       	ld	r18, X+
    2174:	3c 91       	ld	r19, X
    2176:	1f 97       	sbiw	r26, 0x0f	; 15
    2178:	dc 01       	movw	r26, r24
    217a:	8d 91       	ld	r24, X+
    217c:	9c 91       	ld	r25, X
    217e:	11 97       	sbiw	r26, 0x01	; 1
    2180:	28 1b       	sub	r18, r24
    2182:	39 0b       	sbc	r19, r25
    2184:	80 81       	ld	r24, Z
    2186:	91 81       	ldd	r25, Z+1	; 0x01
    2188:	82 0f       	add	r24, r18
    218a:	93 1f       	adc	r25, r19
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	80 83       	st	Z, r24
    2190:	6f 5f       	subi	r22, 0xFF	; 255
    2192:	f8 01       	movw	r30, r16
    2194:	80 85       	ldd	r24, Z+8	; 0x08
    2196:	68 17       	cp	r22, r24
    2198:	08 f3       	brcs	.-62     	; 0x215c <_ZN16PololuQTRSensors4readEPjh+0x78>
    219a:	a0 96       	adiw	r28, 0x20	; 32
    219c:	e7 e0       	ldi	r30, 0x07	; 7
    219e:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__epilogue_restores__+0x16>

000021a2 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    21a2:	8f 92       	push	r8
    21a4:	9f 92       	push	r9
    21a6:	af 92       	push	r10
    21a8:	bf 92       	push	r11
    21aa:	cf 92       	push	r12
    21ac:	df 92       	push	r13
    21ae:	ff 92       	push	r15
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	ec 01       	movw	r28, r24
    21ba:	c6 2e       	mov	r12, r22
    21bc:	07 2f       	mov	r16, r23
    21be:	f4 2e       	mov	r15, r20
    21c0:	42 30       	cpi	r20, 0x02	; 2
    21c2:	11 f0       	breq	.+4      	; 0x21c8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x26>
    21c4:	ff 20       	and	r15, r15
    21c6:	51 f4       	brne	.+20     	; 0x21dc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    21c8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ca:	9d 81       	ldd	r25, Y+5	; 0x05
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x30>
    21d0:	a0 c0       	rjmp	.+320    	; 0x2312 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21d2:	8e 81       	ldd	r24, Y+6	; 0x06
    21d4:	9f 81       	ldd	r25, Y+7	; 0x07
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	09 f4       	brne	.+2      	; 0x21dc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    21da:	9b c0       	rjmp	.+310    	; 0x2312 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21dc:	8f 2d       	mov	r24, r15
    21de:	81 50       	subi	r24, 0x01	; 1
    21e0:	82 30       	cpi	r24, 0x02	; 2
    21e2:	50 f4       	brcc	.+20     	; 0x21f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    21e4:	88 81       	ld	r24, Y
    21e6:	99 81       	ldd	r25, Y+1	; 0x01
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	09 f4       	brne	.+2      	; 0x21ee <_ZN16PololuQTRSensors14readCalibratedEPjh+0x4c>
    21ec:	92 c0       	rjmp	.+292    	; 0x2312 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	9b 81       	ldd	r25, Y+3	; 0x03
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    21f6:	8d c0       	rjmp	.+282    	; 0x2312 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21f8:	ce 01       	movw	r24, r28
    21fa:	6c 2d       	mov	r22, r12
    21fc:	70 2f       	mov	r23, r16
    21fe:	4f 2d       	mov	r20, r15
    2200:	0e 94 72 10 	call	0x20e4	; 0x20e4 <_ZN16PololuQTRSensors4readEPjh>
    2204:	ac 2c       	mov	r10, r12
    2206:	b0 2e       	mov	r11, r16
    2208:	00 e0       	ldi	r16, 0x00	; 0
    220a:	10 e0       	ldi	r17, 0x00	; 0
    220c:	88 24       	eor	r8, r8
    220e:	99 24       	eor	r9, r9
    2210:	7a c0       	rjmp	.+244    	; 0x2306 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x164>
    2212:	8f 2d       	mov	r24, r15
    2214:	81 30       	cpi	r24, 0x01	; 1
    2216:	59 f4       	brne	.+22     	; 0x222e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x8c>
    2218:	ea 81       	ldd	r30, Y+2	; 0x02
    221a:	fb 81       	ldd	r31, Y+3	; 0x03
    221c:	e0 0f       	add	r30, r16
    221e:	f1 1f       	adc	r31, r17
    2220:	c0 80       	ld	r12, Z
    2222:	d1 80       	ldd	r13, Z+1	; 0x01
    2224:	e8 81       	ld	r30, Y
    2226:	f9 81       	ldd	r31, Y+1	; 0x01
    2228:	e0 0f       	add	r30, r16
    222a:	f1 1f       	adc	r31, r17
    222c:	0d c0       	rjmp	.+26     	; 0x2248 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    222e:	8c 81       	ldd	r24, Y+4	; 0x04
    2230:	9d 81       	ldd	r25, Y+5	; 0x05
    2232:	ff 20       	and	r15, r15
    2234:	61 f4       	brne	.+24     	; 0x224e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xac>
    2236:	ee 81       	ldd	r30, Y+6	; 0x06
    2238:	ff 81       	ldd	r31, Y+7	; 0x07
    223a:	e0 0f       	add	r30, r16
    223c:	f1 1f       	adc	r31, r17
    223e:	c0 80       	ld	r12, Z
    2240:	d1 80       	ldd	r13, Z+1	; 0x01
    2242:	80 0f       	add	r24, r16
    2244:	91 1f       	adc	r25, r17
    2246:	fc 01       	movw	r30, r24
    2248:	40 81       	ld	r20, Z
    224a:	51 81       	ldd	r21, Z+1	; 0x01
    224c:	2b c0       	rjmp	.+86     	; 0x22a4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    224e:	80 0f       	add	r24, r16
    2250:	91 1f       	adc	r25, r17
    2252:	fc 01       	movw	r30, r24
    2254:	80 81       	ld	r24, Z
    2256:	91 81       	ldd	r25, Z+1	; 0x01
    2258:	e8 81       	ld	r30, Y
    225a:	f9 81       	ldd	r31, Y+1	; 0x01
    225c:	e0 0f       	add	r30, r16
    225e:	f1 1f       	adc	r31, r17
    2260:	40 81       	ld	r20, Z
    2262:	51 81       	ldd	r21, Z+1	; 0x01
    2264:	ce 84       	ldd	r12, Y+14	; 0x0e
    2266:	df 84       	ldd	r13, Y+15	; 0x0f
    2268:	84 17       	cp	r24, r20
    226a:	95 07       	cpc	r25, r21
    226c:	10 f4       	brcc	.+4      	; 0x2272 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd0>
    226e:	a6 01       	movw	r20, r12
    2270:	04 c0       	rjmp	.+8      	; 0x227a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd8>
    2272:	4c 0d       	add	r20, r12
    2274:	5d 1d       	adc	r21, r13
    2276:	48 1b       	sub	r20, r24
    2278:	59 0b       	sbc	r21, r25
    227a:	ee 81       	ldd	r30, Y+6	; 0x06
    227c:	ff 81       	ldd	r31, Y+7	; 0x07
    227e:	e0 0f       	add	r30, r16
    2280:	f1 1f       	adc	r31, r17
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	ea 81       	ldd	r30, Y+2	; 0x02
    2288:	fb 81       	ldd	r31, Y+3	; 0x03
    228a:	e0 0f       	add	r30, r16
    228c:	f1 1f       	adc	r31, r17
    228e:	20 81       	ld	r18, Z
    2290:	31 81       	ldd	r19, Z+1	; 0x01
    2292:	ce 84       	ldd	r12, Y+14	; 0x0e
    2294:	df 84       	ldd	r13, Y+15	; 0x0f
    2296:	82 17       	cp	r24, r18
    2298:	93 07       	cpc	r25, r19
    229a:	20 f0       	brcs	.+8      	; 0x22a4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    229c:	c2 0e       	add	r12, r18
    229e:	d3 1e       	adc	r13, r19
    22a0:	c8 1a       	sub	r12, r24
    22a2:	d9 0a       	sbc	r13, r25
    22a4:	c4 1a       	sub	r12, r20
    22a6:	d5 0a       	sbc	r13, r21
    22a8:	d1 f0       	breq	.+52     	; 0x22de <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    22aa:	f5 01       	movw	r30, r10
    22ac:	60 81       	ld	r22, Z
    22ae:	71 81       	ldd	r23, Z+1	; 0x01
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9a 01       	movw	r18, r20
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	62 1b       	sub	r22, r18
    22bc:	73 0b       	sbc	r23, r19
    22be:	84 0b       	sbc	r24, r20
    22c0:	95 0b       	sbc	r25, r21
    22c2:	28 ee       	ldi	r18, 0xE8	; 232
    22c4:	33 e0       	ldi	r19, 0x03	; 3
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	50 e0       	ldi	r21, 0x00	; 0
    22ca:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsi3>
    22ce:	96 01       	movw	r18, r12
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	0e 94 df 13 	call	0x27be	; 0x27be <__divmodsi4>
    22d8:	37 fd       	sbrc	r19, 7
    22da:	0a c0       	rjmp	.+20     	; 0x22f0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x14e>
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x140>
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	f3 e0       	ldi	r31, 0x03	; 3
    22e4:	29 3e       	cpi	r18, 0xE9	; 233
    22e6:	3f 07       	cpc	r19, r31
    22e8:	2c f0       	brlt	.+10     	; 0x22f4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    22ea:	28 ee       	ldi	r18, 0xE8	; 232
    22ec:	33 e0       	ldi	r19, 0x03	; 3
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	f5 01       	movw	r30, r10
    22f6:	21 93       	st	Z+, r18
    22f8:	31 93       	st	Z+, r19
    22fa:	5f 01       	movw	r10, r30
    22fc:	08 94       	sec
    22fe:	81 1c       	adc	r8, r1
    2300:	91 1c       	adc	r9, r1
    2302:	0e 5f       	subi	r16, 0xFE	; 254
    2304:	1f 4f       	sbci	r17, 0xFF	; 255
    2306:	88 85       	ldd	r24, Y+8	; 0x08
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	88 16       	cp	r8, r24
    230c:	99 06       	cpc	r9, r25
    230e:	0c f4       	brge	.+2      	; 0x2312 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2310:	80 cf       	rjmp	.-256    	; 0x2212 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x70>
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	1f 91       	pop	r17
    2318:	0f 91       	pop	r16
    231a:	ff 90       	pop	r15
    231c:	df 90       	pop	r13
    231e:	cf 90       	pop	r12
    2320:	bf 90       	pop	r11
    2322:	af 90       	pop	r10
    2324:	9f 90       	pop	r9
    2326:	8f 90       	pop	r8
    2328:	08 95       	ret

0000232a <_ZN16PololuQTRSensors8readLineEPjhh>:
    232a:	a5 e0       	ldi	r26, 0x05	; 5
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	eb e9       	ldi	r30, 0x9B	; 155
    2330:	f1 e1       	ldi	r31, 0x11	; 17
    2332:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__prologue_saves__>
    2336:	4c 01       	movw	r8, r24
    2338:	c6 2e       	mov	r12, r22
    233a:	e7 2e       	mov	r14, r23
    233c:	2d 83       	std	Y+5, r18	; 0x05
    233e:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2342:	d4 01       	movw	r26, r8
    2344:	18 96       	adiw	r26, 0x08	; 8
    2346:	4c 90       	ld	r4, X
    2348:	18 97       	sbiw	r26, 0x08	; 8
    234a:	de 2c       	mov	r13, r14
    234c:	64 2d       	mov	r22, r4
    234e:	70 e0       	ldi	r23, 0x00	; 0
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	28 ee       	ldi	r18, 0xE8	; 232
    2356:	33 e0       	ldi	r19, 0x03	; 3
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	50 e0       	ldi	r21, 0x00	; 0
    235c:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsi3>
    2360:	69 83       	std	Y+1, r22	; 0x01
    2362:	7a 83       	std	Y+2, r23	; 0x02
    2364:	8b 83       	std	Y+3, r24	; 0x03
    2366:	9c 83       	std	Y+4, r25	; 0x04
    2368:	ee 24       	eor	r14, r14
    236a:	ff 24       	eor	r15, r15
    236c:	87 01       	movw	r16, r14
    236e:	66 24       	eor	r6, r6
    2370:	77 24       	eor	r7, r7
    2372:	88 24       	eor	r8, r8
    2374:	99 24       	eor	r9, r9
    2376:	54 01       	movw	r10, r8
    2378:	55 24       	eor	r5, r5
    237a:	36 c0       	rjmp	.+108    	; 0x23e8 <_ZN16PololuQTRSensors8readLineEPjhh+0xbe>
    237c:	f6 01       	movw	r30, r12
    237e:	30 81       	ld	r19, Z
    2380:	21 81       	ldd	r18, Z+1	; 0x01
    2382:	42 e0       	ldi	r20, 0x02	; 2
    2384:	24 2e       	mov	r2, r20
    2386:	31 2c       	mov	r3, r1
    2388:	c2 0c       	add	r12, r2
    238a:	d3 1c       	adc	r13, r3
    238c:	c9 01       	movw	r24, r18
    238e:	49 2f       	mov	r20, r25
    2390:	58 2f       	mov	r21, r24
    2392:	1a 01       	movw	r2, r20
    2394:	2d 81       	ldd	r18, Y+5	; 0x05
    2396:	22 23       	and	r18, r18
    2398:	29 f0       	breq	.+10     	; 0x23a4 <_ZN16PololuQTRSensors8readLineEPjhh+0x7a>
    239a:	88 ee       	ldi	r24, 0xE8	; 232
    239c:	93 e0       	ldi	r25, 0x03	; 3
    239e:	82 19       	sub	r24, r2
    23a0:	93 09       	sbc	r25, r3
    23a2:	1c 01       	movw	r2, r24
    23a4:	99 ec       	ldi	r25, 0xC9	; 201
    23a6:	29 16       	cp	r2, r25
    23a8:	31 04       	cpc	r3, r1
    23aa:	2c f4       	brge	.+10     	; 0x23b6 <_ZN16PololuQTRSensors8readLineEPjhh+0x8c>
    23ac:	a3 e3       	ldi	r26, 0x33	; 51
    23ae:	2a 16       	cp	r2, r26
    23b0:	31 04       	cpc	r3, r1
    23b2:	94 f0       	brlt	.+36     	; 0x23d8 <_ZN16PololuQTRSensors8readLineEPjhh+0xae>
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <_ZN16PololuQTRSensors8readLineEPjhh+0x90>
    23b6:	55 24       	eor	r5, r5
    23b8:	53 94       	inc	r5
    23ba:	b1 01       	movw	r22, r2
    23bc:	88 27       	eor	r24, r24
    23be:	77 fd       	sbrc	r23, 7
    23c0:	80 95       	com	r24
    23c2:	98 2f       	mov	r25, r24
    23c4:	a8 01       	movw	r20, r16
    23c6:	97 01       	movw	r18, r14
    23c8:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsi3>
    23cc:	86 0e       	add	r8, r22
    23ce:	97 1e       	adc	r9, r23
    23d0:	a8 1e       	adc	r10, r24
    23d2:	b9 1e       	adc	r11, r25
    23d4:	62 0c       	add	r6, r2
    23d6:	73 1c       	adc	r7, r3
    23d8:	88 ee       	ldi	r24, 0xE8	; 232
    23da:	93 e0       	ldi	r25, 0x03	; 3
    23dc:	a0 e0       	ldi	r26, 0x00	; 0
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e8 0e       	add	r14, r24
    23e2:	f9 1e       	adc	r15, r25
    23e4:	0a 1f       	adc	r16, r26
    23e6:	1b 1f       	adc	r17, r27
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
    23ec:	ab 81       	ldd	r26, Y+3	; 0x03
    23ee:	bc 81       	ldd	r27, Y+4	; 0x04
    23f0:	e8 16       	cp	r14, r24
    23f2:	f9 06       	cpc	r15, r25
    23f4:	0a 07       	cpc	r16, r26
    23f6:	1b 07       	cpc	r17, r27
    23f8:	09 f6       	brne	.-126    	; 0x237c <_ZN16PololuQTRSensors8readLineEPjhh+0x52>
    23fa:	55 20       	and	r5, r5
    23fc:	f1 f4       	brne	.+60     	; 0x243a <_ZN16PololuQTRSensors8readLineEPjhh+0x110>
    23fe:	55 24       	eor	r5, r5
    2400:	08 94       	sec
    2402:	41 08       	sbc	r4, r1
    2404:	51 08       	sbc	r5, r1
    2406:	24 ef       	ldi	r18, 0xF4	; 244
    2408:	31 e0       	ldi	r19, 0x01	; 1
    240a:	42 9e       	mul	r4, r18
    240c:	c0 01       	movw	r24, r0
    240e:	43 9e       	mul	r4, r19
    2410:	90 0d       	add	r25, r0
    2412:	52 9e       	mul	r5, r18
    2414:	90 0d       	add	r25, r0
    2416:	11 24       	eor	r1, r1
    2418:	20 91 b9 01 	lds	r18, 0x01B9
    241c:	30 91 ba 01 	lds	r19, 0x01BA
    2420:	28 17       	cp	r18, r24
    2422:	39 07       	cpc	r19, r25
    2424:	b4 f0       	brlt	.+44     	; 0x2452 <_ZN16PololuQTRSensors8readLineEPjhh+0x128>
    2426:	88 ee       	ldi	r24, 0xE8	; 232
    2428:	93 e0       	ldi	r25, 0x03	; 3
    242a:	48 9e       	mul	r4, r24
    242c:	90 01       	movw	r18, r0
    242e:	49 9e       	mul	r4, r25
    2430:	30 0d       	add	r19, r0
    2432:	58 9e       	mul	r5, r24
    2434:	30 0d       	add	r19, r0
    2436:	11 24       	eor	r1, r1
    2438:	0e c0       	rjmp	.+28     	; 0x2456 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    243a:	93 01       	movw	r18, r6
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	50 e0       	ldi	r21, 0x00	; 0
    2440:	c5 01       	movw	r24, r10
    2442:	b4 01       	movw	r22, r8
    2444:	0e 94 bd 13 	call	0x277a	; 0x277a <__udivmodsi4>
    2448:	20 93 b9 01 	sts	0x01B9, r18
    244c:	30 93 ba 01 	sts	0x01BA, r19
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	c9 01       	movw	r24, r18
    2458:	25 96       	adiw	r28, 0x05	; 5
    245a:	e2 e1       	ldi	r30, 0x12	; 18
    245c:	0c 94 25 14 	jmp	0x284a	; 0x284a <__epilogue_restores__>

00002460 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    2460:	a7 e6       	ldi	r26, 0x67	; 103
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e6 e3       	ldi	r30, 0x36	; 54
    2466:	f2 e1       	ldi	r31, 0x12	; 18
    2468:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__prologue_saves__>
    246c:	8c 01       	movw	r16, r24
    246e:	4b 01       	movw	r8, r22
    2470:	6a 01       	movw	r12, r20
    2472:	a6 96       	adiw	r28, 0x26	; 38
    2474:	2f af       	std	Y+63, r18	; 0x3f
    2476:	a6 97       	sbiw	r28, 0x26	; 38
    2478:	da 01       	movw	r26, r20
    247a:	8d 91       	ld	r24, X+
    247c:	9c 91       	ld	r25, X
    247e:	11 97       	sbiw	r26, 0x01	; 1
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	e9 f4       	brne	.+58     	; 0x24be <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x5e>
    2484:	f8 01       	movw	r30, r16
    2486:	80 85       	ldd	r24, Z+8	; 0x08
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	88 0f       	add	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	0e 94 55 14 	call	0x28aa	; 0x28aa <malloc>
    2492:	d6 01       	movw	r26, r12
    2494:	11 96       	adiw	r26, 0x01	; 1
    2496:	9c 93       	st	X, r25
    2498:	8e 93       	st	-X, r24
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	09 f4       	brne	.+2      	; 0x24a0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x40>
    249e:	e2 c0       	rjmp	.+452    	; 0x2664 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    24a0:	fc 01       	movw	r30, r24
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	03 c0       	rjmp	.+6      	; 0x24ae <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x4e>
    24a8:	11 92       	st	Z+, r1
    24aa:	11 92       	st	Z+, r1
    24ac:	01 96       	adiw	r24, 0x01	; 1
    24ae:	d8 01       	movw	r26, r16
    24b0:	18 96       	adiw	r26, 0x08	; 8
    24b2:	2c 91       	ld	r18, X
    24b4:	18 97       	sbiw	r26, 0x08	; 8
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	82 17       	cp	r24, r18
    24ba:	93 07       	cpc	r25, r19
    24bc:	ac f3       	brlt	.-22     	; 0x24a8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x48>
    24be:	f4 01       	movw	r30, r8
    24c0:	80 81       	ld	r24, Z
    24c2:	91 81       	ldd	r25, Z+1	; 0x01
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	89 f0       	breq	.+34     	; 0x24ea <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8a>
    24c8:	ee 24       	eor	r14, r14
    24ca:	ff 24       	eor	r15, r15
    24cc:	5e 01       	movw	r10, r28
    24ce:	08 94       	sec
    24d0:	a1 1c       	adc	r10, r1
    24d2:	b1 1c       	adc	r11, r1
    24d4:	b1 e4       	ldi	r27, 0x41	; 65
    24d6:	6b 2e       	mov	r6, r27
    24d8:	71 2c       	mov	r7, r1
    24da:	6c 0e       	add	r6, r28
    24dc:	7d 1e       	adc	r7, r29
    24de:	a1 e2       	ldi	r26, 0x21	; 33
    24e0:	4a 2e       	mov	r4, r26
    24e2:	51 2c       	mov	r5, r1
    24e4:	4c 0e       	add	r4, r28
    24e6:	5d 1e       	adc	r5, r29
    24e8:	23 c0       	rjmp	.+70     	; 0x2530 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    24ea:	d8 01       	movw	r26, r16
    24ec:	18 96       	adiw	r26, 0x08	; 8
    24ee:	8c 91       	ld	r24, X
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	0e 94 55 14 	call	0x28aa	; 0x28aa <malloc>
    24fa:	f4 01       	movw	r30, r8
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	09 f4       	brne	.+2      	; 0x2506 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xa6>
    2504:	af c0       	rjmp	.+350    	; 0x2664 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    2506:	fc 01       	movw	r30, r24
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	d8 01       	movw	r26, r16
    250e:	07 c0       	rjmp	.+14     	; 0x251e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xbe>
    2510:	1e 96       	adiw	r26, 0x0e	; 14
    2512:	2d 91       	ld	r18, X+
    2514:	3c 91       	ld	r19, X
    2516:	1f 97       	sbiw	r26, 0x0f	; 15
    2518:	21 93       	st	Z+, r18
    251a:	31 93       	st	Z+, r19
    251c:	01 96       	adiw	r24, 0x01	; 1
    251e:	18 96       	adiw	r26, 0x08	; 8
    2520:	2c 91       	ld	r18, X
    2522:	18 97       	sbiw	r26, 0x08	; 8
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	82 17       	cp	r24, r18
    2528:	93 07       	cpc	r25, r19
    252a:	94 f3       	brlt	.-28     	; 0x2510 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb0>
    252c:	8d 01       	movw	r16, r26
    252e:	cc cf       	rjmp	.-104    	; 0x24c8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x68>
    2530:	c8 01       	movw	r24, r16
    2532:	b5 01       	movw	r22, r10
    2534:	a6 96       	adiw	r28, 0x26	; 38
    2536:	4f ad       	ldd	r20, Y+63	; 0x3f
    2538:	a6 97       	sbiw	r28, 0x26	; 38
    253a:	0e 94 72 10 	call	0x20e4	; 0x20e4 <_ZN16PololuQTRSensors4readEPjh>
    253e:	d8 01       	movw	r26, r16
    2540:	18 96       	adiw	r26, 0x08	; 8
    2542:	8c 91       	ld	r24, X
    2544:	18 97       	sbiw	r26, 0x08	; 8
    2546:	e8 2f       	mov	r30, r24
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	a5 96       	adiw	r28, 0x25	; 37
    254c:	ff af       	std	Y+63, r31	; 0x3f
    254e:	ee af       	std	Y+62, r30	; 0x3e
    2550:	a5 97       	sbiw	r28, 0x25	; 37
    2552:	13 01       	movw	r2, r6
    2554:	f5 01       	movw	r30, r10
    2556:	a3 96       	adiw	r28, 0x23	; 35
    2558:	5f ae       	std	Y+63, r5	; 0x3f
    255a:	4e ae       	std	Y+62, r4	; 0x3e
    255c:	a3 97       	sbiw	r28, 0x23	; 35
    255e:	93 01       	movw	r18, r6
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	50 e0       	ldi	r21, 0x00	; 0
    2564:	a8 96       	adiw	r28, 0x28	; 40
    2566:	5f ae       	std	Y+63, r5	; 0x3f
    2568:	4e ae       	std	Y+62, r4	; 0x3e
    256a:	a8 97       	sbiw	r28, 0x28	; 40
    256c:	37 c0       	rjmp	.+110    	; 0x25dc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17c>
    256e:	e1 14       	cp	r14, r1
    2570:	f1 04       	cpc	r15, r1
    2572:	61 f0       	breq	.+24     	; 0x258c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x12c>
    2574:	a8 96       	adiw	r28, 0x28	; 40
    2576:	ae ad       	ldd	r26, Y+62	; 0x3e
    2578:	bf ad       	ldd	r27, Y+63	; 0x3f
    257a:	a8 97       	sbiw	r28, 0x28	; 40
    257c:	6d 91       	ld	r22, X+
    257e:	7c 91       	ld	r23, X
    2580:	11 97       	sbiw	r26, 0x01	; 1
    2582:	80 81       	ld	r24, Z
    2584:	91 81       	ldd	r25, Z+1	; 0x01
    2586:	68 17       	cp	r22, r24
    2588:	79 07       	cpc	r23, r25
    258a:	60 f4       	brcc	.+24     	; 0x25a4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x144>
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	a8 96       	adiw	r28, 0x28	; 40
    2592:	ae ad       	ldd	r26, Y+62	; 0x3e
    2594:	bf ad       	ldd	r27, Y+63	; 0x3f
    2596:	a8 97       	sbiw	r28, 0x28	; 40
    2598:	11 96       	adiw	r26, 0x01	; 1
    259a:	9c 93       	st	X, r25
    259c:	8e 93       	st	-X, r24
    259e:	e1 14       	cp	r14, r1
    25a0:	f1 04       	cpc	r15, r1
    25a2:	49 f0       	breq	.+18     	; 0x25b6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x156>
    25a4:	d9 01       	movw	r26, r18
    25a6:	6d 91       	ld	r22, X+
    25a8:	7c 91       	ld	r23, X
    25aa:	11 97       	sbiw	r26, 0x01	; 1
    25ac:	80 81       	ld	r24, Z
    25ae:	91 81       	ldd	r25, Z+1	; 0x01
    25b0:	86 17       	cp	r24, r22
    25b2:	97 07       	cpc	r25, r23
    25b4:	28 f4       	brcc	.+10     	; 0x25c0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x160>
    25b6:	80 81       	ld	r24, Z
    25b8:	91 81       	ldd	r25, Z+1	; 0x01
    25ba:	d9 01       	movw	r26, r18
    25bc:	8d 93       	st	X+, r24
    25be:	9c 93       	st	X, r25
    25c0:	4f 5f       	subi	r20, 0xFF	; 255
    25c2:	5f 4f       	sbci	r21, 0xFF	; 255
    25c4:	2e 5f       	subi	r18, 0xFE	; 254
    25c6:	3f 4f       	sbci	r19, 0xFF	; 255
    25c8:	32 96       	adiw	r30, 0x02	; 2
    25ca:	a8 96       	adiw	r28, 0x28	; 40
    25cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    25ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    25d0:	a8 97       	sbiw	r28, 0x28	; 40
    25d2:	02 96       	adiw	r24, 0x02	; 2
    25d4:	a8 96       	adiw	r28, 0x28	; 40
    25d6:	9f af       	std	Y+63, r25	; 0x3f
    25d8:	8e af       	std	Y+62, r24	; 0x3e
    25da:	a8 97       	sbiw	r28, 0x28	; 40
    25dc:	a5 96       	adiw	r28, 0x25	; 37
    25de:	ae ad       	ldd	r26, Y+62	; 0x3e
    25e0:	bf ad       	ldd	r27, Y+63	; 0x3f
    25e2:	a5 97       	sbiw	r28, 0x25	; 37
    25e4:	4a 17       	cp	r20, r26
    25e6:	5b 07       	cpc	r21, r27
    25e8:	14 f2       	brlt	.-124    	; 0x256e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x10e>
    25ea:	08 94       	sec
    25ec:	e1 1c       	adc	r14, r1
    25ee:	f1 1c       	adc	r15, r1
    25f0:	ba e0       	ldi	r27, 0x0A	; 10
    25f2:	eb 16       	cp	r14, r27
    25f4:	f1 04       	cpc	r15, r1
    25f6:	09 f0       	breq	.+2      	; 0x25fa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x19a>
    25f8:	9b cf       	rjmp	.-202    	; 0x2530 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	2c c0       	rjmp	.+88     	; 0x2658 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f8>
    2600:	f1 01       	movw	r30, r2
    2602:	41 91       	ld	r20, Z+
    2604:	51 91       	ld	r21, Z+
    2606:	1f 01       	movw	r2, r30
    2608:	bc 01       	movw	r22, r24
    260a:	66 0f       	add	r22, r22
    260c:	77 1f       	adc	r23, r23
    260e:	d6 01       	movw	r26, r12
    2610:	ed 91       	ld	r30, X+
    2612:	fc 91       	ld	r31, X
    2614:	11 97       	sbiw	r26, 0x01	; 1
    2616:	e6 0f       	add	r30, r22
    2618:	f7 1f       	adc	r31, r23
    261a:	20 81       	ld	r18, Z
    261c:	31 81       	ldd	r19, Z+1	; 0x01
    261e:	24 17       	cp	r18, r20
    2620:	35 07       	cpc	r19, r21
    2622:	10 f4       	brcc	.+4      	; 0x2628 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1c8>
    2624:	51 83       	std	Z+1, r21	; 0x01
    2626:	40 83       	st	Z, r20
    2628:	a3 96       	adiw	r28, 0x23	; 35
    262a:	ee ad       	ldd	r30, Y+62	; 0x3e
    262c:	ff ad       	ldd	r31, Y+63	; 0x3f
    262e:	a3 97       	sbiw	r28, 0x23	; 35
    2630:	41 91       	ld	r20, Z+
    2632:	51 91       	ld	r21, Z+
    2634:	a3 96       	adiw	r28, 0x23	; 35
    2636:	ff af       	std	Y+63, r31	; 0x3f
    2638:	ee af       	std	Y+62, r30	; 0x3e
    263a:	a3 97       	sbiw	r28, 0x23	; 35
    263c:	d4 01       	movw	r26, r8
    263e:	ed 91       	ld	r30, X+
    2640:	fc 91       	ld	r31, X
    2642:	11 97       	sbiw	r26, 0x01	; 1
    2644:	e6 0f       	add	r30, r22
    2646:	f7 1f       	adc	r31, r23
    2648:	20 81       	ld	r18, Z
    264a:	31 81       	ldd	r19, Z+1	; 0x01
    264c:	42 17       	cp	r20, r18
    264e:	53 07       	cpc	r21, r19
    2650:	10 f4       	brcc	.+4      	; 0x2656 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f6>
    2652:	51 83       	std	Z+1, r21	; 0x01
    2654:	40 83       	st	Z, r20
    2656:	01 96       	adiw	r24, 0x01	; 1
    2658:	f8 01       	movw	r30, r16
    265a:	20 85       	ldd	r18, Z+8	; 0x08
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	82 17       	cp	r24, r18
    2660:	93 07       	cpc	r25, r19
    2662:	74 f2       	brlt	.-100    	; 0x2600 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1a0>
    2664:	c9 59       	subi	r28, 0x99	; 153
    2666:	df 4f       	sbci	r29, 0xFF	; 255
    2668:	e2 e1       	ldi	r30, 0x12	; 18
    266a:	0c 94 25 14 	jmp	0x284a	; 0x284a <__epilogue_restores__>

0000266e <_ZN16PololuQTRSensors9calibrateEh>:
    266e:	1f 93       	push	r17
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	ec 01       	movw	r28, r24
    2676:	16 2f       	mov	r17, r22
    2678:	86 2f       	mov	r24, r22
    267a:	81 50       	subi	r24, 0x01	; 1
    267c:	82 30       	cpi	r24, 0x02	; 2
    267e:	58 f4       	brcc	.+22     	; 0x2696 <_ZN16PololuQTRSensors9calibrateEh+0x28>
    2680:	ae 01       	movw	r20, r28
    2682:	4e 5f       	subi	r20, 0xFE	; 254
    2684:	5f 4f       	sbci	r21, 0xFF	; 255
    2686:	ce 01       	movw	r24, r28
    2688:	be 01       	movw	r22, r28
    268a:	21 e0       	ldi	r18, 0x01	; 1
    268c:	0e 94 30 12 	call	0x2460	; 0x2460 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2690:	12 30       	cpi	r17, 0x02	; 2
    2692:	19 f0       	breq	.+6      	; 0x269a <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    2694:	0c c0       	rjmp	.+24     	; 0x26ae <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2696:	66 23       	and	r22, r22
    2698:	51 f4       	brne	.+20     	; 0x26ae <_ZN16PololuQTRSensors9calibrateEh+0x40>
    269a:	be 01       	movw	r22, r28
    269c:	6c 5f       	subi	r22, 0xFC	; 252
    269e:	7f 4f       	sbci	r23, 0xFF	; 255
    26a0:	ae 01       	movw	r20, r28
    26a2:	4a 5f       	subi	r20, 0xFA	; 250
    26a4:	5f 4f       	sbci	r21, 0xFF	; 255
    26a6:	ce 01       	movw	r24, r28
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	0e 94 30 12 	call	0x2460	; 0x2460 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	1f 91       	pop	r17
    26b4:	08 95       	ret

000026b6 <_ZN16PololuQTRSensorsD1Ev>:
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	ec 01       	movw	r28, r24
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	9b 81       	ldd	r25, Y+3	; 0x03
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	11 f0       	breq	.+4      	; 0x26c8 <_ZN16PololuQTRSensorsD1Ev+0x12>
    26c4:	0e 94 ed 14 	call	0x29da	; 0x29da <free>
    26c8:	8e 81       	ldd	r24, Y+6	; 0x06
    26ca:	9f 81       	ldd	r25, Y+7	; 0x07
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	11 f0       	breq	.+4      	; 0x26d4 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    26d0:	0e 94 ed 14 	call	0x29da	; 0x29da <free>
    26d4:	88 81       	ld	r24, Y
    26d6:	99 81       	ldd	r25, Y+1	; 0x01
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	11 f0       	breq	.+4      	; 0x26e0 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    26dc:	0e 94 ed 14 	call	0x29da	; 0x29da <free>
    26e0:	8c 81       	ldd	r24, Y+4	; 0x04
    26e2:	9d 81       	ldd	r25, Y+5	; 0x05
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	11 f0       	breq	.+4      	; 0x26ec <_ZN16PololuQTRSensorsD1Ev+0x36>
    26e8:	0e 94 ed 14 	call	0x29da	; 0x29da <free>
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	08 95       	ret

000026f2 <__mulsi3>:
    26f2:	db 01       	movw	r26, r22
    26f4:	8f 93       	push	r24
    26f6:	9f 93       	push	r25
    26f8:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__muluhisi3>
    26fc:	bf 91       	pop	r27
    26fe:	af 91       	pop	r26
    2700:	a2 9f       	mul	r26, r18
    2702:	80 0d       	add	r24, r0
    2704:	91 1d       	adc	r25, r1
    2706:	a3 9f       	mul	r26, r19
    2708:	90 0d       	add	r25, r0
    270a:	b2 9f       	mul	r27, r18
    270c:	90 0d       	add	r25, r0
    270e:	11 24       	eor	r1, r1
    2710:	08 95       	ret

00002712 <__udivmodqi4>:
    2712:	99 1b       	sub	r25, r25
    2714:	79 e0       	ldi	r23, 0x09	; 9
    2716:	04 c0       	rjmp	.+8      	; 0x2720 <__udivmodqi4_ep>

00002718 <__udivmodqi4_loop>:
    2718:	99 1f       	adc	r25, r25
    271a:	96 17       	cp	r25, r22
    271c:	08 f0       	brcs	.+2      	; 0x2720 <__udivmodqi4_ep>
    271e:	96 1b       	sub	r25, r22

00002720 <__udivmodqi4_ep>:
    2720:	88 1f       	adc	r24, r24
    2722:	7a 95       	dec	r23
    2724:	c9 f7       	brne	.-14     	; 0x2718 <__udivmodqi4_loop>
    2726:	80 95       	com	r24
    2728:	08 95       	ret

0000272a <__udivmodhi4>:
    272a:	aa 1b       	sub	r26, r26
    272c:	bb 1b       	sub	r27, r27
    272e:	51 e1       	ldi	r21, 0x11	; 17
    2730:	07 c0       	rjmp	.+14     	; 0x2740 <__udivmodhi4_ep>

00002732 <__udivmodhi4_loop>:
    2732:	aa 1f       	adc	r26, r26
    2734:	bb 1f       	adc	r27, r27
    2736:	a6 17       	cp	r26, r22
    2738:	b7 07       	cpc	r27, r23
    273a:	10 f0       	brcs	.+4      	; 0x2740 <__udivmodhi4_ep>
    273c:	a6 1b       	sub	r26, r22
    273e:	b7 0b       	sbc	r27, r23

00002740 <__udivmodhi4_ep>:
    2740:	88 1f       	adc	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	5a 95       	dec	r21
    2746:	a9 f7       	brne	.-22     	; 0x2732 <__udivmodhi4_loop>
    2748:	80 95       	com	r24
    274a:	90 95       	com	r25
    274c:	bc 01       	movw	r22, r24
    274e:	cd 01       	movw	r24, r26
    2750:	08 95       	ret

00002752 <__divmodhi4>:
    2752:	97 fb       	bst	r25, 7
    2754:	07 2e       	mov	r0, r23
    2756:	16 f4       	brtc	.+4      	; 0x275c <__divmodhi4+0xa>
    2758:	00 94       	com	r0
    275a:	07 d0       	rcall	.+14     	; 0x276a <__divmodhi4_neg1>
    275c:	77 fd       	sbrc	r23, 7
    275e:	09 d0       	rcall	.+18     	; 0x2772 <__divmodhi4_neg2>
    2760:	0e 94 95 13 	call	0x272a	; 0x272a <__udivmodhi4>
    2764:	07 fc       	sbrc	r0, 7
    2766:	05 d0       	rcall	.+10     	; 0x2772 <__divmodhi4_neg2>
    2768:	3e f4       	brtc	.+14     	; 0x2778 <__divmodhi4_exit>

0000276a <__divmodhi4_neg1>:
    276a:	90 95       	com	r25
    276c:	81 95       	neg	r24
    276e:	9f 4f       	sbci	r25, 0xFF	; 255
    2770:	08 95       	ret

00002772 <__divmodhi4_neg2>:
    2772:	70 95       	com	r23
    2774:	61 95       	neg	r22
    2776:	7f 4f       	sbci	r23, 0xFF	; 255

00002778 <__divmodhi4_exit>:
    2778:	08 95       	ret

0000277a <__udivmodsi4>:
    277a:	a1 e2       	ldi	r26, 0x21	; 33
    277c:	1a 2e       	mov	r1, r26
    277e:	aa 1b       	sub	r26, r26
    2780:	bb 1b       	sub	r27, r27
    2782:	fd 01       	movw	r30, r26
    2784:	0d c0       	rjmp	.+26     	; 0x27a0 <__udivmodsi4_ep>

00002786 <__udivmodsi4_loop>:
    2786:	aa 1f       	adc	r26, r26
    2788:	bb 1f       	adc	r27, r27
    278a:	ee 1f       	adc	r30, r30
    278c:	ff 1f       	adc	r31, r31
    278e:	a2 17       	cp	r26, r18
    2790:	b3 07       	cpc	r27, r19
    2792:	e4 07       	cpc	r30, r20
    2794:	f5 07       	cpc	r31, r21
    2796:	20 f0       	brcs	.+8      	; 0x27a0 <__udivmodsi4_ep>
    2798:	a2 1b       	sub	r26, r18
    279a:	b3 0b       	sbc	r27, r19
    279c:	e4 0b       	sbc	r30, r20
    279e:	f5 0b       	sbc	r31, r21

000027a0 <__udivmodsi4_ep>:
    27a0:	66 1f       	adc	r22, r22
    27a2:	77 1f       	adc	r23, r23
    27a4:	88 1f       	adc	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	1a 94       	dec	r1
    27aa:	69 f7       	brne	.-38     	; 0x2786 <__udivmodsi4_loop>
    27ac:	60 95       	com	r22
    27ae:	70 95       	com	r23
    27b0:	80 95       	com	r24
    27b2:	90 95       	com	r25
    27b4:	9b 01       	movw	r18, r22
    27b6:	ac 01       	movw	r20, r24
    27b8:	bd 01       	movw	r22, r26
    27ba:	cf 01       	movw	r24, r30
    27bc:	08 95       	ret

000027be <__divmodsi4>:
    27be:	05 2e       	mov	r0, r21
    27c0:	97 fb       	bst	r25, 7
    27c2:	1e f4       	brtc	.+6      	; 0x27ca <__divmodsi4+0xc>
    27c4:	00 94       	com	r0
    27c6:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__negsi2>
    27ca:	57 fd       	sbrc	r21, 7
    27cc:	07 d0       	rcall	.+14     	; 0x27dc <__divmodsi4_neg2>
    27ce:	0e 94 bd 13 	call	0x277a	; 0x277a <__udivmodsi4>
    27d2:	07 fc       	sbrc	r0, 7
    27d4:	03 d0       	rcall	.+6      	; 0x27dc <__divmodsi4_neg2>
    27d6:	4e f4       	brtc	.+18     	; 0x27ea <__divmodsi4_exit>
    27d8:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__negsi2>

000027dc <__divmodsi4_neg2>:
    27dc:	50 95       	com	r21
    27de:	40 95       	com	r20
    27e0:	30 95       	com	r19
    27e2:	21 95       	neg	r18
    27e4:	3f 4f       	sbci	r19, 0xFF	; 255
    27e6:	4f 4f       	sbci	r20, 0xFF	; 255
    27e8:	5f 4f       	sbci	r21, 0xFF	; 255

000027ea <__divmodsi4_exit>:
    27ea:	08 95       	ret

000027ec <__negsi2>:
    27ec:	90 95       	com	r25
    27ee:	80 95       	com	r24
    27f0:	70 95       	com	r23
    27f2:	61 95       	neg	r22
    27f4:	7f 4f       	sbci	r23, 0xFF	; 255
    27f6:	8f 4f       	sbci	r24, 0xFF	; 255
    27f8:	9f 4f       	sbci	r25, 0xFF	; 255
    27fa:	08 95       	ret

000027fc <__muluhisi3>:
    27fc:	0e 94 46 14 	call	0x288c	; 0x288c <__umulhisi3>
    2800:	a5 9f       	mul	r26, r21
    2802:	90 0d       	add	r25, r0
    2804:	b4 9f       	mul	r27, r20
    2806:	90 0d       	add	r25, r0
    2808:	a4 9f       	mul	r26, r20
    280a:	80 0d       	add	r24, r0
    280c:	91 1d       	adc	r25, r1
    280e:	11 24       	eor	r1, r1
    2810:	08 95       	ret

00002812 <__prologue_saves__>:
    2812:	2f 92       	push	r2
    2814:	3f 92       	push	r3
    2816:	4f 92       	push	r4
    2818:	5f 92       	push	r5
    281a:	6f 92       	push	r6
    281c:	7f 92       	push	r7
    281e:	8f 92       	push	r8
    2820:	9f 92       	push	r9
    2822:	af 92       	push	r10
    2824:	bf 92       	push	r11
    2826:	cf 92       	push	r12
    2828:	df 92       	push	r13
    282a:	ef 92       	push	r14
    282c:	ff 92       	push	r15
    282e:	0f 93       	push	r16
    2830:	1f 93       	push	r17
    2832:	cf 93       	push	r28
    2834:	df 93       	push	r29
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	ca 1b       	sub	r28, r26
    283c:	db 0b       	sbc	r29, r27
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	09 94       	ijmp

0000284a <__epilogue_restores__>:
    284a:	2a 88       	ldd	r2, Y+18	; 0x12
    284c:	39 88       	ldd	r3, Y+17	; 0x11
    284e:	48 88       	ldd	r4, Y+16	; 0x10
    2850:	5f 84       	ldd	r5, Y+15	; 0x0f
    2852:	6e 84       	ldd	r6, Y+14	; 0x0e
    2854:	7d 84       	ldd	r7, Y+13	; 0x0d
    2856:	8c 84       	ldd	r8, Y+12	; 0x0c
    2858:	9b 84       	ldd	r9, Y+11	; 0x0b
    285a:	aa 84       	ldd	r10, Y+10	; 0x0a
    285c:	b9 84       	ldd	r11, Y+9	; 0x09
    285e:	c8 84       	ldd	r12, Y+8	; 0x08
    2860:	df 80       	ldd	r13, Y+7	; 0x07
    2862:	ee 80       	ldd	r14, Y+6	; 0x06
    2864:	fd 80       	ldd	r15, Y+5	; 0x05
    2866:	0c 81       	ldd	r16, Y+4	; 0x04
    2868:	1b 81       	ldd	r17, Y+3	; 0x03
    286a:	aa 81       	ldd	r26, Y+2	; 0x02
    286c:	b9 81       	ldd	r27, Y+1	; 0x01
    286e:	ce 0f       	add	r28, r30
    2870:	d1 1d       	adc	r29, r1
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	de bf       	out	0x3e, r29	; 62
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	cd bf       	out	0x3d, r28	; 61
    287c:	ed 01       	movw	r28, r26
    287e:	08 95       	ret

00002880 <__tablejump2__>:
    2880:	ee 0f       	add	r30, r30
    2882:	ff 1f       	adc	r31, r31

00002884 <__tablejump__>:
    2884:	05 90       	lpm	r0, Z+
    2886:	f4 91       	lpm	r31, Z
    2888:	e0 2d       	mov	r30, r0
    288a:	09 94       	ijmp

0000288c <__umulhisi3>:
    288c:	a2 9f       	mul	r26, r18
    288e:	b0 01       	movw	r22, r0
    2890:	b3 9f       	mul	r27, r19
    2892:	c0 01       	movw	r24, r0
    2894:	a3 9f       	mul	r26, r19
    2896:	70 0d       	add	r23, r0
    2898:	81 1d       	adc	r24, r1
    289a:	11 24       	eor	r1, r1
    289c:	91 1d       	adc	r25, r1
    289e:	b2 9f       	mul	r27, r18
    28a0:	70 0d       	add	r23, r0
    28a2:	81 1d       	adc	r24, r1
    28a4:	11 24       	eor	r1, r1
    28a6:	91 1d       	adc	r25, r1
    28a8:	08 95       	ret

000028aa <malloc>:
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	82 30       	cpi	r24, 0x02	; 2
    28b0:	91 05       	cpc	r25, r1
    28b2:	10 f4       	brcc	.+4      	; 0x28b8 <malloc+0xe>
    28b4:	82 e0       	ldi	r24, 0x02	; 2
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	e0 91 b5 03 	lds	r30, 0x03B5
    28bc:	f0 91 b6 03 	lds	r31, 0x03B6
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	a0 e0       	ldi	r26, 0x00	; 0
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	30 97       	sbiw	r30, 0x00	; 0
    28ca:	39 f1       	breq	.+78     	; 0x291a <malloc+0x70>
    28cc:	40 81       	ld	r20, Z
    28ce:	51 81       	ldd	r21, Z+1	; 0x01
    28d0:	48 17       	cp	r20, r24
    28d2:	59 07       	cpc	r21, r25
    28d4:	b8 f0       	brcs	.+46     	; 0x2904 <malloc+0x5a>
    28d6:	48 17       	cp	r20, r24
    28d8:	59 07       	cpc	r21, r25
    28da:	71 f4       	brne	.+28     	; 0x28f8 <malloc+0x4e>
    28dc:	82 81       	ldd	r24, Z+2	; 0x02
    28de:	93 81       	ldd	r25, Z+3	; 0x03
    28e0:	10 97       	sbiw	r26, 0x00	; 0
    28e2:	29 f0       	breq	.+10     	; 0x28ee <malloc+0x44>
    28e4:	13 96       	adiw	r26, 0x03	; 3
    28e6:	9c 93       	st	X, r25
    28e8:	8e 93       	st	-X, r24
    28ea:	12 97       	sbiw	r26, 0x02	; 2
    28ec:	2c c0       	rjmp	.+88     	; 0x2946 <malloc+0x9c>
    28ee:	90 93 b6 03 	sts	0x03B6, r25
    28f2:	80 93 b5 03 	sts	0x03B5, r24
    28f6:	27 c0       	rjmp	.+78     	; 0x2946 <malloc+0x9c>
    28f8:	21 15       	cp	r18, r1
    28fa:	31 05       	cpc	r19, r1
    28fc:	31 f0       	breq	.+12     	; 0x290a <malloc+0x60>
    28fe:	42 17       	cp	r20, r18
    2900:	53 07       	cpc	r21, r19
    2902:	18 f0       	brcs	.+6      	; 0x290a <malloc+0x60>
    2904:	a9 01       	movw	r20, r18
    2906:	db 01       	movw	r26, r22
    2908:	01 c0       	rjmp	.+2      	; 0x290c <malloc+0x62>
    290a:	ef 01       	movw	r28, r30
    290c:	9a 01       	movw	r18, r20
    290e:	bd 01       	movw	r22, r26
    2910:	df 01       	movw	r26, r30
    2912:	02 80       	ldd	r0, Z+2	; 0x02
    2914:	f3 81       	ldd	r31, Z+3	; 0x03
    2916:	e0 2d       	mov	r30, r0
    2918:	d7 cf       	rjmp	.-82     	; 0x28c8 <malloc+0x1e>
    291a:	21 15       	cp	r18, r1
    291c:	31 05       	cpc	r19, r1
    291e:	f9 f0       	breq	.+62     	; 0x295e <malloc+0xb4>
    2920:	28 1b       	sub	r18, r24
    2922:	39 0b       	sbc	r19, r25
    2924:	24 30       	cpi	r18, 0x04	; 4
    2926:	31 05       	cpc	r19, r1
    2928:	80 f4       	brcc	.+32     	; 0x294a <malloc+0xa0>
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	9b 81       	ldd	r25, Y+3	; 0x03
    292e:	61 15       	cp	r22, r1
    2930:	71 05       	cpc	r23, r1
    2932:	21 f0       	breq	.+8      	; 0x293c <malloc+0x92>
    2934:	fb 01       	movw	r30, r22
    2936:	93 83       	std	Z+3, r25	; 0x03
    2938:	82 83       	std	Z+2, r24	; 0x02
    293a:	04 c0       	rjmp	.+8      	; 0x2944 <malloc+0x9a>
    293c:	90 93 b6 03 	sts	0x03B6, r25
    2940:	80 93 b5 03 	sts	0x03B5, r24
    2944:	fe 01       	movw	r30, r28
    2946:	32 96       	adiw	r30, 0x02	; 2
    2948:	44 c0       	rjmp	.+136    	; 0x29d2 <malloc+0x128>
    294a:	fe 01       	movw	r30, r28
    294c:	e2 0f       	add	r30, r18
    294e:	f3 1f       	adc	r31, r19
    2950:	81 93       	st	Z+, r24
    2952:	91 93       	st	Z+, r25
    2954:	22 50       	subi	r18, 0x02	; 2
    2956:	31 09       	sbc	r19, r1
    2958:	39 83       	std	Y+1, r19	; 0x01
    295a:	28 83       	st	Y, r18
    295c:	3a c0       	rjmp	.+116    	; 0x29d2 <malloc+0x128>
    295e:	20 91 b3 03 	lds	r18, 0x03B3
    2962:	30 91 b4 03 	lds	r19, 0x03B4
    2966:	23 2b       	or	r18, r19
    2968:	41 f4       	brne	.+16     	; 0x297a <malloc+0xd0>
    296a:	20 91 2d 01 	lds	r18, 0x012D
    296e:	30 91 2e 01 	lds	r19, 0x012E
    2972:	30 93 b4 03 	sts	0x03B4, r19
    2976:	20 93 b3 03 	sts	0x03B3, r18
    297a:	20 91 2b 01 	lds	r18, 0x012B
    297e:	30 91 2c 01 	lds	r19, 0x012C
    2982:	21 15       	cp	r18, r1
    2984:	31 05       	cpc	r19, r1
    2986:	41 f4       	brne	.+16     	; 0x2998 <malloc+0xee>
    2988:	2d b7       	in	r18, 0x3d	; 61
    298a:	3e b7       	in	r19, 0x3e	; 62
    298c:	40 91 2f 01 	lds	r20, 0x012F
    2990:	50 91 30 01 	lds	r21, 0x0130
    2994:	24 1b       	sub	r18, r20
    2996:	35 0b       	sbc	r19, r21
    2998:	e0 91 b3 03 	lds	r30, 0x03B3
    299c:	f0 91 b4 03 	lds	r31, 0x03B4
    29a0:	e2 17       	cp	r30, r18
    29a2:	f3 07       	cpc	r31, r19
    29a4:	a0 f4       	brcc	.+40     	; 0x29ce <malloc+0x124>
    29a6:	2e 1b       	sub	r18, r30
    29a8:	3f 0b       	sbc	r19, r31
    29aa:	28 17       	cp	r18, r24
    29ac:	39 07       	cpc	r19, r25
    29ae:	78 f0       	brcs	.+30     	; 0x29ce <malloc+0x124>
    29b0:	ac 01       	movw	r20, r24
    29b2:	4e 5f       	subi	r20, 0xFE	; 254
    29b4:	5f 4f       	sbci	r21, 0xFF	; 255
    29b6:	24 17       	cp	r18, r20
    29b8:	35 07       	cpc	r19, r21
    29ba:	48 f0       	brcs	.+18     	; 0x29ce <malloc+0x124>
    29bc:	4e 0f       	add	r20, r30
    29be:	5f 1f       	adc	r21, r31
    29c0:	50 93 b4 03 	sts	0x03B4, r21
    29c4:	40 93 b3 03 	sts	0x03B3, r20
    29c8:	81 93       	st	Z+, r24
    29ca:	91 93       	st	Z+, r25
    29cc:	02 c0       	rjmp	.+4      	; 0x29d2 <malloc+0x128>
    29ce:	e0 e0       	ldi	r30, 0x00	; 0
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	cf 01       	movw	r24, r30
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	08 95       	ret

000029da <free>:
    29da:	cf 93       	push	r28
    29dc:	df 93       	push	r29
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	09 f4       	brne	.+2      	; 0x29e4 <free+0xa>
    29e2:	87 c0       	rjmp	.+270    	; 0x2af2 <free+0x118>
    29e4:	fc 01       	movw	r30, r24
    29e6:	32 97       	sbiw	r30, 0x02	; 2
    29e8:	13 82       	std	Z+3, r1	; 0x03
    29ea:	12 82       	std	Z+2, r1	; 0x02
    29ec:	c0 91 b5 03 	lds	r28, 0x03B5
    29f0:	d0 91 b6 03 	lds	r29, 0x03B6
    29f4:	20 97       	sbiw	r28, 0x00	; 0
    29f6:	81 f4       	brne	.+32     	; 0x2a18 <free+0x3e>
    29f8:	20 81       	ld	r18, Z
    29fa:	31 81       	ldd	r19, Z+1	; 0x01
    29fc:	28 0f       	add	r18, r24
    29fe:	39 1f       	adc	r19, r25
    2a00:	80 91 b3 03 	lds	r24, 0x03B3
    2a04:	90 91 b4 03 	lds	r25, 0x03B4
    2a08:	82 17       	cp	r24, r18
    2a0a:	93 07       	cpc	r25, r19
    2a0c:	79 f5       	brne	.+94     	; 0x2a6c <free+0x92>
    2a0e:	f0 93 b4 03 	sts	0x03B4, r31
    2a12:	e0 93 b3 03 	sts	0x03B3, r30
    2a16:	6d c0       	rjmp	.+218    	; 0x2af2 <free+0x118>
    2a18:	de 01       	movw	r26, r28
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	ae 17       	cp	r26, r30
    2a20:	bf 07       	cpc	r27, r31
    2a22:	50 f4       	brcc	.+20     	; 0x2a38 <free+0x5e>
    2a24:	12 96       	adiw	r26, 0x02	; 2
    2a26:	4d 91       	ld	r20, X+
    2a28:	5c 91       	ld	r21, X
    2a2a:	13 97       	sbiw	r26, 0x03	; 3
    2a2c:	9d 01       	movw	r18, r26
    2a2e:	41 15       	cp	r20, r1
    2a30:	51 05       	cpc	r21, r1
    2a32:	09 f1       	breq	.+66     	; 0x2a76 <free+0x9c>
    2a34:	da 01       	movw	r26, r20
    2a36:	f3 cf       	rjmp	.-26     	; 0x2a1e <free+0x44>
    2a38:	b3 83       	std	Z+3, r27	; 0x03
    2a3a:	a2 83       	std	Z+2, r26	; 0x02
    2a3c:	40 81       	ld	r20, Z
    2a3e:	51 81       	ldd	r21, Z+1	; 0x01
    2a40:	84 0f       	add	r24, r20
    2a42:	95 1f       	adc	r25, r21
    2a44:	8a 17       	cp	r24, r26
    2a46:	9b 07       	cpc	r25, r27
    2a48:	71 f4       	brne	.+28     	; 0x2a66 <free+0x8c>
    2a4a:	8d 91       	ld	r24, X+
    2a4c:	9c 91       	ld	r25, X
    2a4e:	11 97       	sbiw	r26, 0x01	; 1
    2a50:	84 0f       	add	r24, r20
    2a52:	95 1f       	adc	r25, r21
    2a54:	02 96       	adiw	r24, 0x02	; 2
    2a56:	91 83       	std	Z+1, r25	; 0x01
    2a58:	80 83       	st	Z, r24
    2a5a:	12 96       	adiw	r26, 0x02	; 2
    2a5c:	8d 91       	ld	r24, X+
    2a5e:	9c 91       	ld	r25, X
    2a60:	13 97       	sbiw	r26, 0x03	; 3
    2a62:	93 83       	std	Z+3, r25	; 0x03
    2a64:	82 83       	std	Z+2, r24	; 0x02
    2a66:	21 15       	cp	r18, r1
    2a68:	31 05       	cpc	r19, r1
    2a6a:	29 f4       	brne	.+10     	; 0x2a76 <free+0x9c>
    2a6c:	f0 93 b6 03 	sts	0x03B6, r31
    2a70:	e0 93 b5 03 	sts	0x03B5, r30
    2a74:	3e c0       	rjmp	.+124    	; 0x2af2 <free+0x118>
    2a76:	d9 01       	movw	r26, r18
    2a78:	13 96       	adiw	r26, 0x03	; 3
    2a7a:	fc 93       	st	X, r31
    2a7c:	ee 93       	st	-X, r30
    2a7e:	12 97       	sbiw	r26, 0x02	; 2
    2a80:	4d 91       	ld	r20, X+
    2a82:	5d 91       	ld	r21, X+
    2a84:	a4 0f       	add	r26, r20
    2a86:	b5 1f       	adc	r27, r21
    2a88:	ea 17       	cp	r30, r26
    2a8a:	fb 07       	cpc	r31, r27
    2a8c:	79 f4       	brne	.+30     	; 0x2aac <free+0xd2>
    2a8e:	80 81       	ld	r24, Z
    2a90:	91 81       	ldd	r25, Z+1	; 0x01
    2a92:	84 0f       	add	r24, r20
    2a94:	95 1f       	adc	r25, r21
    2a96:	02 96       	adiw	r24, 0x02	; 2
    2a98:	d9 01       	movw	r26, r18
    2a9a:	11 96       	adiw	r26, 0x01	; 1
    2a9c:	9c 93       	st	X, r25
    2a9e:	8e 93       	st	-X, r24
    2aa0:	82 81       	ldd	r24, Z+2	; 0x02
    2aa2:	93 81       	ldd	r25, Z+3	; 0x03
    2aa4:	13 96       	adiw	r26, 0x03	; 3
    2aa6:	9c 93       	st	X, r25
    2aa8:	8e 93       	st	-X, r24
    2aaa:	12 97       	sbiw	r26, 0x02	; 2
    2aac:	e0 e0       	ldi	r30, 0x00	; 0
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab4:	00 97       	sbiw	r24, 0x00	; 0
    2ab6:	19 f0       	breq	.+6      	; 0x2abe <free+0xe4>
    2ab8:	fe 01       	movw	r30, r28
    2aba:	ec 01       	movw	r28, r24
    2abc:	f9 cf       	rjmp	.-14     	; 0x2ab0 <free+0xd6>
    2abe:	ce 01       	movw	r24, r28
    2ac0:	02 96       	adiw	r24, 0x02	; 2
    2ac2:	28 81       	ld	r18, Y
    2ac4:	39 81       	ldd	r19, Y+1	; 0x01
    2ac6:	82 0f       	add	r24, r18
    2ac8:	93 1f       	adc	r25, r19
    2aca:	20 91 b3 03 	lds	r18, 0x03B3
    2ace:	30 91 b4 03 	lds	r19, 0x03B4
    2ad2:	28 17       	cp	r18, r24
    2ad4:	39 07       	cpc	r19, r25
    2ad6:	69 f4       	brne	.+26     	; 0x2af2 <free+0x118>
    2ad8:	30 97       	sbiw	r30, 0x00	; 0
    2ada:	29 f4       	brne	.+10     	; 0x2ae6 <free+0x10c>
    2adc:	10 92 b6 03 	sts	0x03B6, r1
    2ae0:	10 92 b5 03 	sts	0x03B5, r1
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <free+0x110>
    2ae6:	13 82       	std	Z+3, r1	; 0x03
    2ae8:	12 82       	std	Z+2, r1	; 0x02
    2aea:	d0 93 b4 03 	sts	0x03B4, r29
    2aee:	c0 93 b3 03 	sts	0x03B3, r28
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	08 95       	ret

00002af8 <strrev>:
    2af8:	dc 01       	movw	r26, r24
    2afa:	fc 01       	movw	r30, r24
    2afc:	67 2f       	mov	r22, r23
    2afe:	71 91       	ld	r23, Z+
    2b00:	77 23       	and	r23, r23
    2b02:	e1 f7       	brne	.-8      	; 0x2afc <strrev+0x4>
    2b04:	32 97       	sbiw	r30, 0x02	; 2
    2b06:	04 c0       	rjmp	.+8      	; 0x2b10 <strrev+0x18>
    2b08:	7c 91       	ld	r23, X
    2b0a:	6d 93       	st	X+, r22
    2b0c:	70 83       	st	Z, r23
    2b0e:	62 91       	ld	r22, -Z
    2b10:	ae 17       	cp	r26, r30
    2b12:	bf 07       	cpc	r27, r31
    2b14:	c8 f3       	brcs	.-14     	; 0x2b08 <strrev+0x10>
    2b16:	08 95       	ret

00002b18 <__do_global_dtors>:
    2b18:	10 e0       	ldi	r17, 0x00	; 0
    2b1a:	cc ea       	ldi	r28, 0xAC	; 172
    2b1c:	d0 e0       	ldi	r29, 0x00	; 0
    2b1e:	04 c0       	rjmp	.+8      	; 0x2b28 <__do_global_dtors+0x10>
    2b20:	fe 01       	movw	r30, r28
    2b22:	0e 94 42 14 	call	0x2884	; 0x2884 <__tablejump__>
    2b26:	22 96       	adiw	r28, 0x02	; 2
    2b28:	ce 3a       	cpi	r28, 0xAE	; 174
    2b2a:	d1 07       	cpc	r29, r17
    2b2c:	c9 f7       	brne	.-14     	; 0x2b20 <__do_global_dtors+0x8>
    2b2e:	f8 94       	cli

00002b30 <__stop_program>:
    2b30:	ff cf       	rjmp	.-2      	; 0x2b30 <__stop_program>
