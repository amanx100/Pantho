
3pi-mazesolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00002b4a  00002bde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026d  0080014a  0080014a  00002c28  2**0
                  ALLOC
  3 .stab         00006624  00000000  00000000  00002c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008bbc  00000000  00000000  0000924c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00011e08  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  00011e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000018d1  00000000  00000000  00011f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007a9  00000000  00000000  00013819  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001101  00000000  00000000  00013fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000284  00000000  00000000  000150c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000052e  00000000  00000000  00015348  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c87  00000000  00000000  00015876  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f0  00000000  00000000  000164fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__dtors_end>
       4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      24:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__vector_9>
      28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      34:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__vector_13>
      38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      54:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      58:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      5c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      60:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <go>:
      76:	4c 31 36 20 63 00                                   L16 c.

0000007c <welcome>:
      7c:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

00000086 <demo_name_line2>:
      86:	73 6f 6c 76 65 72 00                                solver.

0000008d <demo_name_line1>:
      8d:	4d 61 7a 65 00                                      Maze.

00000092 <welcome_line2>:
      92:	33 f7 20 52 6f 62 6f 74 00                          3. Robot.

0000009b <welcome_line1>:
      9b:	20 50 6f 6c 6f 6c 75 00 00                           Pololu..

000000a4 <__ctors_start>:
      a4:	58 0e       	add	r5, r24

000000a6 <__ctors_end>:
      a6:	59 0e       	add	r5, r25

000000a8 <__dtors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d8 e0       	ldi	r29, 0x08	; 8
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	ea e4       	ldi	r30, 0x4A	; 74
      bc:	fb e2       	ldi	r31, 0x2B	; 43
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
      c0:	05 90       	lpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	aa 34       	cpi	r26, 0x4A	; 74
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
      ca:	23 e0       	ldi	r18, 0x03	; 3
      cc:	aa e4       	ldi	r26, 0x4A	; 74
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a7 3b       	cpi	r26, 0xB7	; 183
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>

000000da <__do_global_ctors>:
      da:	10 e0       	ldi	r17, 0x00	; 0
      dc:	c6 ea       	ldi	r28, 0xA6	; 166
      de:	d0 e0       	ldi	r29, 0x00	; 0
      e0:	04 c0       	rjmp	.+8      	; 0xea <__do_global_ctors+0x10>
      e2:	22 97       	sbiw	r28, 0x02	; 2
      e4:	fe 01       	movw	r30, r28
      e6:	0e 94 4e 14 	call	0x289c	; 0x289c <__tablejump__>
      ea:	c4 3a       	cpi	r28, 0xA4	; 164
      ec:	d1 07       	cpc	r29, r17
      ee:	c9 f7       	brne	.-14     	; 0xe2 <__do_global_ctors+0x8>
      f0:	0e 94 41 02 	call	0x482	; 0x482 <main>
      f4:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__do_global_dtors>

000000f8 <__bad_interrupt>:
      f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <load_custom_characters>:

// This function loads custom characters into the LCD.  Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
      fc:	60 e0       	ldi	r22, 0x00	; 0
      fe:	88 e6       	ldi	r24, 0x68	; 104
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 0f 0b 	call	0x161e	; 0x161e <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
     106:	61 e0       	ldi	r22, 0x01	; 1
     108:	89 e6       	ldi	r24, 0x69	; 105
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 0f 0b 	call	0x161e	; 0x161e <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
     110:	62 e0       	ldi	r22, 0x02	; 2
     112:	8a e6       	ldi	r24, 0x6A	; 106
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	0e 94 0f 0b 	call	0x161e	; 0x161e <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     11a:	63 e0       	ldi	r22, 0x03	; 3
     11c:	8b e6       	ldi	r24, 0x6B	; 107
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	0e 94 0f 0b 	call	0x161e	; 0x161e <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     124:	64 e0       	ldi	r22, 0x04	; 4
     126:	8c e6       	ldi	r24, 0x6C	; 108
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 0f 0b 	call	0x161e	; 0x161e <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     12e:	65 e0       	ldi	r22, 0x05	; 5
     130:	8d e6       	ldi	r24, 0x6D	; 109
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 0f 0b 	call	0x161e	; 0x161e <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     138:	66 e0       	ldi	r22, 0x06	; 6
     13a:	8e e6       	ldi	r24, 0x6E	; 110
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 0f 0b 	call	0x161e	; 0x161e <lcd_load_custom_character>
	clear(); // the LCD must be cleared for the characters to take effect
     142:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <clear>

00000146 <display_readings>:
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
     146:	cf 92       	push	r12
     148:	df 92       	push	r13
     14a:	ef 92       	push	r14
     14c:	ff 92       	push	r15
     14e:	0f 93       	push	r16
     150:	1f 93       	push	r17
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	2a 97       	sbiw	r28, 0x0a	; 10
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	f8 94       	cli
     160:	de bf       	out	0x3e, r29	; 62
     162:	0f be       	out	0x3f, r0	; 63
     164:	cd bf       	out	0x3d, r28	; 61
     166:	8c 01       	movw	r16, r24
	unsigned char i;

	for(i=0;i<5;i++) {
     168:	d1 2c       	mov	r13, r1
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     16a:	8a e0       	ldi	r24, 0x0A	; 10
     16c:	c8 2e       	mov	r12, r24

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     16e:	95 e6       	ldi	r25, 0x65	; 101
     170:	e9 2e       	mov	r14, r25
     172:	f1 2c       	mov	r15, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     174:	e1 e3       	ldi	r30, 0x31	; 49
     176:	f1 e0       	ldi	r31, 0x01	; 1
     178:	de 01       	movw	r26, r28
     17a:	11 96       	adiw	r26, 0x01	; 1
     17c:	8c 2d       	mov	r24, r12
     17e:	01 90       	ld	r0, Z+
     180:	0d 92       	st	X+, r0
     182:	8a 95       	dec	r24
     184:	e1 f7       	brne	.-8      	; 0x17e <display_readings+0x38>

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     186:	f8 01       	movw	r30, r16
     188:	81 91       	ld	r24, Z+
     18a:	91 91       	ld	r25, Z+
     18c:	8f 01       	movw	r16, r30
     18e:	b7 01       	movw	r22, r14
     190:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodhi4>
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	8c 0f       	add	r24, r28
     19a:	9d 1f       	adc	r25, r29
     19c:	68 0f       	add	r22, r24
     19e:	79 1f       	adc	r23, r25

		// Display the bar graph character.
		print_character(c);
     1a0:	fb 01       	movw	r30, r22
     1a2:	80 81       	ld	r24, Z
     1a4:	0e 94 12 0b 	call	0x1624	; 0x1624 <print_character>
// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     1a8:	d3 94       	inc	r13
     1aa:	f5 e0       	ldi	r31, 0x05	; 5
     1ac:	df 12       	cpse	r13, r31
     1ae:	e2 cf       	rjmp	.-60     	; 0x174 <display_readings+0x2e>
		char c = display_characters[calibrated_values[i]/101];

		// Display the bar graph character.
		print_character(c);
	}
}
     1b0:	2a 96       	adiw	r28, 0x0a	; 10
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	de bf       	out	0x3e, r29	; 62
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	cd bf       	out	0x3d, r28	; 61
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	cf 90       	pop	r12
     1cc:	08 95       	ret

000001ce <follow_segment>:
#include <pololu/3pi.h>

void follow_segment(int max)
{
     1ce:	2f 92       	push	r2
     1d0:	3f 92       	push	r3
     1d2:	4f 92       	push	r4
     1d4:	5f 92       	push	r5
     1d6:	6f 92       	push	r6
     1d8:	7f 92       	push	r7
     1da:	8f 92       	push	r8
     1dc:	9f 92       	push	r9
     1de:	af 92       	push	r10
     1e0:	bf 92       	push	r11
     1e2:	cf 92       	push	r12
     1e4:	df 92       	push	r13
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
     1f6:	2a 97       	sbiw	r28, 0x0a	; 10
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	f8 94       	cli
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	0f be       	out	0x3f, r0	; 63
     200:	cd bf       	out	0x3d, r28	; 61
     202:	8c 01       	movw	r16, r24
	int last_proportional = 0;
	long integral=0;
     204:	c1 2c       	mov	r12, r1
     206:	d1 2c       	mov	r13, r1
     208:	76 01       	movw	r14, r12
#include <pololu/3pi.h>

void follow_segment(int max)
{
	int last_proportional = 0;
     20a:	21 2c       	mov	r2, r1
     20c:	31 2c       	mov	r3, r1
		int derivative = proportional - last_proportional;
		integral += proportional;

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     20e:	50 e1       	ldi	r21, 0x10	; 16
     210:	45 2e       	mov	r4, r21
     212:	57 e2       	ldi	r21, 0x27	; 39
     214:	55 2e       	mov	r5, r21
     216:	61 2c       	mov	r6, r1
     218:	71 2c       	mov	r7, r1

		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
     21a:	88 24       	eor	r8, r8
     21c:	99 24       	eor	r9, r9
     21e:	88 1a       	sub	r8, r24
     220:	99 0a       	sbc	r9, r25
	long integral=0;

	while(1)
	{
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	ce 01       	movw	r24, r28
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <read_line>

		int proportional = ((int)position) - 2000;
     22c:	80 5d       	subi	r24, 0xD0	; 208
     22e:	97 40       	sbci	r25, 0x07	; 7
     230:	5c 01       	movw	r10, r24

		int derivative = proportional - last_proportional;
		integral += proportional;
     232:	aa 27       	eor	r26, r26
     234:	97 fd       	sbrc	r25, 7
     236:	a0 95       	com	r26
     238:	ba 2f       	mov	r27, r26
     23a:	c8 0e       	add	r12, r24
     23c:	d9 1e       	adc	r13, r25
     23e:	ea 1e       	adc	r14, r26
     240:	fb 1e       	adc	r15, r27

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     242:	c7 01       	movw	r24, r14
     244:	b6 01       	movw	r22, r12
     246:	a3 01       	movw	r20, r6
     248:	92 01       	movw	r18, r4
     24a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__divmodsi4>
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);

		int proportional = ((int)position) - 2000;

		int derivative = proportional - last_proportional;
     24e:	b5 01       	movw	r22, r10
     250:	62 19       	sub	r22, r2
     252:	73 09       	sbc	r23, r3
		integral += proportional;

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     254:	cb 01       	movw	r24, r22
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	86 0f       	add	r24, r22
     25c:	97 1f       	adc	r25, r23
     25e:	97 fd       	sbrc	r25, 7
     260:	01 96       	adiw	r24, 0x01	; 1
     262:	fc 01       	movw	r30, r24
     264:	f5 95       	asr	r31
     266:	e7 95       	ror	r30
     268:	e2 0f       	add	r30, r18
     26a:	f3 1f       	adc	r31, r19
     26c:	c5 01       	movw	r24, r10
     26e:	64 e1       	ldi	r22, 0x14	; 20
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	0e 94 b5 13 	call	0x276a	; 0x276a <__divmodhi4>
     276:	e6 0f       	add	r30, r22
     278:	f7 1f       	adc	r31, r23
     27a:	0e 17       	cp	r16, r30
     27c:	1f 07       	cpc	r17, r31
     27e:	0c f4       	brge	.+2      	; 0x282 <follow_segment+0xb4>
     280:	f8 01       	movw	r30, r16
     282:	cf 01       	movw	r24, r30
     284:	e8 15       	cp	r30, r8
     286:	f9 05       	cpc	r31, r9
     288:	0c f4       	brge	.+2      	; 0x28c <follow_segment+0xbe>
     28a:	c4 01       	movw	r24, r8
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
     28c:	b8 01       	movw	r22, r16
		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
		
		if(power_difference < 0)
     28e:	97 ff       	sbrs	r25, 7
     290:	03 c0       	rjmp	.+6      	; 0x298 <follow_segment+0xca>
			set_motors(max+power_difference,max);
     292:	80 0f       	add	r24, r16
     294:	91 1f       	adc	r25, r17
     296:	03 c0       	rjmp	.+6      	; 0x29e <follow_segment+0xd0>
		else
			set_motors(max,max-power_difference);
     298:	68 1b       	sub	r22, r24
     29a:	79 0b       	sbc	r23, r25
     29c:	c8 01       	movw	r24, r16
     29e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>

		if(sensors[1] < 100 && sensors[2] < 100 && sensors[3] < 100)
     2a2:	8b 81       	ldd	r24, Y+3	; 0x03
     2a4:	9c 81       	ldd	r25, Y+4	; 0x04
     2a6:	84 36       	cpi	r24, 0x64	; 100
     2a8:	91 05       	cpc	r25, r1
     2aa:	50 f4       	brcc	.+20     	; 0x2c0 <follow_segment+0xf2>
     2ac:	8d 81       	ldd	r24, Y+5	; 0x05
     2ae:	9e 81       	ldd	r25, Y+6	; 0x06
     2b0:	84 36       	cpi	r24, 0x64	; 100
     2b2:	91 05       	cpc	r25, r1
     2b4:	28 f4       	brcc	.+10     	; 0x2c0 <follow_segment+0xf2>
     2b6:	8f 81       	ldd	r24, Y+7	; 0x07
     2b8:	98 85       	ldd	r25, Y+8	; 0x08
     2ba:	84 36       	cpi	r24, 0x64	; 100
     2bc:	91 05       	cpc	r25, r1
     2be:	60 f0       	brcs	.+24     	; 0x2d8 <follow_segment+0x10a>
		{
			return;
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	9a 81       	ldd	r25, Y+2	; 0x02
     2c4:	89 3c       	cpi	r24, 0xC9	; 201
     2c6:	91 05       	cpc	r25, r1
     2c8:	38 f4       	brcc	.+14     	; 0x2d8 <follow_segment+0x10a>
     2ca:	89 85       	ldd	r24, Y+9	; 0x09
     2cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ce:	89 3c       	cpi	r24, 0xC9	; 201
     2d0:	91 05       	cpc	r25, r1
     2d2:	10 f4       	brcc	.+4      	; 0x2d8 <follow_segment+0x10a>
		int proportional = ((int)position) - 2000;

		int derivative = proportional - last_proportional;
		integral += proportional;

		last_proportional = proportional;
     2d4:	15 01       	movw	r2, r10
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
		{
			return;
		}
	}
     2d6:	a5 cf       	rjmp	.-182    	; 0x222 <follow_segment+0x54>
     2d8:	2a 96       	adiw	r28, 0x0a	; 10
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	bf 90       	pop	r11
     2f6:	af 90       	pop	r10
     2f8:	9f 90       	pop	r9
     2fa:	8f 90       	pop	r8
     2fc:	7f 90       	pop	r7
     2fe:	6f 90       	pop	r6
     300:	5f 90       	pop	r5
     302:	4f 90       	pop	r4
     304:	3f 90       	pop	r3
     306:	2f 90       	pop	r2
     308:	08 95       	ret

0000030a <initialize>:

const char welcome[] PROGMEM = ">g32>>c32";
const char go[] PROGMEM = "L16 c";

void initialize()
{
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	2a 97       	sbiw	r28, 0x0a	; 10
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
	unsigned int counter; 
	unsigned int sensors[5]; 
	
	pololu_3pi_init(2000);
     322:	80 ed       	ldi	r24, 0xD0	; 208
     324:	97 e0       	ldi	r25, 0x07	; 7
     326:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <pololu_3pi_init>
	load_custom_characters();
     32a:	0e 94 7e 00 	call	0xfc	; 0xfc <load_custom_characters>
	
	print_from_program_space(welcome_line1);
     32e:	8b e9       	ldi	r24, 0x9B	; 155
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 b7 0b 	call	0x176e	; 0x176e <print_from_program_space>
	lcd_goto_xy(0,1);
     336:	61 e0       	ldi	r22, 0x01	; 1
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 37 0c 	call	0x186e	; 0x186e <lcd_goto_xy>
	print_from_program_space(welcome_line2);
     33e:	82 e9       	ldi	r24, 0x92	; 146
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 b7 0b 	call	0x176e	; 0x176e <print_from_program_space>
	play_from_program_space(welcome);
     346:	8c e7       	ldi	r24, 0x7C	; 124
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <play_from_program_space>
	delay_ms(1000);
     34e:	88 ee       	ldi	r24, 0xE8	; 232
     350:	93 e0       	ldi	r25, 0x03	; 3
     352:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>

	clear();
     356:	0e 94 8f 0b 	call	0x171e	; 0x171e <clear>
	print_from_program_space(demo_name_line1);
     35a:	8d e8       	ldi	r24, 0x8D	; 141
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 b7 0b 	call	0x176e	; 0x176e <print_from_program_space>
	lcd_goto_xy(0,1);
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	0e 94 37 0c 	call	0x186e	; 0x186e <lcd_goto_xy>
	print_from_program_space(demo_name_line2);
     36a:	86 e8       	ldi	r24, 0x86	; 134
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 b7 0b 	call	0x176e	; 0x176e <print_from_program_space>
	delay_ms(1000);
     372:	88 ee       	ldi	r24, 0xE8	; 232
     374:	93 e0       	ldi	r25, 0x03	; 3
		print_long(bat);
		print("mV");
		lcd_goto_xy(0,1);
		print("Press B");

		delay_ms(100);
     376:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
	print_from_program_space(demo_name_line1);
	lcd_goto_xy(0,1);
	print_from_program_space(demo_name_line2);
	delay_ms(1000);

	while(!button_is_pressed(BUTTON_B))
     37a:	80 e1       	ldi	r24, 0x10	; 16
     37c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <button_is_pressed>
     380:	81 11       	cpse	r24, r1
     382:	1b c0       	rjmp	.+54     	; 0x3ba <initialize+0xb0>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     384:	0e 94 0a 07 	call	0xe14	; 0xe14 <read_battery_millivolts_3pi>
     388:	8c 01       	movw	r16, r24
	{
		int bat = read_battery_millivolts();

		clear();
     38a:	0e 94 8f 0b 	call	0x171e	; 0x171e <clear>
		print_long(bat);
     38e:	b8 01       	movw	r22, r16
     390:	88 27       	eor	r24, r24
     392:	77 fd       	sbrc	r23, 7
     394:	80 95       	com	r24
     396:	98 2f       	mov	r25, r24
     398:	0e 94 14 0c 	call	0x1828	; 0x1828 <print_long>
		print("mV");
     39c:	8b e3       	ldi	r24, 0x3B	; 59
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 a6 0b 	call	0x174c	; 0x174c <print>
		lcd_goto_xy(0,1);
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	0e 94 37 0c 	call	0x186e	; 0x186e <lcd_goto_xy>
		print("Press B");
     3ac:	8e e3       	ldi	r24, 0x3E	; 62
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	0e 94 a6 0b 	call	0x174c	; 0x174c <print>

		delay_ms(100);
     3b4:	84 e6       	ldi	r24, 0x64	; 100
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	de cf       	rjmp	.-68     	; 0x376 <initialize+0x6c>
	}

	wait_for_button_release(BUTTON_B);
     3ba:	80 e1       	ldi	r24, 0x10	; 16
     3bc:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <wait_for_button_release>
	delay_ms(1000);
     3c0:	88 ee       	ldi	r24, 0xE8	; 232
     3c2:	93 e0       	ldi	r25, 0x03	; 3
     3c4:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
     3c8:	0c ee       	ldi	r16, 0xEC	; 236
     3ca:	1f ef       	ldi	r17, 0xFF	; 255

	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     3cc:	08 32       	cpi	r16, 0x28	; 40
     3ce:	11 05       	cpc	r17, r1
     3d0:	28 f0       	brcs	.+10     	; 0x3dc <initialize+0xd2>
			set_motors(40,-40);
     3d2:	68 ed       	ldi	r22, 0xD8	; 216
     3d4:	7f ef       	ldi	r23, 0xFF	; 255
     3d6:	88 e2       	ldi	r24, 0x28	; 40
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	04 c0       	rjmp	.+8      	; 0x3e4 <initialize+0xda>
		else
			set_motors(-40,40);
     3dc:	68 e2       	ldi	r22, 0x28	; 40
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	88 ed       	ldi	r24, 0xD8	; 216
     3e2:	9f ef       	ldi	r25, 0xFF	; 255
     3e4:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <calibrate_line_sensors>
		delay_ms(20);
     3ee:	84 e1       	ldi	r24, 0x14	; 20
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
     3f6:	0f 5f       	subi	r16, 0xFF	; 255
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	for(counter=0;counter<80;counter++)
     3fa:	0c 33       	cpi	r16, 0x3C	; 60
     3fc:	11 05       	cpc	r17, r1
     3fe:	31 f7       	brne	.-52     	; 0x3cc <initialize+0xc2>
		else
			set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	set_motors(0,0);
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>

	while(!button_is_pressed(BUTTON_B))
     40c:	80 e1       	ldi	r24, 0x10	; 16
     40e:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <button_is_pressed>
     412:	81 11       	cpse	r24, r1
     414:	1a c0       	rjmp	.+52     	; 0x44a <initialize+0x140>
	{
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	ce 01       	movw	r24, r28
     41a:	01 96       	adiw	r24, 0x01	; 1
     41c:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <read_line>
     420:	8c 01       	movw	r16, r24

		clear();
     422:	0e 94 8f 0b 	call	0x171e	; 0x171e <clear>
		print_long(position);
     426:	b8 01       	movw	r22, r16
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 14 0c 	call	0x1828	; 0x1828 <print_long>
		lcd_goto_xy(0,1);
     430:	61 e0       	ldi	r22, 0x01	; 1
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	0e 94 37 0c 	call	0x186e	; 0x186e <lcd_goto_xy>
		display_readings(sensors);
     438:	ce 01       	movw	r24, r28
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	0e 94 a3 00 	call	0x146	; 0x146 <display_readings>

		delay_ms(100);
     440:	84 e6       	ldi	r24, 0x64	; 100
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
     448:	e1 cf       	rjmp	.-62     	; 0x40c <initialize+0x102>
	}
	wait_for_button_release(BUTTON_B);
     44a:	80 e1       	ldi	r24, 0x10	; 16
     44c:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <wait_for_button_release>

	clear();
     450:	0e 94 8f 0b 	call	0x171e	; 0x171e <clear>

	print("Go!");		
     454:	86 e4       	ldi	r24, 0x46	; 70
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	0e 94 a6 0b 	call	0x174c	; 0x174c <print>
	
	play_from_program_space(go);
     45c:	86 e7       	ldi	r24, 0x76	; 118
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 4c 0a 	call	0x1498	; 0x1498 <play_from_program_space>
	while(is_playing());
     464:	0e 94 3b 0a 	call	0x1476	; 0x1476 <is_playing>
     468:	81 11       	cpse	r24, r1
     46a:	fc cf       	rjmp	.-8      	; 0x464 <initialize+0x15a>
}
     46c:	2a 96       	adiw	r28, 0x0a	; 10
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <main>:


int main()
{
	initialize();//3pi initialization
     482:	0e 94 85 01 	call	0x30a	; 0x30a <initialize>
	
	maze_solve(170); //std 160
     486:	8a ea       	ldi	r24, 0xAA	; 170
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 4e 03 	call	0x69c	; 0x69c <maze_solve>
     48e:	ff cf       	rjmp	.-2      	; 0x48e <main+0xc>

00000490 <sensor_data>:
uint16_t  node_number = 0;



uint8_t sensor_data(void)
{
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	2a 97       	sbiw	r28, 0x0a	; 10
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5], edge_th = 400, line_th = 300;
	uint8_t sn_dta = 0x00;
	read_line(sensors,IR_EMITTERS_ON);
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	ce 01       	movw	r24, r28
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <read_line>
	if (sensors[0] > edge_th)	sn_dta |= (1<<4);
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	9a 81       	ldd	r25, Y+2	; 0x02
     4b2:	81 39       	cpi	r24, 0x91	; 145
     4b4:	91 40       	sbci	r25, 0x01	; 1
     4b6:	10 f0       	brcs	.+4      	; 0x4bc <sensor_data+0x2c>
     4b8:	80 e1       	ldi	r24, 0x10	; 16
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <sensor_data+0x2e>
	else						sn_dta &= ~(1<<4);
     4bc:	80 e0       	ldi	r24, 0x00	; 0
	if (sensors[1] > line_th)	sn_dta |= (1<<3);
     4be:	2b 81       	ldd	r18, Y+3	; 0x03
     4c0:	3c 81       	ldd	r19, Y+4	; 0x04
     4c2:	2d 32       	cpi	r18, 0x2D	; 45
     4c4:	31 40       	sbci	r19, 0x01	; 1
     4c6:	10 f0       	brcs	.+4      	; 0x4cc <sensor_data+0x3c>
     4c8:	88 60       	ori	r24, 0x08	; 8
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <sensor_data+0x3e>
	else						sn_dta &= ~(1<<3);
     4cc:	87 7f       	andi	r24, 0xF7	; 247
	if (sensors[2] > line_th)	sn_dta |= (1<<2);
     4ce:	2d 81       	ldd	r18, Y+5	; 0x05
     4d0:	3e 81       	ldd	r19, Y+6	; 0x06
     4d2:	2d 32       	cpi	r18, 0x2D	; 45
     4d4:	31 40       	sbci	r19, 0x01	; 1
     4d6:	10 f0       	brcs	.+4      	; 0x4dc <sensor_data+0x4c>
     4d8:	84 60       	ori	r24, 0x04	; 4
     4da:	01 c0       	rjmp	.+2      	; 0x4de <sensor_data+0x4e>
	else						sn_dta &= ~(1<<2);
     4dc:	8b 7f       	andi	r24, 0xFB	; 251
	if (sensors[3] > line_th)	sn_dta |= (1<<1);
     4de:	2f 81       	ldd	r18, Y+7	; 0x07
     4e0:	38 85       	ldd	r19, Y+8	; 0x08
     4e2:	2d 32       	cpi	r18, 0x2D	; 45
     4e4:	31 40       	sbci	r19, 0x01	; 1
     4e6:	10 f0       	brcs	.+4      	; 0x4ec <sensor_data+0x5c>
     4e8:	82 60       	ori	r24, 0x02	; 2
     4ea:	01 c0       	rjmp	.+2      	; 0x4ee <sensor_data+0x5e>
	else						sn_dta &= ~(1<<1);
     4ec:	8d 7f       	andi	r24, 0xFD	; 253
	if (sensors[4] > edge_th)	sn_dta |= (1<<0);
     4ee:	29 85       	ldd	r18, Y+9	; 0x09
     4f0:	3a 85       	ldd	r19, Y+10	; 0x0a
     4f2:	21 39       	cpi	r18, 0x91	; 145
     4f4:	31 40       	sbci	r19, 0x01	; 1
     4f6:	10 f0       	brcs	.+4      	; 0x4fc <sensor_data+0x6c>
     4f8:	81 60       	ori	r24, 0x01	; 1
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <sensor_data+0x6e>
	else						sn_dta &= ~(1<<0);
     4fc:	8e 7f       	andi	r24, 0xFE	; 254
	
	return sn_dta;
}
     4fe:	2a 96       	adiw	r28, 0x0a	; 10
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <sensor_data_verified>:

uint8_t sensor_data_verified(void)
{
     510:	1f 93       	push	r17
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
void time_reset(void);

// This is inline for efficiency:
static inline void delay_us(unsigned int microseconds)
{
  __asm__ volatile (
     516:	c4 e1       	ldi	r28, 0x14	; 20
     518:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t snsr_data;
re_data:
	snsr_data = sensor_data();
     51a:	0e 94 48 02 	call	0x490	; 0x490 <sensor_data>
     51e:	18 2f       	mov	r17, r24
     520:	fe 01       	movw	r30, r28
     522:	6f 93       	push	r22
     524:	64 e0       	ldi	r22, 0x04	; 4
     526:	6a 95       	dec	r22
     528:	f1 f7       	brne	.-4      	; 0x526 <sensor_data_verified+0x16>
     52a:	6f 91       	pop	r22
     52c:	31 97       	sbiw	r30, 0x01	; 1
     52e:	c9 f7       	brne	.-14     	; 0x522 <sensor_data_verified+0x12>
	delay_us(20);
	if (snsr_data == sensor_data())
     530:	0e 94 48 02 	call	0x490	; 0x490 <sensor_data>
     534:	18 13       	cpse	r17, r24
     536:	f1 cf       	rjmp	.-30     	; 0x51a <sensor_data_verified+0xa>
	{
		return snsr_data;
	}
	else goto re_data;
}
     538:	81 2f       	mov	r24, r17
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	08 95       	ret

00000542 <process_u>:


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
			{
				directions_solved[i-1] = 's';
     546:	43 e7       	ldi	r20, 0x73	; 115
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'r';
     548:	52 e7       	ldi	r21, 0x72	; 114
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
			{
				directions_solved[i-1] = 'l';
     54a:	6c e6       	ldi	r22, 0x6C	; 108


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     54c:	dc 01       	movw	r26, r24
     54e:	a1 54       	subi	r26, 0x41	; 65
     550:	be 4f       	sbci	r27, 0xFE	; 254
     552:	2c 91       	ld	r18, X
     554:	22 23       	and	r18, r18
     556:	e1 f1       	breq	.+120    	; 0x5d0 <process_u+0x8e>
	{
		if (directions_solved[i] == 'u')
     558:	25 37       	cpi	r18, 0x75	; 117
     55a:	c1 f5       	brne	.+112    	; 0x5cc <process_u+0x8a>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
     55c:	fc 01       	movw	r30, r24
     55e:	e2 54       	subi	r30, 0x42	; 66
     560:	fe 4f       	sbci	r31, 0xFE	; 254
     562:	30 81       	ld	r19, Z
     564:	32 37       	cpi	r19, 0x72	; 114
     566:	29 f4       	brne	.+10     	; 0x572 <process_u+0x30>
     568:	11 96       	adiw	r26, 0x01	; 1
     56a:	3c 91       	ld	r19, X
     56c:	33 37       	cpi	r19, 0x73	; 115
     56e:	81 f4       	brne	.+32     	; 0x590 <process_u+0x4e>
     570:	06 c0       	rjmp	.+12     	; 0x57e <process_u+0x3c>
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
     572:	33 37       	cpi	r19, 0x73	; 115
     574:	31 f4       	brne	.+12     	; 0x582 <process_u+0x40>
     576:	11 96       	adiw	r26, 0x01	; 1
     578:	3c 91       	ld	r19, X
     57a:	32 37       	cpi	r19, 0x72	; 114
     57c:	a1 f4       	brne	.+40     	; 0x5a6 <process_u+0x64>
			{
				directions_solved[i-1] = 'l';
     57e:	60 83       	st	Z, r22
     580:	19 c0       	rjmp	.+50     	; 0x5b4 <process_u+0x72>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'r')
     582:	3c 36       	cpi	r19, 0x6C	; 108
     584:	b9 f4       	brne	.+46     	; 0x5b4 <process_u+0x72>
     586:	11 96       	adiw	r26, 0x01	; 1
     588:	3c 91       	ld	r19, X
     58a:	32 37       	cpi	r19, 0x72	; 114
     58c:	31 f4       	brne	.+12     	; 0x59a <process_u+0x58>
     58e:	11 c0       	rjmp	.+34     	; 0x5b2 <process_u+0x70>
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'r')
     590:	32 37       	cpi	r19, 0x72	; 114
     592:	39 f0       	breq	.+14     	; 0x5a2 <process_u+0x60>
			{
				directions_solved[i-1] = 's';
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'l')
     594:	3c 36       	cpi	r19, 0x6C	; 108
     596:	71 f4       	brne	.+28     	; 0x5b4 <process_u+0x72>
     598:	0c c0       	rjmp	.+24     	; 0x5b2 <process_u+0x70>
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
     59a:	33 37       	cpi	r19, 0x73	; 115
     59c:	31 f0       	breq	.+12     	; 0x5aa <process_u+0x68>
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
     59e:	3c 36       	cpi	r19, 0x6C	; 108
     5a0:	49 f4       	brne	.+18     	; 0x5b4 <process_u+0x72>
			{
				directions_solved[i-1] = 's';
     5a2:	40 83       	st	Z, r20
     5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <process_u+0x72>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'l')
     5a6:	3c 36       	cpi	r19, 0x6C	; 108
     5a8:	11 f4       	brne	.+4      	; 0x5ae <process_u+0x6c>
			{
				directions_solved[i-1] = 'r';
     5aa:	50 83       	st	Z, r21
     5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <process_u+0x72>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
     5ae:	33 37       	cpi	r19, 0x73	; 115
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <process_u+0x72>
			{
				directions_solved[i-1] = 'u';
     5b2:	20 83       	st	Z, r18
     5b4:	fc 01       	movw	r30, r24
     5b6:	e1 54       	subi	r30, 0x41	; 65
     5b8:	fe 4f       	sbci	r31, 0xFE	; 254
			}

			
			while (directions_solved[i+2])
     5ba:	22 81       	ldd	r18, Z+2	; 0x02
     5bc:	22 23       	and	r18, r18
     5be:	19 f0       	breq	.+6      	; 0x5c6 <process_u+0x84>
			{
				directions_solved[i] = directions_solved[i+2];
     5c0:	20 83       	st	Z, r18
				i++;
     5c2:	01 96       	adiw	r24, 0x01	; 1
     5c4:	f7 cf       	rjmp	.-18     	; 0x5b4 <process_u+0x72>
			}
			directions_solved[i] = '\0';
     5c6:	10 82       	st	Z, r1
			i=0;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	be cf       	rjmp	.-132    	; 0x54c <process_u+0xa>
			}
			directions_solved[i] = '\0';
			i=0;
		}
	}
}
     5d0:	08 95       	ret

000005d2 <process_array>:
		}
	}
}

void process_array(void)
{
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
     5da:	8f eb       	ldi	r24, 0xBF	; 191
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	0e 94 88 15 	call	0x2b10	; 0x2b10 <strrev>
     5e2:	ef eb       	ldi	r30, 0xBF	; 191
     5e4:	f1 e0       	ldi	r31, 0x01	; 1
		{
			directions_solved[i] = 'r';
		}
		else if (directions_solved[i] == 'r')
		{
			directions_solved[i] = 'l';
     5e6:	9c e6       	ldi	r25, 0x6C	; 108
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'l')
		{
			directions_solved[i] = 'r';
     5e8:	22 e7       	ldi	r18, 0x72	; 114
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
	
	for (i=0;directions_solved[i];i++)
     5ea:	80 81       	ld	r24, Z
     5ec:	88 23       	and	r24, r24
     5ee:	49 f0       	breq	.+18     	; 0x602 <process_array+0x30>
	{
		if (directions_solved[i] == 'l')
     5f0:	8c 36       	cpi	r24, 0x6C	; 108
     5f2:	11 f4       	brne	.+4      	; 0x5f8 <process_array+0x26>
		{
			directions_solved[i] = 'r';
     5f4:	20 83       	st	Z, r18
     5f6:	03 c0       	rjmp	.+6      	; 0x5fe <process_array+0x2c>
		}
		else if (directions_solved[i] == 'r')
     5f8:	82 37       	cpi	r24, 0x72	; 114
     5fa:	09 f4       	brne	.+2      	; 0x5fe <process_array+0x2c>
		{
			directions_solved[i] = 'l';
     5fc:	90 83       	st	Z, r25
     5fe:	31 96       	adiw	r30, 0x01	; 1
     600:	f4 cf       	rjmp	.-24     	; 0x5ea <process_array+0x18>
		}
	}
	
	while(1)
	{
		length_sln_prev = strlen(directions_solved);
     602:	0f eb       	ldi	r16, 0xBF	; 191
     604:	11 e0       	ldi	r17, 0x01	; 1
     606:	e8 01       	movw	r28, r16
     608:	09 90       	ld	r0, Y+
     60a:	00 20       	and	r0, r0
     60c:	e9 f7       	brne	.-6      	; 0x608 <process_array+0x36>
     60e:	21 97       	sbiw	r28, 0x01	; 1
     610:	cf 5b       	subi	r28, 0xBF	; 191
     612:	d1 40       	sbci	r29, 0x01	; 1
		
		process_u();
     614:	0e 94 a1 02 	call	0x542	; 0x542 <process_u>
		
		//process_loop();
		
		if (length_sln_prev == strlen(directions_solved))
     618:	f8 01       	movw	r30, r16
     61a:	01 90       	ld	r0, Z+
     61c:	00 20       	and	r0, r0
     61e:	e9 f7       	brne	.-6      	; 0x61a <process_array+0x48>
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	ef 5b       	subi	r30, 0xBF	; 191
     624:	f1 40       	sbci	r31, 0x01	; 1
     626:	ce 17       	cp	r28, r30
     628:	df 07       	cpc	r29, r31
     62a:	69 f7       	brne	.-38     	; 0x606 <process_array+0x34>
		{
			break;
		}
	}
}
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	08 95       	ret

00000636 <evaluate_direction>:


void evaluate_direction(uint16_t speed)
{
     636:	bc 01       	movw	r22, r24
	char evaluation = 0;
	evaluation = directions_solved[node_number];
     638:	80 91 bd 01 	lds	r24, 0x01BD
     63c:	90 91 be 01 	lds	r25, 0x01BE
     640:	fc 01       	movw	r30, r24
     642:	e1 54       	subi	r30, 0x41	; 65
     644:	fe 4f       	sbci	r31, 0xFE	; 254
     646:	20 81       	ld	r18, Z
	node_number = node_number + 1;
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	90 93 be 01 	sts	0x01BE, r25
     64e:	80 93 bd 01 	sts	0x01BD, r24
	
	if (evaluation == 's')
     652:	23 37       	cpi	r18, 0x73	; 115
     654:	11 f4       	brne	.+4      	; 0x65a <evaluate_direction+0x24>
	{
		turn('S',speed);
     656:	83 e5       	ldi	r24, 0x53	; 83
     658:	0b c0       	rjmp	.+22     	; 0x670 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'u')
     65a:	25 37       	cpi	r18, 0x75	; 117
     65c:	11 f4       	brne	.+4      	; 0x662 <evaluate_direction+0x2c>
	{
		turn('U',speed);
     65e:	85 e5       	ldi	r24, 0x55	; 85
     660:	07 c0       	rjmp	.+14     	; 0x670 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'l')
     662:	2c 36       	cpi	r18, 0x6C	; 108
     664:	11 f4       	brne	.+4      	; 0x66a <evaluate_direction+0x34>
	{
		turn('L',speed);
     666:	8c e4       	ldi	r24, 0x4C	; 76
     668:	03 c0       	rjmp	.+6      	; 0x670 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'r')
     66a:	22 37       	cpi	r18, 0x72	; 114
     66c:	19 f4       	brne	.+6      	; 0x674 <evaluate_direction+0x3e>
	{
		turn('R',speed);
     66e:	82 e5       	ldi	r24, 0x52	; 82
     670:	0c 94 c0 04 	jmp	0x980	; 0x980 <turn>
	}
	else
	{
		set_motors(0,0);
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
     680:	ff cf       	rjmp	.-2      	; 0x680 <evaluate_direction+0x4a>

00000682 <destination_operation>:
}


void destination_operation(int speed)
{
	directions_solved[node_number] = '\0';
     682:	e0 91 bd 01 	lds	r30, 0x01BD
     686:	f0 91 be 01 	lds	r31, 0x01BE
     68a:	e1 54       	subi	r30, 0x41	; 65
     68c:	fe 4f       	sbci	r31, 0xFE	; 254
     68e:	10 82       	st	Z, r1
	turn('D',speed);
     690:	bc 01       	movw	r22, r24
     692:	84 e4       	ldi	r24, 0x44	; 68
     694:	0e 94 c0 04 	call	0x980	; 0x980 <turn>
	process_array();
     698:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <process_array>

0000069c <maze_solve>:
}


void maze_solve(int speed)
{
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	1f 92       	push	r1
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	3c 01       	movw	r6, r24
	uint16_t destination = 0;
	const signed int speed_node = 100;
	char sensor_data_hold = 0, Right_trigged = 0, Left_trigged = 0, Forward_trigged = 0; 
     6a8:	a1 2c       	mov	r10, r1
     6aa:	91 2c       	mov	r9, r1
     6ac:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
			}
		}
		else if (sensor_data_hold == 0b00000) //-100
		{	
			directions_solved[node_number] = 'u';
     6ae:	85 e7       	ldi	r24, 0x75	; 117
     6b0:	e8 2e       	mov	r14, r24
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 'l';
     6b2:	9c e6       	ldi	r25, 0x6C	; 108
     6b4:	f9 2e       	mov	r15, r25
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 's';
     6b6:	23 e7       	ldi	r18, 0x73	; 115
     6b8:	d2 2e       	mov	r13, r18
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
			{
				directions_solved[node_number] = 'r';
     6ba:	32 e7       	ldi	r19, 0x72	; 114
     6bc:	c3 2e       	mov	r12, r19
//****** Explore the path *****************************************************************************
///////////////////////////////////////////////////////////////////////////////////////////////////////

	while(1)
	{
		follow_segment(speed);
     6be:	c3 01       	movw	r24, r6
     6c0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <follow_segment>
		
		sensor_data_hold = sensor_data_verified();
     6c4:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     6c8:	28 2f       	mov	r18, r24
		
		if(sensor_data_hold & 0b10000)  //left trigging 
     6ca:	84 ff       	sbrs	r24, 4
     6cc:	6e c0       	rjmp	.+220    	; 0x7aa <maze_solve+0x10e>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     6ce:	64 e6       	ldi	r22, 0x64	; 100
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	84 e6       	ldi	r24, 0x64	; 100
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	29 83       	std	Y+1, r18	; 0x01
     6d8:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
			destination = 0;
     6dc:	00 e0       	ldi	r16, 0x00	; 0
     6de:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     6e0:	29 81       	ldd	r18, Y+1	; 0x01
     6e2:	21 71       	andi	r18, 0x11	; 17
     6e4:	c1 f0       	breq	.+48     	; 0x716 <maze_solve+0x7a>
			{
				sensor_data_hold = sensor_data_verified();
     6e6:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     6ea:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b00001) && (Right_trigged == 0))
     6ec:	80 ff       	sbrs	r24, 0
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <maze_solve+0x5c>
     6f0:	b1 10       	cpse	r11, r1
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <maze_solve+0x5c>
				{
					Right_trigged=1;
     6f4:	bb 24       	eor	r11, r11
     6f6:	b3 94       	inc	r11
				}
				if (sensor_data_hold == 0b11111)
     6f8:	2f 31       	cpi	r18, 0x1F	; 31
     6fa:	99 f7       	brne	.-26     	; 0x6e2 <maze_solve+0x46>
				{
					destination = destination + 1;
     6fc:	0f 5f       	subi	r16, 0xFF	; 255
     6fe:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     700:	03 33       	cpi	r16, 0x33	; 51
     702:	11 05       	cpc	r17, r1
     704:	70 f3       	brcs	.-36     	; 0x6e2 <maze_solve+0x46>
					{
						destination = 0x00;
						destination_operation(speed);
     706:	c3 01       	movw	r24, r6
     708:	0e 94 41 03 	call	0x682	; 0x682 <destination_operation>
	//****** Follow the Solved path************************************************************************
	///////////////////////////////////////////////////////////////////////////////////////////////////////

solv_maze:

node_number = 0x00;
     70c:	10 92 be 01 	sts	0x01BE, r1
     710:	10 92 bd 01 	sts	0x01BD, r1
     714:	e0 c0       	rjmp	.+448    	; 0x8d6 <maze_solve+0x23a>
						goto solv_maze;
					}
				}
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
     716:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
			if (sensor_data_hold & 0b00100)
     71a:	82 fd       	sbrc	r24, 2
     71c:	1d c1       	rjmp	.+570    	; 0x958 <__stack+0x59>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     71e:	b1 10       	cpse	r11, r1
     720:	16 c0       	rjmp	.+44     	; 0x74e <maze_solve+0xb2>
     722:	a1 10       	cpse	r10, r1
     724:	10 c0       	rjmp	.+32     	; 0x746 <maze_solve+0xaa>
			{
				directions_solved[node_number] = 'l';
     726:	80 91 bd 01 	lds	r24, 0x01BD
     72a:	90 91 be 01 	lds	r25, 0x01BE
     72e:	fc 01       	movw	r30, r24
     730:	e1 54       	subi	r30, 0x41	; 65
     732:	fe 4f       	sbci	r31, 0xFE	; 254
     734:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	90 93 be 01 	sts	0x01BE, r25
     73c:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     740:	b3 01       	movw	r22, r6
     742:	8c e4       	ldi	r24, 0x4C	; 76
     744:	bb c0       	rjmp	.+374    	; 0x8bc <maze_solve+0x220>
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	a8 12       	cpse	r10, r24
     74a:	b9 cf       	rjmp	.-142    	; 0x6be <maze_solve+0x22>
     74c:	1b c0       	rjmp	.+54     	; 0x784 <maze_solve+0xe8>
				node_number = node_number + 1;
				turn('L',speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     74e:	e1 e0       	ldi	r30, 0x01	; 1
     750:	be 12       	cpse	r11, r30
     752:	b5 cf       	rjmp	.-150    	; 0x6be <maze_solve+0x22>
     754:	a1 10       	cpse	r10, r1
     756:	13 c0       	rjmp	.+38     	; 0x77e <maze_solve+0xe2>
			{
				directions_solved[node_number] = 'l';
     758:	80 91 bd 01 	lds	r24, 0x01BD
     75c:	90 91 be 01 	lds	r25, 0x01BE
     760:	fc 01       	movw	r30, r24
     762:	e1 54       	subi	r30, 0x41	; 65
     764:	fe 4f       	sbci	r31, 0xFE	; 254
     766:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	90 93 be 01 	sts	0x01BE, r25
     76e:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     772:	b3 01       	movw	r22, r6
     774:	8c e4       	ldi	r24, 0x4C	; 76
     776:	0e 94 c0 04 	call	0x980	; 0x980 <turn>
				Right_trigged = 0;
     77a:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
     77c:	a0 cf       	rjmp	.-192    	; 0x6be <maze_solve+0x22>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
     77e:	f1 e0       	ldi	r31, 0x01	; 1
     780:	af 12       	cpse	r10, r31
     782:	9d cf       	rjmp	.-198    	; 0x6be <maze_solve+0x22>
			{
				directions_solved[node_number] = 'l';
     784:	80 91 bd 01 	lds	r24, 0x01BD
     788:	90 91 be 01 	lds	r25, 0x01BE
     78c:	fc 01       	movw	r30, r24
     78e:	e1 54       	subi	r30, 0x41	; 65
     790:	fe 4f       	sbci	r31, 0xFE	; 254
     792:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	90 93 be 01 	sts	0x01BE, r25
     79a:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     79e:	b3 01       	movw	r22, r6
     7a0:	8c e4       	ldi	r24, 0x4C	; 76
     7a2:	0e 94 c0 04 	call	0x980	; 0x980 <turn>
				Right_trigged = 0;
				Forward_trigged = 0;
     7a6:	a1 2c       	mov	r10, r1
     7a8:	e8 cf       	rjmp	.-48     	; 0x77a <maze_solve+0xde>
			}
		}
		else if (sensor_data_hold & 0b00001) //right trigging
     7aa:	80 ff       	sbrs	r24, 0
     7ac:	76 c0       	rjmp	.+236    	; 0x89a <maze_solve+0x1fe>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     7ae:	64 e6       	ldi	r22, 0x64	; 100
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	84 e6       	ldi	r24, 0x64	; 100
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	29 83       	std	Y+1, r18	; 0x01
     7b8:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
			destination = 0;
     7bc:	00 e0       	ldi	r16, 0x00	; 0
     7be:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     7c0:	29 81       	ldd	r18, Y+1	; 0x01
     7c2:	21 71       	andi	r18, 0x11	; 17
     7c4:	89 f0       	breq	.+34     	; 0x7e8 <maze_solve+0x14c>
			{
				sensor_data_hold = sensor_data_verified();
     7c6:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     7ca:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b10000) && (Left_trigged == 0))
     7cc:	84 ff       	sbrs	r24, 4
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <maze_solve+0x13c>
     7d0:	91 10       	cpse	r9, r1
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <maze_solve+0x13c>
				{
					Left_trigged=1;
     7d4:	99 24       	eor	r9, r9
     7d6:	93 94       	inc	r9
				}
				if (sensor_data_hold == 0b11111)
     7d8:	2f 31       	cpi	r18, 0x1F	; 31
     7da:	99 f7       	brne	.-26     	; 0x7c2 <maze_solve+0x126>
				{
					destination = destination + 1;
     7dc:	0f 5f       	subi	r16, 0xFF	; 255
     7de:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     7e0:	03 33       	cpi	r16, 0x33	; 51
     7e2:	11 05       	cpc	r17, r1
     7e4:	70 f3       	brcs	.-36     	; 0x7c2 <maze_solve+0x126>
     7e6:	8f cf       	rjmp	.-226    	; 0x706 <maze_solve+0x6a>
						goto solv_maze;
					}
				}
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
     7e8:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
			if (sensor_data_hold & 0b00100)
     7ec:	82 fd       	sbrc	r24, 2
     7ee:	b8 c0       	rjmp	.+368    	; 0x960 <__stack+0x61>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     7f0:	91 10       	cpse	r9, r1
     7f2:	25 c0       	rjmp	.+74     	; 0x83e <maze_solve+0x1a2>
     7f4:	a1 10       	cpse	r10, r1
     7f6:	10 c0       	rjmp	.+32     	; 0x818 <maze_solve+0x17c>
			{
				directions_solved[node_number] = 'r';
     7f8:	80 91 bd 01 	lds	r24, 0x01BD
     7fc:	90 91 be 01 	lds	r25, 0x01BE
     800:	fc 01       	movw	r30, r24
     802:	e1 54       	subi	r30, 0x41	; 65
     804:	fe 4f       	sbci	r31, 0xFE	; 254
     806:	c0 82       	st	Z, r12
				node_number = node_number + 1;
     808:	01 96       	adiw	r24, 0x01	; 1
     80a:	90 93 be 01 	sts	0x01BE, r25
     80e:	80 93 bd 01 	sts	0x01BD, r24
				turn('R',speed);
     812:	b3 01       	movw	r22, r6
     814:	82 e5       	ldi	r24, 0x52	; 82
     816:	52 c0       	rjmp	.+164    	; 0x8bc <maze_solve+0x220>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	a8 12       	cpse	r10, r24
     81c:	50 cf       	rjmp	.-352    	; 0x6be <maze_solve+0x22>
			{
				directions_solved[node_number] = 's';
     81e:	80 91 bd 01 	lds	r24, 0x01BD
     822:	90 91 be 01 	lds	r25, 0x01BE
     826:	fc 01       	movw	r30, r24
     828:	e1 54       	subi	r30, 0x41	; 65
     82a:	fe 4f       	sbci	r31, 0xFE	; 254
     82c:	d0 82       	st	Z, r13
				node_number = node_number + 1;
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	90 93 be 01 	sts	0x01BE, r25
     834:	80 93 bd 01 	sts	0x01BD, r24
				turn('S',speed);
     838:	b3 01       	movw	r22, r6
     83a:	83 e5       	ldi	r24, 0x53	; 83
     83c:	29 c0       	rjmp	.+82     	; 0x890 <maze_solve+0x1f4>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     83e:	e1 e0       	ldi	r30, 0x01	; 1
     840:	9e 12       	cpse	r9, r30
     842:	3d cf       	rjmp	.-390    	; 0x6be <maze_solve+0x22>
     844:	a1 10       	cpse	r10, r1
     846:	12 c0       	rjmp	.+36     	; 0x86c <maze_solve+0x1d0>
			{
				directions_solved[node_number] = 'l';
     848:	80 91 bd 01 	lds	r24, 0x01BD
     84c:	90 91 be 01 	lds	r25, 0x01BE
     850:	fc 01       	movw	r30, r24
     852:	e1 54       	subi	r30, 0x41	; 65
     854:	fe 4f       	sbci	r31, 0xFE	; 254
     856:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	90 93 be 01 	sts	0x01BE, r25
     85e:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     862:	b3 01       	movw	r22, r6
     864:	8c e4       	ldi	r24, 0x4C	; 76
     866:	0e 94 c0 04 	call	0x980	; 0x980 <turn>
     86a:	15 c0       	rjmp	.+42     	; 0x896 <maze_solve+0x1fa>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
     86c:	f1 e0       	ldi	r31, 0x01	; 1
     86e:	af 12       	cpse	r10, r31
     870:	26 cf       	rjmp	.-436    	; 0x6be <maze_solve+0x22>
			{
				directions_solved[node_number] = 'l';
     872:	80 91 bd 01 	lds	r24, 0x01BD
     876:	90 91 be 01 	lds	r25, 0x01BE
     87a:	fc 01       	movw	r30, r24
     87c:	e1 54       	subi	r30, 0x41	; 65
     87e:	fe 4f       	sbci	r31, 0xFE	; 254
     880:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	90 93 be 01 	sts	0x01BE, r25
     888:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     88c:	b3 01       	movw	r22, r6
     88e:	8c e4       	ldi	r24, 0x4C	; 76
     890:	0e 94 c0 04 	call	0x980	; 0x980 <turn>
				Left_trigged = 0;
				Forward_trigged = 0;
     894:	a1 2c       	mov	r10, r1
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 'l';
				node_number = node_number + 1;
				turn('L',speed);
				Left_trigged = 0;
     896:	91 2c       	mov	r9, r1
     898:	12 cf       	rjmp	.-476    	; 0x6be <maze_solve+0x22>
				Forward_trigged = 0;
			}
		}
		else if (sensor_data_hold == 0b00000) //-100
     89a:	81 11       	cpse	r24, r1
     89c:	10 cf       	rjmp	.-480    	; 0x6be <maze_solve+0x22>
		{	
			directions_solved[node_number] = 'u';
     89e:	80 91 bd 01 	lds	r24, 0x01BD
     8a2:	90 91 be 01 	lds	r25, 0x01BE
     8a6:	fc 01       	movw	r30, r24
     8a8:	e1 54       	subi	r30, 0x41	; 65
     8aa:	fe 4f       	sbci	r31, 0xFE	; 254
     8ac:	e0 82       	st	Z, r14
			node_number = node_number + 1;
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	90 93 be 01 	sts	0x01BE, r25
     8b4:	80 93 bd 01 	sts	0x01BD, r24
			turn('U',speed);
     8b8:	b3 01       	movw	r22, r6
     8ba:	85 e5       	ldi	r24, 0x55	; 85
     8bc:	0e 94 c0 04 	call	0x980	; 0x980 <turn>
     8c0:	fe ce       	rjmp	.-516    	; 0x6be <maze_solve+0x22>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
			destination = 0;
			while (sensor_data_hold & 0b10001)
			{
				sensor_data_hold = sensor_data_verified();
     8c2:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     8c6:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b00001) && (Right_trigged == 0))
				{
					Right_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
     8c8:	8f 31       	cpi	r24, 0x1F	; 31
     8ca:	c1 f0       	breq	.+48     	; 0x8fc <maze_solve+0x260>
		
		if(sensor_data_hold & 0b10000)  //left trigging 
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
			destination = 0;
			while (sensor_data_hold & 0b10001)
     8cc:	21 71       	andi	r18, 0x11	; 17
     8ce:	c9 f7       	brne	.-14     	; 0x8c2 <maze_solve+0x226>
						set_motors(0,0);
						while(1);
					}
				}
			}
			evaluate_direction(speed);
     8d0:	c3 01       	movw	r24, r6
     8d2:	0e 94 1b 03 	call	0x636	; 0x636 <evaluate_direction>

node_number = 0x00;

	while(1)
	{
		follow_segment(speed);
     8d6:	c3 01       	movw	r24, r6
     8d8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <follow_segment>
		
		sensor_data_hold = sensor_data_verified();
     8dc:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     8e0:	28 2f       	mov	r18, r24
		
		if(sensor_data_hold & 0b10000)  //left trigging 
     8e2:	84 ff       	sbrs	r24, 4
     8e4:	17 c0       	rjmp	.+46     	; 0x914 <__stack+0x15>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     8e6:	64 e6       	ldi	r22, 0x64	; 100
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	84 e6       	ldi	r24, 0x64	; 100
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	29 83       	std	Y+1, r18	; 0x01
     8f0:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
			destination = 0;
     8f4:	00 e0       	ldi	r16, 0x00	; 0
     8f6:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     8f8:	29 81       	ldd	r18, Y+1	; 0x01
     8fa:	e8 cf       	rjmp	.-48     	; 0x8cc <maze_solve+0x230>
				{
					Right_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
				{
					destination = destination + 1;
     8fc:	0f 5f       	subi	r16, 0xFF	; 255
     8fe:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     900:	03 33       	cpi	r16, 0x33	; 51
     902:	11 05       	cpc	r17, r1
     904:	18 f3       	brcs	.-58     	; 0x8cc <maze_solve+0x230>
					{
						set_motors(0,0);
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
     912:	ff cf       	rjmp	.-2      	; 0x912 <__stack+0x13>
					}
				}
			}
			evaluate_direction(speed);
		}
		else if (sensor_data_hold & 0b00001) //right trigging
     914:	80 ff       	sbrs	r24, 0
     916:	1d c0       	rjmp	.+58     	; 0x952 <__stack+0x53>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     918:	64 e6       	ldi	r22, 0x64	; 100
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	84 e6       	ldi	r24, 0x64	; 100
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	29 83       	std	Y+1, r18	; 0x01
     922:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
			destination = 0;
     926:	00 e0       	ldi	r16, 0x00	; 0
     928:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     92a:	29 81       	ldd	r18, Y+1	; 0x01
     92c:	21 71       	andi	r18, 0x11	; 17
     92e:	81 f2       	breq	.-96     	; 0x8d0 <maze_solve+0x234>
			{
				sensor_data_hold = sensor_data_verified();
     930:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     934:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b10000) && (Left_trigged == 0))
				{
					Left_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
     936:	8f 31       	cpi	r24, 0x1F	; 31
     938:	c9 f7       	brne	.-14     	; 0x92c <__stack+0x2d>
				{
					destination = destination + 1;
     93a:	0f 5f       	subi	r16, 0xFF	; 255
     93c:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     93e:	03 33       	cpi	r16, 0x33	; 51
     940:	11 05       	cpc	r17, r1
     942:	a0 f3       	brcs	.-24     	; 0x92c <__stack+0x2d>
					{
						set_motors(0,0);
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
     950:	ff cf       	rjmp	.-2      	; 0x950 <__stack+0x51>
					}
				}
			}
			evaluate_direction(speed);
		}
		else if (sensor_data_hold == 0b00000) //-100
     952:	81 11       	cpse	r24, r1
     954:	c0 cf       	rjmp	.-128    	; 0x8d6 <maze_solve+0x23a>
     956:	bc cf       	rjmp	.-136    	; 0x8d0 <maze_solve+0x234>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     958:	bb 20       	and	r11, r11
     95a:	09 f4       	brne	.+2      	; 0x95e <__stack+0x5f>
     95c:	13 cf       	rjmp	.-474    	; 0x784 <maze_solve+0xe8>
     95e:	04 c0       	rjmp	.+8      	; 0x968 <__stack+0x69>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     960:	99 20       	and	r9, r9
     962:	09 f4       	brne	.+2      	; 0x966 <__stack+0x67>
     964:	5c cf       	rjmp	.-328    	; 0x81e <maze_solve+0x182>
     966:	05 c0       	rjmp	.+10     	; 0x972 <__stack+0x73>
				node_number = node_number + 1;
				turn('L',speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	b8 16       	cp	r11, r24
     96c:	09 f4       	brne	.+2      	; 0x970 <__stack+0x71>
     96e:	0a cf       	rjmp	.-492    	; 0x784 <maze_solve+0xe8>
     970:	04 c0       	rjmp	.+8      	; 0x97a <__stack+0x7b>
				node_number = node_number + 1;
				turn('S',speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     972:	e1 e0       	ldi	r30, 0x01	; 1
     974:	9e 16       	cp	r9, r30
     976:	09 f4       	brne	.+2      	; 0x97a <__stack+0x7b>
     978:	7c cf       	rjmp	.-264    	; 0x872 <maze_solve+0x1d6>
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
			if (sensor_data_hold & 0b00100)
			{
				Forward_trigged = 1;
     97a:	aa 24       	eor	r10, r10
     97c:	a3 94       	inc	r10
     97e:	9f ce       	rjmp	.-706    	; 0x6be <maze_solve+0x22>

00000980 <turn>:

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
	
	if (dir == 'L')
     980:	8c 34       	cpi	r24, 0x4C	; 76
     982:	09 f0       	breq	.+2      	; 0x986 <turn+0x6>
     984:	41 c0       	rjmp	.+130    	; 0xa08 <turn+0x88>
	{
		delay_ms(17); //25
     986:	81 e1       	ldi	r24, 0x11	; 17
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(0,0);
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(10);
     99a:	8a e0       	ldi	r24, 0x0A	; 10
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(-200,-200);
     9a2:	68 e3       	ldi	r22, 0x38	; 56
     9a4:	7f ef       	ldi	r23, 0xFF	; 255
     9a6:	88 e3       	ldi	r24, 0x38	; 56
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(10);
     9ae:	8a e0       	ldi	r24, 0x0A	; 10
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(0,0);
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(10);
     9c2:	8a e0       	ldi	r24, 0x0A	; 10
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		
		set_motors(-90,90);
     9ca:	6a e5       	ldi	r22, 0x5A	; 90
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	86 ea       	ldi	r24, 0xA6	; 166
     9d0:	9f ef       	ldi	r25, 0xFF	; 255
     9d2:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     9d6:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(10);
		
		set_motors(-90,90);
		
		while(!(sensor_data_save & 0b10000))
     9d8:	84 fd       	sbrc	r24, 4
     9da:	03 c0       	rjmp	.+6      	; 0x9e2 <turn+0x62>
		{
			sensor_data_save = sensor_data_verified();
     9dc:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     9e0:	fb cf       	rjmp	.-10     	; 0x9d8 <turn+0x58>
		}
		while(sensor_data_save & 0b10000)
     9e2:	84 ff       	sbrs	r24, 4
     9e4:	03 c0       	rjmp	.+6      	; 0x9ec <turn+0x6c>
		{
			sensor_data_save = sensor_data_verified();
     9e6:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     9ea:	fb cf       	rjmp	.-10     	; 0x9e2 <turn+0x62>
		}
		while(!(sensor_data_save & 0b00010))
     9ec:	81 fd       	sbrc	r24, 1
     9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <turn+0x76>
		{
			sensor_data_save = sensor_data_verified();
     9f0:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     9f4:	fb cf       	rjmp	.-10     	; 0x9ec <turn+0x6c>
		}
		
		set_motors(0,0);
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(1); //30
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	9e c0       	rjmp	.+316    	; 0xb44 <turn+0x1c4>
		delay_ms(10);
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);
	}
	else if (dir == 'R')
     a08:	82 35       	cpi	r24, 0x52	; 82
     a0a:	09 f0       	breq	.+2      	; 0xa0e <turn+0x8e>
     a0c:	55 c0       	rjmp	.+170    	; 0xab8 <turn+0x138>
	{
		delay_ms(17);  //25
     a0e:	81 e1       	ldi	r24, 0x11	; 17
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(0,0);
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(10);
     a22:	8a e0       	ldi	r24, 0x0A	; 10
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(-200,-200);
     a2a:	68 e3       	ldi	r22, 0x38	; 56
     a2c:	7f ef       	ldi	r23, 0xFF	; 255
     a2e:	88 e3       	ldi	r24, 0x38	; 56
     a30:	9f ef       	ldi	r25, 0xFF	; 255
     a32:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(10);
     a36:	8a e0       	ldi	r24, 0x0A	; 10
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(0,0);
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(10);
     a4a:	8a e0       	ldi	r24, 0x0A	; 10
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		
		set_motors(90,-90);
     a52:	66 ea       	ldi	r22, 0xA6	; 166
     a54:	7f ef       	ldi	r23, 0xFF	; 255
     a56:	8a e5       	ldi	r24, 0x5A	; 90
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     a5e:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(10);
		
		set_motors(90,-90);
		
		while(!(sensor_data_save & 0b00001))
     a60:	80 fd       	sbrc	r24, 0
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <turn+0xea>
		{
			sensor_data_save = sensor_data_verified();
     a64:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     a68:	fb cf       	rjmp	.-10     	; 0xa60 <turn+0xe0>
		}
		while(sensor_data_save & 0b00001)
     a6a:	80 ff       	sbrs	r24, 0
     a6c:	03 c0       	rjmp	.+6      	; 0xa74 <turn+0xf4>
		{
			sensor_data_save = sensor_data_verified();
     a6e:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     a72:	fb cf       	rjmp	.-10     	; 0xa6a <turn+0xea>
		}
		while(!(sensor_data_save & 0b01000))
     a74:	83 fd       	sbrc	r24, 3
     a76:	03 c0       	rjmp	.+6      	; 0xa7e <turn+0xfe>
		{
			sensor_data_save = sensor_data_verified();
     a78:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     a7c:	fb cf       	rjmp	.-10     	; 0xa74 <turn+0xf4>
		}
		//delay_ms(7); // external 
		set_motors(0,0);
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(1);//30
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(-100,100);
     a92:	64 e6       	ldi	r22, 0x64	; 100
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	8c e9       	ldi	r24, 0x9C	; 156
     a98:	9f ef       	ldi	r25, 0xFF	; 255
     a9a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(10);
     a9e:	8a e0       	ldi	r24, 0x0A	; 10
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(0,0);
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(10);
     ab2:	8a e0       	ldi	r24, 0x0A	; 10
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	bb c0       	rjmp	.+374    	; 0xc2e <turn+0x2ae>
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);

	}
	else if (dir == 'S')
     ab8:	83 35       	cpi	r24, 0x53	; 83
     aba:	09 f4       	brne	.+2      	; 0xabe <turn+0x13e>
     abc:	ba c0       	rjmp	.+372    	; 0xc32 <turn+0x2b2>
		//delay_ms(10);
		//set_motors(0,0);
		//delay_ms(50);
		////follow_segment(speed);
	}
	else if (dir == 'U')
     abe:	85 35       	cpi	r24, 0x55	; 85
     ac0:	09 f0       	breq	.+2      	; 0xac4 <turn+0x144>
     ac2:	47 c0       	rjmp	.+142    	; 0xb52 <turn+0x1d2>
	{
		delay_ms(25);
     ac4:	89 e1       	ldi	r24, 0x19	; 25
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(0,0);
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(10);
     ad8:	8a e0       	ldi	r24, 0x0A	; 10
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(-200,-200);
     ae0:	68 e3       	ldi	r22, 0x38	; 56
     ae2:	7f ef       	ldi	r23, 0xFF	; 255
     ae4:	88 e3       	ldi	r24, 0x38	; 56
     ae6:	9f ef       	ldi	r25, 0xFF	; 255
     ae8:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(10);
     aec:	8a e0       	ldi	r24, 0x0A	; 10
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(0,0);
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(10);
     b00:	8a e0       	ldi	r24, 0x0A	; 10
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		
		set_motors(-90,90);
     b08:	6a e5       	ldi	r22, 0x5A	; 90
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	86 ea       	ldi	r24, 0xA6	; 166
     b0e:	9f ef       	ldi	r25, 0xFF	; 255
     b10:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     b14:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(10);
		
		set_motors(-90,90);
		
		while(!(sensor_data_save & 0b10000))
     b16:	84 fd       	sbrc	r24, 4
     b18:	03 c0       	rjmp	.+6      	; 0xb20 <turn+0x1a0>
		{
			sensor_data_save = sensor_data_verified();
     b1a:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     b1e:	fb cf       	rjmp	.-10     	; 0xb16 <turn+0x196>
		}
		while(sensor_data_save & 0b10000)
     b20:	84 ff       	sbrs	r24, 4
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <turn+0x1aa>
		{
			sensor_data_save = sensor_data_verified();
     b24:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     b28:	fb cf       	rjmp	.-10     	; 0xb20 <turn+0x1a0>
		}
		while(!(sensor_data_save & 0b00010))
     b2a:	81 fd       	sbrc	r24, 1
     b2c:	03 c0       	rjmp	.+6      	; 0xb34 <turn+0x1b4>
		{
			sensor_data_save = sensor_data_verified();
     b2e:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     b32:	fb cf       	rjmp	.-10     	; 0xb2a <turn+0x1aa>
		}
		
		set_motors(0,0);
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(10);//30
     b40:	8a e0       	ldi	r24, 0x0A	; 10
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(100,-100);
     b48:	6c e9       	ldi	r22, 0x9C	; 156
     b4a:	7f ef       	ldi	r23, 0xFF	; 255
     b4c:	84 e6       	ldi	r24, 0x64	; 100
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a4 cf       	rjmp	.-184    	; 0xa9a <turn+0x11a>
		delay_ms(10);
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);
	}
	else if (dir == 'D')
     b52:	84 34       	cpi	r24, 0x44	; 68
     b54:	09 f0       	breq	.+2      	; 0xb58 <turn+0x1d8>
     b56:	6d c0       	rjmp	.+218    	; 0xc32 <turn+0x2b2>
	{
		uint16_t sensor_data_hold;
		set_motors(0,0);
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(50);
     b64:	82 e3       	ldi	r24, 0x32	; 50
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		//set_motors(-100,-100);
		//delay_ms(50);
		//set_motors(0,0);
		//process_array();
		delay_ms(100);
     b6c:	84 e6       	ldi	r24, 0x64	; 100
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(-50,-50);
     b74:	6e ec       	ldi	r22, 0xCE	; 206
     b76:	7f ef       	ldi	r23, 0xFF	; 255
     b78:	8e ec       	ldi	r24, 0xCE	; 206
     b7a:	9f ef       	ldi	r25, 0xFF	; 255
     b7c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		sensor_data_hold = sensor_data_verified();
		while((sensor_data_hold & 0b10001) == 0b10001)
		{
			sensor_data_hold = sensor_data_verified();
     b80:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     b84:	90 e0       	ldi	r25, 0x00	; 0
		//set_motors(0,0);
		//process_array();
		delay_ms(100);
		set_motors(-50,-50);
		sensor_data_hold = sensor_data_verified();
		while((sensor_data_hold & 0b10001) == 0b10001)
     b86:	81 71       	andi	r24, 0x11	; 17
     b88:	99 27       	eor	r25, r25
     b8a:	41 97       	sbiw	r24, 0x11	; 17
     b8c:	c9 f3       	breq	.-14     	; 0xb80 <turn+0x200>
		{
			sensor_data_hold = sensor_data_verified();
		}
		set_motors(0,0);
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(50);
     b9a:	82 e3       	ldi	r24, 0x32	; 50
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(50,50);
     ba2:	62 e3       	ldi	r22, 0x32	; 50
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	82 e3       	ldi	r24, 0x32	; 50
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(150);
     bae:	86 e9       	ldi	r24, 0x96	; 150
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		//set_motors(-100,-100);
		//delay_ms(50);
		set_motors(0,0);
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(50);
     bc2:	82 e3       	ldi	r24, 0x32	; 50
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(-80,80);
     bca:	60 e5       	ldi	r22, 0x50	; 80
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	80 eb       	ldi	r24, 0xB0	; 176
     bd0:	9f ef       	ldi	r25, 0xFF	; 255
     bd2:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(50);
     bd6:	82 e3       	ldi	r24, 0x32	; 50
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		while((sensor_data_verified() & 0b10000) != 0x00);
     bde:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     be2:	84 fd       	sbrc	r24, 4
     be4:	fc cf       	rjmp	.-8      	; 0xbde <turn+0x25e>
		while((sensor_data_verified() & 0b10000) != 0b10000);
     be6:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     bea:	84 ff       	sbrs	r24, 4
     bec:	fc cf       	rjmp	.-8      	; 0xbe6 <turn+0x266>
		while((sensor_data_verified() & 0b00010) != 0b00010);
     bee:	0e 94 88 02 	call	0x510	; 0x510 <sensor_data_verified>
     bf2:	81 ff       	sbrs	r24, 1
     bf4:	fc cf       	rjmp	.-8      	; 0xbee <turn+0x26e>
		////while(sensor_data() & (3<<3)) != (3<<3));
		//delay_ms(20);
		//set_motors(0,0);
		//delay_ms(50);
		
		set_motors(0,0);
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(10); //30
     c02:	8a e0       	ldi	r24, 0x0A	; 10
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(100,-100);
     c0a:	6c e9       	ldi	r22, 0x9C	; 156
     c0c:	7f ef       	ldi	r23, 0xFF	; 255
     c0e:	84 e6       	ldi	r24, 0x64	; 100
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(10);
     c16:	8a e0       	ldi	r24, 0x0A	; 10
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
		set_motors(0,0);
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <set_motors>
		delay_ms(50);
     c2a:	82 e3       	ldi	r24, 0x32	; 50
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <delay_ms>
     c32:	08 95       	ret

00000c34 <_ZN15OrangutanAnalog7setModeEh>:
     c34:	88 23       	and	r24, r24
     c36:	21 f4       	brne	.+8      	; 0xc40 <_ZN15OrangutanAnalog7setModeEh+0xc>
     c38:	80 91 7c 00 	lds	r24, 0x007C
     c3c:	8f 7d       	andi	r24, 0xDF	; 223
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <_ZN15OrangutanAnalog7setModeEh+0x12>
     c40:	80 91 7c 00 	lds	r24, 0x007C
     c44:	80 62       	ori	r24, 0x20	; 32
     c46:	80 93 7c 00 	sts	0x007C, r24
     c4a:	08 95       	ret

00000c4c <_ZN15OrangutanAnalog7getModeEv>:
     c4c:	80 91 7c 00 	lds	r24, 0x007C
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	25 e0       	ldi	r18, 0x05	; 5
     c54:	95 95       	asr	r25
     c56:	87 95       	ror	r24
     c58:	2a 95       	dec	r18
     c5a:	e1 f7       	brne	.-8      	; 0xc54 <_ZN15OrangutanAnalog7getModeEv+0x8>
     c5c:	81 70       	andi	r24, 0x01	; 1
     c5e:	08 95       	ret

00000c60 <_ZN15OrangutanAnalog12isConvertingEv>:
     c60:	80 91 7a 00 	lds	r24, 0x007A
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	36 e0       	ldi	r19, 0x06	; 6
     c68:	95 95       	asr	r25
     c6a:	87 95       	ror	r24
     c6c:	3a 95       	dec	r19
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <_ZN15OrangutanAnalog12isConvertingEv+0x8>
     c70:	81 70       	andi	r24, 0x01	; 1
     c72:	08 95       	ret

00000c74 <_ZN15OrangutanAnalog16conversionResultEv>:
     c74:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN15OrangutanAnalog7getModeEv>
     c78:	88 23       	and	r24, r24
     c7a:	21 f0       	breq	.+8      	; 0xc84 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     c7c:	20 91 79 00 	lds	r18, 0x0079
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	04 c0       	rjmp	.+8      	; 0xc8c <_ZN15OrangutanAnalog16conversionResultEv+0x18>
     c84:	20 91 78 00 	lds	r18, 0x0078
     c88:	30 91 79 00 	lds	r19, 0x0079
     c8c:	c9 01       	movw	r24, r18
     c8e:	08 95       	ret

00000c90 <_ZN15OrangutanAnalog15startConversionEhh>:
     c90:	80 32       	cpi	r24, 0x20	; 32
     c92:	b0 f4       	brcc	.+44     	; 0xcc0 <_ZN15OrangutanAnalog15startConversionEhh+0x30>
     c94:	97 e8       	ldi	r25, 0x87	; 135
     c96:	90 93 7a 00 	sts	0x007A, r25
     c9a:	90 91 7c 00 	lds	r25, 0x007C
     c9e:	29 2f       	mov	r18, r25
     ca0:	20 64       	ori	r18, 0x40	; 64
     ca2:	66 23       	and	r22, r22
     ca4:	11 f0       	breq	.+4      	; 0xcaa <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     ca6:	90 6c       	ori	r25, 0xC0	; 192
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <_ZN15OrangutanAnalog15startConversionEhh+0x1e>
     caa:	92 2f       	mov	r25, r18
     cac:	9f 77       	andi	r25, 0x7F	; 127
     cae:	90 7e       	andi	r25, 0xE0	; 224
     cb0:	98 2b       	or	r25, r24
     cb2:	90 93 7c 00 	sts	0x007C, r25
     cb6:	80 91 7a 00 	lds	r24, 0x007A
     cba:	80 64       	ori	r24, 0x40	; 64
     cbc:	80 93 7a 00 	sts	0x007A, r24
     cc0:	08 95       	ret

00000cc2 <_ZN15OrangutanAnalog11readAverageEhj>:
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e6       	ldi	r30, 0x67	; 103
     cc8:	f6 e0       	ldi	r31, 0x06	; 6
     cca:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__prologue_saves__+0x14>
     cce:	6b 01       	movw	r12, r22
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN15OrangutanAnalog15startConversionEhh>
     cd6:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN15OrangutanAnalog12isConvertingEv>
     cda:	88 23       	and	r24, r24
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     cde:	e6 01       	movw	r28, r12
     ce0:	ee 24       	eor	r14, r14
     ce2:	ff 24       	eor	r15, r15
     ce4:	87 01       	movw	r16, r14
     ce6:	80 91 7a 00 	lds	r24, 0x007A
     cea:	80 64       	ori	r24, 0x40	; 64
     cec:	80 93 7a 00 	sts	0x007A, r24
     cf0:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN15OrangutanAnalog12isConvertingEv>
     cf4:	88 23       	and	r24, r24
     cf6:	e1 f7       	brne	.-8      	; 0xcf0 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     cf8:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN15OrangutanAnalog16conversionResultEv>
     cfc:	a0 e0       	ldi	r26, 0x00	; 0
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e8 0e       	add	r14, r24
     d02:	f9 1e       	adc	r15, r25
     d04:	0a 1f       	adc	r16, r26
     d06:	1b 1f       	adc	r17, r27
     d08:	21 97       	sbiw	r28, 0x01	; 1
     d0a:	69 f7       	brne	.-38     	; 0xce6 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     d0c:	c6 01       	movw	r24, r12
     d0e:	96 95       	lsr	r25
     d10:	87 95       	ror	r24
     d12:	20 e4       	ldi	r18, 0x40	; 64
     d14:	c2 16       	cp	r12, r18
     d16:	d1 04       	cpc	r13, r1
     d18:	40 f4       	brcc	.+16     	; 0xd2a <_ZN15OrangutanAnalog11readAverageEhj+0x68>
     d1a:	8e 0d       	add	r24, r14
     d1c:	9f 1d       	adc	r25, r15
     d1e:	6c 2d       	mov	r22, r12
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodhi4>
     d26:	cb 01       	movw	r24, r22
     d28:	0d c0       	rjmp	.+26     	; 0xd44 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     d2a:	bc 01       	movw	r22, r24
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	6e 0d       	add	r22, r14
     d32:	7f 1d       	adc	r23, r15
     d34:	80 1f       	adc	r24, r16
     d36:	91 1f       	adc	r25, r17
     d38:	96 01       	movw	r18, r12
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	0e 94 c9 13 	call	0x2792	; 0x2792 <__udivmodsi4>
     d42:	c9 01       	movw	r24, r18
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	e8 e0       	ldi	r30, 0x08	; 8
     d4a:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__epilogue_restores__+0x14>

00000d4e <_ZN15OrangutanAnalog12toMillivoltsEj>:
     d4e:	a3 e0       	ldi	r26, 0x03	; 3
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ed ea       	ldi	r30, 0xAD	; 173
     d54:	f6 e0       	ldi	r31, 0x06	; 6
     d56:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__prologue_saves__+0x1e>
     d5a:	bc 01       	movw	r22, r24
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	20 91 00 01 	lds	r18, 0x0100
     d64:	30 91 01 01 	lds	r19, 0x0101
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	0e 94 85 13 	call	0x270a	; 0x270a <__mulsi3>
     d70:	18 2f       	mov	r17, r24
     d72:	69 83       	std	Y+1, r22	; 0x01
     d74:	7a 83       	std	Y+2, r23	; 0x02
     d76:	9b 83       	std	Y+3, r25	; 0x03
     d78:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN15OrangutanAnalog7getModeEv>
     d7c:	69 81       	ldd	r22, Y+1	; 0x01
     d7e:	7a 81       	ldd	r23, Y+2	; 0x02
     d80:	9b 81       	ldd	r25, Y+3	; 0x03
     d82:	88 23       	and	r24, r24
     d84:	71 f0       	breq	.+28     	; 0xda2 <_ZN15OrangutanAnalog12toMillivoltsEj+0x54>
     d86:	9b 01       	movw	r18, r22
     d88:	41 2f       	mov	r20, r17
     d8a:	59 2f       	mov	r21, r25
     d8c:	ca 01       	movw	r24, r20
     d8e:	b9 01       	movw	r22, r18
     d90:	61 58       	subi	r22, 0x81	; 129
     d92:	7f 4f       	sbci	r23, 0xFF	; 255
     d94:	8f 4f       	sbci	r24, 0xFF	; 255
     d96:	9f 4f       	sbci	r25, 0xFF	; 255
     d98:	2f ef       	ldi	r18, 0xFF	; 255
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	40 e0       	ldi	r20, 0x00	; 0
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	0d c0       	rjmp	.+26     	; 0xdbc <_ZN15OrangutanAnalog12toMillivoltsEj+0x6e>
     da2:	9b 01       	movw	r18, r22
     da4:	41 2f       	mov	r20, r17
     da6:	59 2f       	mov	r21, r25
     da8:	ca 01       	movw	r24, r20
     daa:	b9 01       	movw	r22, r18
     dac:	61 50       	subi	r22, 0x01	; 1
     dae:	7e 4f       	sbci	r23, 0xFE	; 254
     db0:	8f 4f       	sbci	r24, 0xFF	; 255
     db2:	9f 4f       	sbci	r25, 0xFF	; 255
     db4:	2f ef       	ldi	r18, 0xFF	; 255
     db6:	33 e0       	ldi	r19, 0x03	; 3
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	0e 94 c9 13 	call	0x2792	; 0x2792 <__udivmodsi4>
     dc0:	c9 01       	movw	r24, r18
     dc2:	23 96       	adiw	r28, 0x03	; 3
     dc4:	e3 e0       	ldi	r30, 0x03	; 3
     dc6:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__+0x1e>

00000dca <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     dca:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_ZN15OrangutanAnalog11readAverageEhj>
     dce:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_ZN15OrangutanAnalog12toMillivoltsEj>
     dd2:	08 95       	ret

00000dd4 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN15OrangutanAnalog7getModeEv>
     dde:	18 2f       	mov	r17, r24
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN15OrangutanAnalog7setModeEh>
     de6:	86 e0       	ldi	r24, 0x06	; 6
     de8:	6a e0       	ldi	r22, 0x0A	; 10
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	0e 94 e5 06 	call	0xdca	; 0xdca <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     df0:	ec 01       	movw	r28, r24
     df2:	81 2f       	mov	r24, r17
     df4:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN15OrangutanAnalog7setModeEh>
     df8:	9e 01       	movw	r18, r28
     dfa:	22 0f       	add	r18, r18
     dfc:	33 1f       	adc	r19, r19
     dfe:	2c 0f       	add	r18, r28
     e00:	3d 1f       	adc	r19, r29
     e02:	2f 5f       	subi	r18, 0xFF	; 255
     e04:	3f 4f       	sbci	r19, 0xFF	; 255
     e06:	36 95       	lsr	r19
     e08:	27 95       	ror	r18
     e0a:	c9 01       	movw	r24, r18
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	08 95       	ret

00000e14 <read_battery_millivolts_3pi>:
     e14:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     e18:	08 95       	ret

00000e1a <_ZL16currentCharacterv>:
     e1a:	90 91 4f 01 	lds	r25, 0x014F
     e1e:	e0 91 4b 01 	lds	r30, 0x014B
     e22:	f0 91 4c 01 	lds	r31, 0x014C
     e26:	99 23       	and	r25, r25
     e28:	11 f0       	breq	.+4      	; 0xe2e <_ZL16currentCharacterv+0x14>
     e2a:	84 91       	lpm	r24, Z
     e2c:	01 c0       	rjmp	.+2      	; 0xe30 <_ZL16currentCharacterv+0x16>
     e2e:	80 81       	ld	r24, Z
     e30:	28 2f       	mov	r18, r24
     e32:	21 54       	subi	r18, 0x41	; 65
     e34:	2a 31       	cpi	r18, 0x1A	; 26
     e36:	10 f4       	brcc	.+4      	; 0xe3c <_ZL16currentCharacterv+0x22>
     e38:	80 5e       	subi	r24, 0xE0	; 224
     e3a:	08 95       	ret
     e3c:	80 32       	cpi	r24, 0x20	; 32
     e3e:	71 f4       	brne	.+28     	; 0xe5c <_ZL16currentCharacterv+0x42>
     e40:	20 91 4b 01 	lds	r18, 0x014B
     e44:	30 91 4c 01 	lds	r19, 0x014C
     e48:	a9 01       	movw	r20, r18
     e4a:	4f 5f       	subi	r20, 0xFF	; 255
     e4c:	5f 4f       	sbci	r21, 0xFF	; 255
     e4e:	50 93 4c 01 	sts	0x014C, r21
     e52:	40 93 4b 01 	sts	0x014B, r20
     e56:	21 15       	cp	r18, r1
     e58:	31 05       	cpc	r19, r1
     e5a:	09 f7       	brne	.-62     	; 0xe1e <_ZL16currentCharacterv+0x4>
     e5c:	08 95       	ret

00000e5e <_ZL9getNumberv>:
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZL16currentCharacterv>
     e6a:	c0 e0       	ldi	r28, 0x00	; 0
     e6c:	d0 e0       	ldi	r29, 0x00	; 0
     e6e:	1b c0       	rjmp	.+54     	; 0xea6 <_ZL9getNumberv+0x48>
     e70:	9e 01       	movw	r18, r28
     e72:	22 0f       	add	r18, r18
     e74:	33 1f       	adc	r19, r19
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	cc 0f       	add	r28, r28
     e7a:	dd 1f       	adc	r29, r29
     e7c:	9a 95       	dec	r25
     e7e:	e1 f7       	brne	.-8      	; 0xe78 <_ZL9getNumberv+0x1a>
     e80:	c2 0f       	add	r28, r18
     e82:	d3 1f       	adc	r29, r19
     e84:	99 27       	eor	r25, r25
     e86:	87 fd       	sbrc	r24, 7
     e88:	90 95       	com	r25
     e8a:	c8 0f       	add	r28, r24
     e8c:	d9 1f       	adc	r29, r25
     e8e:	e0 97       	sbiw	r28, 0x30	; 48
     e90:	80 91 4b 01 	lds	r24, 0x014B
     e94:	90 91 4c 01 	lds	r25, 0x014C
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	90 93 4c 01 	sts	0x014C, r25
     e9e:	80 93 4b 01 	sts	0x014B, r24
     ea2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZL16currentCharacterv>
     ea6:	98 2f       	mov	r25, r24
     ea8:	90 53       	subi	r25, 0x30	; 48
     eaa:	9a 30       	cpi	r25, 0x0A	; 10
     eac:	08 f3       	brcs	.-62     	; 0xe70 <_ZL9getNumberv+0x12>
     eae:	ce 01       	movw	r24, r28
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	08 95       	ret

00000eba <_ZN15OrangutanBuzzer5init2Ev>:
     eba:	10 92 6f 00 	sts	0x006F, r1
     ebe:	83 e2       	ldi	r24, 0x23	; 35
     ec0:	80 93 80 00 	sts	0x0080, r24
     ec4:	81 e1       	ldi	r24, 0x11	; 17
     ec6:	80 93 81 00 	sts	0x0081, r24
     eca:	10 92 82 00 	sts	0x0082, r1
     ece:	80 e1       	ldi	r24, 0x10	; 16
     ed0:	97 e2       	ldi	r25, 0x27	; 39
     ed2:	90 93 89 00 	sts	0x0089, r25
     ed6:	80 93 88 00 	sts	0x0088, r24
     eda:	10 92 8b 00 	sts	0x008B, r1
     ede:	10 92 8a 00 	sts	0x008A, r1
     ee2:	22 9a       	sbi	0x04, 2	; 4
     ee4:	78 94       	sei
     ee6:	08 95       	ret

00000ee8 <_ZN15OrangutanBuzzer4initEv>:
     ee8:	80 91 4a 01 	lds	r24, 0x014A
     eec:	88 23       	and	r24, r24
     eee:	29 f4       	brne	.+10     	; 0xefa <_ZN15OrangutanBuzzer4initEv+0x12>
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	80 93 4a 01 	sts	0x014A, r24
     ef6:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN15OrangutanBuzzer5init2Ev>
     efa:	08 95       	ret

00000efc <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     efc:	a0 e0       	ldi	r26, 0x00	; 0
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e4 e8       	ldi	r30, 0x84	; 132
     f02:	f7 e0       	ldi	r31, 0x07	; 7
     f04:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__prologue_saves__+0xc>
     f08:	8c 01       	movw	r16, r24
     f0a:	5b 01       	movw	r10, r22
     f0c:	e4 2e       	mov	r14, r20
     f0e:	0e 94 74 07 	call	0xee8	; 0xee8 <_ZN15OrangutanBuzzer4initEv>
     f12:	10 92 02 01 	sts	0x0102, r1
     f16:	17 ff       	sbrs	r17, 7
     f18:	04 c0       	rjmp	.+8      	; 0xf22 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x26>
     f1a:	1f 77       	andi	r17, 0x7F	; 127
     f1c:	aa e0       	ldi	r26, 0x0A	; 10
     f1e:	fa 2e       	mov	r15, r26
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
     f22:	ff 24       	eor	r15, r15
     f24:	f3 94       	inc	r15
     f26:	c0 90 81 00 	lds	r12, 0x0081
     f2a:	dd 24       	eor	r13, r13
     f2c:	28 ef       	ldi	r18, 0xF8	; 248
     f2e:	c2 22       	and	r12, r18
     f30:	dd 24       	eor	r13, r13
     f32:	88 ec       	ldi	r24, 0xC8	; 200
     f34:	3f 2d       	mov	r19, r15
     f36:	38 9f       	mul	r19, r24
     f38:	c0 01       	movw	r24, r0
     f3a:	11 24       	eor	r1, r1
     f3c:	80 17       	cp	r24, r16
     f3e:	91 07       	cpc	r25, r17
     f40:	d8 f4       	brcc	.+54     	; 0xf78 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x7c>
     f42:	e8 01       	movw	r28, r16
     f44:	67 e2       	ldi	r22, 0x27	; 39
     f46:	01 31       	cpi	r16, 0x11	; 17
     f48:	16 07       	cpc	r17, r22
     f4a:	10 f0       	brcs	.+4      	; 0xf50 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x54>
     f4c:	c0 e1       	ldi	r28, 0x10	; 16
     f4e:	d7 e2       	ldi	r29, 0x27	; 39
     f50:	be 01       	movw	r22, r28
     f52:	76 95       	lsr	r23
     f54:	67 95       	ror	r22
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	60 58       	subi	r22, 0x80	; 128
     f5c:	79 46       	sbci	r23, 0x69	; 105
     f5e:	87 46       	sbci	r24, 0x67	; 103
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	9e 01       	movw	r18, r28
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	0e 94 c9 13 	call	0x2792	; 0x2792 <__udivmodsi4>
     f6c:	89 01       	movw	r16, r18
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	c8 2a       	or	r12, r24
     f74:	d9 2a       	or	r13, r25
     f76:	2c c0       	rjmp	.+88     	; 0xfd0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd4>
     f78:	98 e2       	ldi	r25, 0x28	; 40
     f7a:	f9 9e       	mul	r15, r25
     f7c:	90 2d       	mov	r25, r0
     f7e:	11 24       	eor	r1, r1
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	89 2e       	mov	r8, r25
     f84:	e4 01       	movw	r28, r8
     f86:	4e 01       	movw	r8, r28
     f88:	98 2e       	mov	r9, r24
     f8a:	e4 01       	movw	r28, r8
     f8c:	80 16       	cp	r8, r16
     f8e:	91 06       	cpc	r9, r17
     f90:	08 f4       	brcc	.+2      	; 0xf94 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x98>
     f92:	e8 01       	movw	r28, r16
     f94:	be 01       	movw	r22, r28
     f96:	76 95       	lsr	r23
     f98:	67 95       	ror	r22
     f9a:	9e 01       	movw	r18, r28
     f9c:	40 e0       	ldi	r20, 0x00	; 0
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	8f 2d       	mov	r24, r15
     fa2:	8a 30       	cpi	r24, 0x0A	; 10
     fa4:	39 f4       	brne	.+14     	; 0xfb4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb8>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	60 5e       	subi	r22, 0xE0	; 224
     fac:	73 44       	sbci	r23, 0x43	; 67
     fae:	81 44       	sbci	r24, 0x41	; 65
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	06 c0       	rjmp	.+12     	; 0xfc0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc4>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	60 53       	subi	r22, 0x30	; 48
     fba:	7d 4e       	sbci	r23, 0xED	; 237
     fbc:	8c 4e       	sbci	r24, 0xEC	; 236
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	0e 94 c9 13 	call	0x2792	; 0x2792 <__udivmodsi4>
     fc4:	89 01       	movw	r16, r18
     fc6:	52 e0       	ldi	r21, 0x02	; 2
     fc8:	85 2e       	mov	r8, r21
     fca:	91 2c       	mov	r9, r1
     fcc:	c8 28       	or	r12, r8
     fce:	d9 28       	or	r13, r9
     fd0:	2f 2d       	mov	r18, r15
     fd2:	2a 30       	cpi	r18, 0x0A	; 10
     fd4:	39 f4       	brne	.+14     	; 0xfe4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe8>
     fd6:	ce 01       	movw	r24, r28
     fd8:	05 96       	adiw	r24, 0x05	; 5
     fda:	6a e0       	ldi	r22, 0x0A	; 10
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodhi4>
     fe2:	eb 01       	movw	r28, r22
     fe4:	33 e0       	ldi	r19, 0x03	; 3
     fe6:	c8 3e       	cpi	r28, 0xE8	; 232
     fe8:	d3 07       	cpc	r29, r19
     fea:	79 f0       	breq	.+30     	; 0x100a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x10e>
     fec:	be 01       	movw	r22, r28
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	95 01       	movw	r18, r10
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	0e 94 85 13 	call	0x270a	; 0x270a <__mulsi3>
     ffc:	28 ee       	ldi	r18, 0xE8	; 232
     ffe:	33 e0       	ldi	r19, 0x03	; 3
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__divmodsi4>
    1008:	01 c0       	rjmp	.+2      	; 0x100c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    100a:	95 01       	movw	r18, r10
    100c:	10 92 6f 00 	sts	0x006F, r1
    1010:	c0 92 81 00 	sts	0x0081, r12
    1014:	10 93 89 00 	sts	0x0089, r17
    1018:	00 93 88 00 	sts	0x0088, r16
    101c:	40 91 88 00 	lds	r20, 0x0088
    1020:	50 91 89 00 	lds	r21, 0x0089
    1024:	6e 2d       	mov	r22, r14
    1026:	60 31       	cpi	r22, 0x10	; 16
    1028:	08 f0       	brcs	.+2      	; 0x102c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    102a:	6f e0       	ldi	r22, 0x0F	; 15
    102c:	80 e1       	ldi	r24, 0x10	; 16
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	86 1b       	sub	r24, r22
    1032:	91 09       	sbc	r25, r1
    1034:	ba 01       	movw	r22, r20
    1036:	02 c0       	rjmp	.+4      	; 0x103c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1038:	76 95       	lsr	r23
    103a:	67 95       	ror	r22
    103c:	8a 95       	dec	r24
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1040:	70 93 8b 00 	sts	0x008B, r23
    1044:	60 93 8a 00 	sts	0x008A, r22
    1048:	30 93 52 01 	sts	0x0152, r19
    104c:	20 93 51 01 	sts	0x0151, r18
    1050:	86 b3       	in	r24, 0x16	; 22
    1052:	8f ef       	ldi	r24, 0xFF	; 255
    1054:	86 bb       	out	0x16, r24	; 22
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	80 93 6f 00 	sts	0x006F, r24
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	ec e0       	ldi	r30, 0x0C	; 12
    1062:	0c 94 37 14 	jmp	0x286e	; 0x286e <__epilogue_restores__+0xc>

00001066 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1066:	9b 01       	movw	r18, r22
    1068:	8f 3f       	cpi	r24, 0xFF	; 255
    106a:	11 f0       	breq	.+4      	; 0x1070 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa>
    106c:	44 23       	and	r20, r20
    106e:	29 f4       	brne	.+10     	; 0x107a <_ZN15OrangutanBuzzer8playNoteEhjh+0x14>
    1070:	88 ee       	ldi	r24, 0xE8	; 232
    1072:	93 e0       	ldi	r25, 0x03	; 3
    1074:	b9 01       	movw	r22, r18
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	49 c0       	rjmp	.+146    	; 0x110c <_ZN15OrangutanBuzzer8playNoteEhjh+0xa6>
    107a:	81 31       	cpi	r24, 0x11	; 17
    107c:	30 f0       	brcs	.+12     	; 0x108a <_ZN15OrangutanBuzzer8playNoteEhjh+0x24>
    107e:	58 2f       	mov	r21, r24
    1080:	50 51       	subi	r21, 0x10	; 16
    1082:	50 36       	cpi	r21, 0x60	; 96
    1084:	18 f0       	brcs	.+6      	; 0x108c <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    1086:	5f e5       	ldi	r21, 0x5F	; 95
    1088:	01 c0       	rjmp	.+2      	; 0x108c <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	85 2f       	mov	r24, r21
    108e:	6c e0       	ldi	r22, 0x0C	; 12
    1090:	0e 94 95 13 	call	0x272a	; 0x272a <__udivmodqi4>
    1094:	a8 2f       	mov	r26, r24
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e4 ef       	ldi	r30, 0xF4	; 244
    109a:	ff ef       	ldi	r31, 0xFF	; 255
    109c:	ae 9f       	mul	r26, r30
    109e:	b0 01       	movw	r22, r0
    10a0:	af 9f       	mul	r26, r31
    10a2:	70 0d       	add	r23, r0
    10a4:	be 9f       	mul	r27, r30
    10a6:	70 0d       	add	r23, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	65 0f       	add	r22, r21
    10ac:	71 1d       	adc	r23, r1
    10ae:	6c 30       	cpi	r22, 0x0C	; 12
    10b0:	71 05       	cpc	r23, r1
    10b2:	40 f4       	brcc	.+16     	; 0x10c4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5e>
    10b4:	fb 01       	movw	r30, r22
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	e4 5f       	subi	r30, 0xF4	; 244
    10bc:	fe 4f       	sbci	r31, 0xFE	; 254
    10be:	60 81       	ld	r22, Z
    10c0:	71 81       	ldd	r23, Z+1	; 0x01
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	87 30       	cpi	r24, 0x07	; 7
    10ca:	81 f0       	breq	.+32     	; 0x10ec <_ZN15OrangutanBuzzer8playNoteEhjh+0x86>
    10cc:	08 2e       	mov	r0, r24
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6e>
    10d0:	66 0f       	add	r22, r22
    10d2:	77 1f       	adc	r23, r23
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6a>
    10d8:	82 30       	cpi	r24, 0x02	; 2
    10da:	28 f0       	brcs	.+10     	; 0x10e6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x80>
    10dc:	cb 01       	movw	r24, r22
    10de:	05 96       	adiw	r24, 0x05	; 5
    10e0:	6a e0       	ldi	r22, 0x0A	; 10
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	0c c0       	rjmp	.+24     	; 0x10fe <_ZN15OrangutanBuzzer8playNoteEhjh+0x98>
    10e6:	60 50       	subi	r22, 0x00	; 0
    10e8:	70 48       	sbci	r23, 0x80	; 128
    10ea:	0b c0       	rjmp	.+22     	; 0x1102 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    10ec:	cb 01       	movw	r24, r22
    10ee:	b6 e0       	ldi	r27, 0x06	; 6
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	ba 95       	dec	r27
    10f6:	e1 f7       	brne	.-8      	; 0x10f0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x8a>
    10f8:	02 96       	adiw	r24, 0x02	; 2
    10fa:	65 e0       	ldi	r22, 0x05	; 5
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodhi4>
    1102:	40 31       	cpi	r20, 0x10	; 16
    1104:	08 f0       	brcs	.+2      	; 0x1108 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa2>
    1106:	4f e0       	ldi	r20, 0x0F	; 15
    1108:	cb 01       	movw	r24, r22
    110a:	b9 01       	movw	r22, r18
    110c:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1110:	08 95       	ret

00001112 <_ZL8nextNotev>:
    1112:	a0 e0       	ldi	r26, 0x00	; 0
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	ef e8       	ldi	r30, 0x8F	; 143
    1118:	f8 e0       	ldi	r31, 0x08	; 8
    111a:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__prologue_saves__+0xa>
    111e:	b0 90 03 01 	lds	r11, 0x0103
    1122:	80 91 4d 01 	lds	r24, 0x014D
    1126:	88 23       	and	r24, r24
    1128:	61 f0       	breq	.+24     	; 0x1142 <_ZL8nextNotev+0x30>
    112a:	60 91 4e 01 	lds	r22, 0x014E
    112e:	66 23       	and	r22, r22
    1130:	41 f0       	breq	.+16     	; 0x1142 <_ZL8nextNotev+0x30>
    1132:	8f ef       	ldi	r24, 0xFF	; 255
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	40 e0       	ldi	r20, 0x00	; 0
    1138:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN15OrangutanBuzzer8playNoteEhjh>
    113c:	10 92 4e 01 	sts	0x014E, r1
    1140:	34 c1       	rjmp	.+616    	; 0x13aa <_ZL8nextNotev+0x298>
    1142:	c0 ec       	ldi	r28, 0xC0	; 192
    1144:	dd e5       	ldi	r29, 0x5D	; 93
    1146:	aa 24       	eor	r10, r10
    1148:	a3 94       	inc	r10
    114a:	14 e0       	ldi	r17, 0x04	; 4
    114c:	71 2e       	mov	r7, r17
    114e:	00 ed       	ldi	r16, 0xD0	; 208
    1150:	17 e0       	ldi	r17, 0x07	; 7
    1152:	b4 e0       	ldi	r27, 0x04	; 4
    1154:	eb 2e       	mov	r14, r27
    1156:	f1 2c       	mov	r15, r1
    1158:	a4 ef       	ldi	r26, 0xF4	; 244
    115a:	ca 2e       	mov	r12, r26
    115c:	a1 e0       	ldi	r26, 0x01	; 1
    115e:	da 2e       	mov	r13, r26
    1160:	ff e0       	ldi	r31, 0x0F	; 15
    1162:	8f 2e       	mov	r8, r31
    1164:	91 2c       	mov	r9, r1
    1166:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZL16currentCharacterv>
    116a:	20 91 4b 01 	lds	r18, 0x014B
    116e:	30 91 4c 01 	lds	r19, 0x014C
    1172:	2f 5f       	subi	r18, 0xFF	; 255
    1174:	3f 4f       	sbci	r19, 0xFF	; 255
    1176:	30 93 4c 01 	sts	0x014C, r19
    117a:	20 93 4b 01 	sts	0x014B, r18
    117e:	86 36       	cpi	r24, 0x66	; 102
    1180:	f1 f1       	breq	.+124    	; 0x11fe <_ZL8nextNotev+0xec>
    1182:	87 36       	cpi	r24, 0x67	; 103
    1184:	cc f4       	brge	.+50     	; 0x11b8 <_ZL8nextNotev+0xa6>
    1186:	82 36       	cpi	r24, 0x62	; 98
    1188:	09 f4       	brne	.+2      	; 0x118c <_ZL8nextNotev+0x7a>
    118a:	af c0       	rjmp	.+350    	; 0x12ea <_ZL8nextNotev+0x1d8>
    118c:	83 36       	cpi	r24, 0x63	; 99
    118e:	7c f4       	brge	.+30     	; 0x11ae <_ZL8nextNotev+0x9c>
    1190:	8e 33       	cpi	r24, 0x3E	; 62
    1192:	49 f1       	breq	.+82     	; 0x11e6 <_ZL8nextNotev+0xd4>
    1194:	8f 33       	cpi	r24, 0x3F	; 63
    1196:	3c f4       	brge	.+14     	; 0x11a6 <_ZL8nextNotev+0x94>
    1198:	81 32       	cpi	r24, 0x21	; 33
    119a:	09 f4       	brne	.+2      	; 0x119e <_ZL8nextNotev+0x8c>
    119c:	87 c0       	rjmp	.+270    	; 0x12ac <_ZL8nextNotev+0x19a>
    119e:	8c 33       	cpi	r24, 0x3C	; 60
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <_ZL8nextNotev+0x92>
    11a2:	9b c0       	rjmp	.+310    	; 0x12da <_ZL8nextNotev+0x1c8>
    11a4:	22 c0       	rjmp	.+68     	; 0x11ea <_ZL8nextNotev+0xd8>
    11a6:	81 36       	cpi	r24, 0x61	; 97
    11a8:	09 f0       	breq	.+2      	; 0x11ac <_ZL8nextNotev+0x9a>
    11aa:	97 c0       	rjmp	.+302    	; 0x12da <_ZL8nextNotev+0x1c8>
    11ac:	9b c0       	rjmp	.+310    	; 0x12e4 <_ZL8nextNotev+0x1d2>
    11ae:	84 36       	cpi	r24, 0x64	; 100
    11b0:	01 f1       	breq	.+64     	; 0x11f2 <_ZL8nextNotev+0xe0>
    11b2:	85 36       	cpi	r24, 0x65	; 101
    11b4:	0c f5       	brge	.+66     	; 0x11f8 <_ZL8nextNotev+0xe6>
    11b6:	1b c0       	rjmp	.+54     	; 0x11ee <_ZL8nextNotev+0xdc>
    11b8:	8f 36       	cpi	r24, 0x6F	; 111
    11ba:	09 f4       	brne	.+2      	; 0x11be <_ZL8nextNotev+0xac>
    11bc:	47 c0       	rjmp	.+142    	; 0x124c <_ZL8nextNotev+0x13a>
    11be:	80 37       	cpi	r24, 0x70	; 112
    11c0:	44 f4       	brge	.+16     	; 0x11d2 <_ZL8nextNotev+0xc0>
    11c2:	8c 36       	cpi	r24, 0x6C	; 108
    11c4:	11 f1       	breq	.+68     	; 0x120a <_ZL8nextNotev+0xf8>
    11c6:	8d 36       	cpi	r24, 0x6D	; 109
    11c8:	61 f1       	breq	.+88     	; 0x1222 <_ZL8nextNotev+0x110>
    11ca:	87 36       	cpi	r24, 0x67	; 103
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <_ZL8nextNotev+0xbe>
    11ce:	85 c0       	rjmp	.+266    	; 0x12da <_ZL8nextNotev+0x1c8>
    11d0:	19 c0       	rjmp	.+50     	; 0x1204 <_ZL8nextNotev+0xf2>
    11d2:	84 37       	cpi	r24, 0x74	; 116
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <_ZL8nextNotev+0xc6>
    11d6:	44 c0       	rjmp	.+136    	; 0x1260 <_ZL8nextNotev+0x14e>
    11d8:	86 37       	cpi	r24, 0x76	; 118
    11da:	09 f4       	brne	.+2      	; 0x11de <_ZL8nextNotev+0xcc>
    11dc:	60 c0       	rjmp	.+192    	; 0x129e <_ZL8nextNotev+0x18c>
    11de:	82 37       	cpi	r24, 0x72	; 114
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <_ZL8nextNotev+0xd2>
    11e2:	7b c0       	rjmp	.+246    	; 0x12da <_ZL8nextNotev+0x1c8>
    11e4:	39 c0       	rjmp	.+114    	; 0x1258 <_ZL8nextNotev+0x146>
    11e6:	b3 94       	inc	r11
    11e8:	be cf       	rjmp	.-132    	; 0x1166 <_ZL8nextNotev+0x54>
    11ea:	ba 94       	dec	r11
    11ec:	bc cf       	rjmp	.-136    	; 0x1166 <_ZL8nextNotev+0x54>
    11ee:	ee 24       	eor	r14, r14
    11f0:	35 c0       	rjmp	.+106    	; 0x125c <_ZL8nextNotev+0x14a>
    11f2:	ee 24       	eor	r14, r14
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	7b c0       	rjmp	.+246    	; 0x12ee <_ZL8nextNotev+0x1dc>
    11f8:	ee 24       	eor	r14, r14
    11fa:	84 e0       	ldi	r24, 0x04	; 4
    11fc:	78 c0       	rjmp	.+240    	; 0x12ee <_ZL8nextNotev+0x1dc>
    11fe:	ee 24       	eor	r14, r14
    1200:	85 e0       	ldi	r24, 0x05	; 5
    1202:	75 c0       	rjmp	.+234    	; 0x12ee <_ZL8nextNotev+0x1dc>
    1204:	ee 24       	eor	r14, r14
    1206:	87 e0       	ldi	r24, 0x07	; 7
    1208:	72 c0       	rjmp	.+228    	; 0x12ee <_ZL8nextNotev+0x1dc>
    120a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <_ZL9getNumberv>
    120e:	bc 01       	movw	r22, r24
    1210:	90 93 05 01 	sts	0x0105, r25
    1214:	80 93 04 01 	sts	0x0104, r24
    1218:	80 91 06 01 	lds	r24, 0x0106
    121c:	90 91 07 01 	lds	r25, 0x0107
    1220:	37 c0       	rjmp	.+110    	; 0x1290 <_ZL8nextNotev+0x17e>
    1222:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZL16currentCharacterv>
    1226:	8c 36       	cpi	r24, 0x6C	; 108
    1228:	19 f4       	brne	.+6      	; 0x1230 <_ZL8nextNotev+0x11e>
    122a:	10 92 4d 01 	sts	0x014D, r1
    122e:	04 c0       	rjmp	.+8      	; 0x1238 <_ZL8nextNotev+0x126>
    1230:	a0 92 4d 01 	sts	0x014D, r10
    1234:	10 92 4e 01 	sts	0x014E, r1
    1238:	80 91 4b 01 	lds	r24, 0x014B
    123c:	90 91 4c 01 	lds	r25, 0x014C
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	90 93 4c 01 	sts	0x014C, r25
    1246:	80 93 4b 01 	sts	0x014B, r24
    124a:	8d cf       	rjmp	.-230    	; 0x1166 <_ZL8nextNotev+0x54>
    124c:	0e 94 2f 07 	call	0xe5e	; 0xe5e <_ZL9getNumberv>
    1250:	b8 2e       	mov	r11, r24
    1252:	80 93 03 01 	sts	0x0103, r24
    1256:	87 cf       	rjmp	.-242    	; 0x1166 <_ZL8nextNotev+0x54>
    1258:	ee 24       	eor	r14, r14
    125a:	e3 94       	inc	r14
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	47 c0       	rjmp	.+142    	; 0x12ee <_ZL8nextNotev+0x1dc>
    1260:	0e 94 2f 07 	call	0xe5e	; 0xe5e <_ZL9getNumberv>
    1264:	bc 01       	movw	r22, r24
    1266:	ce 01       	movw	r24, r28
    1268:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodhi4>
    126c:	cb 01       	movw	r24, r22
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	53 e0       	ldi	r21, 0x03	; 3
    1274:	66 0f       	add	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	5a 95       	dec	r21
    127a:	e1 f7       	brne	.-8      	; 0x1274 <_ZL8nextNotev+0x162>
    127c:	86 0f       	add	r24, r22
    127e:	97 1f       	adc	r25, r23
    1280:	90 93 07 01 	sts	0x0107, r25
    1284:	80 93 06 01 	sts	0x0106, r24
    1288:	60 91 04 01 	lds	r22, 0x0104
    128c:	70 91 05 01 	lds	r23, 0x0105
    1290:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodhi4>
    1294:	70 93 09 01 	sts	0x0109, r23
    1298:	60 93 08 01 	sts	0x0108, r22
    129c:	64 cf       	rjmp	.-312    	; 0x1166 <_ZL8nextNotev+0x54>
    129e:	0e 94 2f 07 	call	0xe5e	; 0xe5e <_ZL9getNumberv>
    12a2:	90 93 0b 01 	sts	0x010B, r25
    12a6:	80 93 0a 01 	sts	0x010A, r24
    12aa:	5d cf       	rjmp	.-326    	; 0x1166 <_ZL8nextNotev+0x54>
    12ac:	70 92 03 01 	sts	0x0103, r7
    12b0:	10 93 07 01 	sts	0x0107, r17
    12b4:	00 93 06 01 	sts	0x0106, r16
    12b8:	f0 92 05 01 	sts	0x0105, r15
    12bc:	e0 92 04 01 	sts	0x0104, r14
    12c0:	d0 92 09 01 	sts	0x0109, r13
    12c4:	c0 92 08 01 	sts	0x0108, r12
    12c8:	90 92 0b 01 	sts	0x010B, r9
    12cc:	80 92 0a 01 	sts	0x010A, r8
    12d0:	10 92 4d 01 	sts	0x014D, r1
    12d4:	44 e0       	ldi	r20, 0x04	; 4
    12d6:	b4 2e       	mov	r11, r20
    12d8:	46 cf       	rjmp	.-372    	; 0x1166 <_ZL8nextNotev+0x54>
    12da:	10 92 4c 01 	sts	0x014C, r1
    12de:	10 92 4b 01 	sts	0x014B, r1
    12e2:	63 c0       	rjmp	.+198    	; 0x13aa <_ZL8nextNotev+0x298>
    12e4:	ee 24       	eor	r14, r14
    12e6:	89 e0       	ldi	r24, 0x09	; 9
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <_ZL8nextNotev+0x1dc>
    12ea:	ee 24       	eor	r14, r14
    12ec:	8b e0       	ldi	r24, 0x0B	; 11
    12ee:	9c e0       	ldi	r25, 0x0C	; 12
    12f0:	b9 9e       	mul	r11, r25
    12f2:	b0 2c       	mov	r11, r0
    12f4:	11 24       	eor	r1, r1
    12f6:	b8 0e       	add	r11, r24
    12f8:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZL16currentCharacterv>
    12fc:	8b 32       	cpi	r24, 0x2B	; 43
    12fe:	11 f0       	breq	.+4      	; 0x1304 <_ZL8nextNotev+0x1f2>
    1300:	83 32       	cpi	r24, 0x23	; 35
    1302:	b9 f4       	brne	.+46     	; 0x1332 <_ZL8nextNotev+0x220>
    1304:	80 91 4b 01 	lds	r24, 0x014B
    1308:	90 91 4c 01 	lds	r25, 0x014C
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	90 93 4c 01 	sts	0x014C, r25
    1312:	80 93 4b 01 	sts	0x014B, r24
    1316:	b3 94       	inc	r11
    1318:	ef cf       	rjmp	.-34     	; 0x12f8 <_ZL8nextNotev+0x1e6>
    131a:	80 91 4b 01 	lds	r24, 0x014B
    131e:	90 91 4c 01 	lds	r25, 0x014C
    1322:	01 96       	adiw	r24, 0x01	; 1
    1324:	90 93 4c 01 	sts	0x014C, r25
    1328:	80 93 4b 01 	sts	0x014B, r24
    132c:	ba 94       	dec	r11
    132e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZL16currentCharacterv>
    1332:	8d 32       	cpi	r24, 0x2D	; 45
    1334:	91 f3       	breq	.-28     	; 0x131a <_ZL8nextNotev+0x208>
    1336:	c0 91 08 01 	lds	r28, 0x0108
    133a:	d0 91 09 01 	lds	r29, 0x0109
    133e:	81 53       	subi	r24, 0x31	; 49
    1340:	88 30       	cpi	r24, 0x08	; 8
    1342:	58 f4       	brcc	.+22     	; 0x135a <_ZL8nextNotev+0x248>
    1344:	c0 91 06 01 	lds	r28, 0x0106
    1348:	d0 91 07 01 	lds	r29, 0x0107
    134c:	0e 94 2f 07 	call	0xe5e	; 0xe5e <_ZL9getNumberv>
    1350:	bc 01       	movw	r22, r24
    1352:	ce 01       	movw	r24, r28
    1354:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodhi4>
    1358:	eb 01       	movw	r28, r22
    135a:	8e 01       	movw	r16, r28
    135c:	0b c0       	rjmp	.+22     	; 0x1374 <_ZL8nextNotev+0x262>
    135e:	80 91 4b 01 	lds	r24, 0x014B
    1362:	90 91 4c 01 	lds	r25, 0x014C
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	90 93 4c 01 	sts	0x014C, r25
    136c:	80 93 4b 01 	sts	0x014B, r24
    1370:	c0 0f       	add	r28, r16
    1372:	d1 1f       	adc	r29, r17
    1374:	16 95       	lsr	r17
    1376:	07 95       	ror	r16
    1378:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZL16currentCharacterv>
    137c:	8e 32       	cpi	r24, 0x2E	; 46
    137e:	79 f3       	breq	.-34     	; 0x135e <_ZL8nextNotev+0x24c>
    1380:	80 91 4d 01 	lds	r24, 0x014D
    1384:	88 23       	and	r24, r24
    1386:	39 f0       	breq	.+14     	; 0x1396 <_ZL8nextNotev+0x284>
    1388:	ce 01       	movw	r24, r28
    138a:	96 95       	lsr	r25
    138c:	87 95       	ror	r24
    138e:	80 93 4e 01 	sts	0x014E, r24
    1392:	c8 1b       	sub	r28, r24
    1394:	d1 09       	sbc	r29, r1
    1396:	ee 20       	and	r14, r14
    1398:	11 f0       	breq	.+4      	; 0x139e <_ZL8nextNotev+0x28c>
    139a:	bb 24       	eor	r11, r11
    139c:	ba 94       	dec	r11
    139e:	8b 2d       	mov	r24, r11
    13a0:	be 01       	movw	r22, r28
    13a2:	40 91 0a 01 	lds	r20, 0x010A
    13a6:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN15OrangutanBuzzer8playNoteEhjh>
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	ed e0       	ldi	r30, 0x0D	; 13
    13b0:	0c 94 36 14 	jmp	0x286c	; 0x286c <__epilogue_restores__+0xa>

000013b4 <__vector_13>:
    13b4:	1f 92       	push	r1
    13b6:	0f 92       	push	r0
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	0f 92       	push	r0
    13bc:	11 24       	eor	r1, r1
    13be:	2f 93       	push	r18
    13c0:	3f 93       	push	r19
    13c2:	4f 93       	push	r20
    13c4:	5f 93       	push	r21
    13c6:	6f 93       	push	r22
    13c8:	7f 93       	push	r23
    13ca:	8f 93       	push	r24
    13cc:	9f 93       	push	r25
    13ce:	af 93       	push	r26
    13d0:	bf 93       	push	r27
    13d2:	ef 93       	push	r30
    13d4:	ff 93       	push	r31
    13d6:	80 91 51 01 	lds	r24, 0x0151
    13da:	90 91 52 01 	lds	r25, 0x0152
    13de:	9c 01       	movw	r18, r24
    13e0:	21 50       	subi	r18, 0x01	; 1
    13e2:	30 40       	sbci	r19, 0x00	; 0
    13e4:	30 93 52 01 	sts	0x0152, r19
    13e8:	20 93 51 01 	sts	0x0151, r18
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	11 f5       	brne	.+68     	; 0x1434 <__vector_13+0x80>
    13f0:	10 92 6f 00 	sts	0x006F, r1
    13f4:	78 94       	sei
    13f6:	80 91 81 00 	lds	r24, 0x0081
    13fa:	88 7f       	andi	r24, 0xF8	; 248
    13fc:	81 60       	ori	r24, 0x01	; 1
    13fe:	80 93 81 00 	sts	0x0081, r24
    1402:	80 e1       	ldi	r24, 0x10	; 16
    1404:	97 e2       	ldi	r25, 0x27	; 39
    1406:	90 93 89 00 	sts	0x0089, r25
    140a:	80 93 88 00 	sts	0x0088, r24
    140e:	10 92 8b 00 	sts	0x008B, r1
    1412:	10 92 8a 00 	sts	0x008A, r1
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	80 93 02 01 	sts	0x0102, r24
    141c:	80 91 4b 01 	lds	r24, 0x014B
    1420:	90 91 4c 01 	lds	r25, 0x014C
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	31 f0       	breq	.+12     	; 0x1434 <__vector_13+0x80>
    1428:	80 91 50 01 	lds	r24, 0x0150
    142c:	88 23       	and	r24, r24
    142e:	11 f4       	brne	.+4      	; 0x1434 <__vector_13+0x80>
    1430:	0e 94 89 08 	call	0x1112	; 0x1112 <_ZL8nextNotev>
    1434:	ff 91       	pop	r31
    1436:	ef 91       	pop	r30
    1438:	bf 91       	pop	r27
    143a:	af 91       	pop	r26
    143c:	9f 91       	pop	r25
    143e:	8f 91       	pop	r24
    1440:	7f 91       	pop	r23
    1442:	6f 91       	pop	r22
    1444:	5f 91       	pop	r21
    1446:	4f 91       	pop	r20
    1448:	3f 91       	pop	r19
    144a:	2f 91       	pop	r18
    144c:	0f 90       	pop	r0
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	0f 90       	pop	r0
    1452:	1f 90       	pop	r1
    1454:	18 95       	reti

00001456 <_ZN15OrangutanBuzzer9isPlayingEv>:
    1456:	80 91 02 01 	lds	r24, 0x0102
    145a:	88 23       	and	r24, r24
    145c:	51 f0       	breq	.+20     	; 0x1472 <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	20 91 4b 01 	lds	r18, 0x014B
    1464:	30 91 4c 01 	lds	r19, 0x014C
    1468:	21 15       	cp	r18, r1
    146a:	31 05       	cpc	r19, r1
    146c:	19 f4       	brne	.+6      	; 0x1474 <_ZN15OrangutanBuzzer9isPlayingEv+0x1e>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	08 95       	ret
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	08 95       	ret

00001476 <is_playing>:
    1476:	0e 94 2b 0a 	call	0x1456	; 0x1456 <_ZN15OrangutanBuzzer9isPlayingEv>
    147a:	08 95       	ret

0000147c <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    147c:	10 92 6f 00 	sts	0x006F, r1
    1480:	90 93 4c 01 	sts	0x014C, r25
    1484:	80 93 4b 01 	sts	0x014B, r24
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	80 93 4f 01 	sts	0x014F, r24
    148e:	10 92 4e 01 	sts	0x014E, r1
    1492:	0e 94 89 08 	call	0x1112	; 0x1112 <_ZL8nextNotev>
    1496:	08 95       	ret

00001498 <play_from_program_space>:
    1498:	0e 94 3e 0a 	call	0x147c	; 0x147c <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    149c:	08 95       	ret

0000149e <delayMicroseconds.clone.0>:
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	6f 93       	push	r22
    14a4:	64 e0       	ldi	r22, 0x04	; 4
    14a6:	6a 95       	dec	r22
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <delayMicroseconds.clone.0+0x8>
    14aa:	6f 91       	pop	r22
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	c9 f7       	brne	.-14     	; 0x14a2 <delayMicroseconds.clone.0+0x4>
    14b0:	08 95       	ret

000014b2 <_ZN12OrangutanLCD8busyWaitEv>:
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	1a b1       	in	r17, 0x0a	; 10
    14bc:	57 98       	cbi	0x0a, 7	; 10
    14be:	5a 98       	cbi	0x0b, 2	; 11
    14c0:	28 9a       	sbi	0x05, 0	; 5
    14c2:	c0 e0       	ldi	r28, 0x00	; 0
    14c4:	d0 e0       	ldi	r29, 0x00	; 0
    14c6:	0e 94 4f 0a 	call	0x149e	; 0x149e <delayMicroseconds.clone.0>
    14ca:	5c 9a       	sbi	0x0b, 4	; 11
    14cc:	0e 94 4f 0a 	call	0x149e	; 0x149e <delayMicroseconds.clone.0>
    14d0:	09 b1       	in	r16, 0x09	; 9
    14d2:	5c 98       	cbi	0x0b, 4	; 11
    14d4:	0e 94 4f 0a 	call	0x149e	; 0x149e <delayMicroseconds.clone.0>
    14d8:	5c 9a       	sbi	0x0b, 4	; 11
    14da:	0e 94 4f 0a 	call	0x149e	; 0x149e <delayMicroseconds.clone.0>
    14de:	5c 98       	cbi	0x0b, 4	; 11
    14e0:	07 ff       	sbrs	r16, 7
    14e2:	11 c0       	rjmp	.+34     	; 0x1506 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    14e4:	24 96       	adiw	r28, 0x04	; 4
    14e6:	9e 01       	movw	r18, r28
    14e8:	40 e0       	ldi	r20, 0x00	; 0
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	80 91 57 01 	lds	r24, 0x0157
    14f0:	90 91 58 01 	lds	r25, 0x0158
    14f4:	a0 91 59 01 	lds	r26, 0x0159
    14f8:	b0 91 5a 01 	lds	r27, 0x015A
    14fc:	28 17       	cp	r18, r24
    14fe:	39 07       	cpc	r19, r25
    1500:	4a 07       	cpc	r20, r26
    1502:	5b 07       	cpc	r21, r27
    1504:	00 f3       	brcs	.-64     	; 0x14c6 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1506:	1a b9       	out	0x0a, r17	; 10
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	08 95       	ret

00001512 <_ZN12OrangutanLCD8sendDataEh>:
    1512:	65 b1       	in	r22, 0x05	; 5
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	ac 01       	movw	r20, r24
    1518:	41 70       	andi	r20, 0x01	; 1
    151a:	50 70       	andi	r21, 0x00	; 0
    151c:	44 0f       	add	r20, r20
    151e:	55 1f       	adc	r21, r21
    1520:	9c 01       	movw	r18, r24
    1522:	26 70       	andi	r18, 0x06	; 6
    1524:	30 70       	andi	r19, 0x00	; 0
    1526:	53 e0       	ldi	r21, 0x03	; 3
    1528:	22 0f       	add	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	5a 95       	dec	r21
    152e:	e1 f7       	brne	.-8      	; 0x1528 <_ZN12OrangutanLCD8sendDataEh+0x16>
    1530:	24 2b       	or	r18, r20
    1532:	6d 7c       	andi	r22, 0xCD	; 205
    1534:	26 2b       	or	r18, r22
    1536:	25 b9       	out	0x05, r18	; 5
    1538:	2b b1       	in	r18, 0x0b	; 11
    153a:	88 70       	andi	r24, 0x08	; 8
    153c:	90 70       	andi	r25, 0x00	; 0
    153e:	34 e0       	ldi	r19, 0x04	; 4
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	3a 95       	dec	r19
    1546:	e1 f7       	brne	.-8      	; 0x1540 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    1548:	2f 77       	andi	r18, 0x7F	; 127
    154a:	28 2b       	or	r18, r24
    154c:	2b b9       	out	0x0b, r18	; 11
    154e:	5c 9a       	sbi	0x0b, 4	; 11
    1550:	0e 94 4f 0a 	call	0x149e	; 0x149e <delayMicroseconds.clone.0>
    1554:	5c 98       	cbi	0x0b, 4	; 11
    1556:	0e 94 4f 0a 	call	0x149e	; 0x149e <delayMicroseconds.clone.0>
    155a:	08 95       	ret

0000155c <_ZN12OrangutanLCD4sendEhhh>:
    155c:	a2 e0       	ldi	r26, 0x02	; 2
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e4 eb       	ldi	r30, 0xB4	; 180
    1562:	fa e0       	ldi	r31, 0x0A	; 10
    1564:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__+0x16>
    1568:	18 2f       	mov	r17, r24
    156a:	4a 83       	std	Y+2, r20	; 0x02
    156c:	69 83       	std	Y+1, r22	; 0x01
    156e:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_ZN12OrangutanLCD4initEv>
    1572:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZN12OrangutanLCD8busyWaitEv>
    1576:	f4 b0       	in	r15, 0x04	; 4
    1578:	05 b1       	in	r16, 0x05	; 5
    157a:	da b0       	in	r13, 0x0a	; 10
    157c:	eb b0       	in	r14, 0x0b	; 11
    157e:	28 98       	cbi	0x05, 0	; 5
    1580:	69 81       	ldd	r22, Y+1	; 0x01
    1582:	4a 81       	ldd	r20, Y+2	; 0x02
    1584:	66 23       	and	r22, r22
    1586:	11 f0       	breq	.+4      	; 0x158c <_ZN12OrangutanLCD4sendEhhh+0x30>
    1588:	5a 9a       	sbi	0x0b, 2	; 11
    158a:	01 c0       	rjmp	.+2      	; 0x158e <_ZN12OrangutanLCD4sendEhhh+0x32>
    158c:	5a 98       	cbi	0x0b, 2	; 11
    158e:	84 b1       	in	r24, 0x04	; 4
    1590:	82 63       	ori	r24, 0x32	; 50
    1592:	84 b9       	out	0x04, r24	; 4
    1594:	57 9a       	sbi	0x0a, 7	; 10
    1596:	41 30       	cpi	r20, 0x01	; 1
    1598:	29 f0       	breq	.+10     	; 0x15a4 <_ZN12OrangutanLCD4sendEhhh+0x48>
    159a:	81 2f       	mov	r24, r17
    159c:	82 95       	swap	r24
    159e:	8f 70       	andi	r24, 0x0F	; 15
    15a0:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN12OrangutanLCD8sendDataEh>
    15a4:	81 2f       	mov	r24, r17
    15a6:	8f 70       	andi	r24, 0x0F	; 15
    15a8:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN12OrangutanLCD8sendDataEh>
    15ac:	da b8       	out	0x0a, r13	; 10
    15ae:	eb b8       	out	0x0b, r14	; 11
    15b0:	f4 b8       	out	0x04, r15	; 4
    15b2:	05 b9       	out	0x05, r16	; 5
    15b4:	22 96       	adiw	r28, 0x02	; 2
    15b6:	e7 e0       	ldi	r30, 0x07	; 7
    15b8:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__+0x16>

000015bc <_ZN12OrangutanLCD8send_cmdEh>:
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	42 e0       	ldi	r20, 0x02	; 2
    15c0:	0e 94 ae 0a 	call	0x155c	; 0x155c <_ZN12OrangutanLCD4sendEhhh>
    15c4:	08 95       	ret

000015c6 <_ZN12OrangutanLCD9send_dataEh>:
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	42 e0       	ldi	r20, 0x02	; 2
    15ca:	0e 94 ae 0a 	call	0x155c	; 0x155c <_ZN12OrangutanLCD4sendEhhh>
    15ce:	08 95       	ret

000015d0 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	1f 93       	push	r17
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	0f 92       	push	r0
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	66 0f       	add	r22, r22
    15e2:	66 0f       	add	r22, r22
    15e4:	66 0f       	add	r22, r22
    15e6:	48 2f       	mov	r20, r24
    15e8:	59 2f       	mov	r21, r25
    15ea:	7a 01       	movw	r14, r20
    15ec:	10 e0       	ldi	r17, 0x00	; 0
    15ee:	81 2f       	mov	r24, r17
    15f0:	86 0f       	add	r24, r22
    15f2:	80 64       	ori	r24, 0x40	; 64
    15f4:	69 83       	std	Y+1, r22	; 0x01
    15f6:	0e 94 de 0a 	call	0x15bc	; 0x15bc <_ZN12OrangutanLCD8send_cmdEh>
    15fa:	f7 01       	movw	r30, r14
    15fc:	84 91       	lpm	r24, Z
    15fe:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_ZN12OrangutanLCD9send_dataEh>
    1602:	1f 5f       	subi	r17, 0xFF	; 255
    1604:	08 94       	sec
    1606:	e1 1c       	adc	r14, r1
    1608:	f1 1c       	adc	r15, r1
    160a:	69 81       	ldd	r22, Y+1	; 0x01
    160c:	18 30       	cpi	r17, 0x08	; 8
    160e:	79 f7       	brne	.-34     	; 0x15ee <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x1e>
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	1f 91       	pop	r17
    1618:	ff 90       	pop	r15
    161a:	ef 90       	pop	r14
    161c:	08 95       	ret

0000161e <lcd_load_custom_character>:
    161e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    1622:	08 95       	ret

00001624 <print_character>:
    1624:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_ZN12OrangutanLCD9send_dataEh>
    1628:	08 95       	ret

0000162a <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	41 e0       	ldi	r20, 0x01	; 1
    162e:	0e 94 ae 0a 	call	0x155c	; 0x155c <_ZN12OrangutanLCD4sendEhhh>
    1632:	08 95       	ret

00001634 <_ZN12OrangutanLCD5init2Ev>:
    1634:	80 e1       	ldi	r24, 0x10	; 16
    1636:	97 e2       	ldi	r25, 0x27	; 39
    1638:	a0 e0       	ldi	r26, 0x00	; 0
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	80 93 57 01 	sts	0x0157, r24
    1640:	90 93 58 01 	sts	0x0158, r25
    1644:	a0 93 59 01 	sts	0x0159, r26
    1648:	b0 93 5a 01 	sts	0x015A, r27
    164c:	52 9a       	sbi	0x0a, 2	; 10
    164e:	20 9a       	sbi	0x04, 0	; 4
    1650:	54 9a       	sbi	0x0a, 4	; 10
    1652:	8e e1       	ldi	r24, 0x1E	; 30
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1660:	86 e0       	ldi	r24, 0x06	; 6
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
    1668:	83 e0       	ldi	r24, 0x03	; 3
    166a:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
    1676:	83 e0       	ldi	r24, 0x03	; 3
    1678:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    168a:	82 e0       	ldi	r24, 0x02	; 2
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
    1692:	88 e2       	ldi	r24, 0x28	; 40
    1694:	0e 94 de 0a 	call	0x15bc	; 0x15bc <_ZN12OrangutanLCD8send_cmdEh>
    1698:	88 e0       	ldi	r24, 0x08	; 8
    169a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <_ZN12OrangutanLCD8send_cmdEh>
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	0e 94 de 0a 	call	0x15bc	; 0x15bc <_ZN12OrangutanLCD8send_cmdEh>
    16a4:	86 e0       	ldi	r24, 0x06	; 6
    16a6:	0e 94 de 0a 	call	0x15bc	; 0x15bc <_ZN12OrangutanLCD8send_cmdEh>
    16aa:	8c e0       	ldi	r24, 0x0C	; 12
    16ac:	0e 94 de 0a 	call	0x15bc	; 0x15bc <_ZN12OrangutanLCD8send_cmdEh>
    16b0:	08 95       	ret

000016b2 <_ZN12OrangutanLCD4initEv>:
    16b2:	80 91 5b 01 	lds	r24, 0x015B
    16b6:	88 23       	and	r24, r24
    16b8:	29 f4       	brne	.+10     	; 0x16c4 <_ZN12OrangutanLCD4initEv+0x12>
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	80 93 5b 01 	sts	0x015B, r24
    16c0:	0e 94 1a 0b 	call	0x1634	; 0x1634 <_ZN12OrangutanLCD5init2Ev>
    16c4:	08 95       	ret

000016c6 <_ZN12OrangutanLCD5clearEv>:
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	0e 94 de 0a 	call	0x15bc	; 0x15bc <_ZN12OrangutanLCD8send_cmdEh>
    16cc:	80 91 53 01 	lds	r24, 0x0153
    16d0:	90 91 54 01 	lds	r25, 0x0154
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	11 f1       	breq	.+68     	; 0x171c <_ZN12OrangutanLCD5clearEv+0x56>
    16d8:	a0 e0       	ldi	r26, 0x00	; 0
    16da:	b0 e2       	ldi	r27, 0x20	; 32
    16dc:	08 c0       	rjmp	.+16     	; 0x16ee <_ZN12OrangutanLCD5clearEv+0x28>
    16de:	e0 91 53 01 	lds	r30, 0x0153
    16e2:	f0 91 54 01 	lds	r31, 0x0154
    16e6:	e2 0f       	add	r30, r18
    16e8:	f3 1f       	adc	r31, r19
    16ea:	b0 83       	st	Z, r27
    16ec:	af 5f       	subi	r26, 0xFF	; 255
    16ee:	2a 2f       	mov	r18, r26
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	80 91 24 01 	lds	r24, 0x0124
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	60 91 25 01 	lds	r22, 0x0125
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	86 9f       	mul	r24, r22
    1702:	a0 01       	movw	r20, r0
    1704:	87 9f       	mul	r24, r23
    1706:	50 0d       	add	r21, r0
    1708:	96 9f       	mul	r25, r22
    170a:	50 0d       	add	r21, r0
    170c:	11 24       	eor	r1, r1
    170e:	24 17       	cp	r18, r20
    1710:	35 07       	cpc	r19, r21
    1712:	2c f3       	brlt	.-54     	; 0x16de <_ZN12OrangutanLCD5clearEv+0x18>
    1714:	10 92 56 01 	sts	0x0156, r1
    1718:	10 92 55 01 	sts	0x0155, r1
    171c:	08 95       	ret

0000171e <clear>:
    171e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <_ZN12OrangutanLCD5clearEv>
    1722:	08 95       	ret

00001724 <_ZN12OrangutanLCD5printEPKc>:
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	e8 2e       	mov	r14, r24
    172e:	e7 01       	movw	r28, r14
    1730:	7e 01       	movw	r14, r28
    1732:	f9 2e       	mov	r15, r25
    1734:	e7 01       	movw	r28, r14
    1736:	02 c0       	rjmp	.+4      	; 0x173c <_ZN12OrangutanLCD5printEPKc+0x18>
    1738:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_ZN12OrangutanLCD9send_dataEh>
    173c:	89 91       	ld	r24, Y+
    173e:	88 23       	and	r24, r24
    1740:	d9 f7       	brne	.-10     	; 0x1738 <_ZN12OrangutanLCD5printEPKc+0x14>
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	ff 90       	pop	r15
    1748:	ef 90       	pop	r14
    174a:	08 95       	ret

0000174c <print>:
    174c:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN12OrangutanLCD5printEPKc>
    1750:	08 95       	ret

00001752 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	ec 01       	movw	r28, r24
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    175a:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_ZN12OrangutanLCD9send_dataEh>
    175e:	21 96       	adiw	r28, 0x01	; 1
    1760:	fe 01       	movw	r30, r28
    1762:	84 91       	lpm	r24, Z
    1764:	88 23       	and	r24, r24
    1766:	c9 f7       	brne	.-14     	; 0x175a <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	08 95       	ret

0000176e <print_from_program_space>:
    176e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    1772:	08 95       	ret

00001774 <_ZN12OrangutanLCD5printEm>:
    1774:	aa e0       	ldi	r26, 0x0A	; 10
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e0 ec       	ldi	r30, 0xC0	; 192
    177a:	fb e0       	ldi	r31, 0x0B	; 11
    177c:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__prologue_saves__+0x10>
    1780:	9b 01       	movw	r18, r22
    1782:	ac 01       	movw	r20, r24
    1784:	1a e0       	ldi	r17, 0x0A	; 10
    1786:	ea e0       	ldi	r30, 0x0A	; 10
    1788:	ce 2e       	mov	r12, r30
    178a:	d1 2c       	mov	r13, r1
    178c:	e1 2c       	mov	r14, r1
    178e:	f1 2c       	mov	r15, r1
    1790:	5e 01       	movw	r10, r28
    1792:	08 94       	sec
    1794:	a1 1c       	adc	r10, r1
    1796:	b1 1c       	adc	r11, r1
    1798:	02 2f       	mov	r16, r18
    179a:	ca 01       	movw	r24, r20
    179c:	b9 01       	movw	r22, r18
    179e:	a7 01       	movw	r20, r14
    17a0:	96 01       	movw	r18, r12
    17a2:	0e 94 c9 13 	call	0x2792	; 0x2792 <__udivmodsi4>
    17a6:	11 50       	subi	r17, 0x01	; 1
    17a8:	f5 01       	movw	r30, r10
    17aa:	e1 0f       	add	r30, r17
    17ac:	f1 1d       	adc	r31, r1
    17ae:	00 5d       	subi	r16, 0xD0	; 208
    17b0:	92 2f       	mov	r25, r18
    17b2:	99 0f       	add	r25, r25
    17b4:	89 2f       	mov	r24, r25
    17b6:	88 0f       	add	r24, r24
    17b8:	88 0f       	add	r24, r24
    17ba:	89 0f       	add	r24, r25
    17bc:	08 1b       	sub	r16, r24
    17be:	00 83       	st	Z, r16
    17c0:	21 15       	cp	r18, r1
    17c2:	31 05       	cpc	r19, r1
    17c4:	41 05       	cpc	r20, r1
    17c6:	51 05       	cpc	r21, r1
    17c8:	39 f7       	brne	.-50     	; 0x1798 <_ZN12OrangutanLCD5printEm+0x24>
    17ca:	08 c0       	rjmp	.+16     	; 0x17dc <_ZN12OrangutanLCD5printEm+0x68>
    17cc:	f6 01       	movw	r30, r12
    17ce:	e1 0f       	add	r30, r17
    17d0:	f1 1d       	adc	r31, r1
    17d2:	80 81       	ld	r24, Z
    17d4:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_ZN12OrangutanLCD9send_dataEh>
    17d8:	1f 5f       	subi	r17, 0xFF	; 255
    17da:	04 c0       	rjmp	.+8      	; 0x17e4 <_ZN12OrangutanLCD5printEm+0x70>
    17dc:	6e 01       	movw	r12, r28
    17de:	08 94       	sec
    17e0:	c1 1c       	adc	r12, r1
    17e2:	d1 1c       	adc	r13, r1
    17e4:	1a 30       	cpi	r17, 0x0A	; 10
    17e6:	90 f3       	brcs	.-28     	; 0x17cc <_ZN12OrangutanLCD5printEm+0x58>
    17e8:	2a 96       	adiw	r28, 0x0a	; 10
    17ea:	ea e0       	ldi	r30, 0x0A	; 10
    17ec:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__epilogue_restores__+0x10>

000017f0 <_ZN12OrangutanLCD5printEl>:
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	7b 01       	movw	r14, r22
    17fa:	8c 01       	movw	r16, r24
    17fc:	97 ff       	sbrs	r25, 7
    17fe:	0b c0       	rjmp	.+22     	; 0x1816 <_ZN12OrangutanLCD5printEl+0x26>
    1800:	10 95       	com	r17
    1802:	00 95       	com	r16
    1804:	f0 94       	com	r15
    1806:	e0 94       	com	r14
    1808:	e1 1c       	adc	r14, r1
    180a:	f1 1c       	adc	r15, r1
    180c:	01 1d       	adc	r16, r1
    180e:	11 1d       	adc	r17, r1
    1810:	8d e2       	ldi	r24, 0x2D	; 45
    1812:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_ZN12OrangutanLCD9send_dataEh>
    1816:	c8 01       	movw	r24, r16
    1818:	b7 01       	movw	r22, r14
    181a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN12OrangutanLCD5printEm>
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	ff 90       	pop	r15
    1824:	ef 90       	pop	r14
    1826:	08 95       	ret

00001828 <print_long>:
    1828:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <_ZN12OrangutanLCD5printEl>
    182c:	08 95       	ret

0000182e <_ZN12OrangutanLCD6gotoXYEhh>:
    182e:	a5 e0       	ldi	r26, 0x05	; 5
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	ed e1       	ldi	r30, 0x1D	; 29
    1834:	fc e0       	ldi	r31, 0x0C	; 12
    1836:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__prologue_saves__+0x1e>
    183a:	18 2f       	mov	r17, r24
    183c:	80 e8       	ldi	r24, 0x80	; 128
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	80 ec       	ldi	r24, 0xC0	; 192
    1842:	8a 83       	std	Y+2, r24	; 0x02
    1844:	84 e9       	ldi	r24, 0x94	; 148
    1846:	8b 83       	std	Y+3, r24	; 0x03
    1848:	84 ed       	ldi	r24, 0xD4	; 212
    184a:	8c 83       	std	Y+4, r24	; 0x04
    184c:	fe 01       	movw	r30, r28
    184e:	e6 0f       	add	r30, r22
    1850:	f1 1d       	adc	r31, r1
    1852:	81 81       	ldd	r24, Z+1	; 0x01
    1854:	81 0f       	add	r24, r17
    1856:	6d 83       	std	Y+5, r22	; 0x05
    1858:	0e 94 de 0a 	call	0x15bc	; 0x15bc <_ZN12OrangutanLCD8send_cmdEh>
    185c:	10 93 56 01 	sts	0x0156, r17
    1860:	6d 81       	ldd	r22, Y+5	; 0x05
    1862:	60 93 55 01 	sts	0x0155, r22
    1866:	25 96       	adiw	r28, 0x05	; 5
    1868:	e3 e0       	ldi	r30, 0x03	; 3
    186a:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__+0x1e>

0000186e <lcd_goto_xy>:
    186e:	0e 94 17 0c 	call	0x182e	; 0x182e <_ZN12OrangutanLCD6gotoXYEhh>
    1872:	08 95       	ret

00001874 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    1874:	fc 01       	movw	r30, r24
    1876:	11 82       	std	Z+1, r1	; 0x01
    1878:	10 82       	st	Z, r1
    187a:	13 82       	std	Z+3, r1	; 0x03
    187c:	12 82       	std	Z+2, r1	; 0x02
    187e:	15 82       	std	Z+5, r1	; 0x05
    1880:	14 82       	std	Z+4, r1	; 0x04
    1882:	16 82       	std	Z+6, r1	; 0x06
    1884:	68 30       	cpi	r22, 0x08	; 8
    1886:	68 f4       	brcc	.+26     	; 0x18a2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    1888:	89 e2       	ldi	r24, 0x29	; 41
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	91 83       	std	Z+1, r25	; 0x01
    188e:	80 83       	st	Z, r24
    1890:	8b e2       	ldi	r24, 0x2B	; 43
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	93 83       	std	Z+3, r25	; 0x03
    1896:	82 83       	std	Z+2, r24	; 0x02
    1898:	8a e2       	ldi	r24, 0x2A	; 42
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	95 83       	std	Z+5, r25	; 0x05
    189e:	84 83       	std	Z+4, r24	; 0x04
    18a0:	11 c0       	rjmp	.+34     	; 0x18c4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x50>
    18a2:	6e 30       	cpi	r22, 0x0E	; 14
    18a4:	c0 f4       	brcc	.+48     	; 0x18d6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x62>
    18a6:	83 e2       	ldi	r24, 0x23	; 35
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	80 83       	st	Z, r24
    18ae:	85 e2       	ldi	r24, 0x25	; 37
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	93 83       	std	Z+3, r25	; 0x03
    18b4:	82 83       	std	Z+2, r24	; 0x02
    18b6:	84 e2       	ldi	r24, 0x24	; 36
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	95 83       	std	Z+5, r25	; 0x05
    18bc:	84 83       	std	Z+4, r24	; 0x04
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	68 50       	subi	r22, 0x08	; 8
    18c2:	70 40       	sbci	r23, 0x00	; 0
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x5a>
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	6a 95       	dec	r22
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x56>
    18d2:	86 83       	std	Z+6, r24	; 0x06
    18d4:	08 95       	ret
    18d6:	65 31       	cpi	r22, 0x15	; 21
    18d8:	b8 f4       	brcc	.+46     	; 0x1908 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x94>
    18da:	86 e2       	ldi	r24, 0x26	; 38
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
    18e2:	88 e2       	ldi	r24, 0x28	; 40
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	93 83       	std	Z+3, r25	; 0x03
    18e8:	82 83       	std	Z+2, r24	; 0x02
    18ea:	87 e2       	ldi	r24, 0x27	; 39
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	95 83       	std	Z+5, r25	; 0x05
    18f0:	84 83       	std	Z+4, r24	; 0x04
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	6e 50       	subi	r22, 0x0E	; 14
    18f6:	70 40       	sbci	r23, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8e>
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	6a 95       	dec	r22
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8a>
    1906:	86 83       	std	Z+6, r24	; 0x06
    1908:	08 95       	ret

0000190a <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>:
    190a:	fc 01       	movw	r30, r24
    190c:	a4 81       	ldd	r26, Z+4	; 0x04
    190e:	b5 81       	ldd	r27, Z+5	; 0x05
    1910:	86 81       	ldd	r24, Z+6	; 0x06
    1912:	66 23       	and	r22, r22
    1914:	21 f0       	breq	.+8      	; 0x191e <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh+0x14>
    1916:	9c 91       	ld	r25, X
    1918:	98 2b       	or	r25, r24
    191a:	9c 93       	st	X, r25
    191c:	08 95       	ret
    191e:	9c 91       	ld	r25, X
    1920:	80 95       	com	r24
    1922:	89 23       	and	r24, r25
    1924:	8c 93       	st	X, r24
    1926:	08 95       	ret

00001928 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>:
    1928:	fc 01       	movw	r30, r24
    192a:	6f 3f       	cpi	r22, 0xFF	; 255
    192c:	31 f4       	brne	.+12     	; 0x193a <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x12>
    192e:	a2 81       	ldd	r26, Z+2	; 0x02
    1930:	b3 81       	ldd	r27, Z+3	; 0x03
    1932:	8c 91       	ld	r24, X
    1934:	96 81       	ldd	r25, Z+6	; 0x06
    1936:	89 27       	eor	r24, r25
    1938:	0c c0       	rjmp	.+24     	; 0x1952 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x2a>
    193a:	a2 81       	ldd	r26, Z+2	; 0x02
    193c:	b3 81       	ldd	r27, Z+3	; 0x03
    193e:	86 81       	ldd	r24, Z+6	; 0x06
    1940:	66 23       	and	r22, r22
    1942:	21 f0       	breq	.+8      	; 0x194c <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x24>
    1944:	9c 91       	ld	r25, X
    1946:	98 2b       	or	r25, r24
    1948:	9c 93       	st	X, r25
    194a:	08 95       	ret
    194c:	9c 91       	ld	r25, X
    194e:	80 95       	com	r24
    1950:	89 23       	and	r24, r25
    1952:	8c 93       	st	X, r24
    1954:	08 95       	ret

00001956 <_ZN16OrangutanDigital9setOutputEhh>:
    1956:	a7 e0       	ldi	r26, 0x07	; 7
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e1 eb       	ldi	r30, 0xB1	; 177
    195c:	fc e0       	ldi	r31, 0x0C	; 12
    195e:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__prologue_saves__+0x1a>
    1962:	28 2f       	mov	r18, r24
    1964:	f6 2e       	mov	r15, r22
    1966:	8e 01       	movw	r16, r28
    1968:	0f 5f       	subi	r16, 0xFF	; 255
    196a:	1f 4f       	sbci	r17, 0xFF	; 255
    196c:	c8 01       	movw	r24, r16
    196e:	62 2f       	mov	r22, r18
    1970:	0e 94 3a 0c 	call	0x1874	; 0x1874 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1974:	c8 01       	movw	r24, r16
    1976:	6f 2d       	mov	r22, r15
    1978:	0e 94 94 0c 	call	0x1928	; 0x1928 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>
    197c:	c8 01       	movw	r24, r16
    197e:	61 e0       	ldi	r22, 0x01	; 1
    1980:	0e 94 85 0c 	call	0x190a	; 0x190a <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>
    1984:	27 96       	adiw	r28, 0x07	; 7
    1986:	e5 e0       	ldi	r30, 0x05	; 5
    1988:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__epilogue_restores__+0x1a>

0000198c <_ZN15OrangutanMotors5init2Ev>:
    198c:	e0 eb       	ldi	r30, 0xB0	; 176
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	83 ef       	ldi	r24, 0xF3	; 243
    1992:	80 83       	st	Z, r24
    1994:	80 81       	ld	r24, Z
    1996:	84 bd       	out	0x24, r24	; 36
    1998:	e1 eb       	ldi	r30, 0xB1	; 177
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	80 83       	st	Z, r24
    19a0:	80 81       	ld	r24, Z
    19a2:	85 bd       	out	0x25, r24	; 37
    19a4:	e4 eb       	ldi	r30, 0xB4	; 180
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	10 82       	st	Z, r1
    19aa:	80 81       	ld	r24, Z
    19ac:	e3 eb       	ldi	r30, 0xB3	; 179
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 83       	st	Z, r24
    19b2:	80 81       	ld	r24, Z
    19b4:	88 bd       	out	0x28, r24	; 40
    19b6:	88 b5       	in	r24, 0x28	; 40
    19b8:	87 bd       	out	0x27, r24	; 39
    19ba:	86 e0       	ldi	r24, 0x06	; 6
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN16OrangutanDigital9setOutputEhh>
    19c2:	85 e0       	ldi	r24, 0x05	; 5
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN16OrangutanDigital9setOutputEhh>
    19ca:	8b e0       	ldi	r24, 0x0B	; 11
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN16OrangutanDigital9setOutputEhh>
    19d2:	83 e0       	ldi	r24, 0x03	; 3
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN16OrangutanDigital9setOutputEhh>
    19da:	08 95       	ret

000019dc <_ZN15OrangutanMotors4initEv>:
    19dc:	80 91 5c 01 	lds	r24, 0x015C
    19e0:	88 23       	and	r24, r24
    19e2:	29 f4       	brne	.+10     	; 0x19ee <_ZN15OrangutanMotors4initEv+0x12>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	80 93 5c 01 	sts	0x015C, r24
    19ea:	0e 94 c6 0c 	call	0x198c	; 0x198c <_ZN15OrangutanMotors5init2Ev>
    19ee:	08 95       	ret

000019f0 <_ZN15OrangutanMotors10setM1SpeedEi>:
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	ec 01       	movw	r28, r24
    19f6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN15OrangutanMotors4initEv>
    19fa:	d7 ff       	sbrs	r29, 7
    19fc:	05 c0       	rjmp	.+10     	; 0x1a08 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    19fe:	d0 95       	com	r29
    1a00:	c1 95       	neg	r28
    1a02:	df 4f       	sbci	r29, 0xFF	; 255
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	cf 3f       	cpi	r28, 0xFF	; 255
    1a0c:	d1 05       	cpc	r29, r1
    1a0e:	19 f0       	breq	.+6      	; 0x1a16 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1a10:	14 f0       	brlt	.+4      	; 0x1a16 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1a12:	cf ef       	ldi	r28, 0xFF	; 255
    1a14:	d0 e0       	ldi	r29, 0x00	; 0
    1a16:	88 23       	and	r24, r24
    1a18:	19 f0       	breq	.+6      	; 0x1a20 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1a1a:	18 bc       	out	0x28, r1	; 40
    1a1c:	c7 bd       	out	0x27, r28	; 39
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1a20:	c8 bd       	out	0x28, r28	; 40
    1a22:	17 bc       	out	0x27, r1	; 39
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	08 95       	ret

00001a2a <_ZN15OrangutanMotors10setM2SpeedEi>:
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	ec 01       	movw	r28, r24
    1a30:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN15OrangutanMotors4initEv>
    1a34:	d7 ff       	sbrs	r29, 7
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1a38:	d0 95       	com	r29
    1a3a:	c1 95       	neg	r28
    1a3c:	df 4f       	sbci	r29, 0xFF	; 255
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	01 c0       	rjmp	.+2      	; 0x1a44 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	cf 3f       	cpi	r28, 0xFF	; 255
    1a46:	d1 05       	cpc	r29, r1
    1a48:	19 f0       	breq	.+6      	; 0x1a50 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1a4a:	14 f0       	brlt	.+4      	; 0x1a50 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1a4c:	cf ef       	ldi	r28, 0xFF	; 255
    1a4e:	d0 e0       	ldi	r29, 0x00	; 0
    1a50:	88 23       	and	r24, r24
    1a52:	29 f0       	breq	.+10     	; 0x1a5e <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1a54:	10 92 b4 00 	sts	0x00B4, r1
    1a58:	c0 93 b3 00 	sts	0x00B3, r28
    1a5c:	04 c0       	rjmp	.+8      	; 0x1a66 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1a5e:	c0 93 b4 00 	sts	0x00B4, r28
    1a62:	10 92 b3 00 	sts	0x00B3, r1
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	08 95       	ret

00001a6c <_ZN15OrangutanMotors9setSpeedsEii>:
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	eb 01       	movw	r28, r22
    1a72:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <_ZN15OrangutanMotors10setM1SpeedEi>
    1a76:	ce 01       	movw	r24, r28
    1a78:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_ZN15OrangutanMotors10setM2SpeedEi>
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	08 95       	ret

00001a82 <set_motors>:
    1a82:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZN15OrangutanMotors9setSpeedsEii>
    1a86:	08 95       	ret

00001a88 <_ZN20OrangutanPushbuttons5init2Ev>:
    1a88:	84 b1       	in	r24, 0x04	; 4
    1a8a:	8d 7c       	andi	r24, 0xCD	; 205
    1a8c:	84 b9       	out	0x04, r24	; 4
    1a8e:	85 b1       	in	r24, 0x05	; 5
    1a90:	82 63       	ori	r24, 0x32	; 50
    1a92:	85 b9       	out	0x05, r24	; 5
    1a94:	85 e0       	ldi	r24, 0x05	; 5
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	6f 93       	push	r22
    1a9a:	64 e0       	ldi	r22, 0x04	; 4
    1a9c:	6a 95       	dec	r22
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1aa0:	6f 91       	pop	r22
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	c9 f7       	brne	.-14     	; 0x1a98 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1aa6:	08 95       	ret

00001aa8 <_ZN20OrangutanPushbuttons4initEv>:
    1aa8:	80 91 5d 01 	lds	r24, 0x015D
    1aac:	88 23       	and	r24, r24
    1aae:	29 f4       	brne	.+10     	; 0x1aba <_ZN20OrangutanPushbuttons4initEv+0x12>
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	80 93 5d 01 	sts	0x015D, r24
    1ab6:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <_ZN20OrangutanPushbuttons5init2Ev>
    1aba:	08 95       	ret

00001abc <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1abc:	1f 93       	push	r17
    1abe:	18 2f       	mov	r17, r24
    1ac0:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN20OrangutanPushbuttons4initEv>
    1ac4:	83 b1       	in	r24, 0x03	; 3
    1ac6:	81 23       	and	r24, r17
    1ac8:	e9 f3       	breq	.-6      	; 0x1ac4 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1aca:	8a e0       	ldi	r24, 0x0A	; 10
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <delay_ms>
    1ad2:	83 b1       	in	r24, 0x03	; 3
    1ad4:	81 23       	and	r24, r17
    1ad6:	b1 f3       	breq	.-20     	; 0x1ac4 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1ad8:	83 b1       	in	r24, 0x03	; 3
    1ada:	81 23       	and	r24, r17
    1adc:	1f 91       	pop	r17
    1ade:	08 95       	ret

00001ae0 <wait_for_button_release>:
    1ae0:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    1ae4:	08 95       	ret

00001ae6 <_ZN20OrangutanPushbuttons9isPressedEh>:
    1ae6:	a1 e0       	ldi	r26, 0x01	; 1
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e9 e7       	ldi	r30, 0x79	; 121
    1aec:	fd e0       	ldi	r31, 0x0D	; 13
    1aee:	0c 94 25 14 	jmp	0x284a	; 0x284a <__prologue_saves__+0x20>
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN20OrangutanPushbuttons4initEv>
    1af8:	93 b1       	in	r25, 0x03	; 3
    1afa:	90 95       	com	r25
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	89 23       	and	r24, r25
    1b00:	21 96       	adiw	r28, 0x01	; 1
    1b02:	e2 e0       	ldi	r30, 0x02	; 2
    1b04:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__epilogue_restores__+0x20>

00001b08 <button_is_pressed>:
    1b08:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <_ZN20OrangutanPushbuttons9isPressedEh>
    1b0c:	08 95       	ret

00001b0e <_ZN13OrangutanTime17delayMicrosecondsEj>:
    1b0e:	6f 93       	push	r22
    1b10:	64 e0       	ldi	r22, 0x04	; 4
    1b12:	6a 95       	dec	r22
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
    1b16:	6f 91       	pop	r22
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	c9 f7       	brne	.-14     	; 0x1b0e <_ZN13OrangutanTime17delayMicrosecondsEj>
    1b1c:	08 95       	ret

00001b1e <__vector_9>:
    1b1e:	2f 92       	push	r2
    1b20:	8f 93       	push	r24
    1b22:	9f 93       	push	r25
    1b24:	2f b6       	in	r2, 0x3f	; 63
    1b26:	80 91 6b 01 	lds	r24, 0x016B
    1b2a:	90 91 6c 01 	lds	r25, 0x016C
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	80 93 6b 01 	sts	0x016B, r24
    1b34:	90 93 6c 01 	sts	0x016C, r25
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	80 91 6d 01 	lds	r24, 0x016D
    1b3e:	89 1f       	adc	r24, r25
    1b40:	80 93 6d 01 	sts	0x016D, r24
    1b44:	90 91 73 01 	lds	r25, 0x0173
    1b48:	9c 5f       	subi	r25, 0xFC	; 252
    1b4a:	90 93 73 01 	sts	0x0173, r25
    1b4e:	80 91 72 01 	lds	r24, 0x0172
    1b52:	80 51       	subi	r24, 0x10	; 16
    1b54:	97 42       	sbci	r25, 0x27	; 39
    1b56:	c0 f0       	brcs	.+48     	; 0x1b88 <end>
    1b58:	90 93 73 01 	sts	0x0173, r25
    1b5c:	80 93 72 01 	sts	0x0172, r24
    1b60:	80 91 6e 01 	lds	r24, 0x016E
    1b64:	90 91 6f 01 	lds	r25, 0x016F
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	80 93 6e 01 	sts	0x016E, r24
    1b6e:	90 93 6f 01 	sts	0x016F, r25
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	80 91 70 01 	lds	r24, 0x0170
    1b78:	89 1f       	adc	r24, r25
    1b7a:	80 93 70 01 	sts	0x0170, r24
    1b7e:	80 91 71 01 	lds	r24, 0x0171
    1b82:	89 1f       	adc	r24, r25
    1b84:	80 93 71 01 	sts	0x0171, r24

00001b88 <end>:
    1b88:	2f be       	out	0x3f, r2	; 63
    1b8a:	9f 91       	pop	r25
    1b8c:	8f 91       	pop	r24
    1b8e:	2f 90       	pop	r2
    1b90:	18 95       	reti

00001b92 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	ec 01       	movw	r28, r24
    1b98:	05 c0       	rjmp	.+10     	; 0x1ba4 <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
    1b9a:	88 ee       	ldi	r24, 0xE8	; 232
    1b9c:	93 e0       	ldi	r25, 0x03	; 3
    1b9e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <_ZN13OrangutanTime17delayMicrosecondsEj>
    1ba2:	21 97       	sbiw	r28, 0x01	; 1
    1ba4:	20 97       	sbiw	r28, 0x00	; 0
    1ba6:	c9 f7       	brne	.-14     	; 0x1b9a <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	08 95       	ret

00001bae <delay_ms>:
    1bae:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN13OrangutanTime17delayMillisecondsEj>
    1bb2:	08 95       	ret

00001bb4 <_ZN13OrangutanTime5init2Ev>:
    1bb4:	e0 e7       	ldi	r30, 0x70	; 112
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	8e 7f       	andi	r24, 0xFE	; 254
    1bbc:	80 83       	st	Z, r24
    1bbe:	a0 eb       	ldi	r26, 0xB0	; 176
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	8c 91       	ld	r24, X
    1bc4:	83 60       	ori	r24, 0x03	; 3
    1bc6:	8c 93       	st	X, r24
    1bc8:	a1 eb       	ldi	r26, 0xB1	; 177
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	8c 91       	ld	r24, X
    1bce:	80 7f       	andi	r24, 0xF0	; 240
    1bd0:	8c 93       	st	X, r24
    1bd2:	8c 91       	ld	r24, X
    1bd4:	82 60       	ori	r24, 0x02	; 2
    1bd6:	8c 93       	st	X, r24
    1bd8:	b8 9a       	sbi	0x17, 0	; 23
    1bda:	80 81       	ld	r24, Z
    1bdc:	81 60       	ori	r24, 0x01	; 1
    1bde:	80 83       	st	Z, r24
    1be0:	78 94       	sei
    1be2:	08 95       	ret

00001be4 <_ZN13OrangutanTime4initEv>:
    1be4:	80 91 74 01 	lds	r24, 0x0174
    1be8:	88 23       	and	r24, r24
    1bea:	29 f4       	brne	.+10     	; 0x1bf6 <_ZN13OrangutanTime4initEv+0x12>
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	80 93 74 01 	sts	0x0174, r24
    1bf2:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <_ZN13OrangutanTime5init2Ev>
    1bf6:	08 95       	ret

00001bf8 <_ZN13OrangutanTime5resetEv>:
    1bf8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN13OrangutanTime4initEv>
    1bfc:	e0 e7       	ldi	r30, 0x70	; 112
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	8e 7f       	andi	r24, 0xFE	; 254
    1c04:	80 83       	st	Z, r24
    1c06:	10 92 6e 01 	sts	0x016E, r1
    1c0a:	10 92 6f 01 	sts	0x016F, r1
    1c0e:	10 92 70 01 	sts	0x0170, r1
    1c12:	10 92 71 01 	sts	0x0171, r1
    1c16:	10 92 73 01 	sts	0x0173, r1
    1c1a:	10 92 72 01 	sts	0x0172, r1
    1c1e:	80 81       	ld	r24, Z
    1c20:	81 60       	ori	r24, 0x01	; 1
    1c22:	80 83       	st	Z, r24
    1c24:	08 95       	ret

00001c26 <calibrate_line_sensors>:
    1c26:	68 2f       	mov	r22, r24
    1c28:	85 e7       	ldi	r24, 0x75	; 117
    1c2a:	91 e0       	ldi	r25, 0x01	; 1
    1c2c:	0e 94 43 13 	call	0x2686	; 0x2686 <_ZN16PololuQTRSensors9calibrateEh>
    1c30:	08 95       	ret

00001c32 <read_line>:
    1c32:	9c 01       	movw	r18, r24
    1c34:	46 2f       	mov	r20, r22
    1c36:	85 e7       	ldi	r24, 0x75	; 117
    1c38:	91 e0       	ldi	r25, 0x01	; 1
    1c3a:	b9 01       	movw	r22, r18
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	0e 94 a1 11 	call	0x2342	; 0x2342 <_ZN16PololuQTRSensors8readLineEPjhh>
    1c42:	08 95       	ret

00001c44 <_ZN9Pololu3pi4initEjh>:
    1c44:	0f 93       	push	r16
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <_ZN9Pololu3pi4initEjh+0x8>
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <_ZN9Pololu3pi4initEjh+0xa>
    1c4e:	0f 92       	push	r0
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	9c 01       	movw	r18, r24
    1c56:	96 2f       	mov	r25, r22
    1c58:	de 01       	movw	r26, r28
    1c5a:	11 96       	adiw	r26, 0x01	; 1
    1c5c:	e6 e2       	ldi	r30, 0x26	; 38
    1c5e:	f1 e0       	ldi	r31, 0x01	; 1
    1c60:	85 e0       	ldi	r24, 0x05	; 5
    1c62:	01 90       	ld	r0, Z+
    1c64:	0d 92       	st	X+, r0
    1c66:	81 50       	subi	r24, 0x01	; 1
    1c68:	e1 f7       	brne	.-8      	; 0x1c62 <_ZN9Pololu3pi4initEjh+0x1e>
    1c6a:	be 01       	movw	r22, r28
    1c6c:	6f 5f       	subi	r22, 0xFF	; 255
    1c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c70:	99 23       	and	r25, r25
    1c72:	29 f0       	breq	.+10     	; 0x1c7e <_ZN9Pololu3pi4initEjh+0x3a>
    1c74:	85 e7       	ldi	r24, 0x75	; 117
    1c76:	91 e0       	ldi	r25, 0x01	; 1
    1c78:	45 e0       	ldi	r20, 0x05	; 5
    1c7a:	0f ef       	ldi	r16, 0xFF	; 255
    1c7c:	04 c0       	rjmp	.+8      	; 0x1c86 <_ZN9Pololu3pi4initEjh+0x42>
    1c7e:	85 e7       	ldi	r24, 0x75	; 117
    1c80:	91 e0       	ldi	r25, 0x01	; 1
    1c82:	45 e0       	ldi	r20, 0x05	; 5
    1c84:	03 e1       	ldi	r16, 0x13	; 19
    1c86:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1c8a:	85 e7       	ldi	r24, 0x75	; 117
    1c8c:	91 e0       	ldi	r25, 0x01	; 1
    1c8e:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN16PololuQTRSensors11emittersOffEv>
    1c92:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <_ZN13OrangutanTime5resetEv>
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	0f 91       	pop	r16
    1ca6:	08 95       	ret

00001ca8 <pololu_3pi_init>:
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <_ZN9Pololu3pi4initEjh>
    1cae:	08 95       	ret

00001cb0 <_GLOBAL__I_pololu_3pi_init>:
    1cb0:	08 95       	ret

00001cb2 <_GLOBAL__D_pololu_3pi_init>:
    1cb2:	85 e7       	ldi	r24, 0x75	; 117
    1cb4:	91 e0       	ldi	r25, 0x01	; 1
    1cb6:	0e 94 67 13 	call	0x26ce	; 0x26ce <_ZN16PololuQTRSensorsD1Ev>
    1cba:	08 95       	ret

00001cbc <delayMicroseconds>:
    1cbc:	6f 93       	push	r22
    1cbe:	64 e0       	ldi	r22, 0x04	; 4
    1cc0:	6a 95       	dec	r22
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <delayMicroseconds+0x4>
    1cc4:	6f 91       	pop	r22
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	c9 f7       	brne	.-14     	; 0x1cbc <delayMicroseconds>
    1cca:	08 95       	ret

00001ccc <_ZN16PololuQTRSensors4initEhhh>:
    1ccc:	a7 e0       	ldi	r26, 0x07	; 7
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	ec e6       	ldi	r30, 0x6C	; 108
    1cd2:	fe e0       	ldi	r31, 0x0E	; 14
    1cd4:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__prologue_saves__+0x1c>
    1cd8:	8c 01       	movw	r16, r24
    1cda:	fc 01       	movw	r30, r24
    1cdc:	11 82       	std	Z+1, r1	; 0x01
    1cde:	10 82       	st	Z, r1
    1ce0:	13 82       	std	Z+3, r1	; 0x03
    1ce2:	12 82       	std	Z+2, r1	; 0x02
    1ce4:	15 82       	std	Z+5, r1	; 0x05
    1ce6:	14 82       	std	Z+4, r1	; 0x04
    1ce8:	17 82       	std	Z+7, r1	; 0x07
    1cea:	16 82       	std	Z+6, r1	; 0x06
    1cec:	61 31       	cpi	r22, 0x11	; 17
    1cee:	18 f0       	brcs	.+6      	; 0x1cf6 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1cf0:	80 e1       	ldi	r24, 0x10	; 16
    1cf2:	80 87       	std	Z+8, r24	; 0x08
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	60 87       	std	Z+8, r22	; 0x08
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	20 8b       	std	Z+16, r18	; 0x10
    1cfe:	ce 01       	movw	r24, r28
    1d00:	01 96       	adiw	r24, 0x01	; 1
    1d02:	64 2f       	mov	r22, r20
    1d04:	0e 94 3a 0c 	call	0x1874	; 0x1874 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1d08:	8f 81       	ldd	r24, Y+7	; 0x07
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	81 87       	std	Z+9, r24	; 0x09
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	93 87       	std	Z+11, r25	; 0x0b
    1d14:	82 87       	std	Z+10, r24	; 0x0a
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1a:	95 87       	std	Z+13, r25	; 0x0d
    1d1c:	84 87       	std	Z+12, r24	; 0x0c
    1d1e:	27 96       	adiw	r28, 0x07	; 7
    1d20:	e4 e0       	ldi	r30, 0x04	; 4
    1d22:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__epilogue_restores__+0x1c>

00001d26 <_ZN16PololuQTRSensors11emittersOffEv>:
    1d26:	fc 01       	movw	r30, r24
    1d28:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d2a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d2c:	10 97       	sbiw	r26, 0x00	; 0
    1d2e:	79 f0       	breq	.+30     	; 0x1d4e <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    1d30:	8c 91       	ld	r24, X
    1d32:	91 85       	ldd	r25, Z+9	; 0x09
    1d34:	89 2b       	or	r24, r25
    1d36:	8c 93       	st	X, r24
    1d38:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d3a:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d3c:	9c 91       	ld	r25, X
    1d3e:	81 85       	ldd	r24, Z+9	; 0x09
    1d40:	80 95       	com	r24
    1d42:	89 23       	and	r24, r25
    1d44:	8c 93       	st	X, r24
    1d46:	88 ec       	ldi	r24, 0xC8	; 200
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <delayMicroseconds>
    1d4e:	08 95       	ret

00001d50 <_ZN16PololuQTRSensors10emittersOnEv>:
    1d50:	fc 01       	movw	r30, r24
    1d52:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d54:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d56:	10 97       	sbiw	r26, 0x00	; 0
    1d58:	71 f0       	breq	.+28     	; 0x1d76 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    1d5a:	8c 91       	ld	r24, X
    1d5c:	91 85       	ldd	r25, Z+9	; 0x09
    1d5e:	89 2b       	or	r24, r25
    1d60:	8c 93       	st	X, r24
    1d62:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d64:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d66:	8c 91       	ld	r24, X
    1d68:	91 85       	ldd	r25, Z+9	; 0x09
    1d6a:	89 2b       	or	r24, r25
    1d6c:	8c 93       	st	X, r24
    1d6e:	88 ec       	ldi	r24, 0xC8	; 200
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <delayMicroseconds>
    1d76:	08 95       	ret

00001d78 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    1d78:	a7 e0       	ldi	r26, 0x07	; 7
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e2 ec       	ldi	r30, 0xC2	; 194
    1d7e:	fe e0       	ldi	r31, 0x0E	; 14
    1d80:	0c 94 15 14 	jmp	0x282a	; 0x282a <__prologue_saves__>
    1d84:	7c 01       	movw	r14, r24
    1d86:	1b 01       	movw	r2, r22
    1d88:	64 2f       	mov	r22, r20
    1d8a:	39 01       	movw	r6, r18
    1d8c:	40 2f       	mov	r20, r16
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <_ZN16PololuQTRSensors4initEhhh>
    1d94:	97 01       	movw	r18, r14
    1d96:	2f 5b       	subi	r18, 0xBF	; 191
    1d98:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9a:	f9 01       	movw	r30, r18
    1d9c:	10 82       	st	Z, r1
    1d9e:	d7 01       	movw	r26, r14
    1da0:	ae 5b       	subi	r26, 0xBE	; 190
    1da2:	bf 4f       	sbci	r27, 0xFF	; 255
    1da4:	1c 92       	st	X, r1
    1da6:	c7 01       	movw	r24, r14
    1da8:	8d 5b       	subi	r24, 0xBD	; 189
    1daa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dac:	fc 01       	movw	r30, r24
    1dae:	10 82       	st	Z, r1
    1db0:	f7 01       	movw	r30, r14
    1db2:	77 86       	std	Z+15, r7	; 0x0f
    1db4:	66 86       	std	Z+14, r6	; 0x0e
    1db6:	66 24       	eor	r6, r6
    1db8:	2e 01       	movw	r4, r28
    1dba:	08 94       	sec
    1dbc:	41 1c       	adc	r4, r1
    1dbe:	51 1c       	adc	r5, r1
    1dc0:	6c 01       	movw	r12, r24
    1dc2:	5d 01       	movw	r10, r26
    1dc4:	49 01       	movw	r8, r18
    1dc6:	29 c0       	rjmp	.+82     	; 0x1e1a <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1dc8:	06 2d       	mov	r16, r6
    1dca:	10 e0       	ldi	r17, 0x00	; 0
    1dcc:	f1 01       	movw	r30, r2
    1dce:	e0 0f       	add	r30, r16
    1dd0:	f1 1f       	adc	r31, r17
    1dd2:	c2 01       	movw	r24, r4
    1dd4:	60 81       	ld	r22, Z
    1dd6:	0e 94 3a 0c 	call	0x1874	; 0x1874 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1dda:	2f 81       	ldd	r18, Y+7	; 0x07
    1ddc:	f7 01       	movw	r30, r14
    1dde:	e0 0f       	add	r30, r16
    1de0:	f1 1f       	adc	r31, r17
    1de2:	21 8b       	std	Z+17, r18	; 0x11
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	f8 01       	movw	r30, r16
    1dea:	ee 0f       	add	r30, r30
    1dec:	ff 1f       	adc	r31, r31
    1dee:	ee 0d       	add	r30, r14
    1df0:	ff 1d       	adc	r31, r15
    1df2:	92 a3       	std	Z+34, r25	; 0x22
    1df4:	81 a3       	std	Z+33, r24	; 0x21
    1df6:	83 32       	cpi	r24, 0x23	; 35
    1df8:	91 05       	cpc	r25, r1
    1dfa:	11 f4       	brne	.+4      	; 0x1e00 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1dfc:	f4 01       	movw	r30, r8
    1dfe:	09 c0       	rjmp	.+18     	; 0x1e12 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1e00:	86 32       	cpi	r24, 0x26	; 38
    1e02:	91 05       	cpc	r25, r1
    1e04:	11 f4       	brne	.+4      	; 0x1e0a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1e06:	f5 01       	movw	r30, r10
    1e08:	04 c0       	rjmp	.+8      	; 0x1e12 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1e0a:	89 32       	cpi	r24, 0x29	; 41
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	21 f4       	brne	.+8      	; 0x1e18 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa0>
    1e10:	f6 01       	movw	r30, r12
    1e12:	80 81       	ld	r24, Z
    1e14:	82 2b       	or	r24, r18
    1e16:	80 83       	st	Z, r24
    1e18:	63 94       	inc	r6
    1e1a:	f7 01       	movw	r30, r14
    1e1c:	80 85       	ldd	r24, Z+8	; 0x08
    1e1e:	68 16       	cp	r6, r24
    1e20:	98 f2       	brcs	.-90     	; 0x1dc8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x50>
    1e22:	27 96       	adiw	r28, 0x07	; 7
    1e24:	e2 e1       	ldi	r30, 0x12	; 18
    1e26:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__epilogue_restores__>

00001e2a <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1e2a:	a0 e0       	ldi	r26, 0x00	; 0
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	eb e1       	ldi	r30, 0x1B	; 27
    1e30:	ff e0       	ldi	r31, 0x0F	; 15
    1e32:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__prologue_saves__+0xa>
    1e36:	ec 01       	movw	r28, r24
    1e38:	5b 01       	movw	r10, r22
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	ef 5b       	subi	r30, 0xBF	; 191
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	90 80       	ld	r9, Z
    1e42:	fc 01       	movw	r30, r24
    1e44:	ee 5b       	subi	r30, 0xBE	; 190
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	80 80       	ld	r8, Z
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	ed 5b       	subi	r30, 0xBD	; 189
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	70 80       	ld	r7, Z
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	09 c0       	rjmp	.+18     	; 0x1e68 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x3e>
    1e56:	e8 2f       	mov	r30, r24
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	ee 0f       	add	r30, r30
    1e5c:	ff 1f       	adc	r31, r31
    1e5e:	ea 0d       	add	r30, r10
    1e60:	fb 1d       	adc	r31, r11
    1e62:	11 82       	std	Z+1, r1	; 0x01
    1e64:	10 82       	st	Z, r1
    1e66:	8f 5f       	subi	r24, 0xFF	; 255
    1e68:	98 85       	ldd	r25, Y+8	; 0x08
    1e6a:	89 17       	cp	r24, r25
    1e6c:	a0 f3       	brcs	.-24     	; 0x1e56 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x2c>
    1e6e:	84 b1       	in	r24, 0x04	; 4
    1e70:	21 e4       	ldi	r18, 0x41	; 65
    1e72:	e2 2e       	mov	r14, r18
    1e74:	f1 2c       	mov	r15, r1
    1e76:	ec 0e       	add	r14, r28
    1e78:	fd 1e       	adc	r15, r29
    1e7a:	d7 01       	movw	r26, r14
    1e7c:	9c 91       	ld	r25, X
    1e7e:	89 2b       	or	r24, r25
    1e80:	84 b9       	out	0x04, r24	; 4
    1e82:	87 b1       	in	r24, 0x07	; 7
    1e84:	8e 01       	movw	r16, r28
    1e86:	0e 5b       	subi	r16, 0xBE	; 190
    1e88:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	90 81       	ld	r25, Z
    1e8e:	89 2b       	or	r24, r25
    1e90:	87 b9       	out	0x07, r24	; 7
    1e92:	8a b1       	in	r24, 0x0a	; 10
    1e94:	93 e4       	ldi	r25, 0x43	; 67
    1e96:	c9 2e       	mov	r12, r25
    1e98:	d1 2c       	mov	r13, r1
    1e9a:	cc 0e       	add	r12, r28
    1e9c:	dd 1e       	adc	r13, r29
    1e9e:	d6 01       	movw	r26, r12
    1ea0:	9c 91       	ld	r25, X
    1ea2:	89 2b       	or	r24, r25
    1ea4:	8a b9       	out	0x0a, r24	; 10
    1ea6:	85 b1       	in	r24, 0x05	; 5
    1ea8:	f7 01       	movw	r30, r14
    1eaa:	90 81       	ld	r25, Z
    1eac:	89 2b       	or	r24, r25
    1eae:	85 b9       	out	0x05, r24	; 5
    1eb0:	88 b1       	in	r24, 0x08	; 8
    1eb2:	d8 01       	movw	r26, r16
    1eb4:	9c 91       	ld	r25, X
    1eb6:	89 2b       	or	r24, r25
    1eb8:	88 b9       	out	0x08, r24	; 8
    1eba:	8b b1       	in	r24, 0x0b	; 11
    1ebc:	f6 01       	movw	r30, r12
    1ebe:	90 81       	ld	r25, Z
    1ec0:	89 2b       	or	r24, r25
    1ec2:	8b b9       	out	0x0b, r24	; 11
    1ec4:	8a e0       	ldi	r24, 0x0A	; 10
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <delayMicroseconds>
    1ecc:	94 b1       	in	r25, 0x04	; 4
    1ece:	d7 01       	movw	r26, r14
    1ed0:	8c 91       	ld	r24, X
    1ed2:	80 95       	com	r24
    1ed4:	89 23       	and	r24, r25
    1ed6:	84 b9       	out	0x04, r24	; 4
    1ed8:	97 b1       	in	r25, 0x07	; 7
    1eda:	f8 01       	movw	r30, r16
    1edc:	80 81       	ld	r24, Z
    1ede:	80 95       	com	r24
    1ee0:	89 23       	and	r24, r25
    1ee2:	87 b9       	out	0x07, r24	; 7
    1ee4:	9a b1       	in	r25, 0x0a	; 10
    1ee6:	d6 01       	movw	r26, r12
    1ee8:	8c 91       	ld	r24, X
    1eea:	80 95       	com	r24
    1eec:	89 23       	and	r24, r25
    1eee:	8a b9       	out	0x0a, r24	; 10
    1ef0:	95 b1       	in	r25, 0x05	; 5
    1ef2:	f7 01       	movw	r30, r14
    1ef4:	80 81       	ld	r24, Z
    1ef6:	80 95       	com	r24
    1ef8:	89 23       	and	r24, r25
    1efa:	85 b9       	out	0x05, r24	; 5
    1efc:	98 b1       	in	r25, 0x08	; 8
    1efe:	d8 01       	movw	r26, r16
    1f00:	8c 91       	ld	r24, X
    1f02:	80 95       	com	r24
    1f04:	89 23       	and	r24, r25
    1f06:	88 b9       	out	0x08, r24	; 8
    1f08:	9b b1       	in	r25, 0x0b	; 11
    1f0a:	f6 01       	movw	r30, r12
    1f0c:	80 81       	ld	r24, Z
    1f0e:	80 95       	com	r24
    1f10:	89 23       	and	r24, r25
    1f12:	8b b9       	out	0x0b, r24	; 11
    1f14:	c0 90 b0 00 	lds	r12, 0x00B0
    1f18:	e0 90 b1 00 	lds	r14, 0x00B1
    1f1c:	80 91 b0 00 	lds	r24, 0x00B0
    1f20:	83 60       	ori	r24, 0x03	; 3
    1f22:	80 93 b0 00 	sts	0x00B0, r24
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	80 93 b1 00 	sts	0x00B1, r24
    1f2c:	00 91 b2 00 	lds	r16, 0x00B2
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	39 c0       	rjmp	.+114    	; 0x1fa8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17e>
    1f36:	20 91 b2 00 	lds	r18, 0x00B2
    1f3a:	20 1b       	sub	r18, r16
    1f3c:	82 0f       	add	r24, r18
    1f3e:	91 1d       	adc	r25, r1
    1f40:	02 0f       	add	r16, r18
    1f42:	f3 b0       	in	r15, 0x03	; 3
    1f44:	f9 14       	cp	r15, r9
    1f46:	09 f0       	breq	.+2      	; 0x1f4a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x120>
    1f48:	4d c0       	rjmp	.+154    	; 0x1fe4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f4a:	96 b0       	in	r9, 0x06	; 6
    1f4c:	98 14       	cp	r9, r8
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x128>
    1f50:	49 c0       	rjmp	.+146    	; 0x1fe4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f52:	29 b1       	in	r18, 0x09	; 9
    1f54:	27 15       	cp	r18, r7
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x130>
    1f58:	45 c0       	rjmp	.+138    	; 0x1fe4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f5a:	24 c0       	rjmp	.+72     	; 0x1fa4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17a>
    1f5c:	21 2f       	mov	r18, r17
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	a9 01       	movw	r20, r18
    1f62:	44 0f       	add	r20, r20
    1f64:	55 1f       	adc	r21, r21
    1f66:	f5 01       	movw	r30, r10
    1f68:	e4 0f       	add	r30, r20
    1f6a:	f5 1f       	adc	r31, r21
    1f6c:	60 81       	ld	r22, Z
    1f6e:	71 81       	ldd	r23, Z+1	; 0x01
    1f70:	61 15       	cp	r22, r1
    1f72:	71 05       	cpc	r23, r1
    1f74:	99 f4       	brne	.+38     	; 0x1f9c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    1f76:	4c 0f       	add	r20, r28
    1f78:	5d 1f       	adc	r21, r29
    1f7a:	da 01       	movw	r26, r20
    1f7c:	91 96       	adiw	r26, 0x21	; 33
    1f7e:	4d 91       	ld	r20, X+
    1f80:	5c 91       	ld	r21, X
    1f82:	92 97       	sbiw	r26, 0x22	; 34
    1f84:	da 01       	movw	r26, r20
    1f86:	4c 91       	ld	r20, X
    1f88:	2c 0f       	add	r18, r28
    1f8a:	3d 1f       	adc	r19, r29
    1f8c:	d9 01       	movw	r26, r18
    1f8e:	51 96       	adiw	r26, 0x11	; 17
    1f90:	2c 91       	ld	r18, X
    1f92:	51 97       	sbiw	r26, 0x11	; 17
    1f94:	42 23       	and	r20, r18
    1f96:	11 f4       	brne	.+4      	; 0x1f9c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    1f98:	91 83       	std	Z+1, r25	; 0x01
    1f9a:	80 83       	st	Z, r24
    1f9c:	1f 5f       	subi	r17, 0xFF	; 255
    1f9e:	28 85       	ldd	r18, Y+8	; 0x08
    1fa0:	12 17       	cp	r17, r18
    1fa2:	e0 f2       	brcs	.-72     	; 0x1f5c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x132>
    1fa4:	89 2c       	mov	r8, r9
    1fa6:	9f 2c       	mov	r9, r15
    1fa8:	2e 85       	ldd	r18, Y+14	; 0x0e
    1faa:	3f 85       	ldd	r19, Y+15	; 0x0f
    1fac:	82 17       	cp	r24, r18
    1fae:	93 07       	cpc	r25, r19
    1fb0:	10 f2       	brcs	.-124    	; 0x1f36 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x10c>
    1fb2:	c0 92 b0 00 	sts	0x00B0, r12
    1fb6:	e0 92 b1 00 	sts	0x00B1, r14
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	0f c0       	rjmp	.+30     	; 0x1fdc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b2>
    1fbe:	e2 2f       	mov	r30, r18
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	ee 0f       	add	r30, r30
    1fc4:	ff 1f       	adc	r31, r31
    1fc6:	ea 0d       	add	r30, r10
    1fc8:	fb 1d       	adc	r31, r11
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	21 f4       	brne	.+8      	; 0x1fda <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b0>
    1fd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fd4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fd6:	91 83       	std	Z+1, r25	; 0x01
    1fd8:	80 83       	st	Z, r24
    1fda:	2f 5f       	subi	r18, 0xFF	; 255
    1fdc:	88 85       	ldd	r24, Y+8	; 0x08
    1fde:	28 17       	cp	r18, r24
    1fe0:	70 f3       	brcs	.-36     	; 0x1fbe <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x194>
    1fe2:	05 c0       	rjmp	.+10     	; 0x1fee <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1c4>
    1fe4:	f3 b0       	in	r15, 0x03	; 3
    1fe6:	96 b0       	in	r9, 0x06	; 6
    1fe8:	79 b0       	in	r7, 0x09	; 9
    1fea:	10 e0       	ldi	r17, 0x00	; 0
    1fec:	d8 cf       	rjmp	.-80     	; 0x1f9e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	ed e0       	ldi	r30, 0x0D	; 13
    1ff4:	0c 94 36 14 	jmp	0x286c	; 0x286c <__epilogue_restores__+0xa>

00001ff8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1ff8:	ef 92       	push	r14
    1ffa:	ff 92       	push	r15
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
    2004:	fc 01       	movw	r30, r24
    2006:	9b 01       	movw	r18, r22
    2008:	00 91 7c 00 	lds	r16, 0x007C
    200c:	10 91 7a 00 	lds	r17, 0x007A
    2010:	e7 b0       	in	r14, 0x07	; 7
    2012:	f8 b0       	in	r15, 0x08	; 8
    2014:	80 91 7a 00 	lds	r24, 0x007A
    2018:	86 fd       	sbrc	r24, 6
    201a:	fc cf       	rjmp	.-8      	; 0x2014 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	0a c0       	rjmp	.+20     	; 0x2034 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3c>
    2020:	a8 2f       	mov	r26, r24
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	aa 0f       	add	r26, r26
    2026:	bb 1f       	adc	r27, r27
    2028:	a2 0f       	add	r26, r18
    202a:	b3 1f       	adc	r27, r19
    202c:	11 96       	adiw	r26, 0x01	; 1
    202e:	1c 92       	st	X, r1
    2030:	1e 92       	st	-X, r1
    2032:	8f 5f       	subi	r24, 0xFF	; 255
    2034:	90 85       	ldd	r25, Z+8	; 0x08
    2036:	89 17       	cp	r24, r25
    2038:	98 f3       	brcs	.-26     	; 0x2020 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x28>
    203a:	97 b1       	in	r25, 0x07	; 7
    203c:	82 a1       	ldd	r24, Z+34	; 0x22
    203e:	80 95       	com	r24
    2040:	89 23       	and	r24, r25
    2042:	87 b9       	out	0x07, r24	; 7
    2044:	98 b1       	in	r25, 0x08	; 8
    2046:	82 a1       	ldd	r24, Z+34	; 0x22
    2048:	80 95       	com	r24
    204a:	89 23       	and	r24, r25
    204c:	88 b9       	out	0x08, r24	; 8
    204e:	87 e8       	ldi	r24, 0x87	; 135
    2050:	80 93 7a 00 	sts	0x007A, r24
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	29 c0       	rjmp	.+82     	; 0x20aa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2058:	df 01       	movw	r26, r30
    205a:	a6 0f       	add	r26, r22
    205c:	b1 1d       	adc	r27, r1
    205e:	51 96       	adiw	r26, 0x11	; 17
    2060:	8c 91       	ld	r24, X
    2062:	51 97       	sbiw	r26, 0x11	; 17
    2064:	80 64       	ori	r24, 0x40	; 64
    2066:	80 93 7c 00 	sts	0x007C, r24
    206a:	80 91 7a 00 	lds	r24, 0x007A
    206e:	80 64       	ori	r24, 0x40	; 64
    2070:	80 93 7a 00 	sts	0x007A, r24
    2074:	80 91 7a 00 	lds	r24, 0x007A
    2078:	86 fd       	sbrc	r24, 6
    207a:	fc cf       	rjmp	.-8      	; 0x2074 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x7c>
    207c:	a6 2f       	mov	r26, r22
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	aa 0f       	add	r26, r26
    2082:	bb 1f       	adc	r27, r27
    2084:	a2 0f       	add	r26, r18
    2086:	b3 1f       	adc	r27, r19
    2088:	40 91 78 00 	lds	r20, 0x0078
    208c:	50 91 79 00 	lds	r21, 0x0079
    2090:	8d 91       	ld	r24, X+
    2092:	9c 91       	ld	r25, X
    2094:	11 97       	sbiw	r26, 0x01	; 1
    2096:	84 0f       	add	r24, r20
    2098:	95 1f       	adc	r25, r21
    209a:	11 96       	adiw	r26, 0x01	; 1
    209c:	9c 93       	st	X, r25
    209e:	8e 93       	st	-X, r24
    20a0:	6f 5f       	subi	r22, 0xFF	; 255
    20a2:	80 85       	ldd	r24, Z+8	; 0x08
    20a4:	68 17       	cp	r22, r24
    20a6:	c0 f2       	brcs	.-80     	; 0x2058 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x60>
    20a8:	7f 5f       	subi	r23, 0xFF	; 255
    20aa:	81 a1       	ldd	r24, Z+33	; 0x21
    20ac:	78 17       	cp	r23, r24
    20ae:	10 f4       	brcc	.+4      	; 0x20b4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xbc>
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	f7 cf       	rjmp	.-18     	; 0x20a2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xaa>
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	14 c0       	rjmp	.+40     	; 0x20e0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe8>
    20b8:	c4 2f       	mov	r28, r20
    20ba:	d0 e0       	ldi	r29, 0x00	; 0
    20bc:	cc 0f       	add	r28, r28
    20be:	dd 1f       	adc	r29, r29
    20c0:	c2 0f       	add	r28, r18
    20c2:	d3 1f       	adc	r29, r19
    20c4:	61 a1       	ldd	r22, Z+33	; 0x21
    20c6:	70 e0       	ldi	r23, 0x00	; 0
    20c8:	cb 01       	movw	r24, r22
    20ca:	95 95       	asr	r25
    20cc:	87 95       	ror	r24
    20ce:	a8 81       	ld	r26, Y
    20d0:	b9 81       	ldd	r27, Y+1	; 0x01
    20d2:	8a 0f       	add	r24, r26
    20d4:	9b 1f       	adc	r25, r27
    20d6:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodhi4>
    20da:	79 83       	std	Y+1, r23	; 0x01
    20dc:	68 83       	st	Y, r22
    20de:	4f 5f       	subi	r20, 0xFF	; 255
    20e0:	80 85       	ldd	r24, Z+8	; 0x08
    20e2:	48 17       	cp	r20, r24
    20e4:	48 f3       	brcs	.-46     	; 0x20b8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xc0>
    20e6:	00 93 7c 00 	sts	0x007C, r16
    20ea:	10 93 7a 00 	sts	0x007A, r17
    20ee:	f8 b8       	out	0x08, r15	; 8
    20f0:	e7 b8       	out	0x07, r14	; 7
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	e6 e0       	ldi	r30, 0x06	; 6
    20f8:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__epilogue_restores__+0x18>

000020fc <_ZN16PololuQTRSensors4readEPjh>:
    20fc:	a0 e2       	ldi	r26, 0x20	; 32
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e4 e8       	ldi	r30, 0x84	; 132
    2102:	f0 e1       	ldi	r31, 0x10	; 16
    2104:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__+0x16>
    2108:	8c 01       	movw	r16, r24
    210a:	7b 01       	movw	r14, r22
    210c:	d4 2e       	mov	r13, r20
    210e:	84 2f       	mov	r24, r20
    2110:	81 50       	subi	r24, 0x01	; 1
    2112:	82 30       	cpi	r24, 0x02	; 2
    2114:	18 f4       	brcc	.+6      	; 0x211c <_ZN16PololuQTRSensors4readEPjh+0x20>
    2116:	c8 01       	movw	r24, r16
    2118:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_ZN16PololuQTRSensors10emittersOnEv>
    211c:	d8 01       	movw	r26, r16
    211e:	50 96       	adiw	r26, 0x10	; 16
    2120:	8c 91       	ld	r24, X
    2122:	50 97       	sbiw	r26, 0x10	; 16
    2124:	88 23       	and	r24, r24
    2126:	89 f4       	brne	.+34     	; 0x214a <_ZN16PololuQTRSensors4readEPjh+0x4e>
    2128:	c8 01       	movw	r24, r16
    212a:	b7 01       	movw	r22, r14
    212c:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2130:	c8 01       	movw	r24, r16
    2132:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN16PololuQTRSensors11emittersOffEv>
    2136:	bd 2d       	mov	r27, r13
    2138:	b2 30       	cpi	r27, 0x02	; 2
    213a:	d9 f5       	brne	.+118    	; 0x21b2 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    213c:	c8 01       	movw	r24, r16
    213e:	be 01       	movw	r22, r28
    2140:	6f 5f       	subi	r22, 0xFF	; 255
    2142:	7f 4f       	sbci	r23, 0xFF	; 255
    2144:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2148:	10 c0       	rjmp	.+32     	; 0x216a <_ZN16PololuQTRSensors4readEPjh+0x6e>
    214a:	c8 01       	movw	r24, r16
    214c:	b7 01       	movw	r22, r14
    214e:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2152:	c8 01       	movw	r24, r16
    2154:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN16PololuQTRSensors11emittersOffEv>
    2158:	ed 2d       	mov	r30, r13
    215a:	e2 30       	cpi	r30, 0x02	; 2
    215c:	51 f5       	brne	.+84     	; 0x21b2 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    215e:	c8 01       	movw	r24, r16
    2160:	be 01       	movw	r22, r28
    2162:	6f 5f       	subi	r22, 0xFF	; 255
    2164:	7f 4f       	sbci	r23, 0xFF	; 255
    2166:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    216a:	60 e0       	ldi	r22, 0x00	; 0
    216c:	ae 01       	movw	r20, r28
    216e:	4f 5f       	subi	r20, 0xFF	; 255
    2170:	5f 4f       	sbci	r21, 0xFF	; 255
    2172:	1b c0       	rjmp	.+54     	; 0x21aa <_ZN16PololuQTRSensors4readEPjh+0xae>
    2174:	86 2f       	mov	r24, r22
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	f7 01       	movw	r30, r14
    217e:	e8 0f       	add	r30, r24
    2180:	f9 1f       	adc	r31, r25
    2182:	84 0f       	add	r24, r20
    2184:	95 1f       	adc	r25, r21
    2186:	d8 01       	movw	r26, r16
    2188:	1e 96       	adiw	r26, 0x0e	; 14
    218a:	2d 91       	ld	r18, X+
    218c:	3c 91       	ld	r19, X
    218e:	1f 97       	sbiw	r26, 0x0f	; 15
    2190:	dc 01       	movw	r26, r24
    2192:	8d 91       	ld	r24, X+
    2194:	9c 91       	ld	r25, X
    2196:	11 97       	sbiw	r26, 0x01	; 1
    2198:	28 1b       	sub	r18, r24
    219a:	39 0b       	sbc	r19, r25
    219c:	80 81       	ld	r24, Z
    219e:	91 81       	ldd	r25, Z+1	; 0x01
    21a0:	82 0f       	add	r24, r18
    21a2:	93 1f       	adc	r25, r19
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
    21a8:	6f 5f       	subi	r22, 0xFF	; 255
    21aa:	f8 01       	movw	r30, r16
    21ac:	80 85       	ldd	r24, Z+8	; 0x08
    21ae:	68 17       	cp	r22, r24
    21b0:	08 f3       	brcs	.-62     	; 0x2174 <_ZN16PololuQTRSensors4readEPjh+0x78>
    21b2:	a0 96       	adiw	r28, 0x20	; 32
    21b4:	e7 e0       	ldi	r30, 0x07	; 7
    21b6:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__+0x16>

000021ba <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    21ba:	8f 92       	push	r8
    21bc:	9f 92       	push	r9
    21be:	af 92       	push	r10
    21c0:	bf 92       	push	r11
    21c2:	cf 92       	push	r12
    21c4:	df 92       	push	r13
    21c6:	ff 92       	push	r15
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	ec 01       	movw	r28, r24
    21d2:	c6 2e       	mov	r12, r22
    21d4:	07 2f       	mov	r16, r23
    21d6:	f4 2e       	mov	r15, r20
    21d8:	42 30       	cpi	r20, 0x02	; 2
    21da:	11 f0       	breq	.+4      	; 0x21e0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x26>
    21dc:	ff 20       	and	r15, r15
    21de:	51 f4       	brne	.+20     	; 0x21f4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    21e0:	8c 81       	ldd	r24, Y+4	; 0x04
    21e2:	9d 81       	ldd	r25, Y+5	; 0x05
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	09 f4       	brne	.+2      	; 0x21ea <_ZN16PololuQTRSensors14readCalibratedEPjh+0x30>
    21e8:	a0 c0       	rjmp	.+320    	; 0x232a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21ea:	8e 81       	ldd	r24, Y+6	; 0x06
    21ec:	9f 81       	ldd	r25, Y+7	; 0x07
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    21f2:	9b c0       	rjmp	.+310    	; 0x232a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21f4:	8f 2d       	mov	r24, r15
    21f6:	81 50       	subi	r24, 0x01	; 1
    21f8:	82 30       	cpi	r24, 0x02	; 2
    21fa:	50 f4       	brcc	.+20     	; 0x2210 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    21fc:	88 81       	ld	r24, Y
    21fe:	99 81       	ldd	r25, Y+1	; 0x01
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	09 f4       	brne	.+2      	; 0x2206 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x4c>
    2204:	92 c0       	rjmp	.+292    	; 0x232a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	9b 81       	ldd	r25, Y+3	; 0x03
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	09 f4       	brne	.+2      	; 0x2210 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    220e:	8d c0       	rjmp	.+282    	; 0x232a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2210:	ce 01       	movw	r24, r28
    2212:	6c 2d       	mov	r22, r12
    2214:	70 2f       	mov	r23, r16
    2216:	4f 2d       	mov	r20, r15
    2218:	0e 94 7e 10 	call	0x20fc	; 0x20fc <_ZN16PololuQTRSensors4readEPjh>
    221c:	ac 2c       	mov	r10, r12
    221e:	b0 2e       	mov	r11, r16
    2220:	00 e0       	ldi	r16, 0x00	; 0
    2222:	10 e0       	ldi	r17, 0x00	; 0
    2224:	88 24       	eor	r8, r8
    2226:	99 24       	eor	r9, r9
    2228:	7a c0       	rjmp	.+244    	; 0x231e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x164>
    222a:	8f 2d       	mov	r24, r15
    222c:	81 30       	cpi	r24, 0x01	; 1
    222e:	59 f4       	brne	.+22     	; 0x2246 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x8c>
    2230:	ea 81       	ldd	r30, Y+2	; 0x02
    2232:	fb 81       	ldd	r31, Y+3	; 0x03
    2234:	e0 0f       	add	r30, r16
    2236:	f1 1f       	adc	r31, r17
    2238:	c0 80       	ld	r12, Z
    223a:	d1 80       	ldd	r13, Z+1	; 0x01
    223c:	e8 81       	ld	r30, Y
    223e:	f9 81       	ldd	r31, Y+1	; 0x01
    2240:	e0 0f       	add	r30, r16
    2242:	f1 1f       	adc	r31, r17
    2244:	0d c0       	rjmp	.+26     	; 0x2260 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    2246:	8c 81       	ldd	r24, Y+4	; 0x04
    2248:	9d 81       	ldd	r25, Y+5	; 0x05
    224a:	ff 20       	and	r15, r15
    224c:	61 f4       	brne	.+24     	; 0x2266 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xac>
    224e:	ee 81       	ldd	r30, Y+6	; 0x06
    2250:	ff 81       	ldd	r31, Y+7	; 0x07
    2252:	e0 0f       	add	r30, r16
    2254:	f1 1f       	adc	r31, r17
    2256:	c0 80       	ld	r12, Z
    2258:	d1 80       	ldd	r13, Z+1	; 0x01
    225a:	80 0f       	add	r24, r16
    225c:	91 1f       	adc	r25, r17
    225e:	fc 01       	movw	r30, r24
    2260:	40 81       	ld	r20, Z
    2262:	51 81       	ldd	r21, Z+1	; 0x01
    2264:	2b c0       	rjmp	.+86     	; 0x22bc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    2266:	80 0f       	add	r24, r16
    2268:	91 1f       	adc	r25, r17
    226a:	fc 01       	movw	r30, r24
    226c:	80 81       	ld	r24, Z
    226e:	91 81       	ldd	r25, Z+1	; 0x01
    2270:	e8 81       	ld	r30, Y
    2272:	f9 81       	ldd	r31, Y+1	; 0x01
    2274:	e0 0f       	add	r30, r16
    2276:	f1 1f       	adc	r31, r17
    2278:	40 81       	ld	r20, Z
    227a:	51 81       	ldd	r21, Z+1	; 0x01
    227c:	ce 84       	ldd	r12, Y+14	; 0x0e
    227e:	df 84       	ldd	r13, Y+15	; 0x0f
    2280:	84 17       	cp	r24, r20
    2282:	95 07       	cpc	r25, r21
    2284:	10 f4       	brcc	.+4      	; 0x228a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd0>
    2286:	a6 01       	movw	r20, r12
    2288:	04 c0       	rjmp	.+8      	; 0x2292 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd8>
    228a:	4c 0d       	add	r20, r12
    228c:	5d 1d       	adc	r21, r13
    228e:	48 1b       	sub	r20, r24
    2290:	59 0b       	sbc	r21, r25
    2292:	ee 81       	ldd	r30, Y+6	; 0x06
    2294:	ff 81       	ldd	r31, Y+7	; 0x07
    2296:	e0 0f       	add	r30, r16
    2298:	f1 1f       	adc	r31, r17
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	ea 81       	ldd	r30, Y+2	; 0x02
    22a0:	fb 81       	ldd	r31, Y+3	; 0x03
    22a2:	e0 0f       	add	r30, r16
    22a4:	f1 1f       	adc	r31, r17
    22a6:	20 81       	ld	r18, Z
    22a8:	31 81       	ldd	r19, Z+1	; 0x01
    22aa:	ce 84       	ldd	r12, Y+14	; 0x0e
    22ac:	df 84       	ldd	r13, Y+15	; 0x0f
    22ae:	82 17       	cp	r24, r18
    22b0:	93 07       	cpc	r25, r19
    22b2:	20 f0       	brcs	.+8      	; 0x22bc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    22b4:	c2 0e       	add	r12, r18
    22b6:	d3 1e       	adc	r13, r19
    22b8:	c8 1a       	sub	r12, r24
    22ba:	d9 0a       	sbc	r13, r25
    22bc:	c4 1a       	sub	r12, r20
    22be:	d5 0a       	sbc	r13, r21
    22c0:	d1 f0       	breq	.+52     	; 0x22f6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    22c2:	f5 01       	movw	r30, r10
    22c4:	60 81       	ld	r22, Z
    22c6:	71 81       	ldd	r23, Z+1	; 0x01
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9a 01       	movw	r18, r20
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	50 e0       	ldi	r21, 0x00	; 0
    22d2:	62 1b       	sub	r22, r18
    22d4:	73 0b       	sbc	r23, r19
    22d6:	84 0b       	sbc	r24, r20
    22d8:	95 0b       	sbc	r25, r21
    22da:	28 ee       	ldi	r18, 0xE8	; 232
    22dc:	33 e0       	ldi	r19, 0x03	; 3
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	50 e0       	ldi	r21, 0x00	; 0
    22e2:	0e 94 85 13 	call	0x270a	; 0x270a <__mulsi3>
    22e6:	96 01       	movw	r18, r12
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	50 e0       	ldi	r21, 0x00	; 0
    22ec:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__divmodsi4>
    22f0:	37 fd       	sbrc	r19, 7
    22f2:	0a c0       	rjmp	.+20     	; 0x2308 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x14e>
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <_ZN16PololuQTRSensors14readCalibratedEPjh+0x140>
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	f3 e0       	ldi	r31, 0x03	; 3
    22fc:	29 3e       	cpi	r18, 0xE9	; 233
    22fe:	3f 07       	cpc	r19, r31
    2300:	2c f0       	brlt	.+10     	; 0x230c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    2302:	28 ee       	ldi	r18, 0xE8	; 232
    2304:	33 e0       	ldi	r19, 0x03	; 3
    2306:	02 c0       	rjmp	.+4      	; 0x230c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	f5 01       	movw	r30, r10
    230e:	21 93       	st	Z+, r18
    2310:	31 93       	st	Z+, r19
    2312:	5f 01       	movw	r10, r30
    2314:	08 94       	sec
    2316:	81 1c       	adc	r8, r1
    2318:	91 1c       	adc	r9, r1
    231a:	0e 5f       	subi	r16, 0xFE	; 254
    231c:	1f 4f       	sbci	r17, 0xFF	; 255
    231e:	88 85       	ldd	r24, Y+8	; 0x08
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	88 16       	cp	r8, r24
    2324:	99 06       	cpc	r9, r25
    2326:	0c f4       	brge	.+2      	; 0x232a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2328:	80 cf       	rjmp	.-256    	; 0x222a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x70>
    232a:	df 91       	pop	r29
    232c:	cf 91       	pop	r28
    232e:	1f 91       	pop	r17
    2330:	0f 91       	pop	r16
    2332:	ff 90       	pop	r15
    2334:	df 90       	pop	r13
    2336:	cf 90       	pop	r12
    2338:	bf 90       	pop	r11
    233a:	af 90       	pop	r10
    233c:	9f 90       	pop	r9
    233e:	8f 90       	pop	r8
    2340:	08 95       	ret

00002342 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2342:	a5 e0       	ldi	r26, 0x05	; 5
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e7 ea       	ldi	r30, 0xA7	; 167
    2348:	f1 e1       	ldi	r31, 0x11	; 17
    234a:	0c 94 15 14 	jmp	0x282a	; 0x282a <__prologue_saves__>
    234e:	4c 01       	movw	r8, r24
    2350:	c6 2e       	mov	r12, r22
    2352:	e7 2e       	mov	r14, r23
    2354:	2d 83       	std	Y+5, r18	; 0x05
    2356:	0e 94 dd 10 	call	0x21ba	; 0x21ba <_ZN16PololuQTRSensors14readCalibratedEPjh>
    235a:	d4 01       	movw	r26, r8
    235c:	18 96       	adiw	r26, 0x08	; 8
    235e:	4c 90       	ld	r4, X
    2360:	18 97       	sbiw	r26, 0x08	; 8
    2362:	de 2c       	mov	r13, r14
    2364:	64 2d       	mov	r22, r4
    2366:	70 e0       	ldi	r23, 0x00	; 0
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	28 ee       	ldi	r18, 0xE8	; 232
    236e:	33 e0       	ldi	r19, 0x03	; 3
    2370:	40 e0       	ldi	r20, 0x00	; 0
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	0e 94 85 13 	call	0x270a	; 0x270a <__mulsi3>
    2378:	69 83       	std	Y+1, r22	; 0x01
    237a:	7a 83       	std	Y+2, r23	; 0x02
    237c:	8b 83       	std	Y+3, r24	; 0x03
    237e:	9c 83       	std	Y+4, r25	; 0x04
    2380:	ee 24       	eor	r14, r14
    2382:	ff 24       	eor	r15, r15
    2384:	87 01       	movw	r16, r14
    2386:	66 24       	eor	r6, r6
    2388:	77 24       	eor	r7, r7
    238a:	88 24       	eor	r8, r8
    238c:	99 24       	eor	r9, r9
    238e:	54 01       	movw	r10, r8
    2390:	55 24       	eor	r5, r5
    2392:	36 c0       	rjmp	.+108    	; 0x2400 <_ZN16PololuQTRSensors8readLineEPjhh+0xbe>
    2394:	f6 01       	movw	r30, r12
    2396:	30 81       	ld	r19, Z
    2398:	21 81       	ldd	r18, Z+1	; 0x01
    239a:	42 e0       	ldi	r20, 0x02	; 2
    239c:	24 2e       	mov	r2, r20
    239e:	31 2c       	mov	r3, r1
    23a0:	c2 0c       	add	r12, r2
    23a2:	d3 1c       	adc	r13, r3
    23a4:	c9 01       	movw	r24, r18
    23a6:	49 2f       	mov	r20, r25
    23a8:	58 2f       	mov	r21, r24
    23aa:	1a 01       	movw	r2, r20
    23ac:	2d 81       	ldd	r18, Y+5	; 0x05
    23ae:	22 23       	and	r18, r18
    23b0:	29 f0       	breq	.+10     	; 0x23bc <_ZN16PololuQTRSensors8readLineEPjhh+0x7a>
    23b2:	88 ee       	ldi	r24, 0xE8	; 232
    23b4:	93 e0       	ldi	r25, 0x03	; 3
    23b6:	82 19       	sub	r24, r2
    23b8:	93 09       	sbc	r25, r3
    23ba:	1c 01       	movw	r2, r24
    23bc:	99 ec       	ldi	r25, 0xC9	; 201
    23be:	29 16       	cp	r2, r25
    23c0:	31 04       	cpc	r3, r1
    23c2:	2c f4       	brge	.+10     	; 0x23ce <_ZN16PololuQTRSensors8readLineEPjhh+0x8c>
    23c4:	a3 e3       	ldi	r26, 0x33	; 51
    23c6:	2a 16       	cp	r2, r26
    23c8:	31 04       	cpc	r3, r1
    23ca:	94 f0       	brlt	.+36     	; 0x23f0 <_ZN16PololuQTRSensors8readLineEPjhh+0xae>
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <_ZN16PololuQTRSensors8readLineEPjhh+0x90>
    23ce:	55 24       	eor	r5, r5
    23d0:	53 94       	inc	r5
    23d2:	b1 01       	movw	r22, r2
    23d4:	88 27       	eor	r24, r24
    23d6:	77 fd       	sbrc	r23, 7
    23d8:	80 95       	com	r24
    23da:	98 2f       	mov	r25, r24
    23dc:	a8 01       	movw	r20, r16
    23de:	97 01       	movw	r18, r14
    23e0:	0e 94 85 13 	call	0x270a	; 0x270a <__mulsi3>
    23e4:	86 0e       	add	r8, r22
    23e6:	97 1e       	adc	r9, r23
    23e8:	a8 1e       	adc	r10, r24
    23ea:	b9 1e       	adc	r11, r25
    23ec:	62 0c       	add	r6, r2
    23ee:	73 1c       	adc	r7, r3
    23f0:	88 ee       	ldi	r24, 0xE8	; 232
    23f2:	93 e0       	ldi	r25, 0x03	; 3
    23f4:	a0 e0       	ldi	r26, 0x00	; 0
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e8 0e       	add	r14, r24
    23fa:	f9 1e       	adc	r15, r25
    23fc:	0a 1f       	adc	r16, r26
    23fe:	1b 1f       	adc	r17, r27
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	9a 81       	ldd	r25, Y+2	; 0x02
    2404:	ab 81       	ldd	r26, Y+3	; 0x03
    2406:	bc 81       	ldd	r27, Y+4	; 0x04
    2408:	e8 16       	cp	r14, r24
    240a:	f9 06       	cpc	r15, r25
    240c:	0a 07       	cpc	r16, r26
    240e:	1b 07       	cpc	r17, r27
    2410:	09 f6       	brne	.-126    	; 0x2394 <_ZN16PololuQTRSensors8readLineEPjhh+0x52>
    2412:	55 20       	and	r5, r5
    2414:	f1 f4       	brne	.+60     	; 0x2452 <_ZN16PololuQTRSensors8readLineEPjhh+0x110>
    2416:	55 24       	eor	r5, r5
    2418:	08 94       	sec
    241a:	41 08       	sbc	r4, r1
    241c:	51 08       	sbc	r5, r1
    241e:	24 ef       	ldi	r18, 0xF4	; 244
    2420:	31 e0       	ldi	r19, 0x01	; 1
    2422:	42 9e       	mul	r4, r18
    2424:	c0 01       	movw	r24, r0
    2426:	43 9e       	mul	r4, r19
    2428:	90 0d       	add	r25, r0
    242a:	52 9e       	mul	r5, r18
    242c:	90 0d       	add	r25, r0
    242e:	11 24       	eor	r1, r1
    2430:	20 91 b9 01 	lds	r18, 0x01B9
    2434:	30 91 ba 01 	lds	r19, 0x01BA
    2438:	28 17       	cp	r18, r24
    243a:	39 07       	cpc	r19, r25
    243c:	b4 f0       	brlt	.+44     	; 0x246a <_ZN16PololuQTRSensors8readLineEPjhh+0x128>
    243e:	88 ee       	ldi	r24, 0xE8	; 232
    2440:	93 e0       	ldi	r25, 0x03	; 3
    2442:	48 9e       	mul	r4, r24
    2444:	90 01       	movw	r18, r0
    2446:	49 9e       	mul	r4, r25
    2448:	30 0d       	add	r19, r0
    244a:	58 9e       	mul	r5, r24
    244c:	30 0d       	add	r19, r0
    244e:	11 24       	eor	r1, r1
    2450:	0e c0       	rjmp	.+28     	; 0x246e <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    2452:	93 01       	movw	r18, r6
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	c5 01       	movw	r24, r10
    245a:	b4 01       	movw	r22, r8
    245c:	0e 94 c9 13 	call	0x2792	; 0x2792 <__udivmodsi4>
    2460:	20 93 b9 01 	sts	0x01B9, r18
    2464:	30 93 ba 01 	sts	0x01BA, r19
    2468:	02 c0       	rjmp	.+4      	; 0x246e <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	c9 01       	movw	r24, r18
    2470:	25 96       	adiw	r28, 0x05	; 5
    2472:	e2 e1       	ldi	r30, 0x12	; 18
    2474:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__epilogue_restores__>

00002478 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    2478:	a7 e6       	ldi	r26, 0x67	; 103
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e2 e4       	ldi	r30, 0x42	; 66
    247e:	f2 e1       	ldi	r31, 0x12	; 18
    2480:	0c 94 15 14 	jmp	0x282a	; 0x282a <__prologue_saves__>
    2484:	8c 01       	movw	r16, r24
    2486:	4b 01       	movw	r8, r22
    2488:	6a 01       	movw	r12, r20
    248a:	a6 96       	adiw	r28, 0x26	; 38
    248c:	2f af       	std	Y+63, r18	; 0x3f
    248e:	a6 97       	sbiw	r28, 0x26	; 38
    2490:	da 01       	movw	r26, r20
    2492:	8d 91       	ld	r24, X+
    2494:	9c 91       	ld	r25, X
    2496:	11 97       	sbiw	r26, 0x01	; 1
    2498:	00 97       	sbiw	r24, 0x00	; 0
    249a:	e9 f4       	brne	.+58     	; 0x24d6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x5e>
    249c:	f8 01       	movw	r30, r16
    249e:	80 85       	ldd	r24, Z+8	; 0x08
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	0e 94 61 14 	call	0x28c2	; 0x28c2 <malloc>
    24aa:	d6 01       	movw	r26, r12
    24ac:	11 96       	adiw	r26, 0x01	; 1
    24ae:	9c 93       	st	X, r25
    24b0:	8e 93       	st	-X, r24
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x40>
    24b6:	e2 c0       	rjmp	.+452    	; 0x267c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    24b8:	fc 01       	movw	r30, r24
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	03 c0       	rjmp	.+6      	; 0x24c6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x4e>
    24c0:	11 92       	st	Z+, r1
    24c2:	11 92       	st	Z+, r1
    24c4:	01 96       	adiw	r24, 0x01	; 1
    24c6:	d8 01       	movw	r26, r16
    24c8:	18 96       	adiw	r26, 0x08	; 8
    24ca:	2c 91       	ld	r18, X
    24cc:	18 97       	sbiw	r26, 0x08	; 8
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	82 17       	cp	r24, r18
    24d2:	93 07       	cpc	r25, r19
    24d4:	ac f3       	brlt	.-22     	; 0x24c0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x48>
    24d6:	f4 01       	movw	r30, r8
    24d8:	80 81       	ld	r24, Z
    24da:	91 81       	ldd	r25, Z+1	; 0x01
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	89 f0       	breq	.+34     	; 0x2502 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8a>
    24e0:	ee 24       	eor	r14, r14
    24e2:	ff 24       	eor	r15, r15
    24e4:	5e 01       	movw	r10, r28
    24e6:	08 94       	sec
    24e8:	a1 1c       	adc	r10, r1
    24ea:	b1 1c       	adc	r11, r1
    24ec:	b1 e4       	ldi	r27, 0x41	; 65
    24ee:	6b 2e       	mov	r6, r27
    24f0:	71 2c       	mov	r7, r1
    24f2:	6c 0e       	add	r6, r28
    24f4:	7d 1e       	adc	r7, r29
    24f6:	a1 e2       	ldi	r26, 0x21	; 33
    24f8:	4a 2e       	mov	r4, r26
    24fa:	51 2c       	mov	r5, r1
    24fc:	4c 0e       	add	r4, r28
    24fe:	5d 1e       	adc	r5, r29
    2500:	23 c0       	rjmp	.+70     	; 0x2548 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    2502:	d8 01       	movw	r26, r16
    2504:	18 96       	adiw	r26, 0x08	; 8
    2506:	8c 91       	ld	r24, X
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	88 0f       	add	r24, r24
    250c:	99 1f       	adc	r25, r25
    250e:	0e 94 61 14 	call	0x28c2	; 0x28c2 <malloc>
    2512:	f4 01       	movw	r30, r8
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	80 83       	st	Z, r24
    2518:	00 97       	sbiw	r24, 0x00	; 0
    251a:	09 f4       	brne	.+2      	; 0x251e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xa6>
    251c:	af c0       	rjmp	.+350    	; 0x267c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    251e:	fc 01       	movw	r30, r24
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	d8 01       	movw	r26, r16
    2526:	07 c0       	rjmp	.+14     	; 0x2536 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xbe>
    2528:	1e 96       	adiw	r26, 0x0e	; 14
    252a:	2d 91       	ld	r18, X+
    252c:	3c 91       	ld	r19, X
    252e:	1f 97       	sbiw	r26, 0x0f	; 15
    2530:	21 93       	st	Z+, r18
    2532:	31 93       	st	Z+, r19
    2534:	01 96       	adiw	r24, 0x01	; 1
    2536:	18 96       	adiw	r26, 0x08	; 8
    2538:	2c 91       	ld	r18, X
    253a:	18 97       	sbiw	r26, 0x08	; 8
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	82 17       	cp	r24, r18
    2540:	93 07       	cpc	r25, r19
    2542:	94 f3       	brlt	.-28     	; 0x2528 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb0>
    2544:	8d 01       	movw	r16, r26
    2546:	cc cf       	rjmp	.-104    	; 0x24e0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x68>
    2548:	c8 01       	movw	r24, r16
    254a:	b5 01       	movw	r22, r10
    254c:	a6 96       	adiw	r28, 0x26	; 38
    254e:	4f ad       	ldd	r20, Y+63	; 0x3f
    2550:	a6 97       	sbiw	r28, 0x26	; 38
    2552:	0e 94 7e 10 	call	0x20fc	; 0x20fc <_ZN16PololuQTRSensors4readEPjh>
    2556:	d8 01       	movw	r26, r16
    2558:	18 96       	adiw	r26, 0x08	; 8
    255a:	8c 91       	ld	r24, X
    255c:	18 97       	sbiw	r26, 0x08	; 8
    255e:	e8 2f       	mov	r30, r24
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	a5 96       	adiw	r28, 0x25	; 37
    2564:	ff af       	std	Y+63, r31	; 0x3f
    2566:	ee af       	std	Y+62, r30	; 0x3e
    2568:	a5 97       	sbiw	r28, 0x25	; 37
    256a:	13 01       	movw	r2, r6
    256c:	f5 01       	movw	r30, r10
    256e:	a3 96       	adiw	r28, 0x23	; 35
    2570:	5f ae       	std	Y+63, r5	; 0x3f
    2572:	4e ae       	std	Y+62, r4	; 0x3e
    2574:	a3 97       	sbiw	r28, 0x23	; 35
    2576:	93 01       	movw	r18, r6
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	a8 96       	adiw	r28, 0x28	; 40
    257e:	5f ae       	std	Y+63, r5	; 0x3f
    2580:	4e ae       	std	Y+62, r4	; 0x3e
    2582:	a8 97       	sbiw	r28, 0x28	; 40
    2584:	37 c0       	rjmp	.+110    	; 0x25f4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17c>
    2586:	e1 14       	cp	r14, r1
    2588:	f1 04       	cpc	r15, r1
    258a:	61 f0       	breq	.+24     	; 0x25a4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x12c>
    258c:	a8 96       	adiw	r28, 0x28	; 40
    258e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2590:	bf ad       	ldd	r27, Y+63	; 0x3f
    2592:	a8 97       	sbiw	r28, 0x28	; 40
    2594:	6d 91       	ld	r22, X+
    2596:	7c 91       	ld	r23, X
    2598:	11 97       	sbiw	r26, 0x01	; 1
    259a:	80 81       	ld	r24, Z
    259c:	91 81       	ldd	r25, Z+1	; 0x01
    259e:	68 17       	cp	r22, r24
    25a0:	79 07       	cpc	r23, r25
    25a2:	60 f4       	brcc	.+24     	; 0x25bc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x144>
    25a4:	80 81       	ld	r24, Z
    25a6:	91 81       	ldd	r25, Z+1	; 0x01
    25a8:	a8 96       	adiw	r28, 0x28	; 40
    25aa:	ae ad       	ldd	r26, Y+62	; 0x3e
    25ac:	bf ad       	ldd	r27, Y+63	; 0x3f
    25ae:	a8 97       	sbiw	r28, 0x28	; 40
    25b0:	11 96       	adiw	r26, 0x01	; 1
    25b2:	9c 93       	st	X, r25
    25b4:	8e 93       	st	-X, r24
    25b6:	e1 14       	cp	r14, r1
    25b8:	f1 04       	cpc	r15, r1
    25ba:	49 f0       	breq	.+18     	; 0x25ce <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x156>
    25bc:	d9 01       	movw	r26, r18
    25be:	6d 91       	ld	r22, X+
    25c0:	7c 91       	ld	r23, X
    25c2:	11 97       	sbiw	r26, 0x01	; 1
    25c4:	80 81       	ld	r24, Z
    25c6:	91 81       	ldd	r25, Z+1	; 0x01
    25c8:	86 17       	cp	r24, r22
    25ca:	97 07       	cpc	r25, r23
    25cc:	28 f4       	brcc	.+10     	; 0x25d8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x160>
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	d9 01       	movw	r26, r18
    25d4:	8d 93       	st	X+, r24
    25d6:	9c 93       	st	X, r25
    25d8:	4f 5f       	subi	r20, 0xFF	; 255
    25da:	5f 4f       	sbci	r21, 0xFF	; 255
    25dc:	2e 5f       	subi	r18, 0xFE	; 254
    25de:	3f 4f       	sbci	r19, 0xFF	; 255
    25e0:	32 96       	adiw	r30, 0x02	; 2
    25e2:	a8 96       	adiw	r28, 0x28	; 40
    25e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    25e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    25e8:	a8 97       	sbiw	r28, 0x28	; 40
    25ea:	02 96       	adiw	r24, 0x02	; 2
    25ec:	a8 96       	adiw	r28, 0x28	; 40
    25ee:	9f af       	std	Y+63, r25	; 0x3f
    25f0:	8e af       	std	Y+62, r24	; 0x3e
    25f2:	a8 97       	sbiw	r28, 0x28	; 40
    25f4:	a5 96       	adiw	r28, 0x25	; 37
    25f6:	ae ad       	ldd	r26, Y+62	; 0x3e
    25f8:	bf ad       	ldd	r27, Y+63	; 0x3f
    25fa:	a5 97       	sbiw	r28, 0x25	; 37
    25fc:	4a 17       	cp	r20, r26
    25fe:	5b 07       	cpc	r21, r27
    2600:	14 f2       	brlt	.-124    	; 0x2586 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x10e>
    2602:	08 94       	sec
    2604:	e1 1c       	adc	r14, r1
    2606:	f1 1c       	adc	r15, r1
    2608:	ba e0       	ldi	r27, 0x0A	; 10
    260a:	eb 16       	cp	r14, r27
    260c:	f1 04       	cpc	r15, r1
    260e:	09 f0       	breq	.+2      	; 0x2612 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x19a>
    2610:	9b cf       	rjmp	.-202    	; 0x2548 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	2c c0       	rjmp	.+88     	; 0x2670 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f8>
    2618:	f1 01       	movw	r30, r2
    261a:	41 91       	ld	r20, Z+
    261c:	51 91       	ld	r21, Z+
    261e:	1f 01       	movw	r2, r30
    2620:	bc 01       	movw	r22, r24
    2622:	66 0f       	add	r22, r22
    2624:	77 1f       	adc	r23, r23
    2626:	d6 01       	movw	r26, r12
    2628:	ed 91       	ld	r30, X+
    262a:	fc 91       	ld	r31, X
    262c:	11 97       	sbiw	r26, 0x01	; 1
    262e:	e6 0f       	add	r30, r22
    2630:	f7 1f       	adc	r31, r23
    2632:	20 81       	ld	r18, Z
    2634:	31 81       	ldd	r19, Z+1	; 0x01
    2636:	24 17       	cp	r18, r20
    2638:	35 07       	cpc	r19, r21
    263a:	10 f4       	brcc	.+4      	; 0x2640 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1c8>
    263c:	51 83       	std	Z+1, r21	; 0x01
    263e:	40 83       	st	Z, r20
    2640:	a3 96       	adiw	r28, 0x23	; 35
    2642:	ee ad       	ldd	r30, Y+62	; 0x3e
    2644:	ff ad       	ldd	r31, Y+63	; 0x3f
    2646:	a3 97       	sbiw	r28, 0x23	; 35
    2648:	41 91       	ld	r20, Z+
    264a:	51 91       	ld	r21, Z+
    264c:	a3 96       	adiw	r28, 0x23	; 35
    264e:	ff af       	std	Y+63, r31	; 0x3f
    2650:	ee af       	std	Y+62, r30	; 0x3e
    2652:	a3 97       	sbiw	r28, 0x23	; 35
    2654:	d4 01       	movw	r26, r8
    2656:	ed 91       	ld	r30, X+
    2658:	fc 91       	ld	r31, X
    265a:	11 97       	sbiw	r26, 0x01	; 1
    265c:	e6 0f       	add	r30, r22
    265e:	f7 1f       	adc	r31, r23
    2660:	20 81       	ld	r18, Z
    2662:	31 81       	ldd	r19, Z+1	; 0x01
    2664:	42 17       	cp	r20, r18
    2666:	53 07       	cpc	r21, r19
    2668:	10 f4       	brcc	.+4      	; 0x266e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f6>
    266a:	51 83       	std	Z+1, r21	; 0x01
    266c:	40 83       	st	Z, r20
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	f8 01       	movw	r30, r16
    2672:	20 85       	ldd	r18, Z+8	; 0x08
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	82 17       	cp	r24, r18
    2678:	93 07       	cpc	r25, r19
    267a:	74 f2       	brlt	.-100    	; 0x2618 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1a0>
    267c:	c9 59       	subi	r28, 0x99	; 153
    267e:	df 4f       	sbci	r29, 0xFF	; 255
    2680:	e2 e1       	ldi	r30, 0x12	; 18
    2682:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__epilogue_restores__>

00002686 <_ZN16PololuQTRSensors9calibrateEh>:
    2686:	1f 93       	push	r17
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	ec 01       	movw	r28, r24
    268e:	16 2f       	mov	r17, r22
    2690:	86 2f       	mov	r24, r22
    2692:	81 50       	subi	r24, 0x01	; 1
    2694:	82 30       	cpi	r24, 0x02	; 2
    2696:	58 f4       	brcc	.+22     	; 0x26ae <_ZN16PololuQTRSensors9calibrateEh+0x28>
    2698:	ae 01       	movw	r20, r28
    269a:	4e 5f       	subi	r20, 0xFE	; 254
    269c:	5f 4f       	sbci	r21, 0xFF	; 255
    269e:	ce 01       	movw	r24, r28
    26a0:	be 01       	movw	r22, r28
    26a2:	21 e0       	ldi	r18, 0x01	; 1
    26a4:	0e 94 3c 12 	call	0x2478	; 0x2478 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    26a8:	12 30       	cpi	r17, 0x02	; 2
    26aa:	19 f0       	breq	.+6      	; 0x26b2 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    26ac:	0c c0       	rjmp	.+24     	; 0x26c6 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    26ae:	66 23       	and	r22, r22
    26b0:	51 f4       	brne	.+20     	; 0x26c6 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    26b2:	be 01       	movw	r22, r28
    26b4:	6c 5f       	subi	r22, 0xFC	; 252
    26b6:	7f 4f       	sbci	r23, 0xFF	; 255
    26b8:	ae 01       	movw	r20, r28
    26ba:	4a 5f       	subi	r20, 0xFA	; 250
    26bc:	5f 4f       	sbci	r21, 0xFF	; 255
    26be:	ce 01       	movw	r24, r28
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	0e 94 3c 12 	call	0x2478	; 0x2478 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    26c6:	df 91       	pop	r29
    26c8:	cf 91       	pop	r28
    26ca:	1f 91       	pop	r17
    26cc:	08 95       	ret

000026ce <_ZN16PololuQTRSensorsD1Ev>:
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	ec 01       	movw	r28, r24
    26d4:	8a 81       	ldd	r24, Y+2	; 0x02
    26d6:	9b 81       	ldd	r25, Y+3	; 0x03
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	11 f0       	breq	.+4      	; 0x26e0 <_ZN16PololuQTRSensorsD1Ev+0x12>
    26dc:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <free>
    26e0:	8e 81       	ldd	r24, Y+6	; 0x06
    26e2:	9f 81       	ldd	r25, Y+7	; 0x07
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	11 f0       	breq	.+4      	; 0x26ec <_ZN16PololuQTRSensorsD1Ev+0x1e>
    26e8:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <free>
    26ec:	88 81       	ld	r24, Y
    26ee:	99 81       	ldd	r25, Y+1	; 0x01
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	11 f0       	breq	.+4      	; 0x26f8 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    26f4:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <free>
    26f8:	8c 81       	ldd	r24, Y+4	; 0x04
    26fa:	9d 81       	ldd	r25, Y+5	; 0x05
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	11 f0       	breq	.+4      	; 0x2704 <_ZN16PololuQTRSensorsD1Ev+0x36>
    2700:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <free>
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	08 95       	ret

0000270a <__mulsi3>:
    270a:	db 01       	movw	r26, r22
    270c:	8f 93       	push	r24
    270e:	9f 93       	push	r25
    2710:	0e 94 0a 14 	call	0x2814	; 0x2814 <__muluhisi3>
    2714:	bf 91       	pop	r27
    2716:	af 91       	pop	r26
    2718:	a2 9f       	mul	r26, r18
    271a:	80 0d       	add	r24, r0
    271c:	91 1d       	adc	r25, r1
    271e:	a3 9f       	mul	r26, r19
    2720:	90 0d       	add	r25, r0
    2722:	b2 9f       	mul	r27, r18
    2724:	90 0d       	add	r25, r0
    2726:	11 24       	eor	r1, r1
    2728:	08 95       	ret

0000272a <__udivmodqi4>:
    272a:	99 1b       	sub	r25, r25
    272c:	79 e0       	ldi	r23, 0x09	; 9
    272e:	04 c0       	rjmp	.+8      	; 0x2738 <__udivmodqi4_ep>

00002730 <__udivmodqi4_loop>:
    2730:	99 1f       	adc	r25, r25
    2732:	96 17       	cp	r25, r22
    2734:	08 f0       	brcs	.+2      	; 0x2738 <__udivmodqi4_ep>
    2736:	96 1b       	sub	r25, r22

00002738 <__udivmodqi4_ep>:
    2738:	88 1f       	adc	r24, r24
    273a:	7a 95       	dec	r23
    273c:	c9 f7       	brne	.-14     	; 0x2730 <__udivmodqi4_loop>
    273e:	80 95       	com	r24
    2740:	08 95       	ret

00002742 <__udivmodhi4>:
    2742:	aa 1b       	sub	r26, r26
    2744:	bb 1b       	sub	r27, r27
    2746:	51 e1       	ldi	r21, 0x11	; 17
    2748:	07 c0       	rjmp	.+14     	; 0x2758 <__udivmodhi4_ep>

0000274a <__udivmodhi4_loop>:
    274a:	aa 1f       	adc	r26, r26
    274c:	bb 1f       	adc	r27, r27
    274e:	a6 17       	cp	r26, r22
    2750:	b7 07       	cpc	r27, r23
    2752:	10 f0       	brcs	.+4      	; 0x2758 <__udivmodhi4_ep>
    2754:	a6 1b       	sub	r26, r22
    2756:	b7 0b       	sbc	r27, r23

00002758 <__udivmodhi4_ep>:
    2758:	88 1f       	adc	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	5a 95       	dec	r21
    275e:	a9 f7       	brne	.-22     	; 0x274a <__udivmodhi4_loop>
    2760:	80 95       	com	r24
    2762:	90 95       	com	r25
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	08 95       	ret

0000276a <__divmodhi4>:
    276a:	97 fb       	bst	r25, 7
    276c:	07 2e       	mov	r0, r23
    276e:	16 f4       	brtc	.+4      	; 0x2774 <__divmodhi4+0xa>
    2770:	00 94       	com	r0
    2772:	07 d0       	rcall	.+14     	; 0x2782 <__divmodhi4_neg1>
    2774:	77 fd       	sbrc	r23, 7
    2776:	09 d0       	rcall	.+18     	; 0x278a <__divmodhi4_neg2>
    2778:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodhi4>
    277c:	07 fc       	sbrc	r0, 7
    277e:	05 d0       	rcall	.+10     	; 0x278a <__divmodhi4_neg2>
    2780:	3e f4       	brtc	.+14     	; 0x2790 <__divmodhi4_exit>

00002782 <__divmodhi4_neg1>:
    2782:	90 95       	com	r25
    2784:	81 95       	neg	r24
    2786:	9f 4f       	sbci	r25, 0xFF	; 255
    2788:	08 95       	ret

0000278a <__divmodhi4_neg2>:
    278a:	70 95       	com	r23
    278c:	61 95       	neg	r22
    278e:	7f 4f       	sbci	r23, 0xFF	; 255

00002790 <__divmodhi4_exit>:
    2790:	08 95       	ret

00002792 <__udivmodsi4>:
    2792:	a1 e2       	ldi	r26, 0x21	; 33
    2794:	1a 2e       	mov	r1, r26
    2796:	aa 1b       	sub	r26, r26
    2798:	bb 1b       	sub	r27, r27
    279a:	fd 01       	movw	r30, r26
    279c:	0d c0       	rjmp	.+26     	; 0x27b8 <__udivmodsi4_ep>

0000279e <__udivmodsi4_loop>:
    279e:	aa 1f       	adc	r26, r26
    27a0:	bb 1f       	adc	r27, r27
    27a2:	ee 1f       	adc	r30, r30
    27a4:	ff 1f       	adc	r31, r31
    27a6:	a2 17       	cp	r26, r18
    27a8:	b3 07       	cpc	r27, r19
    27aa:	e4 07       	cpc	r30, r20
    27ac:	f5 07       	cpc	r31, r21
    27ae:	20 f0       	brcs	.+8      	; 0x27b8 <__udivmodsi4_ep>
    27b0:	a2 1b       	sub	r26, r18
    27b2:	b3 0b       	sbc	r27, r19
    27b4:	e4 0b       	sbc	r30, r20
    27b6:	f5 0b       	sbc	r31, r21

000027b8 <__udivmodsi4_ep>:
    27b8:	66 1f       	adc	r22, r22
    27ba:	77 1f       	adc	r23, r23
    27bc:	88 1f       	adc	r24, r24
    27be:	99 1f       	adc	r25, r25
    27c0:	1a 94       	dec	r1
    27c2:	69 f7       	brne	.-38     	; 0x279e <__udivmodsi4_loop>
    27c4:	60 95       	com	r22
    27c6:	70 95       	com	r23
    27c8:	80 95       	com	r24
    27ca:	90 95       	com	r25
    27cc:	9b 01       	movw	r18, r22
    27ce:	ac 01       	movw	r20, r24
    27d0:	bd 01       	movw	r22, r26
    27d2:	cf 01       	movw	r24, r30
    27d4:	08 95       	ret

000027d6 <__divmodsi4>:
    27d6:	05 2e       	mov	r0, r21
    27d8:	97 fb       	bst	r25, 7
    27da:	1e f4       	brtc	.+6      	; 0x27e2 <__divmodsi4+0xc>
    27dc:	00 94       	com	r0
    27de:	0e 94 02 14 	call	0x2804	; 0x2804 <__negsi2>
    27e2:	57 fd       	sbrc	r21, 7
    27e4:	07 d0       	rcall	.+14     	; 0x27f4 <__divmodsi4_neg2>
    27e6:	0e 94 c9 13 	call	0x2792	; 0x2792 <__udivmodsi4>
    27ea:	07 fc       	sbrc	r0, 7
    27ec:	03 d0       	rcall	.+6      	; 0x27f4 <__divmodsi4_neg2>
    27ee:	4e f4       	brtc	.+18     	; 0x2802 <__divmodsi4_exit>
    27f0:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__negsi2>

000027f4 <__divmodsi4_neg2>:
    27f4:	50 95       	com	r21
    27f6:	40 95       	com	r20
    27f8:	30 95       	com	r19
    27fa:	21 95       	neg	r18
    27fc:	3f 4f       	sbci	r19, 0xFF	; 255
    27fe:	4f 4f       	sbci	r20, 0xFF	; 255
    2800:	5f 4f       	sbci	r21, 0xFF	; 255

00002802 <__divmodsi4_exit>:
    2802:	08 95       	ret

00002804 <__negsi2>:
    2804:	90 95       	com	r25
    2806:	80 95       	com	r24
    2808:	70 95       	com	r23
    280a:	61 95       	neg	r22
    280c:	7f 4f       	sbci	r23, 0xFF	; 255
    280e:	8f 4f       	sbci	r24, 0xFF	; 255
    2810:	9f 4f       	sbci	r25, 0xFF	; 255
    2812:	08 95       	ret

00002814 <__muluhisi3>:
    2814:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__umulhisi3>
    2818:	a5 9f       	mul	r26, r21
    281a:	90 0d       	add	r25, r0
    281c:	b4 9f       	mul	r27, r20
    281e:	90 0d       	add	r25, r0
    2820:	a4 9f       	mul	r26, r20
    2822:	80 0d       	add	r24, r0
    2824:	91 1d       	adc	r25, r1
    2826:	11 24       	eor	r1, r1
    2828:	08 95       	ret

0000282a <__prologue_saves__>:
    282a:	2f 92       	push	r2
    282c:	3f 92       	push	r3
    282e:	4f 92       	push	r4
    2830:	5f 92       	push	r5
    2832:	6f 92       	push	r6
    2834:	7f 92       	push	r7
    2836:	8f 92       	push	r8
    2838:	9f 92       	push	r9
    283a:	af 92       	push	r10
    283c:	bf 92       	push	r11
    283e:	cf 92       	push	r12
    2840:	df 92       	push	r13
    2842:	ef 92       	push	r14
    2844:	ff 92       	push	r15
    2846:	0f 93       	push	r16
    2848:	1f 93       	push	r17
    284a:	cf 93       	push	r28
    284c:	df 93       	push	r29
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	ca 1b       	sub	r28, r26
    2854:	db 0b       	sbc	r29, r27
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	09 94       	ijmp

00002862 <__epilogue_restores__>:
    2862:	2a 88       	ldd	r2, Y+18	; 0x12
    2864:	39 88       	ldd	r3, Y+17	; 0x11
    2866:	48 88       	ldd	r4, Y+16	; 0x10
    2868:	5f 84       	ldd	r5, Y+15	; 0x0f
    286a:	6e 84       	ldd	r6, Y+14	; 0x0e
    286c:	7d 84       	ldd	r7, Y+13	; 0x0d
    286e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2870:	9b 84       	ldd	r9, Y+11	; 0x0b
    2872:	aa 84       	ldd	r10, Y+10	; 0x0a
    2874:	b9 84       	ldd	r11, Y+9	; 0x09
    2876:	c8 84       	ldd	r12, Y+8	; 0x08
    2878:	df 80       	ldd	r13, Y+7	; 0x07
    287a:	ee 80       	ldd	r14, Y+6	; 0x06
    287c:	fd 80       	ldd	r15, Y+5	; 0x05
    287e:	0c 81       	ldd	r16, Y+4	; 0x04
    2880:	1b 81       	ldd	r17, Y+3	; 0x03
    2882:	aa 81       	ldd	r26, Y+2	; 0x02
    2884:	b9 81       	ldd	r27, Y+1	; 0x01
    2886:	ce 0f       	add	r28, r30
    2888:	d1 1d       	adc	r29, r1
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
    2894:	ed 01       	movw	r28, r26
    2896:	08 95       	ret

00002898 <__tablejump2__>:
    2898:	ee 0f       	add	r30, r30
    289a:	ff 1f       	adc	r31, r31

0000289c <__tablejump__>:
    289c:	05 90       	lpm	r0, Z+
    289e:	f4 91       	lpm	r31, Z
    28a0:	e0 2d       	mov	r30, r0
    28a2:	09 94       	ijmp

000028a4 <__umulhisi3>:
    28a4:	a2 9f       	mul	r26, r18
    28a6:	b0 01       	movw	r22, r0
    28a8:	b3 9f       	mul	r27, r19
    28aa:	c0 01       	movw	r24, r0
    28ac:	a3 9f       	mul	r26, r19
    28ae:	70 0d       	add	r23, r0
    28b0:	81 1d       	adc	r24, r1
    28b2:	11 24       	eor	r1, r1
    28b4:	91 1d       	adc	r25, r1
    28b6:	b2 9f       	mul	r27, r18
    28b8:	70 0d       	add	r23, r0
    28ba:	81 1d       	adc	r24, r1
    28bc:	11 24       	eor	r1, r1
    28be:	91 1d       	adc	r25, r1
    28c0:	08 95       	ret

000028c2 <malloc>:
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	82 30       	cpi	r24, 0x02	; 2
    28c8:	91 05       	cpc	r25, r1
    28ca:	10 f4       	brcc	.+4      	; 0x28d0 <malloc+0xe>
    28cc:	82 e0       	ldi	r24, 0x02	; 2
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	e0 91 b5 03 	lds	r30, 0x03B5
    28d4:	f0 91 b6 03 	lds	r31, 0x03B6
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	a0 e0       	ldi	r26, 0x00	; 0
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	30 97       	sbiw	r30, 0x00	; 0
    28e2:	39 f1       	breq	.+78     	; 0x2932 <malloc+0x70>
    28e4:	40 81       	ld	r20, Z
    28e6:	51 81       	ldd	r21, Z+1	; 0x01
    28e8:	48 17       	cp	r20, r24
    28ea:	59 07       	cpc	r21, r25
    28ec:	b8 f0       	brcs	.+46     	; 0x291c <malloc+0x5a>
    28ee:	48 17       	cp	r20, r24
    28f0:	59 07       	cpc	r21, r25
    28f2:	71 f4       	brne	.+28     	; 0x2910 <malloc+0x4e>
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	10 97       	sbiw	r26, 0x00	; 0
    28fa:	29 f0       	breq	.+10     	; 0x2906 <malloc+0x44>
    28fc:	13 96       	adiw	r26, 0x03	; 3
    28fe:	9c 93       	st	X, r25
    2900:	8e 93       	st	-X, r24
    2902:	12 97       	sbiw	r26, 0x02	; 2
    2904:	2c c0       	rjmp	.+88     	; 0x295e <malloc+0x9c>
    2906:	90 93 b6 03 	sts	0x03B6, r25
    290a:	80 93 b5 03 	sts	0x03B5, r24
    290e:	27 c0       	rjmp	.+78     	; 0x295e <malloc+0x9c>
    2910:	21 15       	cp	r18, r1
    2912:	31 05       	cpc	r19, r1
    2914:	31 f0       	breq	.+12     	; 0x2922 <malloc+0x60>
    2916:	42 17       	cp	r20, r18
    2918:	53 07       	cpc	r21, r19
    291a:	18 f0       	brcs	.+6      	; 0x2922 <malloc+0x60>
    291c:	a9 01       	movw	r20, r18
    291e:	db 01       	movw	r26, r22
    2920:	01 c0       	rjmp	.+2      	; 0x2924 <malloc+0x62>
    2922:	ef 01       	movw	r28, r30
    2924:	9a 01       	movw	r18, r20
    2926:	bd 01       	movw	r22, r26
    2928:	df 01       	movw	r26, r30
    292a:	02 80       	ldd	r0, Z+2	; 0x02
    292c:	f3 81       	ldd	r31, Z+3	; 0x03
    292e:	e0 2d       	mov	r30, r0
    2930:	d7 cf       	rjmp	.-82     	; 0x28e0 <malloc+0x1e>
    2932:	21 15       	cp	r18, r1
    2934:	31 05       	cpc	r19, r1
    2936:	f9 f0       	breq	.+62     	; 0x2976 <malloc+0xb4>
    2938:	28 1b       	sub	r18, r24
    293a:	39 0b       	sbc	r19, r25
    293c:	24 30       	cpi	r18, 0x04	; 4
    293e:	31 05       	cpc	r19, r1
    2940:	80 f4       	brcc	.+32     	; 0x2962 <malloc+0xa0>
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	9b 81       	ldd	r25, Y+3	; 0x03
    2946:	61 15       	cp	r22, r1
    2948:	71 05       	cpc	r23, r1
    294a:	21 f0       	breq	.+8      	; 0x2954 <malloc+0x92>
    294c:	fb 01       	movw	r30, r22
    294e:	93 83       	std	Z+3, r25	; 0x03
    2950:	82 83       	std	Z+2, r24	; 0x02
    2952:	04 c0       	rjmp	.+8      	; 0x295c <malloc+0x9a>
    2954:	90 93 b6 03 	sts	0x03B6, r25
    2958:	80 93 b5 03 	sts	0x03B5, r24
    295c:	fe 01       	movw	r30, r28
    295e:	32 96       	adiw	r30, 0x02	; 2
    2960:	44 c0       	rjmp	.+136    	; 0x29ea <malloc+0x128>
    2962:	fe 01       	movw	r30, r28
    2964:	e2 0f       	add	r30, r18
    2966:	f3 1f       	adc	r31, r19
    2968:	81 93       	st	Z+, r24
    296a:	91 93       	st	Z+, r25
    296c:	22 50       	subi	r18, 0x02	; 2
    296e:	31 09       	sbc	r19, r1
    2970:	39 83       	std	Y+1, r19	; 0x01
    2972:	28 83       	st	Y, r18
    2974:	3a c0       	rjmp	.+116    	; 0x29ea <malloc+0x128>
    2976:	20 91 b3 03 	lds	r18, 0x03B3
    297a:	30 91 b4 03 	lds	r19, 0x03B4
    297e:	23 2b       	or	r18, r19
    2980:	41 f4       	brne	.+16     	; 0x2992 <malloc+0xd0>
    2982:	20 91 2d 01 	lds	r18, 0x012D
    2986:	30 91 2e 01 	lds	r19, 0x012E
    298a:	30 93 b4 03 	sts	0x03B4, r19
    298e:	20 93 b3 03 	sts	0x03B3, r18
    2992:	20 91 2b 01 	lds	r18, 0x012B
    2996:	30 91 2c 01 	lds	r19, 0x012C
    299a:	21 15       	cp	r18, r1
    299c:	31 05       	cpc	r19, r1
    299e:	41 f4       	brne	.+16     	; 0x29b0 <malloc+0xee>
    29a0:	2d b7       	in	r18, 0x3d	; 61
    29a2:	3e b7       	in	r19, 0x3e	; 62
    29a4:	40 91 2f 01 	lds	r20, 0x012F
    29a8:	50 91 30 01 	lds	r21, 0x0130
    29ac:	24 1b       	sub	r18, r20
    29ae:	35 0b       	sbc	r19, r21
    29b0:	e0 91 b3 03 	lds	r30, 0x03B3
    29b4:	f0 91 b4 03 	lds	r31, 0x03B4
    29b8:	e2 17       	cp	r30, r18
    29ba:	f3 07       	cpc	r31, r19
    29bc:	a0 f4       	brcc	.+40     	; 0x29e6 <malloc+0x124>
    29be:	2e 1b       	sub	r18, r30
    29c0:	3f 0b       	sbc	r19, r31
    29c2:	28 17       	cp	r18, r24
    29c4:	39 07       	cpc	r19, r25
    29c6:	78 f0       	brcs	.+30     	; 0x29e6 <malloc+0x124>
    29c8:	ac 01       	movw	r20, r24
    29ca:	4e 5f       	subi	r20, 0xFE	; 254
    29cc:	5f 4f       	sbci	r21, 0xFF	; 255
    29ce:	24 17       	cp	r18, r20
    29d0:	35 07       	cpc	r19, r21
    29d2:	48 f0       	brcs	.+18     	; 0x29e6 <malloc+0x124>
    29d4:	4e 0f       	add	r20, r30
    29d6:	5f 1f       	adc	r21, r31
    29d8:	50 93 b4 03 	sts	0x03B4, r21
    29dc:	40 93 b3 03 	sts	0x03B3, r20
    29e0:	81 93       	st	Z+, r24
    29e2:	91 93       	st	Z+, r25
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <malloc+0x128>
    29e6:	e0 e0       	ldi	r30, 0x00	; 0
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	cf 01       	movw	r24, r30
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	08 95       	ret

000029f2 <free>:
    29f2:	cf 93       	push	r28
    29f4:	df 93       	push	r29
    29f6:	00 97       	sbiw	r24, 0x00	; 0
    29f8:	09 f4       	brne	.+2      	; 0x29fc <free+0xa>
    29fa:	87 c0       	rjmp	.+270    	; 0x2b0a <free+0x118>
    29fc:	fc 01       	movw	r30, r24
    29fe:	32 97       	sbiw	r30, 0x02	; 2
    2a00:	13 82       	std	Z+3, r1	; 0x03
    2a02:	12 82       	std	Z+2, r1	; 0x02
    2a04:	c0 91 b5 03 	lds	r28, 0x03B5
    2a08:	d0 91 b6 03 	lds	r29, 0x03B6
    2a0c:	20 97       	sbiw	r28, 0x00	; 0
    2a0e:	81 f4       	brne	.+32     	; 0x2a30 <free+0x3e>
    2a10:	20 81       	ld	r18, Z
    2a12:	31 81       	ldd	r19, Z+1	; 0x01
    2a14:	28 0f       	add	r18, r24
    2a16:	39 1f       	adc	r19, r25
    2a18:	80 91 b3 03 	lds	r24, 0x03B3
    2a1c:	90 91 b4 03 	lds	r25, 0x03B4
    2a20:	82 17       	cp	r24, r18
    2a22:	93 07       	cpc	r25, r19
    2a24:	79 f5       	brne	.+94     	; 0x2a84 <free+0x92>
    2a26:	f0 93 b4 03 	sts	0x03B4, r31
    2a2a:	e0 93 b3 03 	sts	0x03B3, r30
    2a2e:	6d c0       	rjmp	.+218    	; 0x2b0a <free+0x118>
    2a30:	de 01       	movw	r26, r28
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	ae 17       	cp	r26, r30
    2a38:	bf 07       	cpc	r27, r31
    2a3a:	50 f4       	brcc	.+20     	; 0x2a50 <free+0x5e>
    2a3c:	12 96       	adiw	r26, 0x02	; 2
    2a3e:	4d 91       	ld	r20, X+
    2a40:	5c 91       	ld	r21, X
    2a42:	13 97       	sbiw	r26, 0x03	; 3
    2a44:	9d 01       	movw	r18, r26
    2a46:	41 15       	cp	r20, r1
    2a48:	51 05       	cpc	r21, r1
    2a4a:	09 f1       	breq	.+66     	; 0x2a8e <free+0x9c>
    2a4c:	da 01       	movw	r26, r20
    2a4e:	f3 cf       	rjmp	.-26     	; 0x2a36 <free+0x44>
    2a50:	b3 83       	std	Z+3, r27	; 0x03
    2a52:	a2 83       	std	Z+2, r26	; 0x02
    2a54:	40 81       	ld	r20, Z
    2a56:	51 81       	ldd	r21, Z+1	; 0x01
    2a58:	84 0f       	add	r24, r20
    2a5a:	95 1f       	adc	r25, r21
    2a5c:	8a 17       	cp	r24, r26
    2a5e:	9b 07       	cpc	r25, r27
    2a60:	71 f4       	brne	.+28     	; 0x2a7e <free+0x8c>
    2a62:	8d 91       	ld	r24, X+
    2a64:	9c 91       	ld	r25, X
    2a66:	11 97       	sbiw	r26, 0x01	; 1
    2a68:	84 0f       	add	r24, r20
    2a6a:	95 1f       	adc	r25, r21
    2a6c:	02 96       	adiw	r24, 0x02	; 2
    2a6e:	91 83       	std	Z+1, r25	; 0x01
    2a70:	80 83       	st	Z, r24
    2a72:	12 96       	adiw	r26, 0x02	; 2
    2a74:	8d 91       	ld	r24, X+
    2a76:	9c 91       	ld	r25, X
    2a78:	13 97       	sbiw	r26, 0x03	; 3
    2a7a:	93 83       	std	Z+3, r25	; 0x03
    2a7c:	82 83       	std	Z+2, r24	; 0x02
    2a7e:	21 15       	cp	r18, r1
    2a80:	31 05       	cpc	r19, r1
    2a82:	29 f4       	brne	.+10     	; 0x2a8e <free+0x9c>
    2a84:	f0 93 b6 03 	sts	0x03B6, r31
    2a88:	e0 93 b5 03 	sts	0x03B5, r30
    2a8c:	3e c0       	rjmp	.+124    	; 0x2b0a <free+0x118>
    2a8e:	d9 01       	movw	r26, r18
    2a90:	13 96       	adiw	r26, 0x03	; 3
    2a92:	fc 93       	st	X, r31
    2a94:	ee 93       	st	-X, r30
    2a96:	12 97       	sbiw	r26, 0x02	; 2
    2a98:	4d 91       	ld	r20, X+
    2a9a:	5d 91       	ld	r21, X+
    2a9c:	a4 0f       	add	r26, r20
    2a9e:	b5 1f       	adc	r27, r21
    2aa0:	ea 17       	cp	r30, r26
    2aa2:	fb 07       	cpc	r31, r27
    2aa4:	79 f4       	brne	.+30     	; 0x2ac4 <free+0xd2>
    2aa6:	80 81       	ld	r24, Z
    2aa8:	91 81       	ldd	r25, Z+1	; 0x01
    2aaa:	84 0f       	add	r24, r20
    2aac:	95 1f       	adc	r25, r21
    2aae:	02 96       	adiw	r24, 0x02	; 2
    2ab0:	d9 01       	movw	r26, r18
    2ab2:	11 96       	adiw	r26, 0x01	; 1
    2ab4:	9c 93       	st	X, r25
    2ab6:	8e 93       	st	-X, r24
    2ab8:	82 81       	ldd	r24, Z+2	; 0x02
    2aba:	93 81       	ldd	r25, Z+3	; 0x03
    2abc:	13 96       	adiw	r26, 0x03	; 3
    2abe:	9c 93       	st	X, r25
    2ac0:	8e 93       	st	-X, r24
    2ac2:	12 97       	sbiw	r26, 0x02	; 2
    2ac4:	e0 e0       	ldi	r30, 0x00	; 0
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	9b 81       	ldd	r25, Y+3	; 0x03
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	19 f0       	breq	.+6      	; 0x2ad6 <free+0xe4>
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	ec 01       	movw	r28, r24
    2ad4:	f9 cf       	rjmp	.-14     	; 0x2ac8 <free+0xd6>
    2ad6:	ce 01       	movw	r24, r28
    2ad8:	02 96       	adiw	r24, 0x02	; 2
    2ada:	28 81       	ld	r18, Y
    2adc:	39 81       	ldd	r19, Y+1	; 0x01
    2ade:	82 0f       	add	r24, r18
    2ae0:	93 1f       	adc	r25, r19
    2ae2:	20 91 b3 03 	lds	r18, 0x03B3
    2ae6:	30 91 b4 03 	lds	r19, 0x03B4
    2aea:	28 17       	cp	r18, r24
    2aec:	39 07       	cpc	r19, r25
    2aee:	69 f4       	brne	.+26     	; 0x2b0a <free+0x118>
    2af0:	30 97       	sbiw	r30, 0x00	; 0
    2af2:	29 f4       	brne	.+10     	; 0x2afe <free+0x10c>
    2af4:	10 92 b6 03 	sts	0x03B6, r1
    2af8:	10 92 b5 03 	sts	0x03B5, r1
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <free+0x110>
    2afe:	13 82       	std	Z+3, r1	; 0x03
    2b00:	12 82       	std	Z+2, r1	; 0x02
    2b02:	d0 93 b4 03 	sts	0x03B4, r29
    2b06:	c0 93 b3 03 	sts	0x03B3, r28
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	08 95       	ret

00002b10 <strrev>:
    2b10:	dc 01       	movw	r26, r24
    2b12:	fc 01       	movw	r30, r24
    2b14:	67 2f       	mov	r22, r23
    2b16:	71 91       	ld	r23, Z+
    2b18:	77 23       	and	r23, r23
    2b1a:	e1 f7       	brne	.-8      	; 0x2b14 <strrev+0x4>
    2b1c:	32 97       	sbiw	r30, 0x02	; 2
    2b1e:	04 c0       	rjmp	.+8      	; 0x2b28 <strrev+0x18>
    2b20:	7c 91       	ld	r23, X
    2b22:	6d 93       	st	X+, r22
    2b24:	70 83       	st	Z, r23
    2b26:	62 91       	ld	r22, -Z
    2b28:	ae 17       	cp	r26, r30
    2b2a:	bf 07       	cpc	r27, r31
    2b2c:	c8 f3       	brcs	.-14     	; 0x2b20 <strrev+0x10>
    2b2e:	08 95       	ret

00002b30 <__do_global_dtors>:
    2b30:	10 e0       	ldi	r17, 0x00	; 0
    2b32:	c6 ea       	ldi	r28, 0xA6	; 166
    2b34:	d0 e0       	ldi	r29, 0x00	; 0
    2b36:	04 c0       	rjmp	.+8      	; 0x2b40 <__do_global_dtors+0x10>
    2b38:	fe 01       	movw	r30, r28
    2b3a:	0e 94 4e 14 	call	0x289c	; 0x289c <__tablejump__>
    2b3e:	22 96       	adiw	r28, 0x02	; 2
    2b40:	c8 3a       	cpi	r28, 0xA8	; 168
    2b42:	d1 07       	cpc	r29, r17
    2b44:	c9 f7       	brne	.-14     	; 0x2b38 <__do_global_dtors+0x8>
    2b46:	f8 94       	cli

00002b48 <__stop_program>:
    2b48:	ff cf       	rjmp	.-2      	; 0x2b48 <__stop_program>
