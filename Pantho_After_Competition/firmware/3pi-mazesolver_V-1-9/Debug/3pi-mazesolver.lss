
3pi-mazesolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00002bfc  00002c90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026d  0080014a  0080014a  00002cda  2**0
                  ALLOC
  3 .stab         00006624  00000000  00000000  00002cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008bbc  00000000  00000000  00009300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00011ebc  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  00011eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ad6  00000000  00000000  00011ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007c8  00000000  00000000  00013ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001133  00000000  00000000  0001429a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000290  00000000  00000000  000153d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000052d  00000000  00000000  00015660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cd3  00000000  00000000  00015b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000108  00000000  00000000  00016860  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__dtors_end>
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      24:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__vector_9>
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      34:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__vector_13>
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      50:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <go>:
      76:	4c 31 36 20 63 64 65 67 72 65 67 34 00              L16 cdegreg4.

00000083 <welcome>:
      83:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000008d <demo_name_line2>:
      8d:	73 6f 6c 76 65 72 00                                solver.

00000094 <demo_name_line1>:
      94:	4d 61 7a 65 00                                      Maze.

00000099 <welcome_line2>:
      99:	33 f7 20 52 6f 62 6f 74 00                          3. Robot.

000000a2 <welcome_line1>:
      a2:	20 50 6f 6c 6f 6c 75 00                              Pololu.

000000aa <__ctors_start>:
      aa:	b1 0e       	add	r11, r17

000000ac <__ctors_end>:
      ac:	b2 0e       	add	r11, r18

000000ae <__dtors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	d8 e0       	ldi	r29, 0x08	; 8
      b6:	de bf       	out	0x3e, r29	; 62
      b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
      ba:	11 e0       	ldi	r17, 0x01	; 1
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	ec ef       	ldi	r30, 0xFC	; 252
      c2:	fb e2       	ldi	r31, 0x2B	; 43
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
      c6:	05 90       	lpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	aa 34       	cpi	r26, 0x4A	; 74
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
      d0:	23 e0       	ldi	r18, 0x03	; 3
      d2:	aa e4       	ldi	r26, 0x4A	; 74
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a7 3b       	cpi	r26, 0xB7	; 183
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>

000000e0 <__do_global_ctors>:
      e0:	10 e0       	ldi	r17, 0x00	; 0
      e2:	cc ea       	ldi	r28, 0xAC	; 172
      e4:	d0 e0       	ldi	r29, 0x00	; 0
      e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_global_ctors+0x10>
      e8:	22 97       	sbiw	r28, 0x02	; 2
      ea:	fe 01       	movw	r30, r28
      ec:	0e 94 a7 14 	call	0x294e	; 0x294e <__tablejump__>
      f0:	ca 3a       	cpi	r28, 0xAA	; 170
      f2:	d1 07       	cpc	r29, r17
      f4:	c9 f7       	brne	.-14     	; 0xe8 <__do_global_ctors+0x8>
      f6:	0e 94 44 02 	call	0x488	; 0x488 <main>
      fa:	0c 94 f1 15 	jmp	0x2be2	; 0x2be2 <__do_global_dtors>

000000fe <__bad_interrupt>:
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <load_custom_characters>:

// This function loads custom characters into the LCD.  Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	88 e6       	ldi	r24, 0x68	; 104
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
     10c:	61 e0       	ldi	r22, 0x01	; 1
     10e:	89 e6       	ldi	r24, 0x69	; 105
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
     116:	62 e0       	ldi	r22, 0x02	; 2
     118:	8a e6       	ldi	r24, 0x6A	; 106
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     120:	63 e0       	ldi	r22, 0x03	; 3
     122:	8b e6       	ldi	r24, 0x6B	; 107
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     12a:	64 e0       	ldi	r22, 0x04	; 4
     12c:	8c e6       	ldi	r24, 0x6C	; 108
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     134:	65 e0       	ldi	r22, 0x05	; 5
     136:	8d e6       	ldi	r24, 0x6D	; 109
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     13e:	66 e0       	ldi	r22, 0x06	; 6
     140:	8e e6       	ldi	r24, 0x6E	; 110
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <lcd_load_custom_character>
	clear(); // the LCD must be cleared for the characters to take effect
     148:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <clear>

0000014c <display_readings>:
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	2a 97       	sbiw	r28, 0x0a	; 10
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
     16c:	8c 01       	movw	r16, r24
	unsigned char i;

	for(i=0;i<5;i++) {
     16e:	d1 2c       	mov	r13, r1
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     170:	8a e0       	ldi	r24, 0x0A	; 10
     172:	c8 2e       	mov	r12, r24

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     174:	95 e6       	ldi	r25, 0x65	; 101
     176:	e9 2e       	mov	r14, r25
     178:	f1 2c       	mov	r15, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     17a:	e1 e3       	ldi	r30, 0x31	; 49
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	de 01       	movw	r26, r28
     180:	11 96       	adiw	r26, 0x01	; 1
     182:	8c 2d       	mov	r24, r12
     184:	01 90       	ld	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	8a 95       	dec	r24
     18a:	e1 f7       	brne	.-8      	; 0x184 <display_readings+0x38>

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     18c:	f8 01       	movw	r30, r16
     18e:	81 91       	ld	r24, Z+
     190:	91 91       	ld	r25, Z+
     192:	8f 01       	movw	r16, r30
     194:	b7 01       	movw	r22, r14
     196:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__udivmodhi4>
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	8c 0f       	add	r24, r28
     1a0:	9d 1f       	adc	r25, r29
     1a2:	68 0f       	add	r22, r24
     1a4:	79 1f       	adc	r23, r25

		// Display the bar graph character.
		print_character(c);
     1a6:	fb 01       	movw	r30, r22
     1a8:	80 81       	ld	r24, Z
     1aa:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <print_character>
// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     1ae:	d3 94       	inc	r13
     1b0:	f5 e0       	ldi	r31, 0x05	; 5
     1b2:	df 12       	cpse	r13, r31
     1b4:	e2 cf       	rjmp	.-60     	; 0x17a <display_readings+0x2e>
		char c = display_characters[calibrated_values[i]/101];

		// Display the bar graph character.
		print_character(c);
	}
}
     1b6:	2a 96       	adiw	r28, 0x0a	; 10
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	08 95       	ret

000001d4 <follow_segment>:
#include <pololu/3pi.h>

void follow_segment(int max)
{
     1d4:	2f 92       	push	r2
     1d6:	3f 92       	push	r3
     1d8:	4f 92       	push	r4
     1da:	5f 92       	push	r5
     1dc:	6f 92       	push	r6
     1de:	7f 92       	push	r7
     1e0:	8f 92       	push	r8
     1e2:	9f 92       	push	r9
     1e4:	af 92       	push	r10
     1e6:	bf 92       	push	r11
     1e8:	cf 92       	push	r12
     1ea:	df 92       	push	r13
     1ec:	ef 92       	push	r14
     1ee:	ff 92       	push	r15
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	2a 97       	sbiw	r28, 0x0a	; 10
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
     208:	8c 01       	movw	r16, r24
	int last_proportional = 0;
	long integral=0;
     20a:	c1 2c       	mov	r12, r1
     20c:	d1 2c       	mov	r13, r1
     20e:	76 01       	movw	r14, r12
#include <pololu/3pi.h>

void follow_segment(int max)
{
	int last_proportional = 0;
     210:	21 2c       	mov	r2, r1
     212:	31 2c       	mov	r3, r1
		int derivative = proportional - last_proportional;
		integral += proportional;

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     214:	50 e1       	ldi	r21, 0x10	; 16
     216:	45 2e       	mov	r4, r21
     218:	57 e2       	ldi	r21, 0x27	; 39
     21a:	55 2e       	mov	r5, r21
     21c:	61 2c       	mov	r6, r1
     21e:	71 2c       	mov	r7, r1

		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
     220:	88 24       	eor	r8, r8
     222:	99 24       	eor	r9, r9
     224:	88 1a       	sub	r8, r24
     226:	99 0a       	sbc	r9, r25
	long integral=0;

	while(1)
	{
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	ce 01       	movw	r24, r28
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <read_line>

		int proportional = ((int)position) - 2000;
     232:	80 5d       	subi	r24, 0xD0	; 208
     234:	97 40       	sbci	r25, 0x07	; 7
     236:	5c 01       	movw	r10, r24

		int derivative = proportional - last_proportional;
		integral += proportional;
     238:	aa 27       	eor	r26, r26
     23a:	97 fd       	sbrc	r25, 7
     23c:	a0 95       	com	r26
     23e:	ba 2f       	mov	r27, r26
     240:	c8 0e       	add	r12, r24
     242:	d9 1e       	adc	r13, r25
     244:	ea 1e       	adc	r14, r26
     246:	fb 1e       	adc	r15, r27

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     248:	c7 01       	movw	r24, r14
     24a:	b6 01       	movw	r22, r12
     24c:	a3 01       	movw	r20, r6
     24e:	92 01       	movw	r18, r4
     250:	0e 94 44 14 	call	0x2888	; 0x2888 <__divmodsi4>
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);

		int proportional = ((int)position) - 2000;

		int derivative = proportional - last_proportional;
     254:	b5 01       	movw	r22, r10
     256:	62 19       	sub	r22, r2
     258:	73 09       	sbc	r23, r3
		integral += proportional;

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     25a:	cb 01       	movw	r24, r22
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	86 0f       	add	r24, r22
     262:	97 1f       	adc	r25, r23
     264:	97 fd       	sbrc	r25, 7
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	fc 01       	movw	r30, r24
     26a:	f5 95       	asr	r31
     26c:	e7 95       	ror	r30
     26e:	e2 0f       	add	r30, r18
     270:	f3 1f       	adc	r31, r19
     272:	c5 01       	movw	r24, r10
     274:	64 e1       	ldi	r22, 0x14	; 20
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	0e 94 0e 14 	call	0x281c	; 0x281c <__divmodhi4>
     27c:	e6 0f       	add	r30, r22
     27e:	f7 1f       	adc	r31, r23
     280:	0e 17       	cp	r16, r30
     282:	1f 07       	cpc	r17, r31
     284:	0c f4       	brge	.+2      	; 0x288 <follow_segment+0xb4>
     286:	f8 01       	movw	r30, r16
     288:	cf 01       	movw	r24, r30
     28a:	e8 15       	cp	r30, r8
     28c:	f9 05       	cpc	r31, r9
     28e:	0c f4       	brge	.+2      	; 0x292 <follow_segment+0xbe>
     290:	c4 01       	movw	r24, r8
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
     292:	b8 01       	movw	r22, r16
		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
		
		if(power_difference < 0)
     294:	97 ff       	sbrs	r25, 7
     296:	03 c0       	rjmp	.+6      	; 0x29e <follow_segment+0xca>
			set_motors(max+power_difference,max);
     298:	80 0f       	add	r24, r16
     29a:	91 1f       	adc	r25, r17
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <follow_segment+0xd0>
		else
			set_motors(max,max-power_difference);
     29e:	68 1b       	sub	r22, r24
     2a0:	79 0b       	sbc	r23, r25
     2a2:	c8 01       	movw	r24, r16
     2a4:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>

		if(sensors[1] < 100 && sensors[2] < 100 && sensors[3] < 100)
     2a8:	8b 81       	ldd	r24, Y+3	; 0x03
     2aa:	9c 81       	ldd	r25, Y+4	; 0x04
     2ac:	84 36       	cpi	r24, 0x64	; 100
     2ae:	91 05       	cpc	r25, r1
     2b0:	50 f4       	brcc	.+20     	; 0x2c6 <follow_segment+0xf2>
     2b2:	8d 81       	ldd	r24, Y+5	; 0x05
     2b4:	9e 81       	ldd	r25, Y+6	; 0x06
     2b6:	84 36       	cpi	r24, 0x64	; 100
     2b8:	91 05       	cpc	r25, r1
     2ba:	28 f4       	brcc	.+10     	; 0x2c6 <follow_segment+0xf2>
     2bc:	8f 81       	ldd	r24, Y+7	; 0x07
     2be:	98 85       	ldd	r25, Y+8	; 0x08
     2c0:	84 36       	cpi	r24, 0x64	; 100
     2c2:	91 05       	cpc	r25, r1
     2c4:	60 f0       	brcs	.+24     	; 0x2de <follow_segment+0x10a>
		{
			return;
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ca:	89 3c       	cpi	r24, 0xC9	; 201
     2cc:	91 05       	cpc	r25, r1
     2ce:	38 f4       	brcc	.+14     	; 0x2de <follow_segment+0x10a>
     2d0:	89 85       	ldd	r24, Y+9	; 0x09
     2d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     2d4:	89 3c       	cpi	r24, 0xC9	; 201
     2d6:	91 05       	cpc	r25, r1
     2d8:	10 f4       	brcc	.+4      	; 0x2de <follow_segment+0x10a>
		int proportional = ((int)position) - 2000;

		int derivative = proportional - last_proportional;
		integral += proportional;

		last_proportional = proportional;
     2da:	15 01       	movw	r2, r10
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
		{
			return;
		}
	}
     2dc:	a5 cf       	rjmp	.-182    	; 0x228 <follow_segment+0x54>
     2de:	2a 96       	adiw	r28, 0x0a	; 10
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	df 90       	pop	r13
     2f8:	cf 90       	pop	r12
     2fa:	bf 90       	pop	r11
     2fc:	af 90       	pop	r10
     2fe:	9f 90       	pop	r9
     300:	8f 90       	pop	r8
     302:	7f 90       	pop	r7
     304:	6f 90       	pop	r6
     306:	5f 90       	pop	r5
     308:	4f 90       	pop	r4
     30a:	3f 90       	pop	r3
     30c:	2f 90       	pop	r2
     30e:	08 95       	ret

00000310 <initialize>:

const char welcome[] PROGMEM = ">g32>>c32";
const char go[] PROGMEM = "L16 cdegreg4";

void initialize()
{
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	2a 97       	sbiw	r28, 0x0a	; 10
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
	unsigned int counter; 
	unsigned int sensors[5]; 
	
	pololu_3pi_init(2000);
     328:	80 ed       	ldi	r24, 0xD0	; 208
     32a:	97 e0       	ldi	r25, 0x07	; 7
     32c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <pololu_3pi_init>
	load_custom_characters();
     330:	0e 94 81 00 	call	0x102	; 0x102 <load_custom_characters>
	
	print_from_program_space(welcome_line1);
     334:	82 ea       	ldi	r24, 0xA2	; 162
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 10 0c 	call	0x1820	; 0x1820 <print_from_program_space>
	lcd_goto_xy(0,1);
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	0e 94 90 0c 	call	0x1920	; 0x1920 <lcd_goto_xy>
	print_from_program_space(welcome_line2);
     344:	89 e9       	ldi	r24, 0x99	; 153
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 10 0c 	call	0x1820	; 0x1820 <print_from_program_space>
	play_from_program_space(welcome);
     34c:	83 e8       	ldi	r24, 0x83	; 131
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 a5 0a 	call	0x154a	; 0x154a <play_from_program_space>
	delay_ms(1000);
     354:	88 ee       	ldi	r24, 0xE8	; 232
     356:	93 e0       	ldi	r25, 0x03	; 3
     358:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>

	clear();
     35c:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <clear>
	print_from_program_space(demo_name_line1);
     360:	84 e9       	ldi	r24, 0x94	; 148
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 10 0c 	call	0x1820	; 0x1820 <print_from_program_space>
	lcd_goto_xy(0,1);
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	0e 94 90 0c 	call	0x1920	; 0x1920 <lcd_goto_xy>
	print_from_program_space(demo_name_line2);
     370:	8d e8       	ldi	r24, 0x8D	; 141
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 10 0c 	call	0x1820	; 0x1820 <print_from_program_space>
	delay_ms(1000);
     378:	88 ee       	ldi	r24, 0xE8	; 232
     37a:	93 e0       	ldi	r25, 0x03	; 3
		print_long(bat);
		print("mV");
		lcd_goto_xy(0,1);
		print("Press B");

		delay_ms(100);
     37c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
	print_from_program_space(demo_name_line1);
	lcd_goto_xy(0,1);
	print_from_program_space(demo_name_line2);
	delay_ms(1000);

	while(!button_is_pressed(BUTTON_B))
     380:	80 e1       	ldi	r24, 0x10	; 16
     382:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <button_is_pressed>
     386:	81 11       	cpse	r24, r1
     388:	1b c0       	rjmp	.+54     	; 0x3c0 <initialize+0xb0>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     38a:	0e 94 63 07 	call	0xec6	; 0xec6 <read_battery_millivolts_3pi>
     38e:	8c 01       	movw	r16, r24
	{
		int bat = read_battery_millivolts();

		clear();
     390:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <clear>
		print_long(bat);
     394:	b8 01       	movw	r22, r16
     396:	88 27       	eor	r24, r24
     398:	77 fd       	sbrc	r23, 7
     39a:	80 95       	com	r24
     39c:	98 2f       	mov	r25, r24
     39e:	0e 94 6d 0c 	call	0x18da	; 0x18da <print_long>
		print("mV");
     3a2:	8b e3       	ldi	r24, 0x3B	; 59
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <print>
		lcd_goto_xy(0,1);
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 90 0c 	call	0x1920	; 0x1920 <lcd_goto_xy>
		print("Press B");
     3b2:	8e e3       	ldi	r24, 0x3E	; 62
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <print>

		delay_ms(100);
     3ba:	84 e6       	ldi	r24, 0x64	; 100
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	de cf       	rjmp	.-68     	; 0x37c <initialize+0x6c>
	}

	wait_for_button_release(BUTTON_B);
     3c0:	80 e1       	ldi	r24, 0x10	; 16
     3c2:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <wait_for_button_release>
	delay_ms(1000);
     3c6:	88 ee       	ldi	r24, 0xE8	; 232
     3c8:	93 e0       	ldi	r25, 0x03	; 3
     3ca:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
     3ce:	0c ee       	ldi	r16, 0xEC	; 236
     3d0:	1f ef       	ldi	r17, 0xFF	; 255

	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     3d2:	08 32       	cpi	r16, 0x28	; 40
     3d4:	11 05       	cpc	r17, r1
     3d6:	28 f0       	brcs	.+10     	; 0x3e2 <initialize+0xd2>
			set_motors(40,-40);
     3d8:	68 ed       	ldi	r22, 0xD8	; 216
     3da:	7f ef       	ldi	r23, 0xFF	; 255
     3dc:	88 e2       	ldi	r24, 0x28	; 40
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <initialize+0xda>
		else
			set_motors(-40,40);
     3e2:	68 e2       	ldi	r22, 0x28	; 40
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	88 ed       	ldi	r24, 0xD8	; 216
     3e8:	9f ef       	ldi	r25, 0xFF	; 255
     3ea:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <calibrate_line_sensors>
		delay_ms(20);
     3f4:	84 e1       	ldi	r24, 0x14	; 20
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
     3fc:	0f 5f       	subi	r16, 0xFF	; 255
     3fe:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	for(counter=0;counter<80;counter++)
     400:	0c 33       	cpi	r16, 0x3C	; 60
     402:	11 05       	cpc	r17, r1
     404:	31 f7       	brne	.-52     	; 0x3d2 <initialize+0xc2>
		else
			set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	set_motors(0,0);
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>

	while(!button_is_pressed(BUTTON_B))
     412:	80 e1       	ldi	r24, 0x10	; 16
     414:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <button_is_pressed>
     418:	81 11       	cpse	r24, r1
     41a:	1a c0       	rjmp	.+52     	; 0x450 <initialize+0x140>
	{
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <read_line>
     426:	8c 01       	movw	r16, r24

		clear();
     428:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <clear>
		print_long(position);
     42c:	b8 01       	movw	r22, r16
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 6d 0c 	call	0x18da	; 0x18da <print_long>
		lcd_goto_xy(0,1);
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	0e 94 90 0c 	call	0x1920	; 0x1920 <lcd_goto_xy>
		display_readings(sensors);
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	0e 94 a6 00 	call	0x14c	; 0x14c <display_readings>

		delay_ms(100);
     446:	84 e6       	ldi	r24, 0x64	; 100
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
     44e:	e1 cf       	rjmp	.-62     	; 0x412 <initialize+0x102>
	}
	wait_for_button_release(BUTTON_B);
     450:	80 e1       	ldi	r24, 0x10	; 16
     452:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <wait_for_button_release>

	clear();
     456:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <clear>

	print("Go!");		
     45a:	86 e4       	ldi	r24, 0x46	; 70
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <print>

	play_from_program_space(go);
     462:	86 e7       	ldi	r24, 0x76	; 118
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 a5 0a 	call	0x154a	; 0x154a <play_from_program_space>
	while(is_playing());
     46a:	0e 94 94 0a 	call	0x1528	; 0x1528 <is_playing>
     46e:	81 11       	cpse	r24, r1
     470:	fc cf       	rjmp	.-8      	; 0x46a <initialize+0x15a>
}
     472:	2a 96       	adiw	r28, 0x0a	; 10
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	08 95       	ret

00000488 <main>:


int main()
{
	initialize();//3pi initialization
     488:	0e 94 88 01 	call	0x310	; 0x310 <initialize>
	
	maze_solve(160); //std 160
     48c:	80 ea       	ldi	r24, 0xA0	; 160
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 51 03 	call	0x6a2	; 0x6a2 <maze_solve>
     494:	ff cf       	rjmp	.-2      	; 0x494 <main+0xc>

00000496 <sensor_data>:
uint16_t  node_number = 0;



uint8_t sensor_data(void)
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	2a 97       	sbiw	r28, 0x0a	; 10
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5], edge_th = 400, line_th = 300;
	uint8_t sn_dta = 0x00;
	read_line(sensors,IR_EMITTERS_ON);
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	ce 01       	movw	r24, r28
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <read_line>
	if (sensors[0] > edge_th)	sn_dta |= (1<<4);
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	81 39       	cpi	r24, 0x91	; 145
     4ba:	91 40       	sbci	r25, 0x01	; 1
     4bc:	10 f0       	brcs	.+4      	; 0x4c2 <sensor_data+0x2c>
     4be:	80 e1       	ldi	r24, 0x10	; 16
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <sensor_data+0x2e>
	else						sn_dta &= ~(1<<4);
     4c2:	80 e0       	ldi	r24, 0x00	; 0
	if (sensors[1] > line_th)	sn_dta |= (1<<3);
     4c4:	2b 81       	ldd	r18, Y+3	; 0x03
     4c6:	3c 81       	ldd	r19, Y+4	; 0x04
     4c8:	2d 32       	cpi	r18, 0x2D	; 45
     4ca:	31 40       	sbci	r19, 0x01	; 1
     4cc:	10 f0       	brcs	.+4      	; 0x4d2 <sensor_data+0x3c>
     4ce:	88 60       	ori	r24, 0x08	; 8
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <sensor_data+0x3e>
	else						sn_dta &= ~(1<<3);
     4d2:	87 7f       	andi	r24, 0xF7	; 247
	if (sensors[2] > line_th)	sn_dta |= (1<<2);
     4d4:	2d 81       	ldd	r18, Y+5	; 0x05
     4d6:	3e 81       	ldd	r19, Y+6	; 0x06
     4d8:	2d 32       	cpi	r18, 0x2D	; 45
     4da:	31 40       	sbci	r19, 0x01	; 1
     4dc:	10 f0       	brcs	.+4      	; 0x4e2 <sensor_data+0x4c>
     4de:	84 60       	ori	r24, 0x04	; 4
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <sensor_data+0x4e>
	else						sn_dta &= ~(1<<2);
     4e2:	8b 7f       	andi	r24, 0xFB	; 251
	if (sensors[3] > line_th)	sn_dta |= (1<<1);
     4e4:	2f 81       	ldd	r18, Y+7	; 0x07
     4e6:	38 85       	ldd	r19, Y+8	; 0x08
     4e8:	2d 32       	cpi	r18, 0x2D	; 45
     4ea:	31 40       	sbci	r19, 0x01	; 1
     4ec:	10 f0       	brcs	.+4      	; 0x4f2 <sensor_data+0x5c>
     4ee:	82 60       	ori	r24, 0x02	; 2
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <sensor_data+0x5e>
	else						sn_dta &= ~(1<<1);
     4f2:	8d 7f       	andi	r24, 0xFD	; 253
	if (sensors[4] > edge_th)	sn_dta |= (1<<0);
     4f4:	29 85       	ldd	r18, Y+9	; 0x09
     4f6:	3a 85       	ldd	r19, Y+10	; 0x0a
     4f8:	21 39       	cpi	r18, 0x91	; 145
     4fa:	31 40       	sbci	r19, 0x01	; 1
     4fc:	10 f0       	brcs	.+4      	; 0x502 <sensor_data+0x6c>
     4fe:	81 60       	ori	r24, 0x01	; 1
     500:	01 c0       	rjmp	.+2      	; 0x504 <sensor_data+0x6e>
	else						sn_dta &= ~(1<<0);
     502:	8e 7f       	andi	r24, 0xFE	; 254
	
	return sn_dta;
}
     504:	2a 96       	adiw	r28, 0x0a	; 10
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <sensor_data_verified>:

uint8_t sensor_data_verified(void)
{
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
void time_reset(void);

// This is inline for efficiency:
static inline void delay_us(unsigned int microseconds)
{
  __asm__ volatile (
     51c:	c4 e1       	ldi	r28, 0x14	; 20
     51e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t snsr_data;
re_data:
	snsr_data = sensor_data();
     520:	0e 94 4b 02 	call	0x496	; 0x496 <sensor_data>
     524:	18 2f       	mov	r17, r24
     526:	fe 01       	movw	r30, r28
     528:	6f 93       	push	r22
     52a:	64 e0       	ldi	r22, 0x04	; 4
     52c:	6a 95       	dec	r22
     52e:	f1 f7       	brne	.-4      	; 0x52c <sensor_data_verified+0x16>
     530:	6f 91       	pop	r22
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	c9 f7       	brne	.-14     	; 0x528 <sensor_data_verified+0x12>
	delay_us(20);
	if (snsr_data == sensor_data())
     536:	0e 94 4b 02 	call	0x496	; 0x496 <sensor_data>
     53a:	18 13       	cpse	r17, r24
     53c:	f1 cf       	rjmp	.-30     	; 0x520 <sensor_data_verified+0xa>
	{
		return snsr_data;
	}
	else goto re_data;
}
     53e:	81 2f       	mov	r24, r17
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	08 95       	ret

00000548 <process_u>:


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
			{
				directions_solved[i-1] = 's';
     54c:	43 e7       	ldi	r20, 0x73	; 115
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'r';
     54e:	52 e7       	ldi	r21, 0x72	; 114
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
			{
				directions_solved[i-1] = 'l';
     550:	6c e6       	ldi	r22, 0x6C	; 108


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     552:	dc 01       	movw	r26, r24
     554:	a1 54       	subi	r26, 0x41	; 65
     556:	be 4f       	sbci	r27, 0xFE	; 254
     558:	2c 91       	ld	r18, X
     55a:	22 23       	and	r18, r18
     55c:	e1 f1       	breq	.+120    	; 0x5d6 <process_u+0x8e>
	{
		if (directions_solved[i] == 'u')
     55e:	25 37       	cpi	r18, 0x75	; 117
     560:	c1 f5       	brne	.+112    	; 0x5d2 <process_u+0x8a>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
     562:	fc 01       	movw	r30, r24
     564:	e2 54       	subi	r30, 0x42	; 66
     566:	fe 4f       	sbci	r31, 0xFE	; 254
     568:	30 81       	ld	r19, Z
     56a:	32 37       	cpi	r19, 0x72	; 114
     56c:	29 f4       	brne	.+10     	; 0x578 <process_u+0x30>
     56e:	11 96       	adiw	r26, 0x01	; 1
     570:	3c 91       	ld	r19, X
     572:	33 37       	cpi	r19, 0x73	; 115
     574:	81 f4       	brne	.+32     	; 0x596 <process_u+0x4e>
     576:	06 c0       	rjmp	.+12     	; 0x584 <process_u+0x3c>
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
     578:	33 37       	cpi	r19, 0x73	; 115
     57a:	31 f4       	brne	.+12     	; 0x588 <process_u+0x40>
     57c:	11 96       	adiw	r26, 0x01	; 1
     57e:	3c 91       	ld	r19, X
     580:	32 37       	cpi	r19, 0x72	; 114
     582:	a1 f4       	brne	.+40     	; 0x5ac <process_u+0x64>
			{
				directions_solved[i-1] = 'l';
     584:	60 83       	st	Z, r22
     586:	19 c0       	rjmp	.+50     	; 0x5ba <process_u+0x72>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'r')
     588:	3c 36       	cpi	r19, 0x6C	; 108
     58a:	b9 f4       	brne	.+46     	; 0x5ba <process_u+0x72>
     58c:	11 96       	adiw	r26, 0x01	; 1
     58e:	3c 91       	ld	r19, X
     590:	32 37       	cpi	r19, 0x72	; 114
     592:	31 f4       	brne	.+12     	; 0x5a0 <process_u+0x58>
     594:	11 c0       	rjmp	.+34     	; 0x5b8 <process_u+0x70>
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'r')
     596:	32 37       	cpi	r19, 0x72	; 114
     598:	39 f0       	breq	.+14     	; 0x5a8 <process_u+0x60>
			{
				directions_solved[i-1] = 's';
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'l')
     59a:	3c 36       	cpi	r19, 0x6C	; 108
     59c:	71 f4       	brne	.+28     	; 0x5ba <process_u+0x72>
     59e:	0c c0       	rjmp	.+24     	; 0x5b8 <process_u+0x70>
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
     5a0:	33 37       	cpi	r19, 0x73	; 115
     5a2:	31 f0       	breq	.+12     	; 0x5b0 <process_u+0x68>
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
     5a4:	3c 36       	cpi	r19, 0x6C	; 108
     5a6:	49 f4       	brne	.+18     	; 0x5ba <process_u+0x72>
			{
				directions_solved[i-1] = 's';
     5a8:	40 83       	st	Z, r20
     5aa:	07 c0       	rjmp	.+14     	; 0x5ba <process_u+0x72>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'l')
     5ac:	3c 36       	cpi	r19, 0x6C	; 108
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <process_u+0x6c>
			{
				directions_solved[i-1] = 'r';
     5b0:	50 83       	st	Z, r21
     5b2:	03 c0       	rjmp	.+6      	; 0x5ba <process_u+0x72>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
     5b4:	33 37       	cpi	r19, 0x73	; 115
     5b6:	09 f4       	brne	.+2      	; 0x5ba <process_u+0x72>
			{
				directions_solved[i-1] = 'u';
     5b8:	20 83       	st	Z, r18
     5ba:	fc 01       	movw	r30, r24
     5bc:	e1 54       	subi	r30, 0x41	; 65
     5be:	fe 4f       	sbci	r31, 0xFE	; 254
			}

			
			while (directions_solved[i+2])
     5c0:	22 81       	ldd	r18, Z+2	; 0x02
     5c2:	22 23       	and	r18, r18
     5c4:	19 f0       	breq	.+6      	; 0x5cc <process_u+0x84>
			{
				directions_solved[i] = directions_solved[i+2];
     5c6:	20 83       	st	Z, r18
				i++;
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	f7 cf       	rjmp	.-18     	; 0x5ba <process_u+0x72>
			}
			directions_solved[i] = '\0';
     5cc:	10 82       	st	Z, r1
			i=0;
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	be cf       	rjmp	.-132    	; 0x552 <process_u+0xa>
			}
			directions_solved[i] = '\0';
			i=0;
		}
	}
}
     5d6:	08 95       	ret

000005d8 <process_array>:
		}
	}
}

void process_array(void)
{
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
     5e0:	8f eb       	ldi	r24, 0xBF	; 191
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <strrev>
     5e8:	ef eb       	ldi	r30, 0xBF	; 191
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
		{
			directions_solved[i] = 'r';
		}
		else if (directions_solved[i] == 'r')
		{
			directions_solved[i] = 'l';
     5ec:	9c e6       	ldi	r25, 0x6C	; 108
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'l')
		{
			directions_solved[i] = 'r';
     5ee:	22 e7       	ldi	r18, 0x72	; 114
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
	
	for (i=0;directions_solved[i];i++)
     5f0:	80 81       	ld	r24, Z
     5f2:	88 23       	and	r24, r24
     5f4:	49 f0       	breq	.+18     	; 0x608 <process_array+0x30>
	{
		if (directions_solved[i] == 'l')
     5f6:	8c 36       	cpi	r24, 0x6C	; 108
     5f8:	11 f4       	brne	.+4      	; 0x5fe <process_array+0x26>
		{
			directions_solved[i] = 'r';
     5fa:	20 83       	st	Z, r18
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <process_array+0x2c>
		}
		else if (directions_solved[i] == 'r')
     5fe:	82 37       	cpi	r24, 0x72	; 114
     600:	09 f4       	brne	.+2      	; 0x604 <process_array+0x2c>
		{
			directions_solved[i] = 'l';
     602:	90 83       	st	Z, r25
     604:	31 96       	adiw	r30, 0x01	; 1
     606:	f4 cf       	rjmp	.-24     	; 0x5f0 <process_array+0x18>
		}
	}
	
	while(1)
	{
		length_sln_prev = strlen(directions_solved);
     608:	0f eb       	ldi	r16, 0xBF	; 191
     60a:	11 e0       	ldi	r17, 0x01	; 1
     60c:	e8 01       	movw	r28, r16
     60e:	09 90       	ld	r0, Y+
     610:	00 20       	and	r0, r0
     612:	e9 f7       	brne	.-6      	; 0x60e <process_array+0x36>
     614:	21 97       	sbiw	r28, 0x01	; 1
     616:	cf 5b       	subi	r28, 0xBF	; 191
     618:	d1 40       	sbci	r29, 0x01	; 1
		
		process_u();
     61a:	0e 94 a4 02 	call	0x548	; 0x548 <process_u>
		
		//process_loop();
		
		if (length_sln_prev == strlen(directions_solved))
     61e:	f8 01       	movw	r30, r16
     620:	01 90       	ld	r0, Z+
     622:	00 20       	and	r0, r0
     624:	e9 f7       	brne	.-6      	; 0x620 <process_array+0x48>
     626:	31 97       	sbiw	r30, 0x01	; 1
     628:	ef 5b       	subi	r30, 0xBF	; 191
     62a:	f1 40       	sbci	r31, 0x01	; 1
     62c:	ce 17       	cp	r28, r30
     62e:	df 07       	cpc	r29, r31
     630:	69 f7       	brne	.-38     	; 0x60c <process_array+0x34>
		{
			break;
		}
	}
}
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret

0000063c <evaluate_direction>:


void evaluate_direction(uint16_t speed)
{
     63c:	bc 01       	movw	r22, r24
	char evaluation = 0;
	evaluation = directions_solved[node_number];
     63e:	80 91 bd 01 	lds	r24, 0x01BD
     642:	90 91 be 01 	lds	r25, 0x01BE
     646:	fc 01       	movw	r30, r24
     648:	e1 54       	subi	r30, 0x41	; 65
     64a:	fe 4f       	sbci	r31, 0xFE	; 254
     64c:	20 81       	ld	r18, Z
	node_number = node_number + 1;
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	90 93 be 01 	sts	0x01BE, r25
     654:	80 93 bd 01 	sts	0x01BD, r24
	
	if (evaluation == 's')
     658:	23 37       	cpi	r18, 0x73	; 115
     65a:	11 f4       	brne	.+4      	; 0x660 <evaluate_direction+0x24>
	{
		turn('S',speed);
     65c:	83 e5       	ldi	r24, 0x53	; 83
     65e:	0b c0       	rjmp	.+22     	; 0x676 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'u')
     660:	25 37       	cpi	r18, 0x75	; 117
     662:	11 f4       	brne	.+4      	; 0x668 <evaluate_direction+0x2c>
	{
		turn('U',speed);
     664:	85 e5       	ldi	r24, 0x55	; 85
     666:	07 c0       	rjmp	.+14     	; 0x676 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'l')
     668:	2c 36       	cpi	r18, 0x6C	; 108
     66a:	11 f4       	brne	.+4      	; 0x670 <evaluate_direction+0x34>
	{
		turn('L',speed);
     66c:	8c e4       	ldi	r24, 0x4C	; 76
     66e:	03 c0       	rjmp	.+6      	; 0x676 <evaluate_direction+0x3a>
	}
	else if (evaluation == 'r')
     670:	22 37       	cpi	r18, 0x72	; 114
     672:	19 f4       	brne	.+6      	; 0x67a <evaluate_direction+0x3e>
	{
		turn('R',speed);
     674:	82 e5       	ldi	r24, 0x52	; 82
     676:	0c 94 c5 04 	jmp	0x98a	; 0x98a <turn>
	}
	else
	{
		set_motors(0,0);
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
     686:	ff cf       	rjmp	.-2      	; 0x686 <evaluate_direction+0x4a>

00000688 <destination_operation>:
}


void destination_operation(int speed)
{
	directions_solved[node_number] = '\0';
     688:	e0 91 bd 01 	lds	r30, 0x01BD
     68c:	f0 91 be 01 	lds	r31, 0x01BE
     690:	e1 54       	subi	r30, 0x41	; 65
     692:	fe 4f       	sbci	r31, 0xFE	; 254
     694:	10 82       	st	Z, r1
	turn('D',speed);
     696:	bc 01       	movw	r22, r24
     698:	84 e4       	ldi	r24, 0x44	; 68
     69a:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
	process_array();
     69e:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <process_array>

000006a2 <maze_solve>:
}


void maze_solve(int speed)
{
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	1f 92       	push	r1
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	3c 01       	movw	r6, r24
	uint16_t destination = 0;
	const signed int speed_node = 100;
	char sensor_data_hold = 0, Right_trigged = 0, Left_trigged = 0, Forward_trigged = 0; 
     6ae:	a1 2c       	mov	r10, r1
     6b0:	91 2c       	mov	r9, r1
     6b2:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
			}
		}
		else if (sensor_data_hold == 0b00000) //-100
		{	
			directions_solved[node_number] = 'u';
     6b4:	85 e7       	ldi	r24, 0x75	; 117
     6b6:	e8 2e       	mov	r14, r24
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 'l';
     6b8:	9c e6       	ldi	r25, 0x6C	; 108
     6ba:	f9 2e       	mov	r15, r25
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 's';
     6bc:	23 e7       	ldi	r18, 0x73	; 115
     6be:	d2 2e       	mov	r13, r18
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
			{
				directions_solved[node_number] = 'r';
     6c0:	32 e7       	ldi	r19, 0x72	; 114
     6c2:	c3 2e       	mov	r12, r19
//****** Explore the path *****************************************************************************
///////////////////////////////////////////////////////////////////////////////////////////////////////

	while(1)
	{
		follow_segment(speed);
     6c4:	c3 01       	movw	r24, r6
     6c6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>
		
		sensor_data_hold = sensor_data_verified();
     6ca:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     6ce:	28 2f       	mov	r18, r24
		
		if(sensor_data_hold & 0b10000)  //left trigging 
     6d0:	84 ff       	sbrs	r24, 4
     6d2:	6e c0       	rjmp	.+220    	; 0x7b0 <maze_solve+0x10e>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     6d4:	64 e6       	ldi	r22, 0x64	; 100
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	84 e6       	ldi	r24, 0x64	; 100
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	29 83       	std	Y+1, r18	; 0x01
     6de:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
			destination = 0;
     6e2:	00 e0       	ldi	r16, 0x00	; 0
     6e4:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     6e6:	29 81       	ldd	r18, Y+1	; 0x01
     6e8:	21 71       	andi	r18, 0x11	; 17
     6ea:	c1 f0       	breq	.+48     	; 0x71c <maze_solve+0x7a>
			{
				sensor_data_hold = sensor_data_verified();
     6ec:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     6f0:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b00001) && (Right_trigged == 0))
     6f2:	80 ff       	sbrs	r24, 0
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <maze_solve+0x5c>
     6f6:	b1 10       	cpse	r11, r1
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <maze_solve+0x5c>
				{
					Right_trigged=1;
     6fa:	bb 24       	eor	r11, r11
     6fc:	b3 94       	inc	r11
				}
				if (sensor_data_hold == 0b11111)
     6fe:	2f 31       	cpi	r18, 0x1F	; 31
     700:	99 f7       	brne	.-26     	; 0x6e8 <maze_solve+0x46>
				{
					destination = destination + 1;
     702:	0f 5f       	subi	r16, 0xFF	; 255
     704:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 70)   // destination triggering
     706:	07 34       	cpi	r16, 0x47	; 71
     708:	11 05       	cpc	r17, r1
     70a:	70 f3       	brcs	.-36     	; 0x6e8 <maze_solve+0x46>
					{
						destination = 0x00;
						destination_operation(speed);
     70c:	c3 01       	movw	r24, r6
     70e:	0e 94 44 03 	call	0x688	; 0x688 <destination_operation>
	//****** Follow the Solved path************************************************************************
	///////////////////////////////////////////////////////////////////////////////////////////////////////

solv_maze:

node_number = 0x00;
     712:	10 92 be 01 	sts	0x01BE, r1
     716:	10 92 bd 01 	sts	0x01BD, r1
     71a:	e0 c0       	rjmp	.+448    	; 0x8dc <maze_solve+0x23a>
						goto solv_maze;
					}
				}
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
     71c:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
			if (sensor_data_hold & 0b00100)
     720:	82 fd       	sbrc	r24, 2
     722:	1f c1       	rjmp	.+574    	; 0x962 <__stack+0x63>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     724:	b1 10       	cpse	r11, r1
     726:	16 c0       	rjmp	.+44     	; 0x754 <maze_solve+0xb2>
     728:	a1 10       	cpse	r10, r1
     72a:	10 c0       	rjmp	.+32     	; 0x74c <maze_solve+0xaa>
			{
				directions_solved[node_number] = 'l';
     72c:	80 91 bd 01 	lds	r24, 0x01BD
     730:	90 91 be 01 	lds	r25, 0x01BE
     734:	fc 01       	movw	r30, r24
     736:	e1 54       	subi	r30, 0x41	; 65
     738:	fe 4f       	sbci	r31, 0xFE	; 254
     73a:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	90 93 be 01 	sts	0x01BE, r25
     742:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     746:	b3 01       	movw	r22, r6
     748:	8c e4       	ldi	r24, 0x4C	; 76
     74a:	bb c0       	rjmp	.+374    	; 0x8c2 <maze_solve+0x220>
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	a8 12       	cpse	r10, r24
     750:	b9 cf       	rjmp	.-142    	; 0x6c4 <maze_solve+0x22>
     752:	1b c0       	rjmp	.+54     	; 0x78a <maze_solve+0xe8>
				node_number = node_number + 1;
				turn('L',speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     754:	e1 e0       	ldi	r30, 0x01	; 1
     756:	be 12       	cpse	r11, r30
     758:	b5 cf       	rjmp	.-150    	; 0x6c4 <maze_solve+0x22>
     75a:	a1 10       	cpse	r10, r1
     75c:	13 c0       	rjmp	.+38     	; 0x784 <maze_solve+0xe2>
			{
				directions_solved[node_number] = 'l';
     75e:	80 91 bd 01 	lds	r24, 0x01BD
     762:	90 91 be 01 	lds	r25, 0x01BE
     766:	fc 01       	movw	r30, r24
     768:	e1 54       	subi	r30, 0x41	; 65
     76a:	fe 4f       	sbci	r31, 0xFE	; 254
     76c:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 be 01 	sts	0x01BE, r25
     774:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     778:	b3 01       	movw	r22, r6
     77a:	8c e4       	ldi	r24, 0x4C	; 76
     77c:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
				Right_trigged = 0;
     780:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
     782:	a0 cf       	rjmp	.-192    	; 0x6c4 <maze_solve+0x22>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
     784:	f1 e0       	ldi	r31, 0x01	; 1
     786:	af 12       	cpse	r10, r31
     788:	9d cf       	rjmp	.-198    	; 0x6c4 <maze_solve+0x22>
			{
				directions_solved[node_number] = 'l';
     78a:	80 91 bd 01 	lds	r24, 0x01BD
     78e:	90 91 be 01 	lds	r25, 0x01BE
     792:	fc 01       	movw	r30, r24
     794:	e1 54       	subi	r30, 0x41	; 65
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	90 93 be 01 	sts	0x01BE, r25
     7a0:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     7a4:	b3 01       	movw	r22, r6
     7a6:	8c e4       	ldi	r24, 0x4C	; 76
     7a8:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
				Right_trigged = 0;
				Forward_trigged = 0;
     7ac:	a1 2c       	mov	r10, r1
     7ae:	e8 cf       	rjmp	.-48     	; 0x780 <maze_solve+0xde>
			}
		}
		else if (sensor_data_hold & 0b00001) //right trigging
     7b0:	80 ff       	sbrs	r24, 0
     7b2:	76 c0       	rjmp	.+236    	; 0x8a0 <maze_solve+0x1fe>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     7b4:	64 e6       	ldi	r22, 0x64	; 100
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	84 e6       	ldi	r24, 0x64	; 100
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	29 83       	std	Y+1, r18	; 0x01
     7be:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
			destination = 0;
     7c2:	00 e0       	ldi	r16, 0x00	; 0
     7c4:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     7c6:	29 81       	ldd	r18, Y+1	; 0x01
     7c8:	21 71       	andi	r18, 0x11	; 17
     7ca:	89 f0       	breq	.+34     	; 0x7ee <maze_solve+0x14c>
			{
				sensor_data_hold = sensor_data_verified();
     7cc:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     7d0:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b10000) && (Left_trigged == 0))
     7d2:	84 ff       	sbrs	r24, 4
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <maze_solve+0x13c>
     7d6:	91 10       	cpse	r9, r1
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <maze_solve+0x13c>
				{
					Left_trigged=1;
     7da:	99 24       	eor	r9, r9
     7dc:	93 94       	inc	r9
				}
				if (sensor_data_hold == 0b11111)
     7de:	2f 31       	cpi	r18, 0x1F	; 31
     7e0:	99 f7       	brne	.-26     	; 0x7c8 <maze_solve+0x126>
				{
					destination = destination + 1;
     7e2:	0f 5f       	subi	r16, 0xFF	; 255
     7e4:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 70)   // destination triggering
     7e6:	07 34       	cpi	r16, 0x47	; 71
     7e8:	11 05       	cpc	r17, r1
     7ea:	70 f3       	brcs	.-36     	; 0x7c8 <maze_solve+0x126>
     7ec:	8f cf       	rjmp	.-226    	; 0x70c <maze_solve+0x6a>
						goto solv_maze;
					}
				}
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
     7ee:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
			if (sensor_data_hold & 0b00100)
     7f2:	82 fd       	sbrc	r24, 2
     7f4:	ba c0       	rjmp	.+372    	; 0x96a <__stack+0x6b>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     7f6:	91 10       	cpse	r9, r1
     7f8:	25 c0       	rjmp	.+74     	; 0x844 <maze_solve+0x1a2>
     7fa:	a1 10       	cpse	r10, r1
     7fc:	10 c0       	rjmp	.+32     	; 0x81e <maze_solve+0x17c>
			{
				directions_solved[node_number] = 'r';
     7fe:	80 91 bd 01 	lds	r24, 0x01BD
     802:	90 91 be 01 	lds	r25, 0x01BE
     806:	fc 01       	movw	r30, r24
     808:	e1 54       	subi	r30, 0x41	; 65
     80a:	fe 4f       	sbci	r31, 0xFE	; 254
     80c:	c0 82       	st	Z, r12
				node_number = node_number + 1;
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	90 93 be 01 	sts	0x01BE, r25
     814:	80 93 bd 01 	sts	0x01BD, r24
				turn('R',speed);
     818:	b3 01       	movw	r22, r6
     81a:	82 e5       	ldi	r24, 0x52	; 82
     81c:	52 c0       	rjmp	.+164    	; 0x8c2 <maze_solve+0x220>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	a8 12       	cpse	r10, r24
     822:	50 cf       	rjmp	.-352    	; 0x6c4 <maze_solve+0x22>
			{
				directions_solved[node_number] = 's';
     824:	80 91 bd 01 	lds	r24, 0x01BD
     828:	90 91 be 01 	lds	r25, 0x01BE
     82c:	fc 01       	movw	r30, r24
     82e:	e1 54       	subi	r30, 0x41	; 65
     830:	fe 4f       	sbci	r31, 0xFE	; 254
     832:	d0 82       	st	Z, r13
				node_number = node_number + 1;
     834:	01 96       	adiw	r24, 0x01	; 1
     836:	90 93 be 01 	sts	0x01BE, r25
     83a:	80 93 bd 01 	sts	0x01BD, r24
				turn('S',speed);
     83e:	b3 01       	movw	r22, r6
     840:	83 e5       	ldi	r24, 0x53	; 83
     842:	29 c0       	rjmp	.+82     	; 0x896 <maze_solve+0x1f4>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     844:	e1 e0       	ldi	r30, 0x01	; 1
     846:	9e 12       	cpse	r9, r30
     848:	3d cf       	rjmp	.-390    	; 0x6c4 <maze_solve+0x22>
     84a:	a1 10       	cpse	r10, r1
     84c:	12 c0       	rjmp	.+36     	; 0x872 <maze_solve+0x1d0>
			{
				directions_solved[node_number] = 'l';
     84e:	80 91 bd 01 	lds	r24, 0x01BD
     852:	90 91 be 01 	lds	r25, 0x01BE
     856:	fc 01       	movw	r30, r24
     858:	e1 54       	subi	r30, 0x41	; 65
     85a:	fe 4f       	sbci	r31, 0xFE	; 254
     85c:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	90 93 be 01 	sts	0x01BE, r25
     864:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     868:	b3 01       	movw	r22, r6
     86a:	8c e4       	ldi	r24, 0x4C	; 76
     86c:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
     870:	15 c0       	rjmp	.+42     	; 0x89c <maze_solve+0x1fa>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	af 12       	cpse	r10, r31
     876:	26 cf       	rjmp	.-436    	; 0x6c4 <maze_solve+0x22>
			{
				directions_solved[node_number] = 'l';
     878:	80 91 bd 01 	lds	r24, 0x01BD
     87c:	90 91 be 01 	lds	r25, 0x01BE
     880:	fc 01       	movw	r30, r24
     882:	e1 54       	subi	r30, 0x41	; 65
     884:	fe 4f       	sbci	r31, 0xFE	; 254
     886:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	90 93 be 01 	sts	0x01BE, r25
     88e:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     892:	b3 01       	movw	r22, r6
     894:	8c e4       	ldi	r24, 0x4C	; 76
     896:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
				Left_trigged = 0;
				Forward_trigged = 0;
     89a:	a1 2c       	mov	r10, r1
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 'l';
				node_number = node_number + 1;
				turn('L',speed);
				Left_trigged = 0;
     89c:	91 2c       	mov	r9, r1
     89e:	12 cf       	rjmp	.-476    	; 0x6c4 <maze_solve+0x22>
				Forward_trigged = 0;
			}
		}
		else if (sensor_data_hold == 0b00000) //-100
     8a0:	81 11       	cpse	r24, r1
     8a2:	10 cf       	rjmp	.-480    	; 0x6c4 <maze_solve+0x22>
		{	
			directions_solved[node_number] = 'u';
     8a4:	80 91 bd 01 	lds	r24, 0x01BD
     8a8:	90 91 be 01 	lds	r25, 0x01BE
     8ac:	fc 01       	movw	r30, r24
     8ae:	e1 54       	subi	r30, 0x41	; 65
     8b0:	fe 4f       	sbci	r31, 0xFE	; 254
     8b2:	e0 82       	st	Z, r14
			node_number = node_number + 1;
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	90 93 be 01 	sts	0x01BE, r25
     8ba:	80 93 bd 01 	sts	0x01BD, r24
			turn('U',speed);
     8be:	b3 01       	movw	r22, r6
     8c0:	85 e5       	ldi	r24, 0x55	; 85
     8c2:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
     8c6:	fe ce       	rjmp	.-516    	; 0x6c4 <maze_solve+0x22>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
			destination = 0;
			while (sensor_data_hold & 0b10001)
			{
				sensor_data_hold = sensor_data_verified();
     8c8:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     8cc:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b00001) && (Right_trigged == 0))
				{
					Right_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
     8ce:	8f 31       	cpi	r24, 0x1F	; 31
     8d0:	c1 f0       	breq	.+48     	; 0x902 <__stack+0x3>
		
		if(sensor_data_hold & 0b10000)  //left trigging 
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
			destination = 0;
			while (sensor_data_hold & 0b10001)
     8d2:	21 71       	andi	r18, 0x11	; 17
     8d4:	c9 f7       	brne	.-14     	; 0x8c8 <maze_solve+0x226>
						set_motors(0,0);
						while(1);
					}
				}
			}
			evaluate_direction(speed);
     8d6:	c3 01       	movw	r24, r6
     8d8:	0e 94 1e 03 	call	0x63c	; 0x63c <evaluate_direction>

node_number = 0x00;

	while(1)
	{
		follow_segment(speed);
     8dc:	c3 01       	movw	r24, r6
     8de:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>
		
		sensor_data_hold = sensor_data_verified();
     8e2:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     8e6:	28 2f       	mov	r18, r24
		
		if(sensor_data_hold & 0b10000)  //left trigging 
     8e8:	84 ff       	sbrs	r24, 4
     8ea:	18 c0       	rjmp	.+48     	; 0x91c <__stack+0x1d>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     8ec:	64 e6       	ldi	r22, 0x64	; 100
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	84 e6       	ldi	r24, 0x64	; 100
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	29 83       	std	Y+1, r18	; 0x01
     8f6:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
			destination = 0;
     8fa:	00 e0       	ldi	r16, 0x00	; 0
     8fc:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     8fe:	29 81       	ldd	r18, Y+1	; 0x01
     900:	e8 cf       	rjmp	.-48     	; 0x8d2 <maze_solve+0x230>
				{
					Right_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
				{
					destination = destination + 1;
     902:	0f 5f       	subi	r16, 0xFF	; 255
     904:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 5000)   // destination triggering
     906:	09 38       	cpi	r16, 0x89	; 137
     908:	83 e1       	ldi	r24, 0x13	; 19
     90a:	18 07       	cpc	r17, r24
     90c:	10 f3       	brcs	.-60     	; 0x8d2 <maze_solve+0x230>
					{
						set_motors(0,0);
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
     91a:	ff cf       	rjmp	.-2      	; 0x91a <__stack+0x1b>
					}
				}
			}
			evaluate_direction(speed);
		}
		else if (sensor_data_hold & 0b00001) //right trigging
     91c:	80 ff       	sbrs	r24, 0
     91e:	1e c0       	rjmp	.+60     	; 0x95c <__stack+0x5d>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     920:	64 e6       	ldi	r22, 0x64	; 100
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	84 e6       	ldi	r24, 0x64	; 100
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	29 83       	std	Y+1, r18	; 0x01
     92a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
			destination = 0;
     92e:	00 e0       	ldi	r16, 0x00	; 0
     930:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     932:	29 81       	ldd	r18, Y+1	; 0x01
     934:	21 71       	andi	r18, 0x11	; 17
     936:	79 f2       	breq	.-98     	; 0x8d6 <maze_solve+0x234>
			{
				sensor_data_hold = sensor_data_verified();
     938:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     93c:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b10000) && (Left_trigged == 0))
				{
					Left_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
     93e:	8f 31       	cpi	r24, 0x1F	; 31
     940:	c9 f7       	brne	.-14     	; 0x934 <__stack+0x35>
				{
					destination = destination + 1;
     942:	0f 5f       	subi	r16, 0xFF	; 255
     944:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 5000)   // destination triggering
     946:	09 38       	cpi	r16, 0x89	; 137
     948:	e3 e1       	ldi	r30, 0x13	; 19
     94a:	1e 07       	cpc	r17, r30
     94c:	98 f3       	brcs	.-26     	; 0x934 <__stack+0x35>
					{
						set_motors(0,0);
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
     95a:	ff cf       	rjmp	.-2      	; 0x95a <__stack+0x5b>
					}
				}
			}
			evaluate_direction(speed);
		}
		else if (sensor_data_hold == 0b00000) //-100
     95c:	81 11       	cpse	r24, r1
     95e:	be cf       	rjmp	.-132    	; 0x8dc <maze_solve+0x23a>
     960:	ba cf       	rjmp	.-140    	; 0x8d6 <maze_solve+0x234>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     962:	bb 20       	and	r11, r11
     964:	09 f4       	brne	.+2      	; 0x968 <__stack+0x69>
     966:	11 cf       	rjmp	.-478    	; 0x78a <maze_solve+0xe8>
     968:	04 c0       	rjmp	.+8      	; 0x972 <__stack+0x73>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     96a:	99 20       	and	r9, r9
     96c:	09 f4       	brne	.+2      	; 0x970 <__stack+0x71>
     96e:	5a cf       	rjmp	.-332    	; 0x824 <maze_solve+0x182>
     970:	05 c0       	rjmp	.+10     	; 0x97c <__stack+0x7d>
				node_number = node_number + 1;
				turn('L',speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     972:	f1 e0       	ldi	r31, 0x01	; 1
     974:	bf 16       	cp	r11, r31
     976:	09 f4       	brne	.+2      	; 0x97a <__stack+0x7b>
     978:	08 cf       	rjmp	.-496    	; 0x78a <maze_solve+0xe8>
     97a:	04 c0       	rjmp	.+8      	; 0x984 <__stack+0x85>
				node_number = node_number + 1;
				turn('S',speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	98 16       	cp	r9, r24
     980:	09 f4       	brne	.+2      	; 0x984 <__stack+0x85>
     982:	7a cf       	rjmp	.-268    	; 0x878 <maze_solve+0x1d6>
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
			if (sensor_data_hold & 0b00100)
			{
				Forward_trigged = 1;
     984:	aa 24       	eor	r10, r10
     986:	a3 94       	inc	r10
     988:	9d ce       	rjmp	.-710    	; 0x6c4 <maze_solve+0x22>

0000098a <turn>:
#include <pololu/3pi.h>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	eb 01       	movw	r28, r22
	uint8_t sensor_data_save = 0x00;
	
	if (dir == 'L')
     990:	8c 34       	cpi	r24, 0x4C	; 76
     992:	09 f0       	breq	.+2      	; 0x996 <turn+0xc>
     994:	41 c0       	rjmp	.+130    	; 0xa18 <turn+0x8e>
	{
		delay_ms(17); //25
     996:	81 e1       	ldi	r24, 0x11	; 17
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(0,0);
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(10);
     9aa:	8a e0       	ldi	r24, 0x0A	; 10
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(-200,-200);
     9b2:	68 e3       	ldi	r22, 0x38	; 56
     9b4:	7f ef       	ldi	r23, 0xFF	; 255
     9b6:	88 e3       	ldi	r24, 0x38	; 56
     9b8:	9f ef       	ldi	r25, 0xFF	; 255
     9ba:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(10);
     9be:	8a e0       	ldi	r24, 0x0A	; 10
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(0,0);
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(50);
     9d2:	82 e3       	ldi	r24, 0x32	; 50
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		
		set_motors(-60,60);
     9da:	6c e3       	ldi	r22, 0x3C	; 60
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	84 ec       	ldi	r24, 0xC4	; 196
     9e0:	9f ef       	ldi	r25, 0xFF	; 255
     9e2:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     9e6:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(50);
		
		set_motors(-60,60);
		
		while(!(sensor_data_save & 0b10000))
     9e8:	84 fd       	sbrc	r24, 4
     9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <turn+0x68>
		{
			sensor_data_save = sensor_data_verified();
     9ec:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     9f0:	fb cf       	rjmp	.-10     	; 0x9e8 <turn+0x5e>
		}
		while(sensor_data_save & 0b10000)
     9f2:	84 ff       	sbrs	r24, 4
     9f4:	03 c0       	rjmp	.+6      	; 0x9fc <turn+0x72>
		{
			sensor_data_save = sensor_data_verified();
     9f6:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     9fa:	fb cf       	rjmp	.-10     	; 0x9f2 <turn+0x68>
		}
		while(!(sensor_data_save & 0b00010))
     9fc:	81 fd       	sbrc	r24, 1
     9fe:	03 c0       	rjmp	.+6      	; 0xa06 <turn+0x7c>
		{
			sensor_data_save = sensor_data_verified();
     a00:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     a04:	fb cf       	rjmp	.-10     	; 0x9fc <turn+0x72>
		}
		
		set_motors(0,0);
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(10); //30
     a12:	8a e0       	ldi	r24, 0x0A	; 10
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	eb c0       	rjmp	.+470    	; 0xbee <turn+0x264>
		follow_segment(160);
		delay_ms(25);
		set_motors(speed,speed);
		
	}
	else if (dir == 'R')
     a18:	82 35       	cpi	r24, 0x52	; 82
     a1a:	09 f0       	breq	.+2      	; 0xa1e <turn+0x94>
     a1c:	a2 c0       	rjmp	.+324    	; 0xb62 <turn+0x1d8>
	{
		delay_ms(17);  //25
     a1e:	81 e1       	ldi	r24, 0x11	; 17
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(0,0);
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(10);
     a32:	8a e0       	ldi	r24, 0x0A	; 10
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(-200,-200);
     a3a:	68 e3       	ldi	r22, 0x38	; 56
     a3c:	7f ef       	ldi	r23, 0xFF	; 255
     a3e:	88 e3       	ldi	r24, 0x38	; 56
     a40:	9f ef       	ldi	r25, 0xFF	; 255
     a42:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(10);
     a46:	8a e0       	ldi	r24, 0x0A	; 10
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(0,0);
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(50);
     a5a:	82 e3       	ldi	r24, 0x32	; 50
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		
		set_motors(60,-60);
     a62:	64 ec       	ldi	r22, 0xC4	; 196
     a64:	7f ef       	ldi	r23, 0xFF	; 255
     a66:	8c e3       	ldi	r24, 0x3C	; 60
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     a6e:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(50);
		
		set_motors(60,-60);
		
		while(!(sensor_data_save & 0b00001))
     a70:	80 fd       	sbrc	r24, 0
     a72:	03 c0       	rjmp	.+6      	; 0xa7a <turn+0xf0>
		{
			sensor_data_save = sensor_data_verified();
     a74:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     a78:	fb cf       	rjmp	.-10     	; 0xa70 <turn+0xe6>
		}
		while(sensor_data_save & 0b00001)
     a7a:	80 ff       	sbrs	r24, 0
     a7c:	03 c0       	rjmp	.+6      	; 0xa84 <turn+0xfa>
		{
			sensor_data_save = sensor_data_verified();
     a7e:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     a82:	fb cf       	rjmp	.-10     	; 0xa7a <turn+0xf0>
		}
		while(!(sensor_data_save & 0b01000))
     a84:	83 fd       	sbrc	r24, 3
     a86:	03 c0       	rjmp	.+6      	; 0xa8e <turn+0x104>
		{
			sensor_data_save = sensor_data_verified();
     a88:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     a8c:	fb cf       	rjmp	.-10     	; 0xa84 <turn+0xfa>
		}
		//delay_ms(7); // external 
		set_motors(0,0);
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(10);//30
     a9a:	8a e0       	ldi	r24, 0x0A	; 10
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(-100,100);
     aa2:	64 e6       	ldi	r22, 0x64	; 100
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	8c e9       	ldi	r24, 0x9C	; 156
     aa8:	9f ef       	ldi	r25, 0xFF	; 255
     aaa:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(10);
     aae:	8a e0       	ldi	r24, 0x0A	; 10
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(0,0);
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(50);
     ac2:	82 e3       	ldi	r24, 0x32	; 50
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		
		
		set_motors(80,80);
     aca:	60 e5       	ldi	r22, 0x50	; 80
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	80 e5       	ldi	r24, 0x50	; 80
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		follow_segment(80);
     ad6:	80 e5       	ldi	r24, 0x50	; 80
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>
		delay_ms(25);
     ade:	89 e1       	ldi	r24, 0x19	; 25
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(100,100);
     ae6:	64 e6       	ldi	r22, 0x64	; 100
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	84 e6       	ldi	r24, 0x64	; 100
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		follow_segment(100);
     af2:	84 e6       	ldi	r24, 0x64	; 100
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>
		delay_ms(25);
     afa:	89 e1       	ldi	r24, 0x19	; 25
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(120,120);
     b02:	68 e7       	ldi	r22, 0x78	; 120
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	88 e7       	ldi	r24, 0x78	; 120
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		follow_segment(120);
     b0e:	88 e7       	ldi	r24, 0x78	; 120
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>
		delay_ms(25);
     b16:	89 e1       	ldi	r24, 0x19	; 25
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(140,140);
     b1e:	6c e8       	ldi	r22, 0x8C	; 140
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	8c e8       	ldi	r24, 0x8C	; 140
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		follow_segment(140);
     b2a:	8c e8       	ldi	r24, 0x8C	; 140
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>
		delay_ms(25);
     b32:	89 e1       	ldi	r24, 0x19	; 25
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(160,160);
     b3a:	60 ea       	ldi	r22, 0xA0	; 160
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	80 ea       	ldi	r24, 0xA0	; 160
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		follow_segment(160);
     b46:	80 ea       	ldi	r24, 0xA0	; 160
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>
		delay_ms(25);
     b4e:	89 e1       	ldi	r24, 0x19	; 25
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(speed,speed);
     b56:	be 01       	movw	r22, r28
     b58:	ce 01       	movw	r24, r28
		set_motors(0,0);
		delay_ms(50);
	}
	

     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
		follow_segment(140);
		delay_ms(25);
		set_motors(160,160);
		follow_segment(160);
		delay_ms(25);
		set_motors(speed,speed);
     b5e:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <set_motors>

	}
	else if (dir == 'S')
     b62:	83 35       	cpi	r24, 0x53	; 83
     b64:	09 f4       	brne	.+2      	; 0xb68 <turn+0x1de>
     b66:	bf cf       	rjmp	.-130    	; 0xae6 <turn+0x15c>
		set_motors(160,160);
		follow_segment(160);
		delay_ms(25);
		set_motors(speed,speed);
	}
	else if (dir == 'U')
     b68:	85 35       	cpi	r24, 0x55	; 85
     b6a:	09 f0       	breq	.+2      	; 0xb6e <turn+0x1e4>
     b6c:	47 c0       	rjmp	.+142    	; 0xbfc <turn+0x272>
	{
		delay_ms(25);
     b6e:	89 e1       	ldi	r24, 0x19	; 25
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(0,0);
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(10);
     b82:	8a e0       	ldi	r24, 0x0A	; 10
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(-200,-200);
     b8a:	68 e3       	ldi	r22, 0x38	; 56
     b8c:	7f ef       	ldi	r23, 0xFF	; 255
     b8e:	88 e3       	ldi	r24, 0x38	; 56
     b90:	9f ef       	ldi	r25, 0xFF	; 255
     b92:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(10);
     b96:	8a e0       	ldi	r24, 0x0A	; 10
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(0,0);
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(50);
     baa:	82 e3       	ldi	r24, 0x32	; 50
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		
		set_motors(-60,60);
     bb2:	6c e3       	ldi	r22, 0x3C	; 60
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	84 ec       	ldi	r24, 0xC4	; 196
     bb8:	9f ef       	ldi	r25, 0xFF	; 255
     bba:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     bbe:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(50);
		
		set_motors(-60,60);
		
		while(!(sensor_data_save & 0b10000))
     bc0:	84 fd       	sbrc	r24, 4
     bc2:	03 c0       	rjmp	.+6      	; 0xbca <turn+0x240>
		{
			sensor_data_save = sensor_data_verified();
     bc4:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     bc8:	fb cf       	rjmp	.-10     	; 0xbc0 <turn+0x236>
		}
		while(sensor_data_save & 0b10000)
     bca:	84 ff       	sbrs	r24, 4
     bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <turn+0x24a>
		{
			sensor_data_save = sensor_data_verified();
     bce:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     bd2:	fb cf       	rjmp	.-10     	; 0xbca <turn+0x240>
		}
		while(!(sensor_data_save & 0b00010))
     bd4:	81 fd       	sbrc	r24, 1
     bd6:	03 c0       	rjmp	.+6      	; 0xbde <turn+0x254>
		{
			sensor_data_save = sensor_data_verified();
     bd8:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     bdc:	fb cf       	rjmp	.-10     	; 0xbd4 <turn+0x24a>
		}
		
		set_motors(0,0);
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(20);//30
     bea:	84 e1       	ldi	r24, 0x14	; 20
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(100,-100);
     bf2:	6c e9       	ldi	r22, 0x9C	; 156
     bf4:	7f ef       	ldi	r23, 0xFF	; 255
     bf6:	84 e6       	ldi	r24, 0x64	; 100
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	57 cf       	rjmp	.-338    	; 0xaaa <turn+0x120>
		set_motors(160,160);
		follow_segment(160);
		delay_ms(25);
		set_motors(speed,speed);
	}
	else if (dir == 'D')
     bfc:	84 34       	cpi	r24, 0x44	; 68
     bfe:	09 f0       	breq	.+2      	; 0xc02 <turn+0x278>
     c00:	6f c0       	rjmp	.+222    	; 0xce0 <turn+0x356>
	{
		uint16_t sensor_data_hold;
		set_motors(0,0);
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(50);
     c0e:	82 e3       	ldi	r24, 0x32	; 50
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		//set_motors(-100,-100);
		//delay_ms(50);
		//set_motors(0,0);
		//process_array();
		delay_ms(500);
     c16:	84 ef       	ldi	r24, 0xF4	; 244
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(-50,-50);
     c1e:	6e ec       	ldi	r22, 0xCE	; 206
     c20:	7f ef       	ldi	r23, 0xFF	; 255
     c22:	8e ec       	ldi	r24, 0xCE	; 206
     c24:	9f ef       	ldi	r25, 0xFF	; 255
     c26:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		sensor_data_hold = sensor_data_verified();
		while((sensor_data_hold & 0b10001) == 0b10001)
		{
			sensor_data_hold = sensor_data_verified();
     c2a:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     c2e:	90 e0       	ldi	r25, 0x00	; 0
		//set_motors(0,0);
		//process_array();
		delay_ms(500);
		set_motors(-50,-50);
		sensor_data_hold = sensor_data_verified();
		while((sensor_data_hold & 0b10001) == 0b10001)
     c30:	81 71       	andi	r24, 0x11	; 17
     c32:	99 27       	eor	r25, r25
     c34:	41 97       	sbiw	r24, 0x11	; 17
     c36:	c9 f3       	breq	.-14     	; 0xc2a <turn+0x2a0>
		{
			sensor_data_hold = sensor_data_verified();
		}
		set_motors(0,0);
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(50);
     c44:	82 e3       	ldi	r24, 0x32	; 50
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(50,50);
     c4c:	62 e3       	ldi	r22, 0x32	; 50
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	82 e3       	ldi	r24, 0x32	; 50
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(150);
     c58:	86 e9       	ldi	r24, 0x96	; 150
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		//set_motors(-100,-100);
		//delay_ms(50);
		set_motors(0,0);
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(50);
     c6c:	82 e3       	ldi	r24, 0x32	; 50
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(-60,60);
     c74:	6c e3       	ldi	r22, 0x3C	; 60
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	84 ec       	ldi	r24, 0xC4	; 196
     c7a:	9f ef       	ldi	r25, 0xFF	; 255
     c7c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(50);
     c80:	82 e3       	ldi	r24, 0x32	; 50
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		while((sensor_data_verified() & 0b10000) != 0x00);
     c88:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     c8c:	84 fd       	sbrc	r24, 4
     c8e:	fc cf       	rjmp	.-8      	; 0xc88 <turn+0x2fe>
		while((sensor_data_verified() & 0b10000) != 0b10000);
     c90:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     c94:	84 ff       	sbrs	r24, 4
     c96:	fc cf       	rjmp	.-8      	; 0xc90 <turn+0x306>
		while((sensor_data_verified() & 0b00010) != 0b00010);
     c98:	0e 94 8b 02 	call	0x516	; 0x516 <sensor_data_verified>
     c9c:	81 ff       	sbrs	r24, 1
     c9e:	fc cf       	rjmp	.-8      	; 0xc98 <turn+0x30e>
		////while(sensor_data() & (3<<3)) != (3<<3));
		//delay_ms(20);
		//set_motors(0,0);
		//delay_ms(50);
		
		set_motors(0,0);
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(20); //30
     cac:	84 e1       	ldi	r24, 0x14	; 20
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(100,-100);
     cb4:	6c e9       	ldi	r22, 0x9C	; 156
     cb6:	7f ef       	ldi	r23, 0xFF	; 255
     cb8:	84 e6       	ldi	r24, 0x64	; 100
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(10);
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
		set_motors(0,0);
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <set_motors>
		delay_ms(50);
     cd4:	82 e3       	ldi	r24, 0x32	; 50
     cd6:	90 e0       	ldi	r25, 0x00	; 0
	}
	

     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
		set_motors(0,0);
		delay_ms(20); //30
		set_motors(100,-100);
		delay_ms(10);
		set_motors(0,0);
		delay_ms(50);
     cdc:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <delay_ms>
	}
	

     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	08 95       	ret

00000ce6 <_ZN15OrangutanAnalog7setModeEh>:
     ce6:	88 23       	and	r24, r24
     ce8:	21 f4       	brne	.+8      	; 0xcf2 <_ZN15OrangutanAnalog7setModeEh+0xc>
     cea:	80 91 7c 00 	lds	r24, 0x007C
     cee:	8f 7d       	andi	r24, 0xDF	; 223
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <_ZN15OrangutanAnalog7setModeEh+0x12>
     cf2:	80 91 7c 00 	lds	r24, 0x007C
     cf6:	80 62       	ori	r24, 0x20	; 32
     cf8:	80 93 7c 00 	sts	0x007C, r24
     cfc:	08 95       	ret

00000cfe <_ZN15OrangutanAnalog7getModeEv>:
     cfe:	80 91 7c 00 	lds	r24, 0x007C
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	25 e0       	ldi	r18, 0x05	; 5
     d06:	95 95       	asr	r25
     d08:	87 95       	ror	r24
     d0a:	2a 95       	dec	r18
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <_ZN15OrangutanAnalog7getModeEv+0x8>
     d0e:	81 70       	andi	r24, 0x01	; 1
     d10:	08 95       	ret

00000d12 <_ZN15OrangutanAnalog12isConvertingEv>:
     d12:	80 91 7a 00 	lds	r24, 0x007A
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	36 e0       	ldi	r19, 0x06	; 6
     d1a:	95 95       	asr	r25
     d1c:	87 95       	ror	r24
     d1e:	3a 95       	dec	r19
     d20:	e1 f7       	brne	.-8      	; 0xd1a <_ZN15OrangutanAnalog12isConvertingEv+0x8>
     d22:	81 70       	andi	r24, 0x01	; 1
     d24:	08 95       	ret

00000d26 <_ZN15OrangutanAnalog16conversionResultEv>:
     d26:	0e 94 7f 06 	call	0xcfe	; 0xcfe <_ZN15OrangutanAnalog7getModeEv>
     d2a:	88 23       	and	r24, r24
     d2c:	21 f0       	breq	.+8      	; 0xd36 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     d2e:	20 91 79 00 	lds	r18, 0x0079
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	04 c0       	rjmp	.+8      	; 0xd3e <_ZN15OrangutanAnalog16conversionResultEv+0x18>
     d36:	20 91 78 00 	lds	r18, 0x0078
     d3a:	30 91 79 00 	lds	r19, 0x0079
     d3e:	c9 01       	movw	r24, r18
     d40:	08 95       	ret

00000d42 <_ZN15OrangutanAnalog15startConversionEhh>:
     d42:	80 32       	cpi	r24, 0x20	; 32
     d44:	b0 f4       	brcc	.+44     	; 0xd72 <_ZN15OrangutanAnalog15startConversionEhh+0x30>
     d46:	97 e8       	ldi	r25, 0x87	; 135
     d48:	90 93 7a 00 	sts	0x007A, r25
     d4c:	90 91 7c 00 	lds	r25, 0x007C
     d50:	29 2f       	mov	r18, r25
     d52:	20 64       	ori	r18, 0x40	; 64
     d54:	66 23       	and	r22, r22
     d56:	11 f0       	breq	.+4      	; 0xd5c <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     d58:	90 6c       	ori	r25, 0xC0	; 192
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <_ZN15OrangutanAnalog15startConversionEhh+0x1e>
     d5c:	92 2f       	mov	r25, r18
     d5e:	9f 77       	andi	r25, 0x7F	; 127
     d60:	90 7e       	andi	r25, 0xE0	; 224
     d62:	98 2b       	or	r25, r24
     d64:	90 93 7c 00 	sts	0x007C, r25
     d68:	80 91 7a 00 	lds	r24, 0x007A
     d6c:	80 64       	ori	r24, 0x40	; 64
     d6e:	80 93 7a 00 	sts	0x007A, r24
     d72:	08 95       	ret

00000d74 <_ZN15OrangutanAnalog11readAverageEhj>:
     d74:	a0 e0       	ldi	r26, 0x00	; 0
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e0 ec       	ldi	r30, 0xC0	; 192
     d7a:	f6 e0       	ldi	r31, 0x06	; 6
     d7c:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__prologue_saves__+0x14>
     d80:	6b 01       	movw	r12, r22
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN15OrangutanAnalog15startConversionEhh>
     d88:	0e 94 89 06 	call	0xd12	; 0xd12 <_ZN15OrangutanAnalog12isConvertingEv>
     d8c:	88 23       	and	r24, r24
     d8e:	e1 f7       	brne	.-8      	; 0xd88 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     d90:	e6 01       	movw	r28, r12
     d92:	ee 24       	eor	r14, r14
     d94:	ff 24       	eor	r15, r15
     d96:	87 01       	movw	r16, r14
     d98:	80 91 7a 00 	lds	r24, 0x007A
     d9c:	80 64       	ori	r24, 0x40	; 64
     d9e:	80 93 7a 00 	sts	0x007A, r24
     da2:	0e 94 89 06 	call	0xd12	; 0xd12 <_ZN15OrangutanAnalog12isConvertingEv>
     da6:	88 23       	and	r24, r24
     da8:	e1 f7       	brne	.-8      	; 0xda2 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     daa:	0e 94 93 06 	call	0xd26	; 0xd26 <_ZN15OrangutanAnalog16conversionResultEv>
     dae:	a0 e0       	ldi	r26, 0x00	; 0
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e8 0e       	add	r14, r24
     db4:	f9 1e       	adc	r15, r25
     db6:	0a 1f       	adc	r16, r26
     db8:	1b 1f       	adc	r17, r27
     dba:	21 97       	sbiw	r28, 0x01	; 1
     dbc:	69 f7       	brne	.-38     	; 0xd98 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     dbe:	c6 01       	movw	r24, r12
     dc0:	96 95       	lsr	r25
     dc2:	87 95       	ror	r24
     dc4:	20 e4       	ldi	r18, 0x40	; 64
     dc6:	c2 16       	cp	r12, r18
     dc8:	d1 04       	cpc	r13, r1
     dca:	40 f4       	brcc	.+16     	; 0xddc <_ZN15OrangutanAnalog11readAverageEhj+0x68>
     dcc:	8e 0d       	add	r24, r14
     dce:	9f 1d       	adc	r25, r15
     dd0:	6c 2d       	mov	r22, r12
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__udivmodhi4>
     dd8:	cb 01       	movw	r24, r22
     dda:	0d c0       	rjmp	.+26     	; 0xdf6 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     ddc:	bc 01       	movw	r22, r24
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	6e 0d       	add	r22, r14
     de4:	7f 1d       	adc	r23, r15
     de6:	80 1f       	adc	r24, r16
     de8:	91 1f       	adc	r25, r17
     dea:	96 01       	movw	r18, r12
     dec:	40 e0       	ldi	r20, 0x00	; 0
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	0e 94 22 14 	call	0x2844	; 0x2844 <__udivmodsi4>
     df4:	c9 01       	movw	r24, r18
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	e8 e0       	ldi	r30, 0x08	; 8
     dfc:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__epilogue_restores__+0x14>

00000e00 <_ZN15OrangutanAnalog12toMillivoltsEj>:
     e00:	a3 e0       	ldi	r26, 0x03	; 3
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e6 e0       	ldi	r30, 0x06	; 6
     e06:	f7 e0       	ldi	r31, 0x07	; 7
     e08:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__prologue_saves__+0x1e>
     e0c:	bc 01       	movw	r22, r24
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	20 91 00 01 	lds	r18, 0x0100
     e16:	30 91 01 01 	lds	r19, 0x0101
     e1a:	40 e0       	ldi	r20, 0x00	; 0
     e1c:	50 e0       	ldi	r21, 0x00	; 0
     e1e:	0e 94 de 13 	call	0x27bc	; 0x27bc <__mulsi3>
     e22:	18 2f       	mov	r17, r24
     e24:	69 83       	std	Y+1, r22	; 0x01
     e26:	7a 83       	std	Y+2, r23	; 0x02
     e28:	9b 83       	std	Y+3, r25	; 0x03
     e2a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <_ZN15OrangutanAnalog7getModeEv>
     e2e:	69 81       	ldd	r22, Y+1	; 0x01
     e30:	7a 81       	ldd	r23, Y+2	; 0x02
     e32:	9b 81       	ldd	r25, Y+3	; 0x03
     e34:	88 23       	and	r24, r24
     e36:	71 f0       	breq	.+28     	; 0xe54 <_ZN15OrangutanAnalog12toMillivoltsEj+0x54>
     e38:	9b 01       	movw	r18, r22
     e3a:	41 2f       	mov	r20, r17
     e3c:	59 2f       	mov	r21, r25
     e3e:	ca 01       	movw	r24, r20
     e40:	b9 01       	movw	r22, r18
     e42:	61 58       	subi	r22, 0x81	; 129
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	8f 4f       	sbci	r24, 0xFF	; 255
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	2f ef       	ldi	r18, 0xFF	; 255
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	0d c0       	rjmp	.+26     	; 0xe6e <_ZN15OrangutanAnalog12toMillivoltsEj+0x6e>
     e54:	9b 01       	movw	r18, r22
     e56:	41 2f       	mov	r20, r17
     e58:	59 2f       	mov	r21, r25
     e5a:	ca 01       	movw	r24, r20
     e5c:	b9 01       	movw	r22, r18
     e5e:	61 50       	subi	r22, 0x01	; 1
     e60:	7e 4f       	sbci	r23, 0xFE	; 254
     e62:	8f 4f       	sbci	r24, 0xFF	; 255
     e64:	9f 4f       	sbci	r25, 0xFF	; 255
     e66:	2f ef       	ldi	r18, 0xFF	; 255
     e68:	33 e0       	ldi	r19, 0x03	; 3
     e6a:	40 e0       	ldi	r20, 0x00	; 0
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	0e 94 22 14 	call	0x2844	; 0x2844 <__udivmodsi4>
     e72:	c9 01       	movw	r24, r18
     e74:	23 96       	adiw	r28, 0x03	; 3
     e76:	e3 e0       	ldi	r30, 0x03	; 3
     e78:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__epilogue_restores__+0x1e>

00000e7c <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     e7c:	0e 94 ba 06 	call	0xd74	; 0xd74 <_ZN15OrangutanAnalog11readAverageEhj>
     e80:	0e 94 00 07 	call	0xe00	; 0xe00 <_ZN15OrangutanAnalog12toMillivoltsEj>
     e84:	08 95       	ret

00000e86 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <_ZN15OrangutanAnalog7getModeEv>
     e90:	18 2f       	mov	r17, r24
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	0e 94 73 06 	call	0xce6	; 0xce6 <_ZN15OrangutanAnalog7setModeEh>
     e98:	86 e0       	ldi	r24, 0x06	; 6
     e9a:	6a e0       	ldi	r22, 0x0A	; 10
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     ea2:	ec 01       	movw	r28, r24
     ea4:	81 2f       	mov	r24, r17
     ea6:	0e 94 73 06 	call	0xce6	; 0xce6 <_ZN15OrangutanAnalog7setModeEh>
     eaa:	9e 01       	movw	r18, r28
     eac:	22 0f       	add	r18, r18
     eae:	33 1f       	adc	r19, r19
     eb0:	2c 0f       	add	r18, r28
     eb2:	3d 1f       	adc	r19, r29
     eb4:	2f 5f       	subi	r18, 0xFF	; 255
     eb6:	3f 4f       	sbci	r19, 0xFF	; 255
     eb8:	36 95       	lsr	r19
     eba:	27 95       	ror	r18
     ebc:	c9 01       	movw	r24, r18
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	08 95       	ret

00000ec6 <read_battery_millivolts_3pi>:
     ec6:	0e 94 43 07 	call	0xe86	; 0xe86 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     eca:	08 95       	ret

00000ecc <_ZL16currentCharacterv>:
     ecc:	90 91 4f 01 	lds	r25, 0x014F
     ed0:	e0 91 4b 01 	lds	r30, 0x014B
     ed4:	f0 91 4c 01 	lds	r31, 0x014C
     ed8:	99 23       	and	r25, r25
     eda:	11 f0       	breq	.+4      	; 0xee0 <_ZL16currentCharacterv+0x14>
     edc:	84 91       	lpm	r24, Z
     ede:	01 c0       	rjmp	.+2      	; 0xee2 <_ZL16currentCharacterv+0x16>
     ee0:	80 81       	ld	r24, Z
     ee2:	28 2f       	mov	r18, r24
     ee4:	21 54       	subi	r18, 0x41	; 65
     ee6:	2a 31       	cpi	r18, 0x1A	; 26
     ee8:	10 f4       	brcc	.+4      	; 0xeee <_ZL16currentCharacterv+0x22>
     eea:	80 5e       	subi	r24, 0xE0	; 224
     eec:	08 95       	ret
     eee:	80 32       	cpi	r24, 0x20	; 32
     ef0:	71 f4       	brne	.+28     	; 0xf0e <_ZL16currentCharacterv+0x42>
     ef2:	20 91 4b 01 	lds	r18, 0x014B
     ef6:	30 91 4c 01 	lds	r19, 0x014C
     efa:	a9 01       	movw	r20, r18
     efc:	4f 5f       	subi	r20, 0xFF	; 255
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	50 93 4c 01 	sts	0x014C, r21
     f04:	40 93 4b 01 	sts	0x014B, r20
     f08:	21 15       	cp	r18, r1
     f0a:	31 05       	cpc	r19, r1
     f0c:	09 f7       	brne	.-62     	; 0xed0 <_ZL16currentCharacterv+0x4>
     f0e:	08 95       	ret

00000f10 <_ZL9getNumberv>:
     f10:	ef 92       	push	r14
     f12:	ff 92       	push	r15
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	0e 94 66 07 	call	0xecc	; 0xecc <_ZL16currentCharacterv>
     f1c:	c0 e0       	ldi	r28, 0x00	; 0
     f1e:	d0 e0       	ldi	r29, 0x00	; 0
     f20:	1b c0       	rjmp	.+54     	; 0xf58 <_ZL9getNumberv+0x48>
     f22:	9e 01       	movw	r18, r28
     f24:	22 0f       	add	r18, r18
     f26:	33 1f       	adc	r19, r19
     f28:	93 e0       	ldi	r25, 0x03	; 3
     f2a:	cc 0f       	add	r28, r28
     f2c:	dd 1f       	adc	r29, r29
     f2e:	9a 95       	dec	r25
     f30:	e1 f7       	brne	.-8      	; 0xf2a <_ZL9getNumberv+0x1a>
     f32:	c2 0f       	add	r28, r18
     f34:	d3 1f       	adc	r29, r19
     f36:	99 27       	eor	r25, r25
     f38:	87 fd       	sbrc	r24, 7
     f3a:	90 95       	com	r25
     f3c:	c8 0f       	add	r28, r24
     f3e:	d9 1f       	adc	r29, r25
     f40:	e0 97       	sbiw	r28, 0x30	; 48
     f42:	80 91 4b 01 	lds	r24, 0x014B
     f46:	90 91 4c 01 	lds	r25, 0x014C
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	90 93 4c 01 	sts	0x014C, r25
     f50:	80 93 4b 01 	sts	0x014B, r24
     f54:	0e 94 66 07 	call	0xecc	; 0xecc <_ZL16currentCharacterv>
     f58:	98 2f       	mov	r25, r24
     f5a:	90 53       	subi	r25, 0x30	; 48
     f5c:	9a 30       	cpi	r25, 0x0A	; 10
     f5e:	08 f3       	brcs	.-62     	; 0xf22 <_ZL9getNumberv+0x12>
     f60:	ce 01       	movw	r24, r28
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	08 95       	ret

00000f6c <_ZN15OrangutanBuzzer5init2Ev>:
     f6c:	10 92 6f 00 	sts	0x006F, r1
     f70:	83 e2       	ldi	r24, 0x23	; 35
     f72:	80 93 80 00 	sts	0x0080, r24
     f76:	81 e1       	ldi	r24, 0x11	; 17
     f78:	80 93 81 00 	sts	0x0081, r24
     f7c:	10 92 82 00 	sts	0x0082, r1
     f80:	80 e1       	ldi	r24, 0x10	; 16
     f82:	97 e2       	ldi	r25, 0x27	; 39
     f84:	90 93 89 00 	sts	0x0089, r25
     f88:	80 93 88 00 	sts	0x0088, r24
     f8c:	10 92 8b 00 	sts	0x008B, r1
     f90:	10 92 8a 00 	sts	0x008A, r1
     f94:	22 9a       	sbi	0x04, 2	; 4
     f96:	78 94       	sei
     f98:	08 95       	ret

00000f9a <_ZN15OrangutanBuzzer4initEv>:
     f9a:	80 91 4a 01 	lds	r24, 0x014A
     f9e:	88 23       	and	r24, r24
     fa0:	29 f4       	brne	.+10     	; 0xfac <_ZN15OrangutanBuzzer4initEv+0x12>
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	80 93 4a 01 	sts	0x014A, r24
     fa8:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN15OrangutanBuzzer5init2Ev>
     fac:	08 95       	ret

00000fae <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	ed ed       	ldi	r30, 0xDD	; 221
     fb4:	f7 e0       	ldi	r31, 0x07	; 7
     fb6:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__prologue_saves__+0xc>
     fba:	8c 01       	movw	r16, r24
     fbc:	5b 01       	movw	r10, r22
     fbe:	e4 2e       	mov	r14, r20
     fc0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN15OrangutanBuzzer4initEv>
     fc4:	10 92 02 01 	sts	0x0102, r1
     fc8:	17 ff       	sbrs	r17, 7
     fca:	04 c0       	rjmp	.+8      	; 0xfd4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x26>
     fcc:	1f 77       	andi	r17, 0x7F	; 127
     fce:	aa e0       	ldi	r26, 0x0A	; 10
     fd0:	fa 2e       	mov	r15, r26
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
     fd4:	ff 24       	eor	r15, r15
     fd6:	f3 94       	inc	r15
     fd8:	c0 90 81 00 	lds	r12, 0x0081
     fdc:	dd 24       	eor	r13, r13
     fde:	28 ef       	ldi	r18, 0xF8	; 248
     fe0:	c2 22       	and	r12, r18
     fe2:	dd 24       	eor	r13, r13
     fe4:	88 ec       	ldi	r24, 0xC8	; 200
     fe6:	3f 2d       	mov	r19, r15
     fe8:	38 9f       	mul	r19, r24
     fea:	c0 01       	movw	r24, r0
     fec:	11 24       	eor	r1, r1
     fee:	80 17       	cp	r24, r16
     ff0:	91 07       	cpc	r25, r17
     ff2:	d8 f4       	brcc	.+54     	; 0x102a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x7c>
     ff4:	e8 01       	movw	r28, r16
     ff6:	67 e2       	ldi	r22, 0x27	; 39
     ff8:	01 31       	cpi	r16, 0x11	; 17
     ffa:	16 07       	cpc	r17, r22
     ffc:	10 f0       	brcs	.+4      	; 0x1002 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x54>
     ffe:	c0 e1       	ldi	r28, 0x10	; 16
    1000:	d7 e2       	ldi	r29, 0x27	; 39
    1002:	be 01       	movw	r22, r28
    1004:	76 95       	lsr	r23
    1006:	67 95       	ror	r22
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	60 58       	subi	r22, 0x80	; 128
    100e:	79 46       	sbci	r23, 0x69	; 105
    1010:	87 46       	sbci	r24, 0x67	; 103
    1012:	9f 4f       	sbci	r25, 0xFF	; 255
    1014:	9e 01       	movw	r18, r28
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	0e 94 22 14 	call	0x2844	; 0x2844 <__udivmodsi4>
    101e:	89 01       	movw	r16, r18
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	c8 2a       	or	r12, r24
    1026:	d9 2a       	or	r13, r25
    1028:	2c c0       	rjmp	.+88     	; 0x1082 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd4>
    102a:	98 e2       	ldi	r25, 0x28	; 40
    102c:	f9 9e       	mul	r15, r25
    102e:	90 2d       	mov	r25, r0
    1030:	11 24       	eor	r1, r1
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	89 2e       	mov	r8, r25
    1036:	e4 01       	movw	r28, r8
    1038:	4e 01       	movw	r8, r28
    103a:	98 2e       	mov	r9, r24
    103c:	e4 01       	movw	r28, r8
    103e:	80 16       	cp	r8, r16
    1040:	91 06       	cpc	r9, r17
    1042:	08 f4       	brcc	.+2      	; 0x1046 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x98>
    1044:	e8 01       	movw	r28, r16
    1046:	be 01       	movw	r22, r28
    1048:	76 95       	lsr	r23
    104a:	67 95       	ror	r22
    104c:	9e 01       	movw	r18, r28
    104e:	40 e0       	ldi	r20, 0x00	; 0
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	8f 2d       	mov	r24, r15
    1054:	8a 30       	cpi	r24, 0x0A	; 10
    1056:	39 f4       	brne	.+14     	; 0x1066 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb8>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	60 5e       	subi	r22, 0xE0	; 224
    105e:	73 44       	sbci	r23, 0x43	; 67
    1060:	81 44       	sbci	r24, 0x41	; 65
    1062:	9f 4f       	sbci	r25, 0xFF	; 255
    1064:	06 c0       	rjmp	.+12     	; 0x1072 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc4>
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	60 53       	subi	r22, 0x30	; 48
    106c:	7d 4e       	sbci	r23, 0xED	; 237
    106e:	8c 4e       	sbci	r24, 0xEC	; 236
    1070:	9f 4f       	sbci	r25, 0xFF	; 255
    1072:	0e 94 22 14 	call	0x2844	; 0x2844 <__udivmodsi4>
    1076:	89 01       	movw	r16, r18
    1078:	52 e0       	ldi	r21, 0x02	; 2
    107a:	85 2e       	mov	r8, r21
    107c:	91 2c       	mov	r9, r1
    107e:	c8 28       	or	r12, r8
    1080:	d9 28       	or	r13, r9
    1082:	2f 2d       	mov	r18, r15
    1084:	2a 30       	cpi	r18, 0x0A	; 10
    1086:	39 f4       	brne	.+14     	; 0x1096 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe8>
    1088:	ce 01       	movw	r24, r28
    108a:	05 96       	adiw	r24, 0x05	; 5
    108c:	6a e0       	ldi	r22, 0x0A	; 10
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__udivmodhi4>
    1094:	eb 01       	movw	r28, r22
    1096:	33 e0       	ldi	r19, 0x03	; 3
    1098:	c8 3e       	cpi	r28, 0xE8	; 232
    109a:	d3 07       	cpc	r29, r19
    109c:	79 f0       	breq	.+30     	; 0x10bc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x10e>
    109e:	be 01       	movw	r22, r28
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	95 01       	movw	r18, r10
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 de 13 	call	0x27bc	; 0x27bc <__mulsi3>
    10ae:	28 ee       	ldi	r18, 0xE8	; 232
    10b0:	33 e0       	ldi	r19, 0x03	; 3
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	0e 94 44 14 	call	0x2888	; 0x2888 <__divmodsi4>
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    10bc:	95 01       	movw	r18, r10
    10be:	10 92 6f 00 	sts	0x006F, r1
    10c2:	c0 92 81 00 	sts	0x0081, r12
    10c6:	10 93 89 00 	sts	0x0089, r17
    10ca:	00 93 88 00 	sts	0x0088, r16
    10ce:	40 91 88 00 	lds	r20, 0x0088
    10d2:	50 91 89 00 	lds	r21, 0x0089
    10d6:	6e 2d       	mov	r22, r14
    10d8:	60 31       	cpi	r22, 0x10	; 16
    10da:	08 f0       	brcs	.+2      	; 0x10de <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    10dc:	6f e0       	ldi	r22, 0x0F	; 15
    10de:	80 e1       	ldi	r24, 0x10	; 16
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	86 1b       	sub	r24, r22
    10e4:	91 09       	sbc	r25, r1
    10e6:	ba 01       	movw	r22, r20
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    10ea:	76 95       	lsr	r23
    10ec:	67 95       	ror	r22
    10ee:	8a 95       	dec	r24
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    10f2:	70 93 8b 00 	sts	0x008B, r23
    10f6:	60 93 8a 00 	sts	0x008A, r22
    10fa:	30 93 52 01 	sts	0x0152, r19
    10fe:	20 93 51 01 	sts	0x0151, r18
    1102:	86 b3       	in	r24, 0x16	; 22
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	86 bb       	out	0x16, r24	; 22
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	80 93 6f 00 	sts	0x006F, r24
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	ec e0       	ldi	r30, 0x0C	; 12
    1114:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__epilogue_restores__+0xc>

00001118 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1118:	9b 01       	movw	r18, r22
    111a:	8f 3f       	cpi	r24, 0xFF	; 255
    111c:	11 f0       	breq	.+4      	; 0x1122 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa>
    111e:	44 23       	and	r20, r20
    1120:	29 f4       	brne	.+10     	; 0x112c <_ZN15OrangutanBuzzer8playNoteEhjh+0x14>
    1122:	88 ee       	ldi	r24, 0xE8	; 232
    1124:	93 e0       	ldi	r25, 0x03	; 3
    1126:	b9 01       	movw	r22, r18
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	49 c0       	rjmp	.+146    	; 0x11be <_ZN15OrangutanBuzzer8playNoteEhjh+0xa6>
    112c:	81 31       	cpi	r24, 0x11	; 17
    112e:	30 f0       	brcs	.+12     	; 0x113c <_ZN15OrangutanBuzzer8playNoteEhjh+0x24>
    1130:	58 2f       	mov	r21, r24
    1132:	50 51       	subi	r21, 0x10	; 16
    1134:	50 36       	cpi	r21, 0x60	; 96
    1136:	18 f0       	brcs	.+6      	; 0x113e <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    1138:	5f e5       	ldi	r21, 0x5F	; 95
    113a:	01 c0       	rjmp	.+2      	; 0x113e <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	85 2f       	mov	r24, r21
    1140:	6c e0       	ldi	r22, 0x0C	; 12
    1142:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__udivmodqi4>
    1146:	a8 2f       	mov	r26, r24
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e4 ef       	ldi	r30, 0xF4	; 244
    114c:	ff ef       	ldi	r31, 0xFF	; 255
    114e:	ae 9f       	mul	r26, r30
    1150:	b0 01       	movw	r22, r0
    1152:	af 9f       	mul	r26, r31
    1154:	70 0d       	add	r23, r0
    1156:	be 9f       	mul	r27, r30
    1158:	70 0d       	add	r23, r0
    115a:	11 24       	eor	r1, r1
    115c:	65 0f       	add	r22, r21
    115e:	71 1d       	adc	r23, r1
    1160:	6c 30       	cpi	r22, 0x0C	; 12
    1162:	71 05       	cpc	r23, r1
    1164:	40 f4       	brcc	.+16     	; 0x1176 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5e>
    1166:	fb 01       	movw	r30, r22
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	e4 5f       	subi	r30, 0xF4	; 244
    116e:	fe 4f       	sbci	r31, 0xFE	; 254
    1170:	60 81       	ld	r22, Z
    1172:	71 81       	ldd	r23, Z+1	; 0x01
    1174:	02 c0       	rjmp	.+4      	; 0x117a <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	87 30       	cpi	r24, 0x07	; 7
    117c:	81 f0       	breq	.+32     	; 0x119e <_ZN15OrangutanBuzzer8playNoteEhjh+0x86>
    117e:	08 2e       	mov	r0, r24
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6e>
    1182:	66 0f       	add	r22, r22
    1184:	77 1f       	adc	r23, r23
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6a>
    118a:	82 30       	cpi	r24, 0x02	; 2
    118c:	28 f0       	brcs	.+10     	; 0x1198 <_ZN15OrangutanBuzzer8playNoteEhjh+0x80>
    118e:	cb 01       	movw	r24, r22
    1190:	05 96       	adiw	r24, 0x05	; 5
    1192:	6a e0       	ldi	r22, 0x0A	; 10
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	0c c0       	rjmp	.+24     	; 0x11b0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x98>
    1198:	60 50       	subi	r22, 0x00	; 0
    119a:	70 48       	sbci	r23, 0x80	; 128
    119c:	0b c0       	rjmp	.+22     	; 0x11b4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    119e:	cb 01       	movw	r24, r22
    11a0:	b6 e0       	ldi	r27, 0x06	; 6
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	ba 95       	dec	r27
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x8a>
    11aa:	02 96       	adiw	r24, 0x02	; 2
    11ac:	65 e0       	ldi	r22, 0x05	; 5
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__udivmodhi4>
    11b4:	40 31       	cpi	r20, 0x10	; 16
    11b6:	08 f0       	brcs	.+2      	; 0x11ba <_ZN15OrangutanBuzzer8playNoteEhjh+0xa2>
    11b8:	4f e0       	ldi	r20, 0x0F	; 15
    11ba:	cb 01       	movw	r24, r22
    11bc:	b9 01       	movw	r22, r18
    11be:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    11c2:	08 95       	ret

000011c4 <_ZL8nextNotev>:
    11c4:	a0 e0       	ldi	r26, 0x00	; 0
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e8 ee       	ldi	r30, 0xE8	; 232
    11ca:	f8 e0       	ldi	r31, 0x08	; 8
    11cc:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__prologue_saves__+0xa>
    11d0:	b0 90 03 01 	lds	r11, 0x0103
    11d4:	80 91 4d 01 	lds	r24, 0x014D
    11d8:	88 23       	and	r24, r24
    11da:	61 f0       	breq	.+24     	; 0x11f4 <_ZL8nextNotev+0x30>
    11dc:	60 91 4e 01 	lds	r22, 0x014E
    11e0:	66 23       	and	r22, r22
    11e2:	41 f0       	breq	.+16     	; 0x11f4 <_ZL8nextNotev+0x30>
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN15OrangutanBuzzer8playNoteEhjh>
    11ee:	10 92 4e 01 	sts	0x014E, r1
    11f2:	34 c1       	rjmp	.+616    	; 0x145c <_ZL8nextNotev+0x298>
    11f4:	c0 ec       	ldi	r28, 0xC0	; 192
    11f6:	dd e5       	ldi	r29, 0x5D	; 93
    11f8:	aa 24       	eor	r10, r10
    11fa:	a3 94       	inc	r10
    11fc:	14 e0       	ldi	r17, 0x04	; 4
    11fe:	71 2e       	mov	r7, r17
    1200:	00 ed       	ldi	r16, 0xD0	; 208
    1202:	17 e0       	ldi	r17, 0x07	; 7
    1204:	b4 e0       	ldi	r27, 0x04	; 4
    1206:	eb 2e       	mov	r14, r27
    1208:	f1 2c       	mov	r15, r1
    120a:	a4 ef       	ldi	r26, 0xF4	; 244
    120c:	ca 2e       	mov	r12, r26
    120e:	a1 e0       	ldi	r26, 0x01	; 1
    1210:	da 2e       	mov	r13, r26
    1212:	ff e0       	ldi	r31, 0x0F	; 15
    1214:	8f 2e       	mov	r8, r31
    1216:	91 2c       	mov	r9, r1
    1218:	0e 94 66 07 	call	0xecc	; 0xecc <_ZL16currentCharacterv>
    121c:	20 91 4b 01 	lds	r18, 0x014B
    1220:	30 91 4c 01 	lds	r19, 0x014C
    1224:	2f 5f       	subi	r18, 0xFF	; 255
    1226:	3f 4f       	sbci	r19, 0xFF	; 255
    1228:	30 93 4c 01 	sts	0x014C, r19
    122c:	20 93 4b 01 	sts	0x014B, r18
    1230:	86 36       	cpi	r24, 0x66	; 102
    1232:	f1 f1       	breq	.+124    	; 0x12b0 <_ZL8nextNotev+0xec>
    1234:	87 36       	cpi	r24, 0x67	; 103
    1236:	cc f4       	brge	.+50     	; 0x126a <_ZL8nextNotev+0xa6>
    1238:	82 36       	cpi	r24, 0x62	; 98
    123a:	09 f4       	brne	.+2      	; 0x123e <_ZL8nextNotev+0x7a>
    123c:	af c0       	rjmp	.+350    	; 0x139c <_ZL8nextNotev+0x1d8>
    123e:	83 36       	cpi	r24, 0x63	; 99
    1240:	7c f4       	brge	.+30     	; 0x1260 <_ZL8nextNotev+0x9c>
    1242:	8e 33       	cpi	r24, 0x3E	; 62
    1244:	49 f1       	breq	.+82     	; 0x1298 <_ZL8nextNotev+0xd4>
    1246:	8f 33       	cpi	r24, 0x3F	; 63
    1248:	3c f4       	brge	.+14     	; 0x1258 <_ZL8nextNotev+0x94>
    124a:	81 32       	cpi	r24, 0x21	; 33
    124c:	09 f4       	brne	.+2      	; 0x1250 <_ZL8nextNotev+0x8c>
    124e:	87 c0       	rjmp	.+270    	; 0x135e <_ZL8nextNotev+0x19a>
    1250:	8c 33       	cpi	r24, 0x3C	; 60
    1252:	09 f0       	breq	.+2      	; 0x1256 <_ZL8nextNotev+0x92>
    1254:	9b c0       	rjmp	.+310    	; 0x138c <_ZL8nextNotev+0x1c8>
    1256:	22 c0       	rjmp	.+68     	; 0x129c <_ZL8nextNotev+0xd8>
    1258:	81 36       	cpi	r24, 0x61	; 97
    125a:	09 f0       	breq	.+2      	; 0x125e <_ZL8nextNotev+0x9a>
    125c:	97 c0       	rjmp	.+302    	; 0x138c <_ZL8nextNotev+0x1c8>
    125e:	9b c0       	rjmp	.+310    	; 0x1396 <_ZL8nextNotev+0x1d2>
    1260:	84 36       	cpi	r24, 0x64	; 100
    1262:	01 f1       	breq	.+64     	; 0x12a4 <_ZL8nextNotev+0xe0>
    1264:	85 36       	cpi	r24, 0x65	; 101
    1266:	0c f5       	brge	.+66     	; 0x12aa <_ZL8nextNotev+0xe6>
    1268:	1b c0       	rjmp	.+54     	; 0x12a0 <_ZL8nextNotev+0xdc>
    126a:	8f 36       	cpi	r24, 0x6F	; 111
    126c:	09 f4       	brne	.+2      	; 0x1270 <_ZL8nextNotev+0xac>
    126e:	47 c0       	rjmp	.+142    	; 0x12fe <_ZL8nextNotev+0x13a>
    1270:	80 37       	cpi	r24, 0x70	; 112
    1272:	44 f4       	brge	.+16     	; 0x1284 <_ZL8nextNotev+0xc0>
    1274:	8c 36       	cpi	r24, 0x6C	; 108
    1276:	11 f1       	breq	.+68     	; 0x12bc <_ZL8nextNotev+0xf8>
    1278:	8d 36       	cpi	r24, 0x6D	; 109
    127a:	61 f1       	breq	.+88     	; 0x12d4 <_ZL8nextNotev+0x110>
    127c:	87 36       	cpi	r24, 0x67	; 103
    127e:	09 f0       	breq	.+2      	; 0x1282 <_ZL8nextNotev+0xbe>
    1280:	85 c0       	rjmp	.+266    	; 0x138c <_ZL8nextNotev+0x1c8>
    1282:	19 c0       	rjmp	.+50     	; 0x12b6 <_ZL8nextNotev+0xf2>
    1284:	84 37       	cpi	r24, 0x74	; 116
    1286:	09 f4       	brne	.+2      	; 0x128a <_ZL8nextNotev+0xc6>
    1288:	44 c0       	rjmp	.+136    	; 0x1312 <_ZL8nextNotev+0x14e>
    128a:	86 37       	cpi	r24, 0x76	; 118
    128c:	09 f4       	brne	.+2      	; 0x1290 <_ZL8nextNotev+0xcc>
    128e:	60 c0       	rjmp	.+192    	; 0x1350 <_ZL8nextNotev+0x18c>
    1290:	82 37       	cpi	r24, 0x72	; 114
    1292:	09 f0       	breq	.+2      	; 0x1296 <_ZL8nextNotev+0xd2>
    1294:	7b c0       	rjmp	.+246    	; 0x138c <_ZL8nextNotev+0x1c8>
    1296:	39 c0       	rjmp	.+114    	; 0x130a <_ZL8nextNotev+0x146>
    1298:	b3 94       	inc	r11
    129a:	be cf       	rjmp	.-132    	; 0x1218 <_ZL8nextNotev+0x54>
    129c:	ba 94       	dec	r11
    129e:	bc cf       	rjmp	.-136    	; 0x1218 <_ZL8nextNotev+0x54>
    12a0:	ee 24       	eor	r14, r14
    12a2:	35 c0       	rjmp	.+106    	; 0x130e <_ZL8nextNotev+0x14a>
    12a4:	ee 24       	eor	r14, r14
    12a6:	82 e0       	ldi	r24, 0x02	; 2
    12a8:	7b c0       	rjmp	.+246    	; 0x13a0 <_ZL8nextNotev+0x1dc>
    12aa:	ee 24       	eor	r14, r14
    12ac:	84 e0       	ldi	r24, 0x04	; 4
    12ae:	78 c0       	rjmp	.+240    	; 0x13a0 <_ZL8nextNotev+0x1dc>
    12b0:	ee 24       	eor	r14, r14
    12b2:	85 e0       	ldi	r24, 0x05	; 5
    12b4:	75 c0       	rjmp	.+234    	; 0x13a0 <_ZL8nextNotev+0x1dc>
    12b6:	ee 24       	eor	r14, r14
    12b8:	87 e0       	ldi	r24, 0x07	; 7
    12ba:	72 c0       	rjmp	.+228    	; 0x13a0 <_ZL8nextNotev+0x1dc>
    12bc:	0e 94 88 07 	call	0xf10	; 0xf10 <_ZL9getNumberv>
    12c0:	bc 01       	movw	r22, r24
    12c2:	90 93 05 01 	sts	0x0105, r25
    12c6:	80 93 04 01 	sts	0x0104, r24
    12ca:	80 91 06 01 	lds	r24, 0x0106
    12ce:	90 91 07 01 	lds	r25, 0x0107
    12d2:	37 c0       	rjmp	.+110    	; 0x1342 <_ZL8nextNotev+0x17e>
    12d4:	0e 94 66 07 	call	0xecc	; 0xecc <_ZL16currentCharacterv>
    12d8:	8c 36       	cpi	r24, 0x6C	; 108
    12da:	19 f4       	brne	.+6      	; 0x12e2 <_ZL8nextNotev+0x11e>
    12dc:	10 92 4d 01 	sts	0x014D, r1
    12e0:	04 c0       	rjmp	.+8      	; 0x12ea <_ZL8nextNotev+0x126>
    12e2:	a0 92 4d 01 	sts	0x014D, r10
    12e6:	10 92 4e 01 	sts	0x014E, r1
    12ea:	80 91 4b 01 	lds	r24, 0x014B
    12ee:	90 91 4c 01 	lds	r25, 0x014C
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	90 93 4c 01 	sts	0x014C, r25
    12f8:	80 93 4b 01 	sts	0x014B, r24
    12fc:	8d cf       	rjmp	.-230    	; 0x1218 <_ZL8nextNotev+0x54>
    12fe:	0e 94 88 07 	call	0xf10	; 0xf10 <_ZL9getNumberv>
    1302:	b8 2e       	mov	r11, r24
    1304:	80 93 03 01 	sts	0x0103, r24
    1308:	87 cf       	rjmp	.-242    	; 0x1218 <_ZL8nextNotev+0x54>
    130a:	ee 24       	eor	r14, r14
    130c:	e3 94       	inc	r14
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	47 c0       	rjmp	.+142    	; 0x13a0 <_ZL8nextNotev+0x1dc>
    1312:	0e 94 88 07 	call	0xf10	; 0xf10 <_ZL9getNumberv>
    1316:	bc 01       	movw	r22, r24
    1318:	ce 01       	movw	r24, r28
    131a:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__udivmodhi4>
    131e:	cb 01       	movw	r24, r22
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	53 e0       	ldi	r21, 0x03	; 3
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	5a 95       	dec	r21
    132c:	e1 f7       	brne	.-8      	; 0x1326 <_ZL8nextNotev+0x162>
    132e:	86 0f       	add	r24, r22
    1330:	97 1f       	adc	r25, r23
    1332:	90 93 07 01 	sts	0x0107, r25
    1336:	80 93 06 01 	sts	0x0106, r24
    133a:	60 91 04 01 	lds	r22, 0x0104
    133e:	70 91 05 01 	lds	r23, 0x0105
    1342:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__udivmodhi4>
    1346:	70 93 09 01 	sts	0x0109, r23
    134a:	60 93 08 01 	sts	0x0108, r22
    134e:	64 cf       	rjmp	.-312    	; 0x1218 <_ZL8nextNotev+0x54>
    1350:	0e 94 88 07 	call	0xf10	; 0xf10 <_ZL9getNumberv>
    1354:	90 93 0b 01 	sts	0x010B, r25
    1358:	80 93 0a 01 	sts	0x010A, r24
    135c:	5d cf       	rjmp	.-326    	; 0x1218 <_ZL8nextNotev+0x54>
    135e:	70 92 03 01 	sts	0x0103, r7
    1362:	10 93 07 01 	sts	0x0107, r17
    1366:	00 93 06 01 	sts	0x0106, r16
    136a:	f0 92 05 01 	sts	0x0105, r15
    136e:	e0 92 04 01 	sts	0x0104, r14
    1372:	d0 92 09 01 	sts	0x0109, r13
    1376:	c0 92 08 01 	sts	0x0108, r12
    137a:	90 92 0b 01 	sts	0x010B, r9
    137e:	80 92 0a 01 	sts	0x010A, r8
    1382:	10 92 4d 01 	sts	0x014D, r1
    1386:	44 e0       	ldi	r20, 0x04	; 4
    1388:	b4 2e       	mov	r11, r20
    138a:	46 cf       	rjmp	.-372    	; 0x1218 <_ZL8nextNotev+0x54>
    138c:	10 92 4c 01 	sts	0x014C, r1
    1390:	10 92 4b 01 	sts	0x014B, r1
    1394:	63 c0       	rjmp	.+198    	; 0x145c <_ZL8nextNotev+0x298>
    1396:	ee 24       	eor	r14, r14
    1398:	89 e0       	ldi	r24, 0x09	; 9
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <_ZL8nextNotev+0x1dc>
    139c:	ee 24       	eor	r14, r14
    139e:	8b e0       	ldi	r24, 0x0B	; 11
    13a0:	9c e0       	ldi	r25, 0x0C	; 12
    13a2:	b9 9e       	mul	r11, r25
    13a4:	b0 2c       	mov	r11, r0
    13a6:	11 24       	eor	r1, r1
    13a8:	b8 0e       	add	r11, r24
    13aa:	0e 94 66 07 	call	0xecc	; 0xecc <_ZL16currentCharacterv>
    13ae:	8b 32       	cpi	r24, 0x2B	; 43
    13b0:	11 f0       	breq	.+4      	; 0x13b6 <_ZL8nextNotev+0x1f2>
    13b2:	83 32       	cpi	r24, 0x23	; 35
    13b4:	b9 f4       	brne	.+46     	; 0x13e4 <_ZL8nextNotev+0x220>
    13b6:	80 91 4b 01 	lds	r24, 0x014B
    13ba:	90 91 4c 01 	lds	r25, 0x014C
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	90 93 4c 01 	sts	0x014C, r25
    13c4:	80 93 4b 01 	sts	0x014B, r24
    13c8:	b3 94       	inc	r11
    13ca:	ef cf       	rjmp	.-34     	; 0x13aa <_ZL8nextNotev+0x1e6>
    13cc:	80 91 4b 01 	lds	r24, 0x014B
    13d0:	90 91 4c 01 	lds	r25, 0x014C
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	90 93 4c 01 	sts	0x014C, r25
    13da:	80 93 4b 01 	sts	0x014B, r24
    13de:	ba 94       	dec	r11
    13e0:	0e 94 66 07 	call	0xecc	; 0xecc <_ZL16currentCharacterv>
    13e4:	8d 32       	cpi	r24, 0x2D	; 45
    13e6:	91 f3       	breq	.-28     	; 0x13cc <_ZL8nextNotev+0x208>
    13e8:	c0 91 08 01 	lds	r28, 0x0108
    13ec:	d0 91 09 01 	lds	r29, 0x0109
    13f0:	81 53       	subi	r24, 0x31	; 49
    13f2:	88 30       	cpi	r24, 0x08	; 8
    13f4:	58 f4       	brcc	.+22     	; 0x140c <_ZL8nextNotev+0x248>
    13f6:	c0 91 06 01 	lds	r28, 0x0106
    13fa:	d0 91 07 01 	lds	r29, 0x0107
    13fe:	0e 94 88 07 	call	0xf10	; 0xf10 <_ZL9getNumberv>
    1402:	bc 01       	movw	r22, r24
    1404:	ce 01       	movw	r24, r28
    1406:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__udivmodhi4>
    140a:	eb 01       	movw	r28, r22
    140c:	8e 01       	movw	r16, r28
    140e:	0b c0       	rjmp	.+22     	; 0x1426 <_ZL8nextNotev+0x262>
    1410:	80 91 4b 01 	lds	r24, 0x014B
    1414:	90 91 4c 01 	lds	r25, 0x014C
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	90 93 4c 01 	sts	0x014C, r25
    141e:	80 93 4b 01 	sts	0x014B, r24
    1422:	c0 0f       	add	r28, r16
    1424:	d1 1f       	adc	r29, r17
    1426:	16 95       	lsr	r17
    1428:	07 95       	ror	r16
    142a:	0e 94 66 07 	call	0xecc	; 0xecc <_ZL16currentCharacterv>
    142e:	8e 32       	cpi	r24, 0x2E	; 46
    1430:	79 f3       	breq	.-34     	; 0x1410 <_ZL8nextNotev+0x24c>
    1432:	80 91 4d 01 	lds	r24, 0x014D
    1436:	88 23       	and	r24, r24
    1438:	39 f0       	breq	.+14     	; 0x1448 <_ZL8nextNotev+0x284>
    143a:	ce 01       	movw	r24, r28
    143c:	96 95       	lsr	r25
    143e:	87 95       	ror	r24
    1440:	80 93 4e 01 	sts	0x014E, r24
    1444:	c8 1b       	sub	r28, r24
    1446:	d1 09       	sbc	r29, r1
    1448:	ee 20       	and	r14, r14
    144a:	11 f0       	breq	.+4      	; 0x1450 <_ZL8nextNotev+0x28c>
    144c:	bb 24       	eor	r11, r11
    144e:	ba 94       	dec	r11
    1450:	8b 2d       	mov	r24, r11
    1452:	be 01       	movw	r22, r28
    1454:	40 91 0a 01 	lds	r20, 0x010A
    1458:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN15OrangutanBuzzer8playNoteEhjh>
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	ed e0       	ldi	r30, 0x0D	; 13
    1462:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__epilogue_restores__+0xa>

00001466 <__vector_13>:
    1466:	1f 92       	push	r1
    1468:	0f 92       	push	r0
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	0f 92       	push	r0
    146e:	11 24       	eor	r1, r1
    1470:	2f 93       	push	r18
    1472:	3f 93       	push	r19
    1474:	4f 93       	push	r20
    1476:	5f 93       	push	r21
    1478:	6f 93       	push	r22
    147a:	7f 93       	push	r23
    147c:	8f 93       	push	r24
    147e:	9f 93       	push	r25
    1480:	af 93       	push	r26
    1482:	bf 93       	push	r27
    1484:	ef 93       	push	r30
    1486:	ff 93       	push	r31
    1488:	80 91 51 01 	lds	r24, 0x0151
    148c:	90 91 52 01 	lds	r25, 0x0152
    1490:	9c 01       	movw	r18, r24
    1492:	21 50       	subi	r18, 0x01	; 1
    1494:	30 40       	sbci	r19, 0x00	; 0
    1496:	30 93 52 01 	sts	0x0152, r19
    149a:	20 93 51 01 	sts	0x0151, r18
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	11 f5       	brne	.+68     	; 0x14e6 <__vector_13+0x80>
    14a2:	10 92 6f 00 	sts	0x006F, r1
    14a6:	78 94       	sei
    14a8:	80 91 81 00 	lds	r24, 0x0081
    14ac:	88 7f       	andi	r24, 0xF8	; 248
    14ae:	81 60       	ori	r24, 0x01	; 1
    14b0:	80 93 81 00 	sts	0x0081, r24
    14b4:	80 e1       	ldi	r24, 0x10	; 16
    14b6:	97 e2       	ldi	r25, 0x27	; 39
    14b8:	90 93 89 00 	sts	0x0089, r25
    14bc:	80 93 88 00 	sts	0x0088, r24
    14c0:	10 92 8b 00 	sts	0x008B, r1
    14c4:	10 92 8a 00 	sts	0x008A, r1
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	80 93 02 01 	sts	0x0102, r24
    14ce:	80 91 4b 01 	lds	r24, 0x014B
    14d2:	90 91 4c 01 	lds	r25, 0x014C
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	31 f0       	breq	.+12     	; 0x14e6 <__vector_13+0x80>
    14da:	80 91 50 01 	lds	r24, 0x0150
    14de:	88 23       	and	r24, r24
    14e0:	11 f4       	brne	.+4      	; 0x14e6 <__vector_13+0x80>
    14e2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZL8nextNotev>
    14e6:	ff 91       	pop	r31
    14e8:	ef 91       	pop	r30
    14ea:	bf 91       	pop	r27
    14ec:	af 91       	pop	r26
    14ee:	9f 91       	pop	r25
    14f0:	8f 91       	pop	r24
    14f2:	7f 91       	pop	r23
    14f4:	6f 91       	pop	r22
    14f6:	5f 91       	pop	r21
    14f8:	4f 91       	pop	r20
    14fa:	3f 91       	pop	r19
    14fc:	2f 91       	pop	r18
    14fe:	0f 90       	pop	r0
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	0f 90       	pop	r0
    1504:	1f 90       	pop	r1
    1506:	18 95       	reti

00001508 <_ZN15OrangutanBuzzer9isPlayingEv>:
    1508:	80 91 02 01 	lds	r24, 0x0102
    150c:	88 23       	and	r24, r24
    150e:	51 f0       	breq	.+20     	; 0x1524 <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	20 91 4b 01 	lds	r18, 0x014B
    1516:	30 91 4c 01 	lds	r19, 0x014C
    151a:	21 15       	cp	r18, r1
    151c:	31 05       	cpc	r19, r1
    151e:	19 f4       	brne	.+6      	; 0x1526 <_ZN15OrangutanBuzzer9isPlayingEv+0x1e>
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	08 95       	ret
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	08 95       	ret

00001528 <is_playing>:
    1528:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN15OrangutanBuzzer9isPlayingEv>
    152c:	08 95       	ret

0000152e <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    152e:	10 92 6f 00 	sts	0x006F, r1
    1532:	90 93 4c 01 	sts	0x014C, r25
    1536:	80 93 4b 01 	sts	0x014B, r24
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	80 93 4f 01 	sts	0x014F, r24
    1540:	10 92 4e 01 	sts	0x014E, r1
    1544:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZL8nextNotev>
    1548:	08 95       	ret

0000154a <play_from_program_space>:
    154a:	0e 94 97 0a 	call	0x152e	; 0x152e <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    154e:	08 95       	ret

00001550 <delayMicroseconds.clone.0>:
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	6f 93       	push	r22
    1556:	64 e0       	ldi	r22, 0x04	; 4
    1558:	6a 95       	dec	r22
    155a:	f1 f7       	brne	.-4      	; 0x1558 <delayMicroseconds.clone.0+0x8>
    155c:	6f 91       	pop	r22
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	c9 f7       	brne	.-14     	; 0x1554 <delayMicroseconds.clone.0+0x4>
    1562:	08 95       	ret

00001564 <_ZN12OrangutanLCD8busyWaitEv>:
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	1a b1       	in	r17, 0x0a	; 10
    156e:	57 98       	cbi	0x0a, 7	; 10
    1570:	5a 98       	cbi	0x0b, 2	; 11
    1572:	28 9a       	sbi	0x05, 0	; 5
    1574:	c0 e0       	ldi	r28, 0x00	; 0
    1576:	d0 e0       	ldi	r29, 0x00	; 0
    1578:	0e 94 a8 0a 	call	0x1550	; 0x1550 <delayMicroseconds.clone.0>
    157c:	5c 9a       	sbi	0x0b, 4	; 11
    157e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <delayMicroseconds.clone.0>
    1582:	09 b1       	in	r16, 0x09	; 9
    1584:	5c 98       	cbi	0x0b, 4	; 11
    1586:	0e 94 a8 0a 	call	0x1550	; 0x1550 <delayMicroseconds.clone.0>
    158a:	5c 9a       	sbi	0x0b, 4	; 11
    158c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <delayMicroseconds.clone.0>
    1590:	5c 98       	cbi	0x0b, 4	; 11
    1592:	07 ff       	sbrs	r16, 7
    1594:	11 c0       	rjmp	.+34     	; 0x15b8 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1596:	24 96       	adiw	r28, 0x04	; 4
    1598:	9e 01       	movw	r18, r28
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	80 91 57 01 	lds	r24, 0x0157
    15a2:	90 91 58 01 	lds	r25, 0x0158
    15a6:	a0 91 59 01 	lds	r26, 0x0159
    15aa:	b0 91 5a 01 	lds	r27, 0x015A
    15ae:	28 17       	cp	r18, r24
    15b0:	39 07       	cpc	r19, r25
    15b2:	4a 07       	cpc	r20, r26
    15b4:	5b 07       	cpc	r21, r27
    15b6:	00 f3       	brcs	.-64     	; 0x1578 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    15b8:	1a b9       	out	0x0a, r17	; 10
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	08 95       	ret

000015c4 <_ZN12OrangutanLCD8sendDataEh>:
    15c4:	65 b1       	in	r22, 0x05	; 5
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	ac 01       	movw	r20, r24
    15ca:	41 70       	andi	r20, 0x01	; 1
    15cc:	50 70       	andi	r21, 0x00	; 0
    15ce:	44 0f       	add	r20, r20
    15d0:	55 1f       	adc	r21, r21
    15d2:	9c 01       	movw	r18, r24
    15d4:	26 70       	andi	r18, 0x06	; 6
    15d6:	30 70       	andi	r19, 0x00	; 0
    15d8:	53 e0       	ldi	r21, 0x03	; 3
    15da:	22 0f       	add	r18, r18
    15dc:	33 1f       	adc	r19, r19
    15de:	5a 95       	dec	r21
    15e0:	e1 f7       	brne	.-8      	; 0x15da <_ZN12OrangutanLCD8sendDataEh+0x16>
    15e2:	24 2b       	or	r18, r20
    15e4:	6d 7c       	andi	r22, 0xCD	; 205
    15e6:	26 2b       	or	r18, r22
    15e8:	25 b9       	out	0x05, r18	; 5
    15ea:	2b b1       	in	r18, 0x0b	; 11
    15ec:	88 70       	andi	r24, 0x08	; 8
    15ee:	90 70       	andi	r25, 0x00	; 0
    15f0:	34 e0       	ldi	r19, 0x04	; 4
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	3a 95       	dec	r19
    15f8:	e1 f7       	brne	.-8      	; 0x15f2 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    15fa:	2f 77       	andi	r18, 0x7F	; 127
    15fc:	28 2b       	or	r18, r24
    15fe:	2b b9       	out	0x0b, r18	; 11
    1600:	5c 9a       	sbi	0x0b, 4	; 11
    1602:	0e 94 a8 0a 	call	0x1550	; 0x1550 <delayMicroseconds.clone.0>
    1606:	5c 98       	cbi	0x0b, 4	; 11
    1608:	0e 94 a8 0a 	call	0x1550	; 0x1550 <delayMicroseconds.clone.0>
    160c:	08 95       	ret

0000160e <_ZN12OrangutanLCD4sendEhhh>:
    160e:	a2 e0       	ldi	r26, 0x02	; 2
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ed e0       	ldi	r30, 0x0D	; 13
    1614:	fb e0       	ldi	r31, 0x0B	; 11
    1616:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__prologue_saves__+0x16>
    161a:	18 2f       	mov	r17, r24
    161c:	4a 83       	std	Y+2, r20	; 0x02
    161e:	69 83       	std	Y+1, r22	; 0x01
    1620:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN12OrangutanLCD4initEv>
    1624:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN12OrangutanLCD8busyWaitEv>
    1628:	f4 b0       	in	r15, 0x04	; 4
    162a:	05 b1       	in	r16, 0x05	; 5
    162c:	da b0       	in	r13, 0x0a	; 10
    162e:	eb b0       	in	r14, 0x0b	; 11
    1630:	28 98       	cbi	0x05, 0	; 5
    1632:	69 81       	ldd	r22, Y+1	; 0x01
    1634:	4a 81       	ldd	r20, Y+2	; 0x02
    1636:	66 23       	and	r22, r22
    1638:	11 f0       	breq	.+4      	; 0x163e <_ZN12OrangutanLCD4sendEhhh+0x30>
    163a:	5a 9a       	sbi	0x0b, 2	; 11
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <_ZN12OrangutanLCD4sendEhhh+0x32>
    163e:	5a 98       	cbi	0x0b, 2	; 11
    1640:	84 b1       	in	r24, 0x04	; 4
    1642:	82 63       	ori	r24, 0x32	; 50
    1644:	84 b9       	out	0x04, r24	; 4
    1646:	57 9a       	sbi	0x0a, 7	; 10
    1648:	41 30       	cpi	r20, 0x01	; 1
    164a:	29 f0       	breq	.+10     	; 0x1656 <_ZN12OrangutanLCD4sendEhhh+0x48>
    164c:	81 2f       	mov	r24, r17
    164e:	82 95       	swap	r24
    1650:	8f 70       	andi	r24, 0x0F	; 15
    1652:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN12OrangutanLCD8sendDataEh>
    1656:	81 2f       	mov	r24, r17
    1658:	8f 70       	andi	r24, 0x0F	; 15
    165a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN12OrangutanLCD8sendDataEh>
    165e:	da b8       	out	0x0a, r13	; 10
    1660:	eb b8       	out	0x0b, r14	; 11
    1662:	f4 b8       	out	0x04, r15	; 4
    1664:	05 b9       	out	0x05, r16	; 5
    1666:	22 96       	adiw	r28, 0x02	; 2
    1668:	e7 e0       	ldi	r30, 0x07	; 7
    166a:	0c 94 95 14 	jmp	0x292a	; 0x292a <__epilogue_restores__+0x16>

0000166e <_ZN12OrangutanLCD8send_cmdEh>:
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	42 e0       	ldi	r20, 0x02	; 2
    1672:	0e 94 07 0b 	call	0x160e	; 0x160e <_ZN12OrangutanLCD4sendEhhh>
    1676:	08 95       	ret

00001678 <_ZN12OrangutanLCD9send_dataEh>:
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	42 e0       	ldi	r20, 0x02	; 2
    167c:	0e 94 07 0b 	call	0x160e	; 0x160e <_ZN12OrangutanLCD4sendEhhh>
    1680:	08 95       	ret

00001682 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    1682:	ef 92       	push	r14
    1684:	ff 92       	push	r15
    1686:	1f 93       	push	r17
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	0f 92       	push	r0
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	66 0f       	add	r22, r22
    1694:	66 0f       	add	r22, r22
    1696:	66 0f       	add	r22, r22
    1698:	48 2f       	mov	r20, r24
    169a:	59 2f       	mov	r21, r25
    169c:	7a 01       	movw	r14, r20
    169e:	10 e0       	ldi	r17, 0x00	; 0
    16a0:	81 2f       	mov	r24, r17
    16a2:	86 0f       	add	r24, r22
    16a4:	80 64       	ori	r24, 0x40	; 64
    16a6:	69 83       	std	Y+1, r22	; 0x01
    16a8:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN12OrangutanLCD8send_cmdEh>
    16ac:	f7 01       	movw	r30, r14
    16ae:	84 91       	lpm	r24, Z
    16b0:	0e 94 3c 0b 	call	0x1678	; 0x1678 <_ZN12OrangutanLCD9send_dataEh>
    16b4:	1f 5f       	subi	r17, 0xFF	; 255
    16b6:	08 94       	sec
    16b8:	e1 1c       	adc	r14, r1
    16ba:	f1 1c       	adc	r15, r1
    16bc:	69 81       	ldd	r22, Y+1	; 0x01
    16be:	18 30       	cpi	r17, 0x08	; 8
    16c0:	79 f7       	brne	.-34     	; 0x16a0 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x1e>
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	1f 91       	pop	r17
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	08 95       	ret

000016d0 <lcd_load_custom_character>:
    16d0:	0e 94 41 0b 	call	0x1682	; 0x1682 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    16d4:	08 95       	ret

000016d6 <print_character>:
    16d6:	0e 94 3c 0b 	call	0x1678	; 0x1678 <_ZN12OrangutanLCD9send_dataEh>
    16da:	08 95       	ret

000016dc <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	41 e0       	ldi	r20, 0x01	; 1
    16e0:	0e 94 07 0b 	call	0x160e	; 0x160e <_ZN12OrangutanLCD4sendEhhh>
    16e4:	08 95       	ret

000016e6 <_ZN12OrangutanLCD5init2Ev>:
    16e6:	80 e1       	ldi	r24, 0x10	; 16
    16e8:	97 e2       	ldi	r25, 0x27	; 39
    16ea:	a0 e0       	ldi	r26, 0x00	; 0
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	80 93 57 01 	sts	0x0157, r24
    16f2:	90 93 58 01 	sts	0x0158, r25
    16f6:	a0 93 59 01 	sts	0x0159, r26
    16fa:	b0 93 5a 01 	sts	0x015A, r27
    16fe:	52 9a       	sbi	0x0a, 2	; 10
    1700:	20 9a       	sbi	0x04, 0	; 4
    1702:	54 9a       	sbi	0x0a, 4	; 10
    1704:	8e e1       	ldi	r24, 0x1E	; 30
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
    170c:	83 e0       	ldi	r24, 0x03	; 3
    170e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1712:	86 e0       	ldi	r24, 0x06	; 6
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
    171a:	83 e0       	ldi	r24, 0x03	; 3
    171c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1720:	82 e0       	ldi	r24, 0x02	; 2
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
    1728:	83 e0       	ldi	r24, 0x03	; 3
    172a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN12OrangutanLCD13send_4bit_cmdEh>
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN12OrangutanLCD13send_4bit_cmdEh>
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
    1744:	88 e2       	ldi	r24, 0x28	; 40
    1746:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN12OrangutanLCD8send_cmdEh>
    174a:	88 e0       	ldi	r24, 0x08	; 8
    174c:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN12OrangutanLCD8send_cmdEh>
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN12OrangutanLCD8send_cmdEh>
    1756:	86 e0       	ldi	r24, 0x06	; 6
    1758:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN12OrangutanLCD8send_cmdEh>
    175c:	8c e0       	ldi	r24, 0x0C	; 12
    175e:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN12OrangutanLCD8send_cmdEh>
    1762:	08 95       	ret

00001764 <_ZN12OrangutanLCD4initEv>:
    1764:	80 91 5b 01 	lds	r24, 0x015B
    1768:	88 23       	and	r24, r24
    176a:	29 f4       	brne	.+10     	; 0x1776 <_ZN12OrangutanLCD4initEv+0x12>
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	80 93 5b 01 	sts	0x015B, r24
    1772:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <_ZN12OrangutanLCD5init2Ev>
    1776:	08 95       	ret

00001778 <_ZN12OrangutanLCD5clearEv>:
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN12OrangutanLCD8send_cmdEh>
    177e:	80 91 53 01 	lds	r24, 0x0153
    1782:	90 91 54 01 	lds	r25, 0x0154
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	11 f1       	breq	.+68     	; 0x17ce <_ZN12OrangutanLCD5clearEv+0x56>
    178a:	a0 e0       	ldi	r26, 0x00	; 0
    178c:	b0 e2       	ldi	r27, 0x20	; 32
    178e:	08 c0       	rjmp	.+16     	; 0x17a0 <_ZN12OrangutanLCD5clearEv+0x28>
    1790:	e0 91 53 01 	lds	r30, 0x0153
    1794:	f0 91 54 01 	lds	r31, 0x0154
    1798:	e2 0f       	add	r30, r18
    179a:	f3 1f       	adc	r31, r19
    179c:	b0 83       	st	Z, r27
    179e:	af 5f       	subi	r26, 0xFF	; 255
    17a0:	2a 2f       	mov	r18, r26
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	80 91 24 01 	lds	r24, 0x0124
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	60 91 25 01 	lds	r22, 0x0125
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	86 9f       	mul	r24, r22
    17b4:	a0 01       	movw	r20, r0
    17b6:	87 9f       	mul	r24, r23
    17b8:	50 0d       	add	r21, r0
    17ba:	96 9f       	mul	r25, r22
    17bc:	50 0d       	add	r21, r0
    17be:	11 24       	eor	r1, r1
    17c0:	24 17       	cp	r18, r20
    17c2:	35 07       	cpc	r19, r21
    17c4:	2c f3       	brlt	.-54     	; 0x1790 <_ZN12OrangutanLCD5clearEv+0x18>
    17c6:	10 92 56 01 	sts	0x0156, r1
    17ca:	10 92 55 01 	sts	0x0155, r1
    17ce:	08 95       	ret

000017d0 <clear>:
    17d0:	0e 94 bc 0b 	call	0x1778	; 0x1778 <_ZN12OrangutanLCD5clearEv>
    17d4:	08 95       	ret

000017d6 <_ZN12OrangutanLCD5printEPKc>:
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	e8 2e       	mov	r14, r24
    17e0:	e7 01       	movw	r28, r14
    17e2:	7e 01       	movw	r14, r28
    17e4:	f9 2e       	mov	r15, r25
    17e6:	e7 01       	movw	r28, r14
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <_ZN12OrangutanLCD5printEPKc+0x18>
    17ea:	0e 94 3c 0b 	call	0x1678	; 0x1678 <_ZN12OrangutanLCD9send_dataEh>
    17ee:	89 91       	ld	r24, Y+
    17f0:	88 23       	and	r24, r24
    17f2:	d9 f7       	brne	.-10     	; 0x17ea <_ZN12OrangutanLCD5printEPKc+0x14>
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	08 95       	ret

000017fe <print>:
    17fe:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN12OrangutanLCD5printEPKc>
    1802:	08 95       	ret

00001804 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	ec 01       	movw	r28, r24
    180a:	03 c0       	rjmp	.+6      	; 0x1812 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    180c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <_ZN12OrangutanLCD9send_dataEh>
    1810:	21 96       	adiw	r28, 0x01	; 1
    1812:	fe 01       	movw	r30, r28
    1814:	84 91       	lpm	r24, Z
    1816:	88 23       	and	r24, r24
    1818:	c9 f7       	brne	.-14     	; 0x180c <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	08 95       	ret

00001820 <print_from_program_space>:
    1820:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    1824:	08 95       	ret

00001826 <_ZN12OrangutanLCD5printEm>:
    1826:	aa e0       	ldi	r26, 0x0A	; 10
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e9 e1       	ldi	r30, 0x19	; 25
    182c:	fc e0       	ldi	r31, 0x0C	; 12
    182e:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__prologue_saves__+0x10>
    1832:	9b 01       	movw	r18, r22
    1834:	ac 01       	movw	r20, r24
    1836:	1a e0       	ldi	r17, 0x0A	; 10
    1838:	ea e0       	ldi	r30, 0x0A	; 10
    183a:	ce 2e       	mov	r12, r30
    183c:	d1 2c       	mov	r13, r1
    183e:	e1 2c       	mov	r14, r1
    1840:	f1 2c       	mov	r15, r1
    1842:	5e 01       	movw	r10, r28
    1844:	08 94       	sec
    1846:	a1 1c       	adc	r10, r1
    1848:	b1 1c       	adc	r11, r1
    184a:	02 2f       	mov	r16, r18
    184c:	ca 01       	movw	r24, r20
    184e:	b9 01       	movw	r22, r18
    1850:	a7 01       	movw	r20, r14
    1852:	96 01       	movw	r18, r12
    1854:	0e 94 22 14 	call	0x2844	; 0x2844 <__udivmodsi4>
    1858:	11 50       	subi	r17, 0x01	; 1
    185a:	f5 01       	movw	r30, r10
    185c:	e1 0f       	add	r30, r17
    185e:	f1 1d       	adc	r31, r1
    1860:	00 5d       	subi	r16, 0xD0	; 208
    1862:	92 2f       	mov	r25, r18
    1864:	99 0f       	add	r25, r25
    1866:	89 2f       	mov	r24, r25
    1868:	88 0f       	add	r24, r24
    186a:	88 0f       	add	r24, r24
    186c:	89 0f       	add	r24, r25
    186e:	08 1b       	sub	r16, r24
    1870:	00 83       	st	Z, r16
    1872:	21 15       	cp	r18, r1
    1874:	31 05       	cpc	r19, r1
    1876:	41 05       	cpc	r20, r1
    1878:	51 05       	cpc	r21, r1
    187a:	39 f7       	brne	.-50     	; 0x184a <_ZN12OrangutanLCD5printEm+0x24>
    187c:	08 c0       	rjmp	.+16     	; 0x188e <_ZN12OrangutanLCD5printEm+0x68>
    187e:	f6 01       	movw	r30, r12
    1880:	e1 0f       	add	r30, r17
    1882:	f1 1d       	adc	r31, r1
    1884:	80 81       	ld	r24, Z
    1886:	0e 94 3c 0b 	call	0x1678	; 0x1678 <_ZN12OrangutanLCD9send_dataEh>
    188a:	1f 5f       	subi	r17, 0xFF	; 255
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <_ZN12OrangutanLCD5printEm+0x70>
    188e:	6e 01       	movw	r12, r28
    1890:	08 94       	sec
    1892:	c1 1c       	adc	r12, r1
    1894:	d1 1c       	adc	r13, r1
    1896:	1a 30       	cpi	r17, 0x0A	; 10
    1898:	90 f3       	brcs	.-28     	; 0x187e <_ZN12OrangutanLCD5printEm+0x58>
    189a:	2a 96       	adiw	r28, 0x0a	; 10
    189c:	ea e0       	ldi	r30, 0x0A	; 10
    189e:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__epilogue_restores__+0x10>

000018a2 <_ZN12OrangutanLCD5printEl>:
    18a2:	ef 92       	push	r14
    18a4:	ff 92       	push	r15
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	7b 01       	movw	r14, r22
    18ac:	8c 01       	movw	r16, r24
    18ae:	97 ff       	sbrs	r25, 7
    18b0:	0b c0       	rjmp	.+22     	; 0x18c8 <_ZN12OrangutanLCD5printEl+0x26>
    18b2:	10 95       	com	r17
    18b4:	00 95       	com	r16
    18b6:	f0 94       	com	r15
    18b8:	e0 94       	com	r14
    18ba:	e1 1c       	adc	r14, r1
    18bc:	f1 1c       	adc	r15, r1
    18be:	01 1d       	adc	r16, r1
    18c0:	11 1d       	adc	r17, r1
    18c2:	8d e2       	ldi	r24, 0x2D	; 45
    18c4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <_ZN12OrangutanLCD9send_dataEh>
    18c8:	c8 01       	movw	r24, r16
    18ca:	b7 01       	movw	r22, r14
    18cc:	0e 94 13 0c 	call	0x1826	; 0x1826 <_ZN12OrangutanLCD5printEm>
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	ff 90       	pop	r15
    18d6:	ef 90       	pop	r14
    18d8:	08 95       	ret

000018da <print_long>:
    18da:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <_ZN12OrangutanLCD5printEl>
    18de:	08 95       	ret

000018e0 <_ZN12OrangutanLCD6gotoXYEhh>:
    18e0:	a5 e0       	ldi	r26, 0x05	; 5
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e6 e7       	ldi	r30, 0x76	; 118
    18e6:	fc e0       	ldi	r31, 0x0C	; 12
    18e8:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__prologue_saves__+0x1e>
    18ec:	18 2f       	mov	r17, r24
    18ee:	80 e8       	ldi	r24, 0x80	; 128
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	80 ec       	ldi	r24, 0xC0	; 192
    18f4:	8a 83       	std	Y+2, r24	; 0x02
    18f6:	84 e9       	ldi	r24, 0x94	; 148
    18f8:	8b 83       	std	Y+3, r24	; 0x03
    18fa:	84 ed       	ldi	r24, 0xD4	; 212
    18fc:	8c 83       	std	Y+4, r24	; 0x04
    18fe:	fe 01       	movw	r30, r28
    1900:	e6 0f       	add	r30, r22
    1902:	f1 1d       	adc	r31, r1
    1904:	81 81       	ldd	r24, Z+1	; 0x01
    1906:	81 0f       	add	r24, r17
    1908:	6d 83       	std	Y+5, r22	; 0x05
    190a:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN12OrangutanLCD8send_cmdEh>
    190e:	10 93 56 01 	sts	0x0156, r17
    1912:	6d 81       	ldd	r22, Y+5	; 0x05
    1914:	60 93 55 01 	sts	0x0155, r22
    1918:	25 96       	adiw	r28, 0x05	; 5
    191a:	e3 e0       	ldi	r30, 0x03	; 3
    191c:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__epilogue_restores__+0x1e>

00001920 <lcd_goto_xy>:
    1920:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN12OrangutanLCD6gotoXYEhh>
    1924:	08 95       	ret

00001926 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    1926:	fc 01       	movw	r30, r24
    1928:	11 82       	std	Z+1, r1	; 0x01
    192a:	10 82       	st	Z, r1
    192c:	13 82       	std	Z+3, r1	; 0x03
    192e:	12 82       	std	Z+2, r1	; 0x02
    1930:	15 82       	std	Z+5, r1	; 0x05
    1932:	14 82       	std	Z+4, r1	; 0x04
    1934:	16 82       	std	Z+6, r1	; 0x06
    1936:	68 30       	cpi	r22, 0x08	; 8
    1938:	68 f4       	brcc	.+26     	; 0x1954 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    193a:	89 e2       	ldi	r24, 0x29	; 41
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	80 83       	st	Z, r24
    1942:	8b e2       	ldi	r24, 0x2B	; 43
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	93 83       	std	Z+3, r25	; 0x03
    1948:	82 83       	std	Z+2, r24	; 0x02
    194a:	8a e2       	ldi	r24, 0x2A	; 42
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	95 83       	std	Z+5, r25	; 0x05
    1950:	84 83       	std	Z+4, r24	; 0x04
    1952:	11 c0       	rjmp	.+34     	; 0x1976 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x50>
    1954:	6e 30       	cpi	r22, 0x0E	; 14
    1956:	c0 f4       	brcc	.+48     	; 0x1988 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x62>
    1958:	83 e2       	ldi	r24, 0x23	; 35
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
    1960:	85 e2       	ldi	r24, 0x25	; 37
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	93 83       	std	Z+3, r25	; 0x03
    1966:	82 83       	std	Z+2, r24	; 0x02
    1968:	84 e2       	ldi	r24, 0x24	; 36
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	95 83       	std	Z+5, r25	; 0x05
    196e:	84 83       	std	Z+4, r24	; 0x04
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	68 50       	subi	r22, 0x08	; 8
    1974:	70 40       	sbci	r23, 0x00	; 0
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x5a>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	6a 95       	dec	r22
    1982:	e2 f7       	brpl	.-8      	; 0x197c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x56>
    1984:	86 83       	std	Z+6, r24	; 0x06
    1986:	08 95       	ret
    1988:	65 31       	cpi	r22, 0x15	; 21
    198a:	b8 f4       	brcc	.+46     	; 0x19ba <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x94>
    198c:	86 e2       	ldi	r24, 0x26	; 38
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	80 83       	st	Z, r24
    1994:	88 e2       	ldi	r24, 0x28	; 40
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	93 83       	std	Z+3, r25	; 0x03
    199a:	82 83       	std	Z+2, r24	; 0x02
    199c:	87 e2       	ldi	r24, 0x27	; 39
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	95 83       	std	Z+5, r25	; 0x05
    19a2:	84 83       	std	Z+4, r24	; 0x04
    19a4:	70 e0       	ldi	r23, 0x00	; 0
    19a6:	6e 50       	subi	r22, 0x0E	; 14
    19a8:	70 40       	sbci	r23, 0x00	; 0
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8e>
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	6a 95       	dec	r22
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8a>
    19b8:	86 83       	std	Z+6, r24	; 0x06
    19ba:	08 95       	ret

000019bc <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>:
    19bc:	fc 01       	movw	r30, r24
    19be:	a4 81       	ldd	r26, Z+4	; 0x04
    19c0:	b5 81       	ldd	r27, Z+5	; 0x05
    19c2:	86 81       	ldd	r24, Z+6	; 0x06
    19c4:	66 23       	and	r22, r22
    19c6:	21 f0       	breq	.+8      	; 0x19d0 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh+0x14>
    19c8:	9c 91       	ld	r25, X
    19ca:	98 2b       	or	r25, r24
    19cc:	9c 93       	st	X, r25
    19ce:	08 95       	ret
    19d0:	9c 91       	ld	r25, X
    19d2:	80 95       	com	r24
    19d4:	89 23       	and	r24, r25
    19d6:	8c 93       	st	X, r24
    19d8:	08 95       	ret

000019da <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>:
    19da:	fc 01       	movw	r30, r24
    19dc:	6f 3f       	cpi	r22, 0xFF	; 255
    19de:	31 f4       	brne	.+12     	; 0x19ec <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x12>
    19e0:	a2 81       	ldd	r26, Z+2	; 0x02
    19e2:	b3 81       	ldd	r27, Z+3	; 0x03
    19e4:	8c 91       	ld	r24, X
    19e6:	96 81       	ldd	r25, Z+6	; 0x06
    19e8:	89 27       	eor	r24, r25
    19ea:	0c c0       	rjmp	.+24     	; 0x1a04 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x2a>
    19ec:	a2 81       	ldd	r26, Z+2	; 0x02
    19ee:	b3 81       	ldd	r27, Z+3	; 0x03
    19f0:	86 81       	ldd	r24, Z+6	; 0x06
    19f2:	66 23       	and	r22, r22
    19f4:	21 f0       	breq	.+8      	; 0x19fe <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x24>
    19f6:	9c 91       	ld	r25, X
    19f8:	98 2b       	or	r25, r24
    19fa:	9c 93       	st	X, r25
    19fc:	08 95       	ret
    19fe:	9c 91       	ld	r25, X
    1a00:	80 95       	com	r24
    1a02:	89 23       	and	r24, r25
    1a04:	8c 93       	st	X, r24
    1a06:	08 95       	ret

00001a08 <_ZN16OrangutanDigital9setOutputEhh>:
    1a08:	a7 e0       	ldi	r26, 0x07	; 7
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	ea e0       	ldi	r30, 0x0A	; 10
    1a0e:	fd e0       	ldi	r31, 0x0D	; 13
    1a10:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__+0x1a>
    1a14:	28 2f       	mov	r18, r24
    1a16:	f6 2e       	mov	r15, r22
    1a18:	8e 01       	movw	r16, r28
    1a1a:	0f 5f       	subi	r16, 0xFF	; 255
    1a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1e:	c8 01       	movw	r24, r16
    1a20:	62 2f       	mov	r22, r18
    1a22:	0e 94 93 0c 	call	0x1926	; 0x1926 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1a26:	c8 01       	movw	r24, r16
    1a28:	6f 2d       	mov	r22, r15
    1a2a:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>
    1a2e:	c8 01       	movw	r24, r16
    1a30:	61 e0       	ldi	r22, 0x01	; 1
    1a32:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>
    1a36:	27 96       	adiw	r28, 0x07	; 7
    1a38:	e5 e0       	ldi	r30, 0x05	; 5
    1a3a:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__+0x1a>

00001a3e <_ZN15OrangutanMotors5init2Ev>:
    1a3e:	e0 eb       	ldi	r30, 0xB0	; 176
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	83 ef       	ldi	r24, 0xF3	; 243
    1a44:	80 83       	st	Z, r24
    1a46:	80 81       	ld	r24, Z
    1a48:	84 bd       	out	0x24, r24	; 36
    1a4a:	e1 eb       	ldi	r30, 0xB1	; 177
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	80 83       	st	Z, r24
    1a52:	80 81       	ld	r24, Z
    1a54:	85 bd       	out	0x25, r24	; 37
    1a56:	e4 eb       	ldi	r30, 0xB4	; 180
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	10 82       	st	Z, r1
    1a5c:	80 81       	ld	r24, Z
    1a5e:	e3 eb       	ldi	r30, 0xB3	; 179
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 83       	st	Z, r24
    1a64:	80 81       	ld	r24, Z
    1a66:	88 bd       	out	0x28, r24	; 40
    1a68:	88 b5       	in	r24, 0x28	; 40
    1a6a:	87 bd       	out	0x27, r24	; 39
    1a6c:	86 e0       	ldi	r24, 0x06	; 6
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN16OrangutanDigital9setOutputEhh>
    1a74:	85 e0       	ldi	r24, 0x05	; 5
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN16OrangutanDigital9setOutputEhh>
    1a7c:	8b e0       	ldi	r24, 0x0B	; 11
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN16OrangutanDigital9setOutputEhh>
    1a84:	83 e0       	ldi	r24, 0x03	; 3
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN16OrangutanDigital9setOutputEhh>
    1a8c:	08 95       	ret

00001a8e <_ZN15OrangutanMotors4initEv>:
    1a8e:	80 91 5c 01 	lds	r24, 0x015C
    1a92:	88 23       	and	r24, r24
    1a94:	29 f4       	brne	.+10     	; 0x1aa0 <_ZN15OrangutanMotors4initEv+0x12>
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	80 93 5c 01 	sts	0x015C, r24
    1a9c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <_ZN15OrangutanMotors5init2Ev>
    1aa0:	08 95       	ret

00001aa2 <_ZN15OrangutanMotors10setM1SpeedEi>:
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	ec 01       	movw	r28, r24
    1aa8:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <_ZN15OrangutanMotors4initEv>
    1aac:	d7 ff       	sbrs	r29, 7
    1aae:	05 c0       	rjmp	.+10     	; 0x1aba <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    1ab0:	d0 95       	com	r29
    1ab2:	c1 95       	neg	r28
    1ab4:	df 4f       	sbci	r29, 0xFF	; 255
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	01 c0       	rjmp	.+2      	; 0x1abc <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	cf 3f       	cpi	r28, 0xFF	; 255
    1abe:	d1 05       	cpc	r29, r1
    1ac0:	19 f0       	breq	.+6      	; 0x1ac8 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1ac2:	14 f0       	brlt	.+4      	; 0x1ac8 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1ac4:	cf ef       	ldi	r28, 0xFF	; 255
    1ac6:	d0 e0       	ldi	r29, 0x00	; 0
    1ac8:	88 23       	and	r24, r24
    1aca:	19 f0       	breq	.+6      	; 0x1ad2 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1acc:	18 bc       	out	0x28, r1	; 40
    1ace:	c7 bd       	out	0x27, r28	; 39
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1ad2:	c8 bd       	out	0x28, r28	; 40
    1ad4:	17 bc       	out	0x27, r1	; 39
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	08 95       	ret

00001adc <_ZN15OrangutanMotors10setM2SpeedEi>:
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	ec 01       	movw	r28, r24
    1ae2:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <_ZN15OrangutanMotors4initEv>
    1ae6:	d7 ff       	sbrs	r29, 7
    1ae8:	05 c0       	rjmp	.+10     	; 0x1af4 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1aea:	d0 95       	com	r29
    1aec:	c1 95       	neg	r28
    1aee:	df 4f       	sbci	r29, 0xFF	; 255
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	cf 3f       	cpi	r28, 0xFF	; 255
    1af8:	d1 05       	cpc	r29, r1
    1afa:	19 f0       	breq	.+6      	; 0x1b02 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1afc:	14 f0       	brlt	.+4      	; 0x1b02 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1afe:	cf ef       	ldi	r28, 0xFF	; 255
    1b00:	d0 e0       	ldi	r29, 0x00	; 0
    1b02:	88 23       	and	r24, r24
    1b04:	29 f0       	breq	.+10     	; 0x1b10 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1b06:	10 92 b4 00 	sts	0x00B4, r1
    1b0a:	c0 93 b3 00 	sts	0x00B3, r28
    1b0e:	04 c0       	rjmp	.+8      	; 0x1b18 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1b10:	c0 93 b4 00 	sts	0x00B4, r28
    1b14:	10 92 b3 00 	sts	0x00B3, r1
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	08 95       	ret

00001b1e <_ZN15OrangutanMotors9setSpeedsEii>:
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	eb 01       	movw	r28, r22
    1b24:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN15OrangutanMotors10setM1SpeedEi>
    1b28:	ce 01       	movw	r24, r28
    1b2a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_ZN15OrangutanMotors10setM2SpeedEi>
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	08 95       	ret

00001b34 <set_motors>:
    1b34:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <_ZN15OrangutanMotors9setSpeedsEii>
    1b38:	08 95       	ret

00001b3a <_ZN20OrangutanPushbuttons5init2Ev>:
    1b3a:	84 b1       	in	r24, 0x04	; 4
    1b3c:	8d 7c       	andi	r24, 0xCD	; 205
    1b3e:	84 b9       	out	0x04, r24	; 4
    1b40:	85 b1       	in	r24, 0x05	; 5
    1b42:	82 63       	ori	r24, 0x32	; 50
    1b44:	85 b9       	out	0x05, r24	; 5
    1b46:	85 e0       	ldi	r24, 0x05	; 5
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	6f 93       	push	r22
    1b4c:	64 e0       	ldi	r22, 0x04	; 4
    1b4e:	6a 95       	dec	r22
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1b52:	6f 91       	pop	r22
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	c9 f7       	brne	.-14     	; 0x1b4a <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1b58:	08 95       	ret

00001b5a <_ZN20OrangutanPushbuttons4initEv>:
    1b5a:	80 91 5d 01 	lds	r24, 0x015D
    1b5e:	88 23       	and	r24, r24
    1b60:	29 f4       	brne	.+10     	; 0x1b6c <_ZN20OrangutanPushbuttons4initEv+0x12>
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	80 93 5d 01 	sts	0x015D, r24
    1b68:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <_ZN20OrangutanPushbuttons5init2Ev>
    1b6c:	08 95       	ret

00001b6e <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1b6e:	1f 93       	push	r17
    1b70:	18 2f       	mov	r17, r24
    1b72:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <_ZN20OrangutanPushbuttons4initEv>
    1b76:	83 b1       	in	r24, 0x03	; 3
    1b78:	81 23       	and	r24, r17
    1b7a:	e9 f3       	breq	.-6      	; 0x1b76 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1b7c:	8a e0       	ldi	r24, 0x0A	; 10
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <delay_ms>
    1b84:	83 b1       	in	r24, 0x03	; 3
    1b86:	81 23       	and	r24, r17
    1b88:	b1 f3       	breq	.-20     	; 0x1b76 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1b8a:	83 b1       	in	r24, 0x03	; 3
    1b8c:	81 23       	and	r24, r17
    1b8e:	1f 91       	pop	r17
    1b90:	08 95       	ret

00001b92 <wait_for_button_release>:
    1b92:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    1b96:	08 95       	ret

00001b98 <_ZN20OrangutanPushbuttons9isPressedEh>:
    1b98:	a1 e0       	ldi	r26, 0x01	; 1
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e2 ed       	ldi	r30, 0xD2	; 210
    1b9e:	fd e0       	ldi	r31, 0x0D	; 13
    1ba0:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__prologue_saves__+0x20>
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <_ZN20OrangutanPushbuttons4initEv>
    1baa:	93 b1       	in	r25, 0x03	; 3
    1bac:	90 95       	com	r25
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	89 23       	and	r24, r25
    1bb2:	21 96       	adiw	r28, 0x01	; 1
    1bb4:	e2 e0       	ldi	r30, 0x02	; 2
    1bb6:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__epilogue_restores__+0x20>

00001bba <button_is_pressed>:
    1bba:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN20OrangutanPushbuttons9isPressedEh>
    1bbe:	08 95       	ret

00001bc0 <_ZN13OrangutanTime17delayMicrosecondsEj>:
    1bc0:	6f 93       	push	r22
    1bc2:	64 e0       	ldi	r22, 0x04	; 4
    1bc4:	6a 95       	dec	r22
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
    1bc8:	6f 91       	pop	r22
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	c9 f7       	brne	.-14     	; 0x1bc0 <_ZN13OrangutanTime17delayMicrosecondsEj>
    1bce:	08 95       	ret

00001bd0 <__vector_9>:
    1bd0:	2f 92       	push	r2
    1bd2:	8f 93       	push	r24
    1bd4:	9f 93       	push	r25
    1bd6:	2f b6       	in	r2, 0x3f	; 63
    1bd8:	80 91 6b 01 	lds	r24, 0x016B
    1bdc:	90 91 6c 01 	lds	r25, 0x016C
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	80 93 6b 01 	sts	0x016B, r24
    1be6:	90 93 6c 01 	sts	0x016C, r25
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	80 91 6d 01 	lds	r24, 0x016D
    1bf0:	89 1f       	adc	r24, r25
    1bf2:	80 93 6d 01 	sts	0x016D, r24
    1bf6:	90 91 73 01 	lds	r25, 0x0173
    1bfa:	9c 5f       	subi	r25, 0xFC	; 252
    1bfc:	90 93 73 01 	sts	0x0173, r25
    1c00:	80 91 72 01 	lds	r24, 0x0172
    1c04:	80 51       	subi	r24, 0x10	; 16
    1c06:	97 42       	sbci	r25, 0x27	; 39
    1c08:	c0 f0       	brcs	.+48     	; 0x1c3a <end>
    1c0a:	90 93 73 01 	sts	0x0173, r25
    1c0e:	80 93 72 01 	sts	0x0172, r24
    1c12:	80 91 6e 01 	lds	r24, 0x016E
    1c16:	90 91 6f 01 	lds	r25, 0x016F
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	80 93 6e 01 	sts	0x016E, r24
    1c20:	90 93 6f 01 	sts	0x016F, r25
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	80 91 70 01 	lds	r24, 0x0170
    1c2a:	89 1f       	adc	r24, r25
    1c2c:	80 93 70 01 	sts	0x0170, r24
    1c30:	80 91 71 01 	lds	r24, 0x0171
    1c34:	89 1f       	adc	r24, r25
    1c36:	80 93 71 01 	sts	0x0171, r24

00001c3a <end>:
    1c3a:	2f be       	out	0x3f, r2	; 63
    1c3c:	9f 91       	pop	r25
    1c3e:	8f 91       	pop	r24
    1c40:	2f 90       	pop	r2
    1c42:	18 95       	reti

00001c44 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	ec 01       	movw	r28, r24
    1c4a:	05 c0       	rjmp	.+10     	; 0x1c56 <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
    1c4c:	88 ee       	ldi	r24, 0xE8	; 232
    1c4e:	93 e0       	ldi	r25, 0x03	; 3
    1c50:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <_ZN13OrangutanTime17delayMicrosecondsEj>
    1c54:	21 97       	sbiw	r28, 0x01	; 1
    1c56:	20 97       	sbiw	r28, 0x00	; 0
    1c58:	c9 f7       	brne	.-14     	; 0x1c4c <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	08 95       	ret

00001c60 <delay_ms>:
    1c60:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <_ZN13OrangutanTime17delayMillisecondsEj>
    1c64:	08 95       	ret

00001c66 <_ZN13OrangutanTime5init2Ev>:
    1c66:	e0 e7       	ldi	r30, 0x70	; 112
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	8e 7f       	andi	r24, 0xFE	; 254
    1c6e:	80 83       	st	Z, r24
    1c70:	a0 eb       	ldi	r26, 0xB0	; 176
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	8c 91       	ld	r24, X
    1c76:	83 60       	ori	r24, 0x03	; 3
    1c78:	8c 93       	st	X, r24
    1c7a:	a1 eb       	ldi	r26, 0xB1	; 177
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	8c 91       	ld	r24, X
    1c80:	80 7f       	andi	r24, 0xF0	; 240
    1c82:	8c 93       	st	X, r24
    1c84:	8c 91       	ld	r24, X
    1c86:	82 60       	ori	r24, 0x02	; 2
    1c88:	8c 93       	st	X, r24
    1c8a:	b8 9a       	sbi	0x17, 0	; 23
    1c8c:	80 81       	ld	r24, Z
    1c8e:	81 60       	ori	r24, 0x01	; 1
    1c90:	80 83       	st	Z, r24
    1c92:	78 94       	sei
    1c94:	08 95       	ret

00001c96 <_ZN13OrangutanTime4initEv>:
    1c96:	80 91 74 01 	lds	r24, 0x0174
    1c9a:	88 23       	and	r24, r24
    1c9c:	29 f4       	brne	.+10     	; 0x1ca8 <_ZN13OrangutanTime4initEv+0x12>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	80 93 74 01 	sts	0x0174, r24
    1ca4:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <_ZN13OrangutanTime5init2Ev>
    1ca8:	08 95       	ret

00001caa <_ZN13OrangutanTime5resetEv>:
    1caa:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <_ZN13OrangutanTime4initEv>
    1cae:	e0 e7       	ldi	r30, 0x70	; 112
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	8e 7f       	andi	r24, 0xFE	; 254
    1cb6:	80 83       	st	Z, r24
    1cb8:	10 92 6e 01 	sts	0x016E, r1
    1cbc:	10 92 6f 01 	sts	0x016F, r1
    1cc0:	10 92 70 01 	sts	0x0170, r1
    1cc4:	10 92 71 01 	sts	0x0171, r1
    1cc8:	10 92 73 01 	sts	0x0173, r1
    1ccc:	10 92 72 01 	sts	0x0172, r1
    1cd0:	80 81       	ld	r24, Z
    1cd2:	81 60       	ori	r24, 0x01	; 1
    1cd4:	80 83       	st	Z, r24
    1cd6:	08 95       	ret

00001cd8 <calibrate_line_sensors>:
    1cd8:	68 2f       	mov	r22, r24
    1cda:	85 e7       	ldi	r24, 0x75	; 117
    1cdc:	91 e0       	ldi	r25, 0x01	; 1
    1cde:	0e 94 9c 13 	call	0x2738	; 0x2738 <_ZN16PololuQTRSensors9calibrateEh>
    1ce2:	08 95       	ret

00001ce4 <read_line>:
    1ce4:	9c 01       	movw	r18, r24
    1ce6:	46 2f       	mov	r20, r22
    1ce8:	85 e7       	ldi	r24, 0x75	; 117
    1cea:	91 e0       	ldi	r25, 0x01	; 1
    1cec:	b9 01       	movw	r22, r18
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <_ZN16PololuQTRSensors8readLineEPjhh>
    1cf4:	08 95       	ret

00001cf6 <_ZN9Pololu3pi4initEjh>:
    1cf6:	0f 93       	push	r16
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <_ZN9Pololu3pi4initEjh+0x8>
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <_ZN9Pololu3pi4initEjh+0xa>
    1d00:	0f 92       	push	r0
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	9c 01       	movw	r18, r24
    1d08:	96 2f       	mov	r25, r22
    1d0a:	de 01       	movw	r26, r28
    1d0c:	11 96       	adiw	r26, 0x01	; 1
    1d0e:	e6 e2       	ldi	r30, 0x26	; 38
    1d10:	f1 e0       	ldi	r31, 0x01	; 1
    1d12:	85 e0       	ldi	r24, 0x05	; 5
    1d14:	01 90       	ld	r0, Z+
    1d16:	0d 92       	st	X+, r0
    1d18:	81 50       	subi	r24, 0x01	; 1
    1d1a:	e1 f7       	brne	.-8      	; 0x1d14 <_ZN9Pololu3pi4initEjh+0x1e>
    1d1c:	be 01       	movw	r22, r28
    1d1e:	6f 5f       	subi	r22, 0xFF	; 255
    1d20:	7f 4f       	sbci	r23, 0xFF	; 255
    1d22:	99 23       	and	r25, r25
    1d24:	29 f0       	breq	.+10     	; 0x1d30 <_ZN9Pololu3pi4initEjh+0x3a>
    1d26:	85 e7       	ldi	r24, 0x75	; 117
    1d28:	91 e0       	ldi	r25, 0x01	; 1
    1d2a:	45 e0       	ldi	r20, 0x05	; 5
    1d2c:	0f ef       	ldi	r16, 0xFF	; 255
    1d2e:	04 c0       	rjmp	.+8      	; 0x1d38 <_ZN9Pololu3pi4initEjh+0x42>
    1d30:	85 e7       	ldi	r24, 0x75	; 117
    1d32:	91 e0       	ldi	r25, 0x01	; 1
    1d34:	45 e0       	ldi	r20, 0x05	; 5
    1d36:	03 e1       	ldi	r16, 0x13	; 19
    1d38:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1d3c:	85 e7       	ldi	r24, 0x75	; 117
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <_ZN16PololuQTRSensors11emittersOffEv>
    1d44:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN13OrangutanTime5resetEv>
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	0f 91       	pop	r16
    1d58:	08 95       	ret

00001d5a <pololu_3pi_init>:
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN9Pololu3pi4initEjh>
    1d60:	08 95       	ret

00001d62 <_GLOBAL__I_pololu_3pi_init>:
    1d62:	08 95       	ret

00001d64 <_GLOBAL__D_pololu_3pi_init>:
    1d64:	85 e7       	ldi	r24, 0x75	; 117
    1d66:	91 e0       	ldi	r25, 0x01	; 1
    1d68:	0e 94 c0 13 	call	0x2780	; 0x2780 <_ZN16PololuQTRSensorsD1Ev>
    1d6c:	08 95       	ret

00001d6e <delayMicroseconds>:
    1d6e:	6f 93       	push	r22
    1d70:	64 e0       	ldi	r22, 0x04	; 4
    1d72:	6a 95       	dec	r22
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <delayMicroseconds+0x4>
    1d76:	6f 91       	pop	r22
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	c9 f7       	brne	.-14     	; 0x1d6e <delayMicroseconds>
    1d7c:	08 95       	ret

00001d7e <_ZN16PololuQTRSensors4initEhhh>:
    1d7e:	a7 e0       	ldi	r26, 0x07	; 7
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e5 ec       	ldi	r30, 0xC5	; 197
    1d84:	fe e0       	ldi	r31, 0x0E	; 14
    1d86:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__prologue_saves__+0x1c>
    1d8a:	8c 01       	movw	r16, r24
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	11 82       	std	Z+1, r1	; 0x01
    1d90:	10 82       	st	Z, r1
    1d92:	13 82       	std	Z+3, r1	; 0x03
    1d94:	12 82       	std	Z+2, r1	; 0x02
    1d96:	15 82       	std	Z+5, r1	; 0x05
    1d98:	14 82       	std	Z+4, r1	; 0x04
    1d9a:	17 82       	std	Z+7, r1	; 0x07
    1d9c:	16 82       	std	Z+6, r1	; 0x06
    1d9e:	61 31       	cpi	r22, 0x11	; 17
    1da0:	18 f0       	brcs	.+6      	; 0x1da8 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1da2:	80 e1       	ldi	r24, 0x10	; 16
    1da4:	80 87       	std	Z+8, r24	; 0x08
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1da8:	fc 01       	movw	r30, r24
    1daa:	60 87       	std	Z+8, r22	; 0x08
    1dac:	f8 01       	movw	r30, r16
    1dae:	20 8b       	std	Z+16, r18	; 0x10
    1db0:	ce 01       	movw	r24, r28
    1db2:	01 96       	adiw	r24, 0x01	; 1
    1db4:	64 2f       	mov	r22, r20
    1db6:	0e 94 93 0c 	call	0x1926	; 0x1926 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1dba:	8f 81       	ldd	r24, Y+7	; 0x07
    1dbc:	f8 01       	movw	r30, r16
    1dbe:	81 87       	std	Z+9, r24	; 0x09
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc4:	93 87       	std	Z+11, r25	; 0x0b
    1dc6:	82 87       	std	Z+10, r24	; 0x0a
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	9e 81       	ldd	r25, Y+6	; 0x06
    1dcc:	95 87       	std	Z+13, r25	; 0x0d
    1dce:	84 87       	std	Z+12, r24	; 0x0c
    1dd0:	27 96       	adiw	r28, 0x07	; 7
    1dd2:	e4 e0       	ldi	r30, 0x04	; 4
    1dd4:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__epilogue_restores__+0x1c>

00001dd8 <_ZN16PololuQTRSensors11emittersOffEv>:
    1dd8:	fc 01       	movw	r30, r24
    1dda:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ddc:	b5 85       	ldd	r27, Z+13	; 0x0d
    1dde:	10 97       	sbiw	r26, 0x00	; 0
    1de0:	79 f0       	breq	.+30     	; 0x1e00 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    1de2:	8c 91       	ld	r24, X
    1de4:	91 85       	ldd	r25, Z+9	; 0x09
    1de6:	89 2b       	or	r24, r25
    1de8:	8c 93       	st	X, r24
    1dea:	a2 85       	ldd	r26, Z+10	; 0x0a
    1dec:	b3 85       	ldd	r27, Z+11	; 0x0b
    1dee:	9c 91       	ld	r25, X
    1df0:	81 85       	ldd	r24, Z+9	; 0x09
    1df2:	80 95       	com	r24
    1df4:	89 23       	and	r24, r25
    1df6:	8c 93       	st	X, r24
    1df8:	88 ec       	ldi	r24, 0xC8	; 200
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <delayMicroseconds>
    1e00:	08 95       	ret

00001e02 <_ZN16PololuQTRSensors10emittersOnEv>:
    1e02:	fc 01       	movw	r30, r24
    1e04:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e06:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e08:	10 97       	sbiw	r26, 0x00	; 0
    1e0a:	71 f0       	breq	.+28     	; 0x1e28 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    1e0c:	8c 91       	ld	r24, X
    1e0e:	91 85       	ldd	r25, Z+9	; 0x09
    1e10:	89 2b       	or	r24, r25
    1e12:	8c 93       	st	X, r24
    1e14:	a2 85       	ldd	r26, Z+10	; 0x0a
    1e16:	b3 85       	ldd	r27, Z+11	; 0x0b
    1e18:	8c 91       	ld	r24, X
    1e1a:	91 85       	ldd	r25, Z+9	; 0x09
    1e1c:	89 2b       	or	r24, r25
    1e1e:	8c 93       	st	X, r24
    1e20:	88 ec       	ldi	r24, 0xC8	; 200
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <delayMicroseconds>
    1e28:	08 95       	ret

00001e2a <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    1e2a:	a7 e0       	ldi	r26, 0x07	; 7
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	eb e1       	ldi	r30, 0x1B	; 27
    1e30:	ff e0       	ldi	r31, 0x0F	; 15
    1e32:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__prologue_saves__>
    1e36:	7c 01       	movw	r14, r24
    1e38:	1b 01       	movw	r2, r22
    1e3a:	64 2f       	mov	r22, r20
    1e3c:	39 01       	movw	r6, r18
    1e3e:	40 2f       	mov	r20, r16
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <_ZN16PololuQTRSensors4initEhhh>
    1e46:	97 01       	movw	r18, r14
    1e48:	2f 5b       	subi	r18, 0xBF	; 191
    1e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4c:	f9 01       	movw	r30, r18
    1e4e:	10 82       	st	Z, r1
    1e50:	d7 01       	movw	r26, r14
    1e52:	ae 5b       	subi	r26, 0xBE	; 190
    1e54:	bf 4f       	sbci	r27, 0xFF	; 255
    1e56:	1c 92       	st	X, r1
    1e58:	c7 01       	movw	r24, r14
    1e5a:	8d 5b       	subi	r24, 0xBD	; 189
    1e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5e:	fc 01       	movw	r30, r24
    1e60:	10 82       	st	Z, r1
    1e62:	f7 01       	movw	r30, r14
    1e64:	77 86       	std	Z+15, r7	; 0x0f
    1e66:	66 86       	std	Z+14, r6	; 0x0e
    1e68:	66 24       	eor	r6, r6
    1e6a:	2e 01       	movw	r4, r28
    1e6c:	08 94       	sec
    1e6e:	41 1c       	adc	r4, r1
    1e70:	51 1c       	adc	r5, r1
    1e72:	6c 01       	movw	r12, r24
    1e74:	5d 01       	movw	r10, r26
    1e76:	49 01       	movw	r8, r18
    1e78:	29 c0       	rjmp	.+82     	; 0x1ecc <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1e7a:	06 2d       	mov	r16, r6
    1e7c:	10 e0       	ldi	r17, 0x00	; 0
    1e7e:	f1 01       	movw	r30, r2
    1e80:	e0 0f       	add	r30, r16
    1e82:	f1 1f       	adc	r31, r17
    1e84:	c2 01       	movw	r24, r4
    1e86:	60 81       	ld	r22, Z
    1e88:	0e 94 93 0c 	call	0x1926	; 0x1926 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1e8c:	2f 81       	ldd	r18, Y+7	; 0x07
    1e8e:	f7 01       	movw	r30, r14
    1e90:	e0 0f       	add	r30, r16
    1e92:	f1 1f       	adc	r31, r17
    1e94:	21 8b       	std	Z+17, r18	; 0x11
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	ee 0f       	add	r30, r30
    1e9e:	ff 1f       	adc	r31, r31
    1ea0:	ee 0d       	add	r30, r14
    1ea2:	ff 1d       	adc	r31, r15
    1ea4:	92 a3       	std	Z+34, r25	; 0x22
    1ea6:	81 a3       	std	Z+33, r24	; 0x21
    1ea8:	83 32       	cpi	r24, 0x23	; 35
    1eaa:	91 05       	cpc	r25, r1
    1eac:	11 f4       	brne	.+4      	; 0x1eb2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1eae:	f4 01       	movw	r30, r8
    1eb0:	09 c0       	rjmp	.+18     	; 0x1ec4 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1eb2:	86 32       	cpi	r24, 0x26	; 38
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	11 f4       	brne	.+4      	; 0x1ebc <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1eb8:	f5 01       	movw	r30, r10
    1eba:	04 c0       	rjmp	.+8      	; 0x1ec4 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1ebc:	89 32       	cpi	r24, 0x29	; 41
    1ebe:	91 05       	cpc	r25, r1
    1ec0:	21 f4       	brne	.+8      	; 0x1eca <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa0>
    1ec2:	f6 01       	movw	r30, r12
    1ec4:	80 81       	ld	r24, Z
    1ec6:	82 2b       	or	r24, r18
    1ec8:	80 83       	st	Z, r24
    1eca:	63 94       	inc	r6
    1ecc:	f7 01       	movw	r30, r14
    1ece:	80 85       	ldd	r24, Z+8	; 0x08
    1ed0:	68 16       	cp	r6, r24
    1ed2:	98 f2       	brcs	.-90     	; 0x1e7a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x50>
    1ed4:	27 96       	adiw	r28, 0x07	; 7
    1ed6:	e2 e1       	ldi	r30, 0x12	; 18
    1ed8:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__epilogue_restores__>

00001edc <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1edc:	a0 e0       	ldi	r26, 0x00	; 0
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e4 e7       	ldi	r30, 0x74	; 116
    1ee2:	ff e0       	ldi	r31, 0x0F	; 15
    1ee4:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__prologue_saves__+0xa>
    1ee8:	ec 01       	movw	r28, r24
    1eea:	5b 01       	movw	r10, r22
    1eec:	fc 01       	movw	r30, r24
    1eee:	ef 5b       	subi	r30, 0xBF	; 191
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	90 80       	ld	r9, Z
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	ee 5b       	subi	r30, 0xBE	; 190
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	80 80       	ld	r8, Z
    1efc:	fc 01       	movw	r30, r24
    1efe:	ed 5b       	subi	r30, 0xBD	; 189
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	70 80       	ld	r7, Z
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	09 c0       	rjmp	.+18     	; 0x1f1a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x3e>
    1f08:	e8 2f       	mov	r30, r24
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	ee 0f       	add	r30, r30
    1f0e:	ff 1f       	adc	r31, r31
    1f10:	ea 0d       	add	r30, r10
    1f12:	fb 1d       	adc	r31, r11
    1f14:	11 82       	std	Z+1, r1	; 0x01
    1f16:	10 82       	st	Z, r1
    1f18:	8f 5f       	subi	r24, 0xFF	; 255
    1f1a:	98 85       	ldd	r25, Y+8	; 0x08
    1f1c:	89 17       	cp	r24, r25
    1f1e:	a0 f3       	brcs	.-24     	; 0x1f08 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x2c>
    1f20:	84 b1       	in	r24, 0x04	; 4
    1f22:	21 e4       	ldi	r18, 0x41	; 65
    1f24:	e2 2e       	mov	r14, r18
    1f26:	f1 2c       	mov	r15, r1
    1f28:	ec 0e       	add	r14, r28
    1f2a:	fd 1e       	adc	r15, r29
    1f2c:	d7 01       	movw	r26, r14
    1f2e:	9c 91       	ld	r25, X
    1f30:	89 2b       	or	r24, r25
    1f32:	84 b9       	out	0x04, r24	; 4
    1f34:	87 b1       	in	r24, 0x07	; 7
    1f36:	8e 01       	movw	r16, r28
    1f38:	0e 5b       	subi	r16, 0xBE	; 190
    1f3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3c:	f8 01       	movw	r30, r16
    1f3e:	90 81       	ld	r25, Z
    1f40:	89 2b       	or	r24, r25
    1f42:	87 b9       	out	0x07, r24	; 7
    1f44:	8a b1       	in	r24, 0x0a	; 10
    1f46:	93 e4       	ldi	r25, 0x43	; 67
    1f48:	c9 2e       	mov	r12, r25
    1f4a:	d1 2c       	mov	r13, r1
    1f4c:	cc 0e       	add	r12, r28
    1f4e:	dd 1e       	adc	r13, r29
    1f50:	d6 01       	movw	r26, r12
    1f52:	9c 91       	ld	r25, X
    1f54:	89 2b       	or	r24, r25
    1f56:	8a b9       	out	0x0a, r24	; 10
    1f58:	85 b1       	in	r24, 0x05	; 5
    1f5a:	f7 01       	movw	r30, r14
    1f5c:	90 81       	ld	r25, Z
    1f5e:	89 2b       	or	r24, r25
    1f60:	85 b9       	out	0x05, r24	; 5
    1f62:	88 b1       	in	r24, 0x08	; 8
    1f64:	d8 01       	movw	r26, r16
    1f66:	9c 91       	ld	r25, X
    1f68:	89 2b       	or	r24, r25
    1f6a:	88 b9       	out	0x08, r24	; 8
    1f6c:	8b b1       	in	r24, 0x0b	; 11
    1f6e:	f6 01       	movw	r30, r12
    1f70:	90 81       	ld	r25, Z
    1f72:	89 2b       	or	r24, r25
    1f74:	8b b9       	out	0x0b, r24	; 11
    1f76:	8a e0       	ldi	r24, 0x0A	; 10
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <delayMicroseconds>
    1f7e:	94 b1       	in	r25, 0x04	; 4
    1f80:	d7 01       	movw	r26, r14
    1f82:	8c 91       	ld	r24, X
    1f84:	80 95       	com	r24
    1f86:	89 23       	and	r24, r25
    1f88:	84 b9       	out	0x04, r24	; 4
    1f8a:	97 b1       	in	r25, 0x07	; 7
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	80 81       	ld	r24, Z
    1f90:	80 95       	com	r24
    1f92:	89 23       	and	r24, r25
    1f94:	87 b9       	out	0x07, r24	; 7
    1f96:	9a b1       	in	r25, 0x0a	; 10
    1f98:	d6 01       	movw	r26, r12
    1f9a:	8c 91       	ld	r24, X
    1f9c:	80 95       	com	r24
    1f9e:	89 23       	and	r24, r25
    1fa0:	8a b9       	out	0x0a, r24	; 10
    1fa2:	95 b1       	in	r25, 0x05	; 5
    1fa4:	f7 01       	movw	r30, r14
    1fa6:	80 81       	ld	r24, Z
    1fa8:	80 95       	com	r24
    1faa:	89 23       	and	r24, r25
    1fac:	85 b9       	out	0x05, r24	; 5
    1fae:	98 b1       	in	r25, 0x08	; 8
    1fb0:	d8 01       	movw	r26, r16
    1fb2:	8c 91       	ld	r24, X
    1fb4:	80 95       	com	r24
    1fb6:	89 23       	and	r24, r25
    1fb8:	88 b9       	out	0x08, r24	; 8
    1fba:	9b b1       	in	r25, 0x0b	; 11
    1fbc:	f6 01       	movw	r30, r12
    1fbe:	80 81       	ld	r24, Z
    1fc0:	80 95       	com	r24
    1fc2:	89 23       	and	r24, r25
    1fc4:	8b b9       	out	0x0b, r24	; 11
    1fc6:	c0 90 b0 00 	lds	r12, 0x00B0
    1fca:	e0 90 b1 00 	lds	r14, 0x00B1
    1fce:	80 91 b0 00 	lds	r24, 0x00B0
    1fd2:	83 60       	ori	r24, 0x03	; 3
    1fd4:	80 93 b0 00 	sts	0x00B0, r24
    1fd8:	82 e0       	ldi	r24, 0x02	; 2
    1fda:	80 93 b1 00 	sts	0x00B1, r24
    1fde:	00 91 b2 00 	lds	r16, 0x00B2
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	39 c0       	rjmp	.+114    	; 0x205a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17e>
    1fe8:	20 91 b2 00 	lds	r18, 0x00B2
    1fec:	20 1b       	sub	r18, r16
    1fee:	82 0f       	add	r24, r18
    1ff0:	91 1d       	adc	r25, r1
    1ff2:	02 0f       	add	r16, r18
    1ff4:	f3 b0       	in	r15, 0x03	; 3
    1ff6:	f9 14       	cp	r15, r9
    1ff8:	09 f0       	breq	.+2      	; 0x1ffc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x120>
    1ffa:	4d c0       	rjmp	.+154    	; 0x2096 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1ffc:	96 b0       	in	r9, 0x06	; 6
    1ffe:	98 14       	cp	r9, r8
    2000:	09 f0       	breq	.+2      	; 0x2004 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x128>
    2002:	49 c0       	rjmp	.+146    	; 0x2096 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    2004:	29 b1       	in	r18, 0x09	; 9
    2006:	27 15       	cp	r18, r7
    2008:	09 f0       	breq	.+2      	; 0x200c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x130>
    200a:	45 c0       	rjmp	.+138    	; 0x2096 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    200c:	24 c0       	rjmp	.+72     	; 0x2056 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17a>
    200e:	21 2f       	mov	r18, r17
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	a9 01       	movw	r20, r18
    2014:	44 0f       	add	r20, r20
    2016:	55 1f       	adc	r21, r21
    2018:	f5 01       	movw	r30, r10
    201a:	e4 0f       	add	r30, r20
    201c:	f5 1f       	adc	r31, r21
    201e:	60 81       	ld	r22, Z
    2020:	71 81       	ldd	r23, Z+1	; 0x01
    2022:	61 15       	cp	r22, r1
    2024:	71 05       	cpc	r23, r1
    2026:	99 f4       	brne	.+38     	; 0x204e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    2028:	4c 0f       	add	r20, r28
    202a:	5d 1f       	adc	r21, r29
    202c:	da 01       	movw	r26, r20
    202e:	91 96       	adiw	r26, 0x21	; 33
    2030:	4d 91       	ld	r20, X+
    2032:	5c 91       	ld	r21, X
    2034:	92 97       	sbiw	r26, 0x22	; 34
    2036:	da 01       	movw	r26, r20
    2038:	4c 91       	ld	r20, X
    203a:	2c 0f       	add	r18, r28
    203c:	3d 1f       	adc	r19, r29
    203e:	d9 01       	movw	r26, r18
    2040:	51 96       	adiw	r26, 0x11	; 17
    2042:	2c 91       	ld	r18, X
    2044:	51 97       	sbiw	r26, 0x11	; 17
    2046:	42 23       	and	r20, r18
    2048:	11 f4       	brne	.+4      	; 0x204e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	80 83       	st	Z, r24
    204e:	1f 5f       	subi	r17, 0xFF	; 255
    2050:	28 85       	ldd	r18, Y+8	; 0x08
    2052:	12 17       	cp	r17, r18
    2054:	e0 f2       	brcs	.-72     	; 0x200e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x132>
    2056:	89 2c       	mov	r8, r9
    2058:	9f 2c       	mov	r9, r15
    205a:	2e 85       	ldd	r18, Y+14	; 0x0e
    205c:	3f 85       	ldd	r19, Y+15	; 0x0f
    205e:	82 17       	cp	r24, r18
    2060:	93 07       	cpc	r25, r19
    2062:	10 f2       	brcs	.-124    	; 0x1fe8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x10c>
    2064:	c0 92 b0 00 	sts	0x00B0, r12
    2068:	e0 92 b1 00 	sts	0x00B1, r14
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	0f c0       	rjmp	.+30     	; 0x208e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b2>
    2070:	e2 2f       	mov	r30, r18
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	ee 0f       	add	r30, r30
    2076:	ff 1f       	adc	r31, r31
    2078:	ea 0d       	add	r30, r10
    207a:	fb 1d       	adc	r31, r11
    207c:	80 81       	ld	r24, Z
    207e:	91 81       	ldd	r25, Z+1	; 0x01
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	21 f4       	brne	.+8      	; 0x208c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b0>
    2084:	8e 85       	ldd	r24, Y+14	; 0x0e
    2086:	9f 85       	ldd	r25, Y+15	; 0x0f
    2088:	91 83       	std	Z+1, r25	; 0x01
    208a:	80 83       	st	Z, r24
    208c:	2f 5f       	subi	r18, 0xFF	; 255
    208e:	88 85       	ldd	r24, Y+8	; 0x08
    2090:	28 17       	cp	r18, r24
    2092:	70 f3       	brcs	.-36     	; 0x2070 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x194>
    2094:	05 c0       	rjmp	.+10     	; 0x20a0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1c4>
    2096:	f3 b0       	in	r15, 0x03	; 3
    2098:	96 b0       	in	r9, 0x06	; 6
    209a:	79 b0       	in	r7, 0x09	; 9
    209c:	10 e0       	ldi	r17, 0x00	; 0
    209e:	d8 cf       	rjmp	.-80     	; 0x2050 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	ed e0       	ldi	r30, 0x0D	; 13
    20a6:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__epilogue_restores__+0xa>

000020aa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    20aa:	ef 92       	push	r14
    20ac:	ff 92       	push	r15
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	fc 01       	movw	r30, r24
    20b8:	9b 01       	movw	r18, r22
    20ba:	00 91 7c 00 	lds	r16, 0x007C
    20be:	10 91 7a 00 	lds	r17, 0x007A
    20c2:	e7 b0       	in	r14, 0x07	; 7
    20c4:	f8 b0       	in	r15, 0x08	; 8
    20c6:	80 91 7a 00 	lds	r24, 0x007A
    20ca:	86 fd       	sbrc	r24, 6
    20cc:	fc cf       	rjmp	.-8      	; 0x20c6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	0a c0       	rjmp	.+20     	; 0x20e6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3c>
    20d2:	a8 2f       	mov	r26, r24
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	aa 0f       	add	r26, r26
    20d8:	bb 1f       	adc	r27, r27
    20da:	a2 0f       	add	r26, r18
    20dc:	b3 1f       	adc	r27, r19
    20de:	11 96       	adiw	r26, 0x01	; 1
    20e0:	1c 92       	st	X, r1
    20e2:	1e 92       	st	-X, r1
    20e4:	8f 5f       	subi	r24, 0xFF	; 255
    20e6:	90 85       	ldd	r25, Z+8	; 0x08
    20e8:	89 17       	cp	r24, r25
    20ea:	98 f3       	brcs	.-26     	; 0x20d2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x28>
    20ec:	97 b1       	in	r25, 0x07	; 7
    20ee:	82 a1       	ldd	r24, Z+34	; 0x22
    20f0:	80 95       	com	r24
    20f2:	89 23       	and	r24, r25
    20f4:	87 b9       	out	0x07, r24	; 7
    20f6:	98 b1       	in	r25, 0x08	; 8
    20f8:	82 a1       	ldd	r24, Z+34	; 0x22
    20fa:	80 95       	com	r24
    20fc:	89 23       	and	r24, r25
    20fe:	88 b9       	out	0x08, r24	; 8
    2100:	87 e8       	ldi	r24, 0x87	; 135
    2102:	80 93 7a 00 	sts	0x007A, r24
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	29 c0       	rjmp	.+82     	; 0x215c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    210a:	df 01       	movw	r26, r30
    210c:	a6 0f       	add	r26, r22
    210e:	b1 1d       	adc	r27, r1
    2110:	51 96       	adiw	r26, 0x11	; 17
    2112:	8c 91       	ld	r24, X
    2114:	51 97       	sbiw	r26, 0x11	; 17
    2116:	80 64       	ori	r24, 0x40	; 64
    2118:	80 93 7c 00 	sts	0x007C, r24
    211c:	80 91 7a 00 	lds	r24, 0x007A
    2120:	80 64       	ori	r24, 0x40	; 64
    2122:	80 93 7a 00 	sts	0x007A, r24
    2126:	80 91 7a 00 	lds	r24, 0x007A
    212a:	86 fd       	sbrc	r24, 6
    212c:	fc cf       	rjmp	.-8      	; 0x2126 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x7c>
    212e:	a6 2f       	mov	r26, r22
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	aa 0f       	add	r26, r26
    2134:	bb 1f       	adc	r27, r27
    2136:	a2 0f       	add	r26, r18
    2138:	b3 1f       	adc	r27, r19
    213a:	40 91 78 00 	lds	r20, 0x0078
    213e:	50 91 79 00 	lds	r21, 0x0079
    2142:	8d 91       	ld	r24, X+
    2144:	9c 91       	ld	r25, X
    2146:	11 97       	sbiw	r26, 0x01	; 1
    2148:	84 0f       	add	r24, r20
    214a:	95 1f       	adc	r25, r21
    214c:	11 96       	adiw	r26, 0x01	; 1
    214e:	9c 93       	st	X, r25
    2150:	8e 93       	st	-X, r24
    2152:	6f 5f       	subi	r22, 0xFF	; 255
    2154:	80 85       	ldd	r24, Z+8	; 0x08
    2156:	68 17       	cp	r22, r24
    2158:	c0 f2       	brcs	.-80     	; 0x210a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x60>
    215a:	7f 5f       	subi	r23, 0xFF	; 255
    215c:	81 a1       	ldd	r24, Z+33	; 0x21
    215e:	78 17       	cp	r23, r24
    2160:	10 f4       	brcc	.+4      	; 0x2166 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xbc>
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	f7 cf       	rjmp	.-18     	; 0x2154 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xaa>
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	14 c0       	rjmp	.+40     	; 0x2192 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe8>
    216a:	c4 2f       	mov	r28, r20
    216c:	d0 e0       	ldi	r29, 0x00	; 0
    216e:	cc 0f       	add	r28, r28
    2170:	dd 1f       	adc	r29, r29
    2172:	c2 0f       	add	r28, r18
    2174:	d3 1f       	adc	r29, r19
    2176:	61 a1       	ldd	r22, Z+33	; 0x21
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	cb 01       	movw	r24, r22
    217c:	95 95       	asr	r25
    217e:	87 95       	ror	r24
    2180:	a8 81       	ld	r26, Y
    2182:	b9 81       	ldd	r27, Y+1	; 0x01
    2184:	8a 0f       	add	r24, r26
    2186:	9b 1f       	adc	r25, r27
    2188:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__udivmodhi4>
    218c:	79 83       	std	Y+1, r23	; 0x01
    218e:	68 83       	st	Y, r22
    2190:	4f 5f       	subi	r20, 0xFF	; 255
    2192:	80 85       	ldd	r24, Z+8	; 0x08
    2194:	48 17       	cp	r20, r24
    2196:	48 f3       	brcs	.-46     	; 0x216a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xc0>
    2198:	00 93 7c 00 	sts	0x007C, r16
    219c:	10 93 7a 00 	sts	0x007A, r17
    21a0:	f8 b8       	out	0x08, r15	; 8
    21a2:	e7 b8       	out	0x07, r14	; 7
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	e6 e0       	ldi	r30, 0x06	; 6
    21aa:	0c 94 96 14 	jmp	0x292c	; 0x292c <__epilogue_restores__+0x18>

000021ae <_ZN16PololuQTRSensors4readEPjh>:
    21ae:	a0 e2       	ldi	r26, 0x20	; 32
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	ed ed       	ldi	r30, 0xDD	; 221
    21b4:	f0 e1       	ldi	r31, 0x10	; 16
    21b6:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__prologue_saves__+0x16>
    21ba:	8c 01       	movw	r16, r24
    21bc:	7b 01       	movw	r14, r22
    21be:	d4 2e       	mov	r13, r20
    21c0:	84 2f       	mov	r24, r20
    21c2:	81 50       	subi	r24, 0x01	; 1
    21c4:	82 30       	cpi	r24, 0x02	; 2
    21c6:	18 f4       	brcc	.+6      	; 0x21ce <_ZN16PololuQTRSensors4readEPjh+0x20>
    21c8:	c8 01       	movw	r24, r16
    21ca:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <_ZN16PololuQTRSensors10emittersOnEv>
    21ce:	d8 01       	movw	r26, r16
    21d0:	50 96       	adiw	r26, 0x10	; 16
    21d2:	8c 91       	ld	r24, X
    21d4:	50 97       	sbiw	r26, 0x10	; 16
    21d6:	88 23       	and	r24, r24
    21d8:	89 f4       	brne	.+34     	; 0x21fc <_ZN16PololuQTRSensors4readEPjh+0x4e>
    21da:	c8 01       	movw	r24, r16
    21dc:	b7 01       	movw	r22, r14
    21de:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    21e2:	c8 01       	movw	r24, r16
    21e4:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <_ZN16PololuQTRSensors11emittersOffEv>
    21e8:	bd 2d       	mov	r27, r13
    21ea:	b2 30       	cpi	r27, 0x02	; 2
    21ec:	d9 f5       	brne	.+118    	; 0x2264 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    21ee:	c8 01       	movw	r24, r16
    21f0:	be 01       	movw	r22, r28
    21f2:	6f 5f       	subi	r22, 0xFF	; 255
    21f4:	7f 4f       	sbci	r23, 0xFF	; 255
    21f6:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    21fa:	10 c0       	rjmp	.+32     	; 0x221c <_ZN16PololuQTRSensors4readEPjh+0x6e>
    21fc:	c8 01       	movw	r24, r16
    21fe:	b7 01       	movw	r22, r14
    2200:	0e 94 55 10 	call	0x20aa	; 0x20aa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2204:	c8 01       	movw	r24, r16
    2206:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <_ZN16PololuQTRSensors11emittersOffEv>
    220a:	ed 2d       	mov	r30, r13
    220c:	e2 30       	cpi	r30, 0x02	; 2
    220e:	51 f5       	brne	.+84     	; 0x2264 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    2210:	c8 01       	movw	r24, r16
    2212:	be 01       	movw	r22, r28
    2214:	6f 5f       	subi	r22, 0xFF	; 255
    2216:	7f 4f       	sbci	r23, 0xFF	; 255
    2218:	0e 94 55 10 	call	0x20aa	; 0x20aa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	ae 01       	movw	r20, r28
    2220:	4f 5f       	subi	r20, 0xFF	; 255
    2222:	5f 4f       	sbci	r21, 0xFF	; 255
    2224:	1b c0       	rjmp	.+54     	; 0x225c <_ZN16PololuQTRSensors4readEPjh+0xae>
    2226:	86 2f       	mov	r24, r22
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	f7 01       	movw	r30, r14
    2230:	e8 0f       	add	r30, r24
    2232:	f9 1f       	adc	r31, r25
    2234:	84 0f       	add	r24, r20
    2236:	95 1f       	adc	r25, r21
    2238:	d8 01       	movw	r26, r16
    223a:	1e 96       	adiw	r26, 0x0e	; 14
    223c:	2d 91       	ld	r18, X+
    223e:	3c 91       	ld	r19, X
    2240:	1f 97       	sbiw	r26, 0x0f	; 15
    2242:	dc 01       	movw	r26, r24
    2244:	8d 91       	ld	r24, X+
    2246:	9c 91       	ld	r25, X
    2248:	11 97       	sbiw	r26, 0x01	; 1
    224a:	28 1b       	sub	r18, r24
    224c:	39 0b       	sbc	r19, r25
    224e:	80 81       	ld	r24, Z
    2250:	91 81       	ldd	r25, Z+1	; 0x01
    2252:	82 0f       	add	r24, r18
    2254:	93 1f       	adc	r25, r19
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	80 83       	st	Z, r24
    225a:	6f 5f       	subi	r22, 0xFF	; 255
    225c:	f8 01       	movw	r30, r16
    225e:	80 85       	ldd	r24, Z+8	; 0x08
    2260:	68 17       	cp	r22, r24
    2262:	08 f3       	brcs	.-62     	; 0x2226 <_ZN16PololuQTRSensors4readEPjh+0x78>
    2264:	a0 96       	adiw	r28, 0x20	; 32
    2266:	e7 e0       	ldi	r30, 0x07	; 7
    2268:	0c 94 95 14 	jmp	0x292a	; 0x292a <__epilogue_restores__+0x16>

0000226c <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    226c:	8f 92       	push	r8
    226e:	9f 92       	push	r9
    2270:	af 92       	push	r10
    2272:	bf 92       	push	r11
    2274:	cf 92       	push	r12
    2276:	df 92       	push	r13
    2278:	ff 92       	push	r15
    227a:	0f 93       	push	r16
    227c:	1f 93       	push	r17
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	ec 01       	movw	r28, r24
    2284:	c6 2e       	mov	r12, r22
    2286:	07 2f       	mov	r16, r23
    2288:	f4 2e       	mov	r15, r20
    228a:	42 30       	cpi	r20, 0x02	; 2
    228c:	11 f0       	breq	.+4      	; 0x2292 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x26>
    228e:	ff 20       	and	r15, r15
    2290:	51 f4       	brne	.+20     	; 0x22a6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    2292:	8c 81       	ldd	r24, Y+4	; 0x04
    2294:	9d 81       	ldd	r25, Y+5	; 0x05
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	09 f4       	brne	.+2      	; 0x229c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x30>
    229a:	a0 c0       	rjmp	.+320    	; 0x23dc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    229c:	8e 81       	ldd	r24, Y+6	; 0x06
    229e:	9f 81       	ldd	r25, Y+7	; 0x07
    22a0:	00 97       	sbiw	r24, 0x00	; 0
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    22a4:	9b c0       	rjmp	.+310    	; 0x23dc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    22a6:	8f 2d       	mov	r24, r15
    22a8:	81 50       	subi	r24, 0x01	; 1
    22aa:	82 30       	cpi	r24, 0x02	; 2
    22ac:	50 f4       	brcc	.+20     	; 0x22c2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    22ae:	88 81       	ld	r24, Y
    22b0:	99 81       	ldd	r25, Y+1	; 0x01
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x4c>
    22b6:	92 c0       	rjmp	.+292    	; 0x23dc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	9b 81       	ldd	r25, Y+3	; 0x03
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	09 f4       	brne	.+2      	; 0x22c2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    22c0:	8d c0       	rjmp	.+282    	; 0x23dc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    22c2:	ce 01       	movw	r24, r28
    22c4:	6c 2d       	mov	r22, r12
    22c6:	70 2f       	mov	r23, r16
    22c8:	4f 2d       	mov	r20, r15
    22ca:	0e 94 d7 10 	call	0x21ae	; 0x21ae <_ZN16PololuQTRSensors4readEPjh>
    22ce:	ac 2c       	mov	r10, r12
    22d0:	b0 2e       	mov	r11, r16
    22d2:	00 e0       	ldi	r16, 0x00	; 0
    22d4:	10 e0       	ldi	r17, 0x00	; 0
    22d6:	88 24       	eor	r8, r8
    22d8:	99 24       	eor	r9, r9
    22da:	7a c0       	rjmp	.+244    	; 0x23d0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x164>
    22dc:	8f 2d       	mov	r24, r15
    22de:	81 30       	cpi	r24, 0x01	; 1
    22e0:	59 f4       	brne	.+22     	; 0x22f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x8c>
    22e2:	ea 81       	ldd	r30, Y+2	; 0x02
    22e4:	fb 81       	ldd	r31, Y+3	; 0x03
    22e6:	e0 0f       	add	r30, r16
    22e8:	f1 1f       	adc	r31, r17
    22ea:	c0 80       	ld	r12, Z
    22ec:	d1 80       	ldd	r13, Z+1	; 0x01
    22ee:	e8 81       	ld	r30, Y
    22f0:	f9 81       	ldd	r31, Y+1	; 0x01
    22f2:	e0 0f       	add	r30, r16
    22f4:	f1 1f       	adc	r31, r17
    22f6:	0d c0       	rjmp	.+26     	; 0x2312 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    22f8:	8c 81       	ldd	r24, Y+4	; 0x04
    22fa:	9d 81       	ldd	r25, Y+5	; 0x05
    22fc:	ff 20       	and	r15, r15
    22fe:	61 f4       	brne	.+24     	; 0x2318 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xac>
    2300:	ee 81       	ldd	r30, Y+6	; 0x06
    2302:	ff 81       	ldd	r31, Y+7	; 0x07
    2304:	e0 0f       	add	r30, r16
    2306:	f1 1f       	adc	r31, r17
    2308:	c0 80       	ld	r12, Z
    230a:	d1 80       	ldd	r13, Z+1	; 0x01
    230c:	80 0f       	add	r24, r16
    230e:	91 1f       	adc	r25, r17
    2310:	fc 01       	movw	r30, r24
    2312:	40 81       	ld	r20, Z
    2314:	51 81       	ldd	r21, Z+1	; 0x01
    2316:	2b c0       	rjmp	.+86     	; 0x236e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    2318:	80 0f       	add	r24, r16
    231a:	91 1f       	adc	r25, r17
    231c:	fc 01       	movw	r30, r24
    231e:	80 81       	ld	r24, Z
    2320:	91 81       	ldd	r25, Z+1	; 0x01
    2322:	e8 81       	ld	r30, Y
    2324:	f9 81       	ldd	r31, Y+1	; 0x01
    2326:	e0 0f       	add	r30, r16
    2328:	f1 1f       	adc	r31, r17
    232a:	40 81       	ld	r20, Z
    232c:	51 81       	ldd	r21, Z+1	; 0x01
    232e:	ce 84       	ldd	r12, Y+14	; 0x0e
    2330:	df 84       	ldd	r13, Y+15	; 0x0f
    2332:	84 17       	cp	r24, r20
    2334:	95 07       	cpc	r25, r21
    2336:	10 f4       	brcc	.+4      	; 0x233c <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd0>
    2338:	a6 01       	movw	r20, r12
    233a:	04 c0       	rjmp	.+8      	; 0x2344 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd8>
    233c:	4c 0d       	add	r20, r12
    233e:	5d 1d       	adc	r21, r13
    2340:	48 1b       	sub	r20, r24
    2342:	59 0b       	sbc	r21, r25
    2344:	ee 81       	ldd	r30, Y+6	; 0x06
    2346:	ff 81       	ldd	r31, Y+7	; 0x07
    2348:	e0 0f       	add	r30, r16
    234a:	f1 1f       	adc	r31, r17
    234c:	80 81       	ld	r24, Z
    234e:	91 81       	ldd	r25, Z+1	; 0x01
    2350:	ea 81       	ldd	r30, Y+2	; 0x02
    2352:	fb 81       	ldd	r31, Y+3	; 0x03
    2354:	e0 0f       	add	r30, r16
    2356:	f1 1f       	adc	r31, r17
    2358:	20 81       	ld	r18, Z
    235a:	31 81       	ldd	r19, Z+1	; 0x01
    235c:	ce 84       	ldd	r12, Y+14	; 0x0e
    235e:	df 84       	ldd	r13, Y+15	; 0x0f
    2360:	82 17       	cp	r24, r18
    2362:	93 07       	cpc	r25, r19
    2364:	20 f0       	brcs	.+8      	; 0x236e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    2366:	c2 0e       	add	r12, r18
    2368:	d3 1e       	adc	r13, r19
    236a:	c8 1a       	sub	r12, r24
    236c:	d9 0a       	sbc	r13, r25
    236e:	c4 1a       	sub	r12, r20
    2370:	d5 0a       	sbc	r13, r21
    2372:	d1 f0       	breq	.+52     	; 0x23a8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2374:	f5 01       	movw	r30, r10
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	9a 01       	movw	r18, r20
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	62 1b       	sub	r22, r18
    2386:	73 0b       	sbc	r23, r19
    2388:	84 0b       	sbc	r24, r20
    238a:	95 0b       	sbc	r25, r21
    238c:	28 ee       	ldi	r18, 0xE8	; 232
    238e:	33 e0       	ldi	r19, 0x03	; 3
    2390:	40 e0       	ldi	r20, 0x00	; 0
    2392:	50 e0       	ldi	r21, 0x00	; 0
    2394:	0e 94 de 13 	call	0x27bc	; 0x27bc <__mulsi3>
    2398:	96 01       	movw	r18, r12
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	50 e0       	ldi	r21, 0x00	; 0
    239e:	0e 94 44 14 	call	0x2888	; 0x2888 <__divmodsi4>
    23a2:	37 fd       	sbrc	r19, 7
    23a4:	0a c0       	rjmp	.+20     	; 0x23ba <_ZN16PololuQTRSensors14readCalibratedEPjh+0x14e>
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <_ZN16PololuQTRSensors14readCalibratedEPjh+0x140>
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	f3 e0       	ldi	r31, 0x03	; 3
    23ae:	29 3e       	cpi	r18, 0xE9	; 233
    23b0:	3f 07       	cpc	r19, r31
    23b2:	2c f0       	brlt	.+10     	; 0x23be <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    23b4:	28 ee       	ldi	r18, 0xE8	; 232
    23b6:	33 e0       	ldi	r19, 0x03	; 3
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	f5 01       	movw	r30, r10
    23c0:	21 93       	st	Z+, r18
    23c2:	31 93       	st	Z+, r19
    23c4:	5f 01       	movw	r10, r30
    23c6:	08 94       	sec
    23c8:	81 1c       	adc	r8, r1
    23ca:	91 1c       	adc	r9, r1
    23cc:	0e 5f       	subi	r16, 0xFE	; 254
    23ce:	1f 4f       	sbci	r17, 0xFF	; 255
    23d0:	88 85       	ldd	r24, Y+8	; 0x08
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	88 16       	cp	r8, r24
    23d6:	99 06       	cpc	r9, r25
    23d8:	0c f4       	brge	.+2      	; 0x23dc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    23da:	80 cf       	rjmp	.-256    	; 0x22dc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x70>
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	1f 91       	pop	r17
    23e2:	0f 91       	pop	r16
    23e4:	ff 90       	pop	r15
    23e6:	df 90       	pop	r13
    23e8:	cf 90       	pop	r12
    23ea:	bf 90       	pop	r11
    23ec:	af 90       	pop	r10
    23ee:	9f 90       	pop	r9
    23f0:	8f 90       	pop	r8
    23f2:	08 95       	ret

000023f4 <_ZN16PololuQTRSensors8readLineEPjhh>:
    23f4:	a5 e0       	ldi	r26, 0x05	; 5
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e0 e0       	ldi	r30, 0x00	; 0
    23fa:	f2 e1       	ldi	r31, 0x12	; 18
    23fc:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__prologue_saves__>
    2400:	4c 01       	movw	r8, r24
    2402:	c6 2e       	mov	r12, r22
    2404:	e7 2e       	mov	r14, r23
    2406:	2d 83       	std	Y+5, r18	; 0x05
    2408:	0e 94 36 11 	call	0x226c	; 0x226c <_ZN16PololuQTRSensors14readCalibratedEPjh>
    240c:	d4 01       	movw	r26, r8
    240e:	18 96       	adiw	r26, 0x08	; 8
    2410:	4c 90       	ld	r4, X
    2412:	18 97       	sbiw	r26, 0x08	; 8
    2414:	de 2c       	mov	r13, r14
    2416:	64 2d       	mov	r22, r4
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	28 ee       	ldi	r18, 0xE8	; 232
    2420:	33 e0       	ldi	r19, 0x03	; 3
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	0e 94 de 13 	call	0x27bc	; 0x27bc <__mulsi3>
    242a:	69 83       	std	Y+1, r22	; 0x01
    242c:	7a 83       	std	Y+2, r23	; 0x02
    242e:	8b 83       	std	Y+3, r24	; 0x03
    2430:	9c 83       	std	Y+4, r25	; 0x04
    2432:	ee 24       	eor	r14, r14
    2434:	ff 24       	eor	r15, r15
    2436:	87 01       	movw	r16, r14
    2438:	66 24       	eor	r6, r6
    243a:	77 24       	eor	r7, r7
    243c:	88 24       	eor	r8, r8
    243e:	99 24       	eor	r9, r9
    2440:	54 01       	movw	r10, r8
    2442:	55 24       	eor	r5, r5
    2444:	36 c0       	rjmp	.+108    	; 0x24b2 <_ZN16PololuQTRSensors8readLineEPjhh+0xbe>
    2446:	f6 01       	movw	r30, r12
    2448:	30 81       	ld	r19, Z
    244a:	21 81       	ldd	r18, Z+1	; 0x01
    244c:	42 e0       	ldi	r20, 0x02	; 2
    244e:	24 2e       	mov	r2, r20
    2450:	31 2c       	mov	r3, r1
    2452:	c2 0c       	add	r12, r2
    2454:	d3 1c       	adc	r13, r3
    2456:	c9 01       	movw	r24, r18
    2458:	49 2f       	mov	r20, r25
    245a:	58 2f       	mov	r21, r24
    245c:	1a 01       	movw	r2, r20
    245e:	2d 81       	ldd	r18, Y+5	; 0x05
    2460:	22 23       	and	r18, r18
    2462:	29 f0       	breq	.+10     	; 0x246e <_ZN16PololuQTRSensors8readLineEPjhh+0x7a>
    2464:	88 ee       	ldi	r24, 0xE8	; 232
    2466:	93 e0       	ldi	r25, 0x03	; 3
    2468:	82 19       	sub	r24, r2
    246a:	93 09       	sbc	r25, r3
    246c:	1c 01       	movw	r2, r24
    246e:	99 ec       	ldi	r25, 0xC9	; 201
    2470:	29 16       	cp	r2, r25
    2472:	31 04       	cpc	r3, r1
    2474:	2c f4       	brge	.+10     	; 0x2480 <_ZN16PololuQTRSensors8readLineEPjhh+0x8c>
    2476:	a3 e3       	ldi	r26, 0x33	; 51
    2478:	2a 16       	cp	r2, r26
    247a:	31 04       	cpc	r3, r1
    247c:	94 f0       	brlt	.+36     	; 0x24a2 <_ZN16PololuQTRSensors8readLineEPjhh+0xae>
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <_ZN16PololuQTRSensors8readLineEPjhh+0x90>
    2480:	55 24       	eor	r5, r5
    2482:	53 94       	inc	r5
    2484:	b1 01       	movw	r22, r2
    2486:	88 27       	eor	r24, r24
    2488:	77 fd       	sbrc	r23, 7
    248a:	80 95       	com	r24
    248c:	98 2f       	mov	r25, r24
    248e:	a8 01       	movw	r20, r16
    2490:	97 01       	movw	r18, r14
    2492:	0e 94 de 13 	call	0x27bc	; 0x27bc <__mulsi3>
    2496:	86 0e       	add	r8, r22
    2498:	97 1e       	adc	r9, r23
    249a:	a8 1e       	adc	r10, r24
    249c:	b9 1e       	adc	r11, r25
    249e:	62 0c       	add	r6, r2
    24a0:	73 1c       	adc	r7, r3
    24a2:	88 ee       	ldi	r24, 0xE8	; 232
    24a4:	93 e0       	ldi	r25, 0x03	; 3
    24a6:	a0 e0       	ldi	r26, 0x00	; 0
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	e8 0e       	add	r14, r24
    24ac:	f9 1e       	adc	r15, r25
    24ae:	0a 1f       	adc	r16, r26
    24b0:	1b 1f       	adc	r17, r27
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	9a 81       	ldd	r25, Y+2	; 0x02
    24b6:	ab 81       	ldd	r26, Y+3	; 0x03
    24b8:	bc 81       	ldd	r27, Y+4	; 0x04
    24ba:	e8 16       	cp	r14, r24
    24bc:	f9 06       	cpc	r15, r25
    24be:	0a 07       	cpc	r16, r26
    24c0:	1b 07       	cpc	r17, r27
    24c2:	09 f6       	brne	.-126    	; 0x2446 <_ZN16PololuQTRSensors8readLineEPjhh+0x52>
    24c4:	55 20       	and	r5, r5
    24c6:	f1 f4       	brne	.+60     	; 0x2504 <_ZN16PololuQTRSensors8readLineEPjhh+0x110>
    24c8:	55 24       	eor	r5, r5
    24ca:	08 94       	sec
    24cc:	41 08       	sbc	r4, r1
    24ce:	51 08       	sbc	r5, r1
    24d0:	24 ef       	ldi	r18, 0xF4	; 244
    24d2:	31 e0       	ldi	r19, 0x01	; 1
    24d4:	42 9e       	mul	r4, r18
    24d6:	c0 01       	movw	r24, r0
    24d8:	43 9e       	mul	r4, r19
    24da:	90 0d       	add	r25, r0
    24dc:	52 9e       	mul	r5, r18
    24de:	90 0d       	add	r25, r0
    24e0:	11 24       	eor	r1, r1
    24e2:	20 91 b9 01 	lds	r18, 0x01B9
    24e6:	30 91 ba 01 	lds	r19, 0x01BA
    24ea:	28 17       	cp	r18, r24
    24ec:	39 07       	cpc	r19, r25
    24ee:	b4 f0       	brlt	.+44     	; 0x251c <_ZN16PololuQTRSensors8readLineEPjhh+0x128>
    24f0:	88 ee       	ldi	r24, 0xE8	; 232
    24f2:	93 e0       	ldi	r25, 0x03	; 3
    24f4:	48 9e       	mul	r4, r24
    24f6:	90 01       	movw	r18, r0
    24f8:	49 9e       	mul	r4, r25
    24fa:	30 0d       	add	r19, r0
    24fc:	58 9e       	mul	r5, r24
    24fe:	30 0d       	add	r19, r0
    2500:	11 24       	eor	r1, r1
    2502:	0e c0       	rjmp	.+28     	; 0x2520 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    2504:	93 01       	movw	r18, r6
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	50 e0       	ldi	r21, 0x00	; 0
    250a:	c5 01       	movw	r24, r10
    250c:	b4 01       	movw	r22, r8
    250e:	0e 94 22 14 	call	0x2844	; 0x2844 <__udivmodsi4>
    2512:	20 93 b9 01 	sts	0x01B9, r18
    2516:	30 93 ba 01 	sts	0x01BA, r19
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	c9 01       	movw	r24, r18
    2522:	25 96       	adiw	r28, 0x05	; 5
    2524:	e2 e1       	ldi	r30, 0x12	; 18
    2526:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__epilogue_restores__>

0000252a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    252a:	a7 e6       	ldi	r26, 0x67	; 103
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	eb e9       	ldi	r30, 0x9B	; 155
    2530:	f2 e1       	ldi	r31, 0x12	; 18
    2532:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__prologue_saves__>
    2536:	8c 01       	movw	r16, r24
    2538:	4b 01       	movw	r8, r22
    253a:	6a 01       	movw	r12, r20
    253c:	a6 96       	adiw	r28, 0x26	; 38
    253e:	2f af       	std	Y+63, r18	; 0x3f
    2540:	a6 97       	sbiw	r28, 0x26	; 38
    2542:	da 01       	movw	r26, r20
    2544:	8d 91       	ld	r24, X+
    2546:	9c 91       	ld	r25, X
    2548:	11 97       	sbiw	r26, 0x01	; 1
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	e9 f4       	brne	.+58     	; 0x2588 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x5e>
    254e:	f8 01       	movw	r30, r16
    2550:	80 85       	ldd	r24, Z+8	; 0x08
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	88 0f       	add	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	0e 94 ba 14 	call	0x2974	; 0x2974 <malloc>
    255c:	d6 01       	movw	r26, r12
    255e:	11 96       	adiw	r26, 0x01	; 1
    2560:	9c 93       	st	X, r25
    2562:	8e 93       	st	-X, r24
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	09 f4       	brne	.+2      	; 0x256a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x40>
    2568:	e2 c0       	rjmp	.+452    	; 0x272e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    256a:	fc 01       	movw	r30, r24
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	03 c0       	rjmp	.+6      	; 0x2578 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x4e>
    2572:	11 92       	st	Z+, r1
    2574:	11 92       	st	Z+, r1
    2576:	01 96       	adiw	r24, 0x01	; 1
    2578:	d8 01       	movw	r26, r16
    257a:	18 96       	adiw	r26, 0x08	; 8
    257c:	2c 91       	ld	r18, X
    257e:	18 97       	sbiw	r26, 0x08	; 8
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	82 17       	cp	r24, r18
    2584:	93 07       	cpc	r25, r19
    2586:	ac f3       	brlt	.-22     	; 0x2572 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x48>
    2588:	f4 01       	movw	r30, r8
    258a:	80 81       	ld	r24, Z
    258c:	91 81       	ldd	r25, Z+1	; 0x01
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	89 f0       	breq	.+34     	; 0x25b4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8a>
    2592:	ee 24       	eor	r14, r14
    2594:	ff 24       	eor	r15, r15
    2596:	5e 01       	movw	r10, r28
    2598:	08 94       	sec
    259a:	a1 1c       	adc	r10, r1
    259c:	b1 1c       	adc	r11, r1
    259e:	b1 e4       	ldi	r27, 0x41	; 65
    25a0:	6b 2e       	mov	r6, r27
    25a2:	71 2c       	mov	r7, r1
    25a4:	6c 0e       	add	r6, r28
    25a6:	7d 1e       	adc	r7, r29
    25a8:	a1 e2       	ldi	r26, 0x21	; 33
    25aa:	4a 2e       	mov	r4, r26
    25ac:	51 2c       	mov	r5, r1
    25ae:	4c 0e       	add	r4, r28
    25b0:	5d 1e       	adc	r5, r29
    25b2:	23 c0       	rjmp	.+70     	; 0x25fa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    25b4:	d8 01       	movw	r26, r16
    25b6:	18 96       	adiw	r26, 0x08	; 8
    25b8:	8c 91       	ld	r24, X
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	0e 94 ba 14 	call	0x2974	; 0x2974 <malloc>
    25c4:	f4 01       	movw	r30, r8
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	80 83       	st	Z, r24
    25ca:	00 97       	sbiw	r24, 0x00	; 0
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xa6>
    25ce:	af c0       	rjmp	.+350    	; 0x272e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    25d0:	fc 01       	movw	r30, r24
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	d8 01       	movw	r26, r16
    25d8:	07 c0       	rjmp	.+14     	; 0x25e8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xbe>
    25da:	1e 96       	adiw	r26, 0x0e	; 14
    25dc:	2d 91       	ld	r18, X+
    25de:	3c 91       	ld	r19, X
    25e0:	1f 97       	sbiw	r26, 0x0f	; 15
    25e2:	21 93       	st	Z+, r18
    25e4:	31 93       	st	Z+, r19
    25e6:	01 96       	adiw	r24, 0x01	; 1
    25e8:	18 96       	adiw	r26, 0x08	; 8
    25ea:	2c 91       	ld	r18, X
    25ec:	18 97       	sbiw	r26, 0x08	; 8
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	82 17       	cp	r24, r18
    25f2:	93 07       	cpc	r25, r19
    25f4:	94 f3       	brlt	.-28     	; 0x25da <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb0>
    25f6:	8d 01       	movw	r16, r26
    25f8:	cc cf       	rjmp	.-104    	; 0x2592 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x68>
    25fa:	c8 01       	movw	r24, r16
    25fc:	b5 01       	movw	r22, r10
    25fe:	a6 96       	adiw	r28, 0x26	; 38
    2600:	4f ad       	ldd	r20, Y+63	; 0x3f
    2602:	a6 97       	sbiw	r28, 0x26	; 38
    2604:	0e 94 d7 10 	call	0x21ae	; 0x21ae <_ZN16PololuQTRSensors4readEPjh>
    2608:	d8 01       	movw	r26, r16
    260a:	18 96       	adiw	r26, 0x08	; 8
    260c:	8c 91       	ld	r24, X
    260e:	18 97       	sbiw	r26, 0x08	; 8
    2610:	e8 2f       	mov	r30, r24
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	a5 96       	adiw	r28, 0x25	; 37
    2616:	ff af       	std	Y+63, r31	; 0x3f
    2618:	ee af       	std	Y+62, r30	; 0x3e
    261a:	a5 97       	sbiw	r28, 0x25	; 37
    261c:	13 01       	movw	r2, r6
    261e:	f5 01       	movw	r30, r10
    2620:	a3 96       	adiw	r28, 0x23	; 35
    2622:	5f ae       	std	Y+63, r5	; 0x3f
    2624:	4e ae       	std	Y+62, r4	; 0x3e
    2626:	a3 97       	sbiw	r28, 0x23	; 35
    2628:	93 01       	movw	r18, r6
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	50 e0       	ldi	r21, 0x00	; 0
    262e:	a8 96       	adiw	r28, 0x28	; 40
    2630:	5f ae       	std	Y+63, r5	; 0x3f
    2632:	4e ae       	std	Y+62, r4	; 0x3e
    2634:	a8 97       	sbiw	r28, 0x28	; 40
    2636:	37 c0       	rjmp	.+110    	; 0x26a6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17c>
    2638:	e1 14       	cp	r14, r1
    263a:	f1 04       	cpc	r15, r1
    263c:	61 f0       	breq	.+24     	; 0x2656 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x12c>
    263e:	a8 96       	adiw	r28, 0x28	; 40
    2640:	ae ad       	ldd	r26, Y+62	; 0x3e
    2642:	bf ad       	ldd	r27, Y+63	; 0x3f
    2644:	a8 97       	sbiw	r28, 0x28	; 40
    2646:	6d 91       	ld	r22, X+
    2648:	7c 91       	ld	r23, X
    264a:	11 97       	sbiw	r26, 0x01	; 1
    264c:	80 81       	ld	r24, Z
    264e:	91 81       	ldd	r25, Z+1	; 0x01
    2650:	68 17       	cp	r22, r24
    2652:	79 07       	cpc	r23, r25
    2654:	60 f4       	brcc	.+24     	; 0x266e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x144>
    2656:	80 81       	ld	r24, Z
    2658:	91 81       	ldd	r25, Z+1	; 0x01
    265a:	a8 96       	adiw	r28, 0x28	; 40
    265c:	ae ad       	ldd	r26, Y+62	; 0x3e
    265e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2660:	a8 97       	sbiw	r28, 0x28	; 40
    2662:	11 96       	adiw	r26, 0x01	; 1
    2664:	9c 93       	st	X, r25
    2666:	8e 93       	st	-X, r24
    2668:	e1 14       	cp	r14, r1
    266a:	f1 04       	cpc	r15, r1
    266c:	49 f0       	breq	.+18     	; 0x2680 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x156>
    266e:	d9 01       	movw	r26, r18
    2670:	6d 91       	ld	r22, X+
    2672:	7c 91       	ld	r23, X
    2674:	11 97       	sbiw	r26, 0x01	; 1
    2676:	80 81       	ld	r24, Z
    2678:	91 81       	ldd	r25, Z+1	; 0x01
    267a:	86 17       	cp	r24, r22
    267c:	97 07       	cpc	r25, r23
    267e:	28 f4       	brcc	.+10     	; 0x268a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x160>
    2680:	80 81       	ld	r24, Z
    2682:	91 81       	ldd	r25, Z+1	; 0x01
    2684:	d9 01       	movw	r26, r18
    2686:	8d 93       	st	X+, r24
    2688:	9c 93       	st	X, r25
    268a:	4f 5f       	subi	r20, 0xFF	; 255
    268c:	5f 4f       	sbci	r21, 0xFF	; 255
    268e:	2e 5f       	subi	r18, 0xFE	; 254
    2690:	3f 4f       	sbci	r19, 0xFF	; 255
    2692:	32 96       	adiw	r30, 0x02	; 2
    2694:	a8 96       	adiw	r28, 0x28	; 40
    2696:	8e ad       	ldd	r24, Y+62	; 0x3e
    2698:	9f ad       	ldd	r25, Y+63	; 0x3f
    269a:	a8 97       	sbiw	r28, 0x28	; 40
    269c:	02 96       	adiw	r24, 0x02	; 2
    269e:	a8 96       	adiw	r28, 0x28	; 40
    26a0:	9f af       	std	Y+63, r25	; 0x3f
    26a2:	8e af       	std	Y+62, r24	; 0x3e
    26a4:	a8 97       	sbiw	r28, 0x28	; 40
    26a6:	a5 96       	adiw	r28, 0x25	; 37
    26a8:	ae ad       	ldd	r26, Y+62	; 0x3e
    26aa:	bf ad       	ldd	r27, Y+63	; 0x3f
    26ac:	a5 97       	sbiw	r28, 0x25	; 37
    26ae:	4a 17       	cp	r20, r26
    26b0:	5b 07       	cpc	r21, r27
    26b2:	14 f2       	brlt	.-124    	; 0x2638 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x10e>
    26b4:	08 94       	sec
    26b6:	e1 1c       	adc	r14, r1
    26b8:	f1 1c       	adc	r15, r1
    26ba:	ba e0       	ldi	r27, 0x0A	; 10
    26bc:	eb 16       	cp	r14, r27
    26be:	f1 04       	cpc	r15, r1
    26c0:	09 f0       	breq	.+2      	; 0x26c4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x19a>
    26c2:	9b cf       	rjmp	.-202    	; 0x25fa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	2c c0       	rjmp	.+88     	; 0x2722 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f8>
    26ca:	f1 01       	movw	r30, r2
    26cc:	41 91       	ld	r20, Z+
    26ce:	51 91       	ld	r21, Z+
    26d0:	1f 01       	movw	r2, r30
    26d2:	bc 01       	movw	r22, r24
    26d4:	66 0f       	add	r22, r22
    26d6:	77 1f       	adc	r23, r23
    26d8:	d6 01       	movw	r26, r12
    26da:	ed 91       	ld	r30, X+
    26dc:	fc 91       	ld	r31, X
    26de:	11 97       	sbiw	r26, 0x01	; 1
    26e0:	e6 0f       	add	r30, r22
    26e2:	f7 1f       	adc	r31, r23
    26e4:	20 81       	ld	r18, Z
    26e6:	31 81       	ldd	r19, Z+1	; 0x01
    26e8:	24 17       	cp	r18, r20
    26ea:	35 07       	cpc	r19, r21
    26ec:	10 f4       	brcc	.+4      	; 0x26f2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1c8>
    26ee:	51 83       	std	Z+1, r21	; 0x01
    26f0:	40 83       	st	Z, r20
    26f2:	a3 96       	adiw	r28, 0x23	; 35
    26f4:	ee ad       	ldd	r30, Y+62	; 0x3e
    26f6:	ff ad       	ldd	r31, Y+63	; 0x3f
    26f8:	a3 97       	sbiw	r28, 0x23	; 35
    26fa:	41 91       	ld	r20, Z+
    26fc:	51 91       	ld	r21, Z+
    26fe:	a3 96       	adiw	r28, 0x23	; 35
    2700:	ff af       	std	Y+63, r31	; 0x3f
    2702:	ee af       	std	Y+62, r30	; 0x3e
    2704:	a3 97       	sbiw	r28, 0x23	; 35
    2706:	d4 01       	movw	r26, r8
    2708:	ed 91       	ld	r30, X+
    270a:	fc 91       	ld	r31, X
    270c:	11 97       	sbiw	r26, 0x01	; 1
    270e:	e6 0f       	add	r30, r22
    2710:	f7 1f       	adc	r31, r23
    2712:	20 81       	ld	r18, Z
    2714:	31 81       	ldd	r19, Z+1	; 0x01
    2716:	42 17       	cp	r20, r18
    2718:	53 07       	cpc	r21, r19
    271a:	10 f4       	brcc	.+4      	; 0x2720 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f6>
    271c:	51 83       	std	Z+1, r21	; 0x01
    271e:	40 83       	st	Z, r20
    2720:	01 96       	adiw	r24, 0x01	; 1
    2722:	f8 01       	movw	r30, r16
    2724:	20 85       	ldd	r18, Z+8	; 0x08
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	82 17       	cp	r24, r18
    272a:	93 07       	cpc	r25, r19
    272c:	74 f2       	brlt	.-100    	; 0x26ca <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1a0>
    272e:	c9 59       	subi	r28, 0x99	; 153
    2730:	df 4f       	sbci	r29, 0xFF	; 255
    2732:	e2 e1       	ldi	r30, 0x12	; 18
    2734:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__epilogue_restores__>

00002738 <_ZN16PololuQTRSensors9calibrateEh>:
    2738:	1f 93       	push	r17
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	ec 01       	movw	r28, r24
    2740:	16 2f       	mov	r17, r22
    2742:	86 2f       	mov	r24, r22
    2744:	81 50       	subi	r24, 0x01	; 1
    2746:	82 30       	cpi	r24, 0x02	; 2
    2748:	58 f4       	brcc	.+22     	; 0x2760 <_ZN16PololuQTRSensors9calibrateEh+0x28>
    274a:	ae 01       	movw	r20, r28
    274c:	4e 5f       	subi	r20, 0xFE	; 254
    274e:	5f 4f       	sbci	r21, 0xFF	; 255
    2750:	ce 01       	movw	r24, r28
    2752:	be 01       	movw	r22, r28
    2754:	21 e0       	ldi	r18, 0x01	; 1
    2756:	0e 94 95 12 	call	0x252a	; 0x252a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    275a:	12 30       	cpi	r17, 0x02	; 2
    275c:	19 f0       	breq	.+6      	; 0x2764 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    275e:	0c c0       	rjmp	.+24     	; 0x2778 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2760:	66 23       	and	r22, r22
    2762:	51 f4       	brne	.+20     	; 0x2778 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2764:	be 01       	movw	r22, r28
    2766:	6c 5f       	subi	r22, 0xFC	; 252
    2768:	7f 4f       	sbci	r23, 0xFF	; 255
    276a:	ae 01       	movw	r20, r28
    276c:	4a 5f       	subi	r20, 0xFA	; 250
    276e:	5f 4f       	sbci	r21, 0xFF	; 255
    2770:	ce 01       	movw	r24, r28
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	0e 94 95 12 	call	0x252a	; 0x252a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	1f 91       	pop	r17
    277e:	08 95       	ret

00002780 <_ZN16PololuQTRSensorsD1Ev>:
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
    2784:	ec 01       	movw	r28, r24
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	9b 81       	ldd	r25, Y+3	; 0x03
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	11 f0       	breq	.+4      	; 0x2792 <_ZN16PololuQTRSensorsD1Ev+0x12>
    278e:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <free>
    2792:	8e 81       	ldd	r24, Y+6	; 0x06
    2794:	9f 81       	ldd	r25, Y+7	; 0x07
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	11 f0       	breq	.+4      	; 0x279e <_ZN16PololuQTRSensorsD1Ev+0x1e>
    279a:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <free>
    279e:	88 81       	ld	r24, Y
    27a0:	99 81       	ldd	r25, Y+1	; 0x01
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	11 f0       	breq	.+4      	; 0x27aa <_ZN16PololuQTRSensorsD1Ev+0x2a>
    27a6:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <free>
    27aa:	8c 81       	ldd	r24, Y+4	; 0x04
    27ac:	9d 81       	ldd	r25, Y+5	; 0x05
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	11 f0       	breq	.+4      	; 0x27b6 <_ZN16PololuQTRSensorsD1Ev+0x36>
    27b2:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <free>
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	08 95       	ret

000027bc <__mulsi3>:
    27bc:	db 01       	movw	r26, r22
    27be:	8f 93       	push	r24
    27c0:	9f 93       	push	r25
    27c2:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__muluhisi3>
    27c6:	bf 91       	pop	r27
    27c8:	af 91       	pop	r26
    27ca:	a2 9f       	mul	r26, r18
    27cc:	80 0d       	add	r24, r0
    27ce:	91 1d       	adc	r25, r1
    27d0:	a3 9f       	mul	r26, r19
    27d2:	90 0d       	add	r25, r0
    27d4:	b2 9f       	mul	r27, r18
    27d6:	90 0d       	add	r25, r0
    27d8:	11 24       	eor	r1, r1
    27da:	08 95       	ret

000027dc <__udivmodqi4>:
    27dc:	99 1b       	sub	r25, r25
    27de:	79 e0       	ldi	r23, 0x09	; 9
    27e0:	04 c0       	rjmp	.+8      	; 0x27ea <__udivmodqi4_ep>

000027e2 <__udivmodqi4_loop>:
    27e2:	99 1f       	adc	r25, r25
    27e4:	96 17       	cp	r25, r22
    27e6:	08 f0       	brcs	.+2      	; 0x27ea <__udivmodqi4_ep>
    27e8:	96 1b       	sub	r25, r22

000027ea <__udivmodqi4_ep>:
    27ea:	88 1f       	adc	r24, r24
    27ec:	7a 95       	dec	r23
    27ee:	c9 f7       	brne	.-14     	; 0x27e2 <__udivmodqi4_loop>
    27f0:	80 95       	com	r24
    27f2:	08 95       	ret

000027f4 <__udivmodhi4>:
    27f4:	aa 1b       	sub	r26, r26
    27f6:	bb 1b       	sub	r27, r27
    27f8:	51 e1       	ldi	r21, 0x11	; 17
    27fa:	07 c0       	rjmp	.+14     	; 0x280a <__udivmodhi4_ep>

000027fc <__udivmodhi4_loop>:
    27fc:	aa 1f       	adc	r26, r26
    27fe:	bb 1f       	adc	r27, r27
    2800:	a6 17       	cp	r26, r22
    2802:	b7 07       	cpc	r27, r23
    2804:	10 f0       	brcs	.+4      	; 0x280a <__udivmodhi4_ep>
    2806:	a6 1b       	sub	r26, r22
    2808:	b7 0b       	sbc	r27, r23

0000280a <__udivmodhi4_ep>:
    280a:	88 1f       	adc	r24, r24
    280c:	99 1f       	adc	r25, r25
    280e:	5a 95       	dec	r21
    2810:	a9 f7       	brne	.-22     	; 0x27fc <__udivmodhi4_loop>
    2812:	80 95       	com	r24
    2814:	90 95       	com	r25
    2816:	bc 01       	movw	r22, r24
    2818:	cd 01       	movw	r24, r26
    281a:	08 95       	ret

0000281c <__divmodhi4>:
    281c:	97 fb       	bst	r25, 7
    281e:	07 2e       	mov	r0, r23
    2820:	16 f4       	brtc	.+4      	; 0x2826 <__divmodhi4+0xa>
    2822:	00 94       	com	r0
    2824:	07 d0       	rcall	.+14     	; 0x2834 <__divmodhi4_neg1>
    2826:	77 fd       	sbrc	r23, 7
    2828:	09 d0       	rcall	.+18     	; 0x283c <__divmodhi4_neg2>
    282a:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__udivmodhi4>
    282e:	07 fc       	sbrc	r0, 7
    2830:	05 d0       	rcall	.+10     	; 0x283c <__divmodhi4_neg2>
    2832:	3e f4       	brtc	.+14     	; 0x2842 <__divmodhi4_exit>

00002834 <__divmodhi4_neg1>:
    2834:	90 95       	com	r25
    2836:	81 95       	neg	r24
    2838:	9f 4f       	sbci	r25, 0xFF	; 255
    283a:	08 95       	ret

0000283c <__divmodhi4_neg2>:
    283c:	70 95       	com	r23
    283e:	61 95       	neg	r22
    2840:	7f 4f       	sbci	r23, 0xFF	; 255

00002842 <__divmodhi4_exit>:
    2842:	08 95       	ret

00002844 <__udivmodsi4>:
    2844:	a1 e2       	ldi	r26, 0x21	; 33
    2846:	1a 2e       	mov	r1, r26
    2848:	aa 1b       	sub	r26, r26
    284a:	bb 1b       	sub	r27, r27
    284c:	fd 01       	movw	r30, r26
    284e:	0d c0       	rjmp	.+26     	; 0x286a <__udivmodsi4_ep>

00002850 <__udivmodsi4_loop>:
    2850:	aa 1f       	adc	r26, r26
    2852:	bb 1f       	adc	r27, r27
    2854:	ee 1f       	adc	r30, r30
    2856:	ff 1f       	adc	r31, r31
    2858:	a2 17       	cp	r26, r18
    285a:	b3 07       	cpc	r27, r19
    285c:	e4 07       	cpc	r30, r20
    285e:	f5 07       	cpc	r31, r21
    2860:	20 f0       	brcs	.+8      	; 0x286a <__udivmodsi4_ep>
    2862:	a2 1b       	sub	r26, r18
    2864:	b3 0b       	sbc	r27, r19
    2866:	e4 0b       	sbc	r30, r20
    2868:	f5 0b       	sbc	r31, r21

0000286a <__udivmodsi4_ep>:
    286a:	66 1f       	adc	r22, r22
    286c:	77 1f       	adc	r23, r23
    286e:	88 1f       	adc	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	1a 94       	dec	r1
    2874:	69 f7       	brne	.-38     	; 0x2850 <__udivmodsi4_loop>
    2876:	60 95       	com	r22
    2878:	70 95       	com	r23
    287a:	80 95       	com	r24
    287c:	90 95       	com	r25
    287e:	9b 01       	movw	r18, r22
    2880:	ac 01       	movw	r20, r24
    2882:	bd 01       	movw	r22, r26
    2884:	cf 01       	movw	r24, r30
    2886:	08 95       	ret

00002888 <__divmodsi4>:
    2888:	05 2e       	mov	r0, r21
    288a:	97 fb       	bst	r25, 7
    288c:	1e f4       	brtc	.+6      	; 0x2894 <__divmodsi4+0xc>
    288e:	00 94       	com	r0
    2890:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__negsi2>
    2894:	57 fd       	sbrc	r21, 7
    2896:	07 d0       	rcall	.+14     	; 0x28a6 <__divmodsi4_neg2>
    2898:	0e 94 22 14 	call	0x2844	; 0x2844 <__udivmodsi4>
    289c:	07 fc       	sbrc	r0, 7
    289e:	03 d0       	rcall	.+6      	; 0x28a6 <__divmodsi4_neg2>
    28a0:	4e f4       	brtc	.+18     	; 0x28b4 <__divmodsi4_exit>
    28a2:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__negsi2>

000028a6 <__divmodsi4_neg2>:
    28a6:	50 95       	com	r21
    28a8:	40 95       	com	r20
    28aa:	30 95       	com	r19
    28ac:	21 95       	neg	r18
    28ae:	3f 4f       	sbci	r19, 0xFF	; 255
    28b0:	4f 4f       	sbci	r20, 0xFF	; 255
    28b2:	5f 4f       	sbci	r21, 0xFF	; 255

000028b4 <__divmodsi4_exit>:
    28b4:	08 95       	ret

000028b6 <__negsi2>:
    28b6:	90 95       	com	r25
    28b8:	80 95       	com	r24
    28ba:	70 95       	com	r23
    28bc:	61 95       	neg	r22
    28be:	7f 4f       	sbci	r23, 0xFF	; 255
    28c0:	8f 4f       	sbci	r24, 0xFF	; 255
    28c2:	9f 4f       	sbci	r25, 0xFF	; 255
    28c4:	08 95       	ret

000028c6 <__muluhisi3>:
    28c6:	0e 94 ab 14 	call	0x2956	; 0x2956 <__umulhisi3>
    28ca:	a5 9f       	mul	r26, r21
    28cc:	90 0d       	add	r25, r0
    28ce:	b4 9f       	mul	r27, r20
    28d0:	90 0d       	add	r25, r0
    28d2:	a4 9f       	mul	r26, r20
    28d4:	80 0d       	add	r24, r0
    28d6:	91 1d       	adc	r25, r1
    28d8:	11 24       	eor	r1, r1
    28da:	08 95       	ret

000028dc <__prologue_saves__>:
    28dc:	2f 92       	push	r2
    28de:	3f 92       	push	r3
    28e0:	4f 92       	push	r4
    28e2:	5f 92       	push	r5
    28e4:	6f 92       	push	r6
    28e6:	7f 92       	push	r7
    28e8:	8f 92       	push	r8
    28ea:	9f 92       	push	r9
    28ec:	af 92       	push	r10
    28ee:	bf 92       	push	r11
    28f0:	cf 92       	push	r12
    28f2:	df 92       	push	r13
    28f4:	ef 92       	push	r14
    28f6:	ff 92       	push	r15
    28f8:	0f 93       	push	r16
    28fa:	1f 93       	push	r17
    28fc:	cf 93       	push	r28
    28fe:	df 93       	push	r29
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	ca 1b       	sub	r28, r26
    2906:	db 0b       	sbc	r29, r27
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	09 94       	ijmp

00002914 <__epilogue_restores__>:
    2914:	2a 88       	ldd	r2, Y+18	; 0x12
    2916:	39 88       	ldd	r3, Y+17	; 0x11
    2918:	48 88       	ldd	r4, Y+16	; 0x10
    291a:	5f 84       	ldd	r5, Y+15	; 0x0f
    291c:	6e 84       	ldd	r6, Y+14	; 0x0e
    291e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2920:	8c 84       	ldd	r8, Y+12	; 0x0c
    2922:	9b 84       	ldd	r9, Y+11	; 0x0b
    2924:	aa 84       	ldd	r10, Y+10	; 0x0a
    2926:	b9 84       	ldd	r11, Y+9	; 0x09
    2928:	c8 84       	ldd	r12, Y+8	; 0x08
    292a:	df 80       	ldd	r13, Y+7	; 0x07
    292c:	ee 80       	ldd	r14, Y+6	; 0x06
    292e:	fd 80       	ldd	r15, Y+5	; 0x05
    2930:	0c 81       	ldd	r16, Y+4	; 0x04
    2932:	1b 81       	ldd	r17, Y+3	; 0x03
    2934:	aa 81       	ldd	r26, Y+2	; 0x02
    2936:	b9 81       	ldd	r27, Y+1	; 0x01
    2938:	ce 0f       	add	r28, r30
    293a:	d1 1d       	adc	r29, r1
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	de bf       	out	0x3e, r29	; 62
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	cd bf       	out	0x3d, r28	; 61
    2946:	ed 01       	movw	r28, r26
    2948:	08 95       	ret

0000294a <__tablejump2__>:
    294a:	ee 0f       	add	r30, r30
    294c:	ff 1f       	adc	r31, r31

0000294e <__tablejump__>:
    294e:	05 90       	lpm	r0, Z+
    2950:	f4 91       	lpm	r31, Z
    2952:	e0 2d       	mov	r30, r0
    2954:	09 94       	ijmp

00002956 <__umulhisi3>:
    2956:	a2 9f       	mul	r26, r18
    2958:	b0 01       	movw	r22, r0
    295a:	b3 9f       	mul	r27, r19
    295c:	c0 01       	movw	r24, r0
    295e:	a3 9f       	mul	r26, r19
    2960:	70 0d       	add	r23, r0
    2962:	81 1d       	adc	r24, r1
    2964:	11 24       	eor	r1, r1
    2966:	91 1d       	adc	r25, r1
    2968:	b2 9f       	mul	r27, r18
    296a:	70 0d       	add	r23, r0
    296c:	81 1d       	adc	r24, r1
    296e:	11 24       	eor	r1, r1
    2970:	91 1d       	adc	r25, r1
    2972:	08 95       	ret

00002974 <malloc>:
    2974:	cf 93       	push	r28
    2976:	df 93       	push	r29
    2978:	82 30       	cpi	r24, 0x02	; 2
    297a:	91 05       	cpc	r25, r1
    297c:	10 f4       	brcc	.+4      	; 0x2982 <malloc+0xe>
    297e:	82 e0       	ldi	r24, 0x02	; 2
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	e0 91 b5 03 	lds	r30, 0x03B5
    2986:	f0 91 b6 03 	lds	r31, 0x03B6
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	a0 e0       	ldi	r26, 0x00	; 0
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	30 97       	sbiw	r30, 0x00	; 0
    2994:	39 f1       	breq	.+78     	; 0x29e4 <malloc+0x70>
    2996:	40 81       	ld	r20, Z
    2998:	51 81       	ldd	r21, Z+1	; 0x01
    299a:	48 17       	cp	r20, r24
    299c:	59 07       	cpc	r21, r25
    299e:	b8 f0       	brcs	.+46     	; 0x29ce <malloc+0x5a>
    29a0:	48 17       	cp	r20, r24
    29a2:	59 07       	cpc	r21, r25
    29a4:	71 f4       	brne	.+28     	; 0x29c2 <malloc+0x4e>
    29a6:	82 81       	ldd	r24, Z+2	; 0x02
    29a8:	93 81       	ldd	r25, Z+3	; 0x03
    29aa:	10 97       	sbiw	r26, 0x00	; 0
    29ac:	29 f0       	breq	.+10     	; 0x29b8 <malloc+0x44>
    29ae:	13 96       	adiw	r26, 0x03	; 3
    29b0:	9c 93       	st	X, r25
    29b2:	8e 93       	st	-X, r24
    29b4:	12 97       	sbiw	r26, 0x02	; 2
    29b6:	2c c0       	rjmp	.+88     	; 0x2a10 <malloc+0x9c>
    29b8:	90 93 b6 03 	sts	0x03B6, r25
    29bc:	80 93 b5 03 	sts	0x03B5, r24
    29c0:	27 c0       	rjmp	.+78     	; 0x2a10 <malloc+0x9c>
    29c2:	21 15       	cp	r18, r1
    29c4:	31 05       	cpc	r19, r1
    29c6:	31 f0       	breq	.+12     	; 0x29d4 <malloc+0x60>
    29c8:	42 17       	cp	r20, r18
    29ca:	53 07       	cpc	r21, r19
    29cc:	18 f0       	brcs	.+6      	; 0x29d4 <malloc+0x60>
    29ce:	a9 01       	movw	r20, r18
    29d0:	db 01       	movw	r26, r22
    29d2:	01 c0       	rjmp	.+2      	; 0x29d6 <malloc+0x62>
    29d4:	ef 01       	movw	r28, r30
    29d6:	9a 01       	movw	r18, r20
    29d8:	bd 01       	movw	r22, r26
    29da:	df 01       	movw	r26, r30
    29dc:	02 80       	ldd	r0, Z+2	; 0x02
    29de:	f3 81       	ldd	r31, Z+3	; 0x03
    29e0:	e0 2d       	mov	r30, r0
    29e2:	d7 cf       	rjmp	.-82     	; 0x2992 <malloc+0x1e>
    29e4:	21 15       	cp	r18, r1
    29e6:	31 05       	cpc	r19, r1
    29e8:	f9 f0       	breq	.+62     	; 0x2a28 <malloc+0xb4>
    29ea:	28 1b       	sub	r18, r24
    29ec:	39 0b       	sbc	r19, r25
    29ee:	24 30       	cpi	r18, 0x04	; 4
    29f0:	31 05       	cpc	r19, r1
    29f2:	80 f4       	brcc	.+32     	; 0x2a14 <malloc+0xa0>
    29f4:	8a 81       	ldd	r24, Y+2	; 0x02
    29f6:	9b 81       	ldd	r25, Y+3	; 0x03
    29f8:	61 15       	cp	r22, r1
    29fa:	71 05       	cpc	r23, r1
    29fc:	21 f0       	breq	.+8      	; 0x2a06 <malloc+0x92>
    29fe:	fb 01       	movw	r30, r22
    2a00:	93 83       	std	Z+3, r25	; 0x03
    2a02:	82 83       	std	Z+2, r24	; 0x02
    2a04:	04 c0       	rjmp	.+8      	; 0x2a0e <malloc+0x9a>
    2a06:	90 93 b6 03 	sts	0x03B6, r25
    2a0a:	80 93 b5 03 	sts	0x03B5, r24
    2a0e:	fe 01       	movw	r30, r28
    2a10:	32 96       	adiw	r30, 0x02	; 2
    2a12:	44 c0       	rjmp	.+136    	; 0x2a9c <malloc+0x128>
    2a14:	fe 01       	movw	r30, r28
    2a16:	e2 0f       	add	r30, r18
    2a18:	f3 1f       	adc	r31, r19
    2a1a:	81 93       	st	Z+, r24
    2a1c:	91 93       	st	Z+, r25
    2a1e:	22 50       	subi	r18, 0x02	; 2
    2a20:	31 09       	sbc	r19, r1
    2a22:	39 83       	std	Y+1, r19	; 0x01
    2a24:	28 83       	st	Y, r18
    2a26:	3a c0       	rjmp	.+116    	; 0x2a9c <malloc+0x128>
    2a28:	20 91 b3 03 	lds	r18, 0x03B3
    2a2c:	30 91 b4 03 	lds	r19, 0x03B4
    2a30:	23 2b       	or	r18, r19
    2a32:	41 f4       	brne	.+16     	; 0x2a44 <malloc+0xd0>
    2a34:	20 91 2d 01 	lds	r18, 0x012D
    2a38:	30 91 2e 01 	lds	r19, 0x012E
    2a3c:	30 93 b4 03 	sts	0x03B4, r19
    2a40:	20 93 b3 03 	sts	0x03B3, r18
    2a44:	20 91 2b 01 	lds	r18, 0x012B
    2a48:	30 91 2c 01 	lds	r19, 0x012C
    2a4c:	21 15       	cp	r18, r1
    2a4e:	31 05       	cpc	r19, r1
    2a50:	41 f4       	brne	.+16     	; 0x2a62 <malloc+0xee>
    2a52:	2d b7       	in	r18, 0x3d	; 61
    2a54:	3e b7       	in	r19, 0x3e	; 62
    2a56:	40 91 2f 01 	lds	r20, 0x012F
    2a5a:	50 91 30 01 	lds	r21, 0x0130
    2a5e:	24 1b       	sub	r18, r20
    2a60:	35 0b       	sbc	r19, r21
    2a62:	e0 91 b3 03 	lds	r30, 0x03B3
    2a66:	f0 91 b4 03 	lds	r31, 0x03B4
    2a6a:	e2 17       	cp	r30, r18
    2a6c:	f3 07       	cpc	r31, r19
    2a6e:	a0 f4       	brcc	.+40     	; 0x2a98 <malloc+0x124>
    2a70:	2e 1b       	sub	r18, r30
    2a72:	3f 0b       	sbc	r19, r31
    2a74:	28 17       	cp	r18, r24
    2a76:	39 07       	cpc	r19, r25
    2a78:	78 f0       	brcs	.+30     	; 0x2a98 <malloc+0x124>
    2a7a:	ac 01       	movw	r20, r24
    2a7c:	4e 5f       	subi	r20, 0xFE	; 254
    2a7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a80:	24 17       	cp	r18, r20
    2a82:	35 07       	cpc	r19, r21
    2a84:	48 f0       	brcs	.+18     	; 0x2a98 <malloc+0x124>
    2a86:	4e 0f       	add	r20, r30
    2a88:	5f 1f       	adc	r21, r31
    2a8a:	50 93 b4 03 	sts	0x03B4, r21
    2a8e:	40 93 b3 03 	sts	0x03B3, r20
    2a92:	81 93       	st	Z+, r24
    2a94:	91 93       	st	Z+, r25
    2a96:	02 c0       	rjmp	.+4      	; 0x2a9c <malloc+0x128>
    2a98:	e0 e0       	ldi	r30, 0x00	; 0
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	cf 01       	movw	r24, r30
    2a9e:	df 91       	pop	r29
    2aa0:	cf 91       	pop	r28
    2aa2:	08 95       	ret

00002aa4 <free>:
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	09 f4       	brne	.+2      	; 0x2aae <free+0xa>
    2aac:	87 c0       	rjmp	.+270    	; 0x2bbc <free+0x118>
    2aae:	fc 01       	movw	r30, r24
    2ab0:	32 97       	sbiw	r30, 0x02	; 2
    2ab2:	13 82       	std	Z+3, r1	; 0x03
    2ab4:	12 82       	std	Z+2, r1	; 0x02
    2ab6:	c0 91 b5 03 	lds	r28, 0x03B5
    2aba:	d0 91 b6 03 	lds	r29, 0x03B6
    2abe:	20 97       	sbiw	r28, 0x00	; 0
    2ac0:	81 f4       	brne	.+32     	; 0x2ae2 <free+0x3e>
    2ac2:	20 81       	ld	r18, Z
    2ac4:	31 81       	ldd	r19, Z+1	; 0x01
    2ac6:	28 0f       	add	r18, r24
    2ac8:	39 1f       	adc	r19, r25
    2aca:	80 91 b3 03 	lds	r24, 0x03B3
    2ace:	90 91 b4 03 	lds	r25, 0x03B4
    2ad2:	82 17       	cp	r24, r18
    2ad4:	93 07       	cpc	r25, r19
    2ad6:	79 f5       	brne	.+94     	; 0x2b36 <free+0x92>
    2ad8:	f0 93 b4 03 	sts	0x03B4, r31
    2adc:	e0 93 b3 03 	sts	0x03B3, r30
    2ae0:	6d c0       	rjmp	.+218    	; 0x2bbc <free+0x118>
    2ae2:	de 01       	movw	r26, r28
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	ae 17       	cp	r26, r30
    2aea:	bf 07       	cpc	r27, r31
    2aec:	50 f4       	brcc	.+20     	; 0x2b02 <free+0x5e>
    2aee:	12 96       	adiw	r26, 0x02	; 2
    2af0:	4d 91       	ld	r20, X+
    2af2:	5c 91       	ld	r21, X
    2af4:	13 97       	sbiw	r26, 0x03	; 3
    2af6:	9d 01       	movw	r18, r26
    2af8:	41 15       	cp	r20, r1
    2afa:	51 05       	cpc	r21, r1
    2afc:	09 f1       	breq	.+66     	; 0x2b40 <free+0x9c>
    2afe:	da 01       	movw	r26, r20
    2b00:	f3 cf       	rjmp	.-26     	; 0x2ae8 <free+0x44>
    2b02:	b3 83       	std	Z+3, r27	; 0x03
    2b04:	a2 83       	std	Z+2, r26	; 0x02
    2b06:	40 81       	ld	r20, Z
    2b08:	51 81       	ldd	r21, Z+1	; 0x01
    2b0a:	84 0f       	add	r24, r20
    2b0c:	95 1f       	adc	r25, r21
    2b0e:	8a 17       	cp	r24, r26
    2b10:	9b 07       	cpc	r25, r27
    2b12:	71 f4       	brne	.+28     	; 0x2b30 <free+0x8c>
    2b14:	8d 91       	ld	r24, X+
    2b16:	9c 91       	ld	r25, X
    2b18:	11 97       	sbiw	r26, 0x01	; 1
    2b1a:	84 0f       	add	r24, r20
    2b1c:	95 1f       	adc	r25, r21
    2b1e:	02 96       	adiw	r24, 0x02	; 2
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	80 83       	st	Z, r24
    2b24:	12 96       	adiw	r26, 0x02	; 2
    2b26:	8d 91       	ld	r24, X+
    2b28:	9c 91       	ld	r25, X
    2b2a:	13 97       	sbiw	r26, 0x03	; 3
    2b2c:	93 83       	std	Z+3, r25	; 0x03
    2b2e:	82 83       	std	Z+2, r24	; 0x02
    2b30:	21 15       	cp	r18, r1
    2b32:	31 05       	cpc	r19, r1
    2b34:	29 f4       	brne	.+10     	; 0x2b40 <free+0x9c>
    2b36:	f0 93 b6 03 	sts	0x03B6, r31
    2b3a:	e0 93 b5 03 	sts	0x03B5, r30
    2b3e:	3e c0       	rjmp	.+124    	; 0x2bbc <free+0x118>
    2b40:	d9 01       	movw	r26, r18
    2b42:	13 96       	adiw	r26, 0x03	; 3
    2b44:	fc 93       	st	X, r31
    2b46:	ee 93       	st	-X, r30
    2b48:	12 97       	sbiw	r26, 0x02	; 2
    2b4a:	4d 91       	ld	r20, X+
    2b4c:	5d 91       	ld	r21, X+
    2b4e:	a4 0f       	add	r26, r20
    2b50:	b5 1f       	adc	r27, r21
    2b52:	ea 17       	cp	r30, r26
    2b54:	fb 07       	cpc	r31, r27
    2b56:	79 f4       	brne	.+30     	; 0x2b76 <free+0xd2>
    2b58:	80 81       	ld	r24, Z
    2b5a:	91 81       	ldd	r25, Z+1	; 0x01
    2b5c:	84 0f       	add	r24, r20
    2b5e:	95 1f       	adc	r25, r21
    2b60:	02 96       	adiw	r24, 0x02	; 2
    2b62:	d9 01       	movw	r26, r18
    2b64:	11 96       	adiw	r26, 0x01	; 1
    2b66:	9c 93       	st	X, r25
    2b68:	8e 93       	st	-X, r24
    2b6a:	82 81       	ldd	r24, Z+2	; 0x02
    2b6c:	93 81       	ldd	r25, Z+3	; 0x03
    2b6e:	13 96       	adiw	r26, 0x03	; 3
    2b70:	9c 93       	st	X, r25
    2b72:	8e 93       	st	-X, r24
    2b74:	12 97       	sbiw	r26, 0x02	; 2
    2b76:	e0 e0       	ldi	r30, 0x00	; 0
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	19 f0       	breq	.+6      	; 0x2b88 <free+0xe4>
    2b82:	fe 01       	movw	r30, r28
    2b84:	ec 01       	movw	r28, r24
    2b86:	f9 cf       	rjmp	.-14     	; 0x2b7a <free+0xd6>
    2b88:	ce 01       	movw	r24, r28
    2b8a:	02 96       	adiw	r24, 0x02	; 2
    2b8c:	28 81       	ld	r18, Y
    2b8e:	39 81       	ldd	r19, Y+1	; 0x01
    2b90:	82 0f       	add	r24, r18
    2b92:	93 1f       	adc	r25, r19
    2b94:	20 91 b3 03 	lds	r18, 0x03B3
    2b98:	30 91 b4 03 	lds	r19, 0x03B4
    2b9c:	28 17       	cp	r18, r24
    2b9e:	39 07       	cpc	r19, r25
    2ba0:	69 f4       	brne	.+26     	; 0x2bbc <free+0x118>
    2ba2:	30 97       	sbiw	r30, 0x00	; 0
    2ba4:	29 f4       	brne	.+10     	; 0x2bb0 <free+0x10c>
    2ba6:	10 92 b6 03 	sts	0x03B6, r1
    2baa:	10 92 b5 03 	sts	0x03B5, r1
    2bae:	02 c0       	rjmp	.+4      	; 0x2bb4 <free+0x110>
    2bb0:	13 82       	std	Z+3, r1	; 0x03
    2bb2:	12 82       	std	Z+2, r1	; 0x02
    2bb4:	d0 93 b4 03 	sts	0x03B4, r29
    2bb8:	c0 93 b3 03 	sts	0x03B3, r28
    2bbc:	df 91       	pop	r29
    2bbe:	cf 91       	pop	r28
    2bc0:	08 95       	ret

00002bc2 <strrev>:
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	67 2f       	mov	r22, r23
    2bc8:	71 91       	ld	r23, Z+
    2bca:	77 23       	and	r23, r23
    2bcc:	e1 f7       	brne	.-8      	; 0x2bc6 <strrev+0x4>
    2bce:	32 97       	sbiw	r30, 0x02	; 2
    2bd0:	04 c0       	rjmp	.+8      	; 0x2bda <strrev+0x18>
    2bd2:	7c 91       	ld	r23, X
    2bd4:	6d 93       	st	X+, r22
    2bd6:	70 83       	st	Z, r23
    2bd8:	62 91       	ld	r22, -Z
    2bda:	ae 17       	cp	r26, r30
    2bdc:	bf 07       	cpc	r27, r31
    2bde:	c8 f3       	brcs	.-14     	; 0x2bd2 <strrev+0x10>
    2be0:	08 95       	ret

00002be2 <__do_global_dtors>:
    2be2:	10 e0       	ldi	r17, 0x00	; 0
    2be4:	cc ea       	ldi	r28, 0xAC	; 172
    2be6:	d0 e0       	ldi	r29, 0x00	; 0
    2be8:	04 c0       	rjmp	.+8      	; 0x2bf2 <__do_global_dtors+0x10>
    2bea:	fe 01       	movw	r30, r28
    2bec:	0e 94 a7 14 	call	0x294e	; 0x294e <__tablejump__>
    2bf0:	22 96       	adiw	r28, 0x02	; 2
    2bf2:	ce 3a       	cpi	r28, 0xAE	; 174
    2bf4:	d1 07       	cpc	r29, r17
    2bf6:	c9 f7       	brne	.-14     	; 0x2bea <__do_global_dtors+0x8>
    2bf8:	f8 94       	cli

00002bfa <__stop_program>:
    2bfa:	ff cf       	rjmp	.-2      	; 0x2bfa <__stop_program>
