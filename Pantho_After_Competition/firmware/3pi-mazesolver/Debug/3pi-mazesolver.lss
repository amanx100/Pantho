
3pi-mazesolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  000026c2  00002756  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dc  00800158  00800158  000027ae  2**0
                  ALLOC
  3 .stab         000067d4  00000000  00000000  000027b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008bbc  00000000  00000000  00008f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00011b40  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000f0  00000000  00000000  00011b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001218  00000000  00000000  00011c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000747  00000000  00000000  00012e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000fcc  00000000  00000000  000135bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000218  00000000  00000000  0001458c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000420  00000000  00000000  000147a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000006ad  00000000  00000000  00014bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  00015271  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__dtors_end>
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      24:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__vector_9>
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      34:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__vector_13>
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      50:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <go>:
      76:	4c 31 36 20 63 64 65 67 72 65 67 34 00              L16 cdegreg4.

00000083 <welcome>:
      83:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000008d <demo_name_line2>:
      8d:	73 6f 6c 76 65 72 00                                solver.

00000094 <demo_name_line1>:
      94:	4d 61 7a 65 00                                      Maze.

00000099 <welcome_line2>:
      99:	33 f7 20 52 6f 62 6f 74 00                          3. Robot.

000000a2 <welcome_line1>:
      a2:	20 50 6f 6c 6f 6c 75 00                              Pololu.

000000aa <__ctors_start>:
      aa:	24 0c       	add	r2, r4

000000ac <__ctors_end>:
      ac:	25 0c       	add	r2, r5

000000ae <__dtors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	d8 e0       	ldi	r29, 0x08	; 8
      b6:	de bf       	out	0x3e, r29	; 62
      b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
      ba:	11 e0       	ldi	r17, 0x01	; 1
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	e2 ec       	ldi	r30, 0xC2	; 194
      c2:	f6 e2       	ldi	r31, 0x26	; 38
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
      c6:	05 90       	lpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a8 35       	cpi	r26, 0x58	; 88
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
      d0:	22 e0       	ldi	r18, 0x02	; 2
      d2:	a8 e5       	ldi	r26, 0x58	; 88
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a4 33       	cpi	r26, 0x34	; 52
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>

000000e0 <__do_global_ctors>:
      e0:	10 e0       	ldi	r17, 0x00	; 0
      e2:	cc ea       	ldi	r28, 0xAC	; 172
      e4:	d0 e0       	ldi	r29, 0x00	; 0
      e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_global_ctors+0x10>
      e8:	22 97       	sbiw	r28, 0x02	; 2
      ea:	fe 01       	movw	r30, r28
      ec:	0e 94 1a 12 	call	0x2434	; 0x2434 <__tablejump__>
      f0:	ca 3a       	cpi	r28, 0xAA	; 170
      f2:	d1 07       	cpc	r29, r17
      f4:	c9 f7       	brne	.-14     	; 0xe8 <__do_global_ctors+0x8>
      f6:	0e 94 4b 02 	call	0x496	; 0x496 <main>
      fa:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__do_global_dtors>

000000fe <__bad_interrupt>:
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <load_custom_characters>:

// This function loads custom characters into the LCD.  Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	88 e6       	ldi	r24, 0x68	; 104
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
     10c:	61 e0       	ldi	r22, 0x01	; 1
     10e:	89 e6       	ldi	r24, 0x69	; 105
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
     116:	62 e0       	ldi	r22, 0x02	; 2
     118:	8a e6       	ldi	r24, 0x6A	; 106
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     120:	63 e0       	ldi	r22, 0x03	; 3
     122:	8b e6       	ldi	r24, 0x6B	; 107
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     12a:	64 e0       	ldi	r22, 0x04	; 4
     12c:	8c e6       	ldi	r24, 0x6C	; 108
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     134:	65 e0       	ldi	r22, 0x05	; 5
     136:	8d e6       	ldi	r24, 0x6D	; 109
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     13e:	66 e0       	ldi	r22, 0x06	; 6
     140:	8e e6       	ldi	r24, 0x6E	; 110
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_load_custom_character>
	clear(); // the LCD must be cleared for the characters to take effect
     148:	0c 94 43 09 	jmp	0x1286	; 0x1286 <clear>

0000014c <display_readings>:
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	2a 97       	sbiw	r28, 0x0a	; 10
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
     16c:	8c 01       	movw	r16, r24
	unsigned char i;

	for(i=0;i<5;i++) {
     16e:	d1 2c       	mov	r13, r1
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     170:	8a e0       	ldi	r24, 0x0A	; 10
     172:	c8 2e       	mov	r12, r24

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     174:	95 e6       	ldi	r25, 0x65	; 101
     176:	e9 2e       	mov	r14, r25
     178:	f1 2c       	mov	r15, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     17a:	e1 e3       	ldi	r30, 0x31	; 49
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	de 01       	movw	r26, r28
     180:	11 96       	adiw	r26, 0x01	; 1
     182:	8c 2d       	mov	r24, r12
     184:	01 90       	ld	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	8a 95       	dec	r24
     18a:	e1 f7       	brne	.-8      	; 0x184 <display_readings+0x38>

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     18c:	f8 01       	movw	r30, r16
     18e:	81 91       	ld	r24, Z+
     190:	91 91       	ld	r25, Z+
     192:	8f 01       	movw	r16, r30
     194:	b7 01       	movw	r22, r14
     196:	0e 94 6d 11 	call	0x22da	; 0x22da <__udivmodhi4>
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	8c 0f       	add	r24, r28
     1a0:	9d 1f       	adc	r25, r29
     1a2:	68 0f       	add	r22, r24
     1a4:	79 1f       	adc	r23, r25

		// Display the bar graph character.
		print_character(c);
     1a6:	fb 01       	movw	r30, r22
     1a8:	80 81       	ld	r24, Z
     1aa:	0e 94 c6 08 	call	0x118c	; 0x118c <print_character>
// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     1ae:	d3 94       	inc	r13
     1b0:	f5 e0       	ldi	r31, 0x05	; 5
     1b2:	df 12       	cpse	r13, r31
     1b4:	e2 cf       	rjmp	.-60     	; 0x17a <display_readings+0x2e>
		char c = display_characters[calibrated_values[i]/101];

		// Display the bar graph character.
		print_character(c);
	}
}
     1b6:	2a 96       	adiw	r28, 0x0a	; 10
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	08 95       	ret

000001d4 <follow_segment>:
 */

#include <pololu/3pi.h>

void follow_segment()
{
     1d4:	2f 92       	push	r2
     1d6:	3f 92       	push	r3
     1d8:	4f 92       	push	r4
     1da:	5f 92       	push	r5
     1dc:	6f 92       	push	r6
     1de:	7f 92       	push	r7
     1e0:	8f 92       	push	r8
     1e2:	9f 92       	push	r9
     1e4:	af 92       	push	r10
     1e6:	bf 92       	push	r11
     1e8:	cf 92       	push	r12
     1ea:	df 92       	push	r13
     1ec:	ef 92       	push	r14
     1ee:	ff 92       	push	r15
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	2a 97       	sbiw	r28, 0x0a	; 10
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
	int last_proportional = 0;
	long integral=0;
     208:	c1 2c       	mov	r12, r1
     20a:	d1 2c       	mov	r13, r1
     20c:	76 01       	movw	r14, r12

#include <pololu/3pi.h>

void follow_segment()
{
	int last_proportional = 0;
     20e:	a1 2c       	mov	r10, r1
     210:	b1 2c       	mov	r11, r1
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     212:	50 e1       	ldi	r21, 0x10	; 16
     214:	45 2e       	mov	r4, r21
     216:	57 e2       	ldi	r21, 0x27	; 39
     218:	55 2e       	mov	r5, r21
     21a:	61 2c       	mov	r6, r1
     21c:	71 2c       	mov	r7, r1
     21e:	64 e1       	ldi	r22, 0x14	; 20
     220:	26 2e       	mov	r2, r22
     222:	31 2c       	mov	r3, r1
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     224:	7c e3       	ldi	r23, 0x3C	; 60
     226:	87 2e       	mov	r8, r23
     228:	91 2c       	mov	r9, r1
		// similar to the 3pi-linefollower-pid example, but the maximum
		// speed is turned down to 60 for reliability.

		// Get the position of the line.
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     22a:	61 e0       	ldi	r22, 0x01	; 1
     22c:	ce 01       	movw	r24, r28
     22e:	01 96       	adiw	r24, 0x01	; 1
     230:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <read_line>

		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     234:	8c 01       	movw	r16, r24
     236:	00 5d       	subi	r16, 0xD0	; 208
     238:	17 40       	sbci	r17, 0x07	; 7

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;
     23a:	c8 01       	movw	r24, r16
     23c:	aa 27       	eor	r26, r26
     23e:	97 fd       	sbrc	r25, 7
     240:	a0 95       	com	r26
     242:	ba 2f       	mov	r27, r26
     244:	c8 0e       	add	r12, r24
     246:	d9 1e       	adc	r13, r25
     248:	ea 1e       	adc	r14, r26
     24a:	fb 1e       	adc	r15, r27
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     24c:	c7 01       	movw	r24, r14
     24e:	b6 01       	movw	r22, r12
     250:	a3 01       	movw	r20, r6
     252:	92 01       	movw	r18, r4
     254:	0e 94 b7 11 	call	0x236e	; 0x236e <__divmodsi4>
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
     258:	b8 01       	movw	r22, r16
     25a:	6a 19       	sub	r22, r10
     25c:	7b 09       	sbc	r23, r11
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     25e:	cb 01       	movw	r24, r22
     260:	88 0f       	add	r24, r24
     262:	99 1f       	adc	r25, r25
     264:	86 0f       	add	r24, r22
     266:	97 1f       	adc	r25, r23
     268:	97 fd       	sbrc	r25, 7
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	fc 01       	movw	r30, r24
     26e:	f5 95       	asr	r31
     270:	e7 95       	ror	r30
     272:	e2 0f       	add	r30, r18
     274:	f3 1f       	adc	r31, r19
     276:	c8 01       	movw	r24, r16
     278:	b1 01       	movw	r22, r2
     27a:	0e 94 81 11 	call	0x2302	; 0x2302 <__divmodhi4>
     27e:	e6 0f       	add	r30, r22
     280:	f7 1f       	adc	r31, r23

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 60; // the maximum speed
		if(power_difference > max)
     282:	ed 33       	cpi	r30, 0x3D	; 61
     284:	f1 05       	cpc	r31, r1
     286:	74 f4       	brge	.+28     	; 0x2a4 <follow_segment+0xd0>
			power_difference = max;
		if(power_difference < -max)
     288:	e4 3c       	cpi	r30, 0xC4	; 196
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	f8 07       	cpc	r31, r24
     28e:	1c f0       	brlt	.+6      	; 0x296 <follow_segment+0xc2>
			power_difference = -max;
		
		if(power_difference < 0)
     290:	f7 fd       	sbrc	r31, 7
     292:	03 c0       	rjmp	.+6      	; 0x29a <follow_segment+0xc6>
     294:	09 c0       	rjmp	.+18     	; 0x2a8 <follow_segment+0xd4>
		// to a negative value.
		const int max = 60; // the maximum speed
		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
     296:	e4 ec       	ldi	r30, 0xC4	; 196
     298:	ff ef       	ldi	r31, 0xFF	; 255
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
     29a:	6c e3       	ldi	r22, 0x3C	; 60
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	cf 01       	movw	r24, r30
     2a0:	cc 96       	adiw	r24, 0x3c	; 60
     2a2:	07 c0       	rjmp	.+14     	; 0x2b2 <follow_segment+0xde>

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 60; // the maximum speed
		if(power_difference > max)
			power_difference = max;
     2a4:	ec e3       	ldi	r30, 0x3C	; 60
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     2a8:	b4 01       	movw	r22, r8
     2aa:	6e 1b       	sub	r22, r30
     2ac:	7f 0b       	sbc	r23, r31
     2ae:	8c e3       	ldi	r24, 0x3C	; 60
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <set_motors>
		// We use the inner three sensors (1, 2, and 3) for
		// determining whether there is a line straight ahead, and the
		// sensors 0 and 4 for detecting lines going to the left and
		// right.

		if(sensors[1] < 100 && sensors[2] < 100 && sensors[3] < 100)
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	9c 81       	ldd	r25, Y+4	; 0x04
     2ba:	84 36       	cpi	r24, 0x64	; 100
     2bc:	91 05       	cpc	r25, r1
     2be:	50 f4       	brcc	.+20     	; 0x2d4 <follow_segment+0x100>
     2c0:	8d 81       	ldd	r24, Y+5	; 0x05
     2c2:	9e 81       	ldd	r25, Y+6	; 0x06
     2c4:	84 36       	cpi	r24, 0x64	; 100
     2c6:	91 05       	cpc	r25, r1
     2c8:	28 f4       	brcc	.+10     	; 0x2d4 <follow_segment+0x100>
     2ca:	8f 81       	ldd	r24, Y+7	; 0x07
     2cc:	98 85       	ldd	r25, Y+8	; 0x08
     2ce:	84 36       	cpi	r24, 0x64	; 100
     2d0:	91 05       	cpc	r25, r1
     2d2:	60 f0       	brcs	.+24     	; 0x2ec <follow_segment+0x118>
		{
			// There is no line visible ahead, and we didn't see any
			// intersection.  Must be a dead end.
			return;
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	9a 81       	ldd	r25, Y+2	; 0x02
     2d8:	89 3c       	cpi	r24, 0xC9	; 201
     2da:	91 05       	cpc	r25, r1
     2dc:	38 f4       	brcc	.+14     	; 0x2ec <follow_segment+0x118>
     2de:	89 85       	ldd	r24, Y+9	; 0x09
     2e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     2e2:	89 3c       	cpi	r24, 0xC9	; 201
     2e4:	91 05       	cpc	r25, r1
     2e6:	10 f4       	brcc	.+4      	; 0x2ec <follow_segment+0x118>
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;

		// Remember the last position.
		last_proportional = proportional;
     2e8:	58 01       	movw	r10, r16
		{
			// Found an intersection.
			return;
		}

	}
     2ea:	9f cf       	rjmp	.-194    	; 0x22a <follow_segment+0x56>
}
     2ec:	2a 96       	adiw	r28, 0x0a	; 10
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	cd bf       	out	0x3d, r28	; 61
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	df 90       	pop	r13
     306:	cf 90       	pop	r12
     308:	bf 90       	pop	r11
     30a:	af 90       	pop	r10
     30c:	9f 90       	pop	r9
     30e:	8f 90       	pop	r8
     310:	7f 90       	pop	r7
     312:	6f 90       	pop	r6
     314:	5f 90       	pop	r5
     316:	4f 90       	pop	r4
     318:	3f 90       	pop	r3
     31a:	2f 90       	pop	r2
     31c:	08 95       	ret

0000031e <initialize>:
const char go[] PROGMEM = "L16 cdegreg4";

// Initializes the 3pi, displays a welcome message, calibrates, and
// plays the initial music.
void initialize()
{
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	2a 97       	sbiw	r28, 0x0a	; 10
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5]; // an array to hold sensor values

	// This must be called at the beginning of 3pi code, to set up the
	// sensors.  We use a value of 2000 for the timeout, which
	// corresponds to 2000*0.4 us = 0.8 ms on our 20 MHz processor.
	pololu_3pi_init(2000);
     336:	80 ed       	ldi	r24, 0xD0	; 208
     338:	97 e0       	ldi	r25, 0x07	; 7
     33a:	0e 94 20 0c 	call	0x1840	; 0x1840 <pololu_3pi_init>
	load_custom_characters(); // load the custom characters
     33e:	0e 94 81 00 	call	0x102	; 0x102 <load_custom_characters>
	
	// Play welcome music and display a message
	print_from_program_space(welcome_line1);
     342:	82 ea       	ldi	r24, 0xA2	; 162
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <print_from_program_space>
	lcd_goto_xy(0,1);
     34a:	61 e0       	ldi	r22, 0x01	; 1
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <lcd_goto_xy>
	print_from_program_space(welcome_line2);
     352:	89 e9       	ldi	r24, 0x99	; 153
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <print_from_program_space>
	play_from_program_space(welcome);
     35a:	83 e8       	ldi	r24, 0x83	; 131
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 00 08 	call	0x1000	; 0x1000 <play_from_program_space>
	delay_ms(1000);
     362:	88 ee       	ldi	r24, 0xE8	; 232
     364:	93 e0       	ldi	r25, 0x03	; 3
     366:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>

	clear();
     36a:	0e 94 43 09 	call	0x1286	; 0x1286 <clear>
	print_from_program_space(demo_name_line1);
     36e:	84 e9       	ldi	r24, 0x94	; 148
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <print_from_program_space>
	lcd_goto_xy(0,1);
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <lcd_goto_xy>
	print_from_program_space(demo_name_line2);
     37e:	8d e8       	ldi	r24, 0x8D	; 141
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <print_from_program_space>
	delay_ms(1000);
     386:	88 ee       	ldi	r24, 0xE8	; 232
     388:	93 e0       	ldi	r25, 0x03	; 3
		print_long(bat);
		print("mV");
		lcd_goto_xy(0,1);
		print("Press B");

		delay_ms(100);
     38a:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>
	lcd_goto_xy(0,1);
	print_from_program_space(demo_name_line2);
	delay_ms(1000);

	// Display battery voltage and wait for button press
	while(!button_is_pressed(BUTTON_B))
     38e:	80 e1       	ldi	r24, 0x10	; 16
     390:	0e 94 38 0b 	call	0x1670	; 0x1670 <button_is_pressed>
     394:	81 11       	cpse	r24, r1
     396:	1b c0       	rjmp	.+54     	; 0x3ce <initialize+0xb0>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     398:	0e 94 ae 04 	call	0x95c	; 0x95c <read_battery_millivolts_3pi>
     39c:	8c 01       	movw	r16, r24
	{
		int bat = read_battery_millivolts();

		clear();
     39e:	0e 94 43 09 	call	0x1286	; 0x1286 <clear>
		print_long(bat);
     3a2:	b8 01       	movw	r22, r16
     3a4:	88 27       	eor	r24, r24
     3a6:	77 fd       	sbrc	r23, 7
     3a8:	80 95       	com	r24
     3aa:	98 2f       	mov	r25, r24
     3ac:	0e 94 c8 09 	call	0x1390	; 0x1390 <print_long>
		print("mV");
     3b0:	8b e3       	ldi	r24, 0x3B	; 59
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <print>
		lcd_goto_xy(0,1);
     3b8:	61 e0       	ldi	r22, 0x01	; 1
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <lcd_goto_xy>
		print("Press B");
     3c0:	8e e3       	ldi	r24, 0x3E	; 62
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <print>

		delay_ms(100);
     3c8:	84 e6       	ldi	r24, 0x64	; 100
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	de cf       	rjmp	.-68     	; 0x38a <initialize+0x6c>
	}

	// Always wait for the button to be released so that 3pi doesn't
	// start moving until your hand is away from it.
	wait_for_button_release(BUTTON_B);
     3ce:	80 e1       	ldi	r24, 0x10	; 16
     3d0:	0e 94 24 0b 	call	0x1648	; 0x1648 <wait_for_button_release>
	delay_ms(1000);
     3d4:	88 ee       	ldi	r24, 0xE8	; 232
     3d6:	93 e0       	ldi	r25, 0x03	; 3
     3d8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>
     3dc:	0c ee       	ldi	r16, 0xEC	; 236
     3de:	1f ef       	ldi	r17, 0xFF	; 255

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     3e0:	08 32       	cpi	r16, 0x28	; 40
     3e2:	11 05       	cpc	r17, r1
     3e4:	28 f0       	brcs	.+10     	; 0x3f0 <initialize+0xd2>
			set_motors(40,-40);
     3e6:	68 ed       	ldi	r22, 0xD8	; 216
     3e8:	7f ef       	ldi	r23, 0xFF	; 255
     3ea:	88 e2       	ldi	r24, 0x28	; 40
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <initialize+0xda>
		else
			set_motors(-40,40);
     3f0:	68 e2       	ldi	r22, 0x28	; 40
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	88 ed       	ldi	r24, 0xD8	; 216
     3f6:	9f ef       	ldi	r25, 0xFF	; 255
     3f8:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <set_motors>
		// This function records a set of sensor readings and keeps
		// track of the minimum and maximum values encountered.  The
		// IR_EMITTERS_ON argument means that the IR LEDs will be
		// turned on during the reading, which is usually what you
		// want.
		calibrate_line_sensors(IR_EMITTERS_ON);
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	0e 94 df 0b 	call	0x17be	; 0x17be <calibrate_line_sensors>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
     402:	84 e1       	ldi	r24, 0x14	; 20
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>
     40a:	0f 5f       	subi	r16, 0xFF	; 255
     40c:	1f 4f       	sbci	r17, 0xFF	; 255
	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
     40e:	0c 33       	cpi	r16, 0x3C	; 60
     410:	11 05       	cpc	r17, r1
     412:	31 f7       	brne	.-52     	; 0x3e0 <initialize+0xc2>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
	}
	set_motors(0,0);
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <set_motors>

	// Display calibrated values as a bar graph.
	while(!button_is_pressed(BUTTON_B))
     420:	80 e1       	ldi	r24, 0x10	; 16
     422:	0e 94 38 0b 	call	0x1670	; 0x1670 <button_is_pressed>
     426:	81 11       	cpse	r24, r1
     428:	1a c0       	rjmp	.+52     	; 0x45e <initialize+0x140>
	{
		// Read the sensor values and get the position measurement.
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	ce 01       	movw	r24, r28
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <read_line>
     434:	8c 01       	movw	r16, r24
		// Display the position measurement, which will go from 0
		// (when the leftmost sensor is over the line) to 4000 (when
		// the rightmost sensor is over the line) on the 3pi, along
		// with a bar graph of the sensor readings.  This allows you
		// to make sure the robot is ready to go.
		clear();
     436:	0e 94 43 09 	call	0x1286	; 0x1286 <clear>
		print_long(position);
     43a:	b8 01       	movw	r22, r16
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 c8 09 	call	0x1390	; 0x1390 <print_long>
		lcd_goto_xy(0,1);
     444:	61 e0       	ldi	r22, 0x01	; 1
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <lcd_goto_xy>
		display_readings(sensors);
     44c:	ce 01       	movw	r24, r28
     44e:	01 96       	adiw	r24, 0x01	; 1
     450:	0e 94 a6 00 	call	0x14c	; 0x14c <display_readings>

		delay_ms(100);
     454:	84 e6       	ldi	r24, 0x64	; 100
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>
     45c:	e1 cf       	rjmp	.-62     	; 0x420 <initialize+0x102>
	}
	wait_for_button_release(BUTTON_B);
     45e:	80 e1       	ldi	r24, 0x10	; 16
     460:	0e 94 24 0b 	call	0x1648	; 0x1648 <wait_for_button_release>

	clear();
     464:	0e 94 43 09 	call	0x1286	; 0x1286 <clear>

	print("Go!");		
     468:	86 e4       	ldi	r24, 0x46	; 70
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <print>

	// Play music and wait for it to finish before we start driving.
	play_from_program_space(go);
     470:	86 e7       	ldi	r24, 0x76	; 118
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 00 08 	call	0x1000	; 0x1000 <play_from_program_space>
	while(is_playing());
     478:	0e 94 df 07 	call	0xfbe	; 0xfbe <is_playing>
     47c:	81 11       	cpse	r24, r1
     47e:	fc cf       	rjmp	.-8      	; 0x478 <initialize+0x15a>
}
     480:	2a 96       	adiw	r28, 0x0a	; 10
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	08 95       	ret

00000496 <main>:
// This is the main function, where the code starts.  All C programs
// must have a main() function defined somewhere.
int main()
{
	// set up the 3pi
	initialize();
     496:	0e 94 8f 01 	call	0x31e	; 0x31e <initialize>

	// Call our maze solving routine.
	maze_solve();
     49a:	0e 94 c8 02 	call	0x590	; 0x590 <maze_solve>
     49e:	ff cf       	rjmp	.-2      	; 0x49e <main+0x8>

000004a0 <display_path>:
void display_path()
{
	// Set the last character of the path to a 0 so that the print()
	// function can find the end of the string.  This is how strings
	// are normally terminated in C.
	path[path_length] = 0;
     4a0:	e0 91 cb 01 	lds	r30, 0x01CB
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	e4 53       	subi	r30, 0x34	; 52
     4a8:	fe 4f       	sbci	r31, 0xFE	; 254
     4aa:	10 82       	st	Z, r1

	clear();
     4ac:	0e 94 43 09 	call	0x1286	; 0x1286 <clear>
	print(path);
     4b0:	8c ec       	ldi	r24, 0xCC	; 204
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <print>

	if(path_length > 8)
     4b8:	80 91 cb 01 	lds	r24, 0x01CB
     4bc:	89 30       	cpi	r24, 0x09	; 9
     4be:	40 f0       	brcs	.+16     	; 0x4d0 <display_path+0x30>
	{
		lcd_goto_xy(0,1);
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <lcd_goto_xy>
		print(path+8);
     4c8:	84 ed       	ldi	r24, 0xD4	; 212
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <print>
     4d0:	08 95       	ret

000004d2 <select_turn>:
char select_turn(unsigned char found_left, unsigned char found_straight, unsigned char found_right)
{
	// Make a decision about how to turn.  The following code
	// implements a left-hand-on-the-wall strategy, where we always
	// turn as far to the left as possible.
	if(found_left)
     4d2:	81 11       	cpse	r24, r1
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <select_turn+0x10>
		return 'L';
	else if(found_straight)
     4d6:	61 11       	cpse	r22, r1
     4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <select_turn+0x14>
		return 'S';
	else if(found_right)
     4da:	44 23       	and	r20, r20
     4dc:	31 f0       	breq	.+12     	; 0x4ea <select_turn+0x18>
		return 'R';
     4de:	82 e5       	ldi	r24, 0x52	; 82
     4e0:	08 95       	ret
{
	// Make a decision about how to turn.  The following code
	// implements a left-hand-on-the-wall strategy, where we always
	// turn as far to the left as possible.
	if(found_left)
		return 'L';
     4e2:	8c e4       	ldi	r24, 0x4C	; 76
     4e4:	08 95       	ret
	else if(found_straight)
		return 'S';
     4e6:	83 e5       	ldi	r24, 0x53	; 83
     4e8:	08 95       	ret
	else if(found_right)
		return 'R';
	else
		return 'B';
     4ea:	82 e4       	ldi	r24, 0x42	; 66
}
     4ec:	08 95       	ret

000004ee <simplify_path>:
// Path simplification.  The strategy is that whenever we encounter a
// sequence xBx, we can simplify it by cutting out the dead end.  For
// example, LBL -> S, because a single S bypasses the dead end
// represented by LBL.
void simplify_path()
{
     4ee:	cf 93       	push	r28
	// only simplify the path if the second-to-last turn was a 'B'
	if(path_length < 3 || path[path_length-2] != 'B')
     4f0:	c0 91 cb 01 	lds	r28, 0x01CB
     4f4:	c3 30       	cpi	r28, 0x03	; 3
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <simplify_path+0xc>
     4f8:	49 c0       	rjmp	.+146    	; 0x58c <simplify_path+0x9e>
     4fa:	2c 2f       	mov	r18, r28
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	24 53       	subi	r18, 0x34	; 52
     500:	3e 4f       	sbci	r19, 0xFE	; 254
     502:	f9 01       	movw	r30, r18
     504:	32 97       	sbiw	r30, 0x02	; 2
     506:	80 81       	ld	r24, Z
     508:	82 34       	cpi	r24, 0x42	; 66
     50a:	09 f0       	breq	.+2      	; 0x50e <simplify_path+0x20>
     50c:	3f c0       	rjmp	.+126    	; 0x58c <simplify_path+0x9e>
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	b9 01       	movw	r22, r18
     518:	fb 01       	movw	r30, r22
     51a:	e4 1b       	sub	r30, r20
     51c:	f5 0b       	sbc	r31, r21

	int total_angle = 0;
	int i;
	for(i=1;i<=3;i++)
	{
		switch(path[path_length-i])
     51e:	e0 81       	ld	r30, Z
     520:	ec 34       	cpi	r30, 0x4C	; 76
     522:	51 f0       	breq	.+20     	; 0x538 <simplify_path+0x4a>
     524:	e2 35       	cpi	r30, 0x52	; 82
     526:	29 f0       	breq	.+10     	; 0x532 <simplify_path+0x44>
     528:	e2 34       	cpi	r30, 0x42	; 66
     52a:	41 f4       	brne	.+16     	; 0x53c <simplify_path+0x4e>
			break;
		case 'L':
			total_angle += 270;
			break;
		case 'B':
			total_angle += 180;
     52c:	8c 54       	subi	r24, 0x4C	; 76
     52e:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
     530:	05 c0       	rjmp	.+10     	; 0x53c <simplify_path+0x4e>
	for(i=1;i<=3;i++)
	{
		switch(path[path_length-i])
		{
		case 'R':
			total_angle += 90;
     532:	86 5a       	subi	r24, 0xA6	; 166
     534:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
     536:	02 c0       	rjmp	.+4      	; 0x53c <simplify_path+0x4e>
		case 'L':
			total_angle += 270;
     538:	82 5f       	subi	r24, 0xF2	; 242
     53a:	9e 4f       	sbci	r25, 0xFE	; 254
	if(path_length < 3 || path[path_length-2] != 'B')
		return;

	int total_angle = 0;
	int i;
	for(i=1;i<=3;i++)
     53c:	4f 5f       	subi	r20, 0xFF	; 255
     53e:	5f 4f       	sbci	r21, 0xFF	; 255
     540:	44 30       	cpi	r20, 0x04	; 4
     542:	51 05       	cpc	r21, r1
     544:	49 f7       	brne	.-46     	; 0x518 <simplify_path+0x2a>
			break;
		}
	}

	// Get the angle as a number between 0 and 360 degrees.
	total_angle = total_angle % 360;
     546:	68 e6       	ldi	r22, 0x68	; 104
     548:	71 e0       	ldi	r23, 0x01	; 1
     54a:	0e 94 81 11 	call	0x2302	; 0x2302 <__divmodhi4>

	// Replace all of those turns with a single one.
	switch(total_angle)
     54e:	8a 35       	cpi	r24, 0x5A	; 90
     550:	91 05       	cpc	r25, r1
     552:	89 f0       	breq	.+34     	; 0x576 <simplify_path+0x88>
     554:	34 f4       	brge	.+12     	; 0x562 <simplify_path+0x74>
     556:	89 2b       	or	r24, r25
     558:	b1 f4       	brne	.+44     	; 0x586 <simplify_path+0x98>
	{
	case 0:
		path[path_length - 3] = 'S';
     55a:	f9 01       	movw	r30, r18
     55c:	33 97       	sbiw	r30, 0x03	; 3
     55e:	83 e5       	ldi	r24, 0x53	; 83
     560:	11 c0       	rjmp	.+34     	; 0x584 <simplify_path+0x96>

	// Get the angle as a number between 0 and 360 degrees.
	total_angle = total_angle % 360;

	// Replace all of those turns with a single one.
	switch(total_angle)
     562:	84 3b       	cpi	r24, 0xB4	; 180
     564:	91 05       	cpc	r25, r1
     566:	59 f0       	breq	.+22     	; 0x57e <simplify_path+0x90>
     568:	8e 30       	cpi	r24, 0x0E	; 14
     56a:	91 40       	sbci	r25, 0x01	; 1
     56c:	61 f4       	brne	.+24     	; 0x586 <simplify_path+0x98>
		break;
	case 180:
		path[path_length - 3] = 'B';
		break;
	case 270:
		path[path_length - 3] = 'L';
     56e:	f9 01       	movw	r30, r18
     570:	33 97       	sbiw	r30, 0x03	; 3
     572:	8c e4       	ldi	r24, 0x4C	; 76
     574:	07 c0       	rjmp	.+14     	; 0x584 <simplify_path+0x96>
	{
	case 0:
		path[path_length - 3] = 'S';
		break;
	case 90:
		path[path_length - 3] = 'R';
     576:	f9 01       	movw	r30, r18
     578:	33 97       	sbiw	r30, 0x03	; 3
     57a:	82 e5       	ldi	r24, 0x52	; 82
     57c:	03 c0       	rjmp	.+6      	; 0x584 <simplify_path+0x96>
		break;
	case 180:
		path[path_length - 3] = 'B';
     57e:	f9 01       	movw	r30, r18
     580:	33 97       	sbiw	r30, 0x03	; 3
     582:	82 e4       	ldi	r24, 0x42	; 66
		break;
	case 270:
		path[path_length - 3] = 'L';
     584:	80 83       	st	Z, r24
		break;
	}

	// The path is now two steps shorter.
	path_length -= 2;
     586:	c2 50       	subi	r28, 0x02	; 2
     588:	c0 93 cb 01 	sts	0x01CB, r28
}
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <maze_solve>:

// This function is called once, from main.c.
void maze_solve()
{
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	2b 97       	sbiw	r28, 0x0b	; 11
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
	// Loop until we have solved the maze.
	while(1)
	{
		// FIRST MAIN LOOP BODY  
		follow_segment();
     5a4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>

		// Drive straight a bit.  This helps us in case we entered the
		// intersection at an angle.
		// Note that we are slowing down - this prevents the robot
		// from tipping forward too much.
		set_motors(50,50);
     5a8:	62 e3       	ldi	r22, 0x32	; 50
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	82 e3       	ldi	r24, 0x32	; 50
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <set_motors>
		delay_ms(50);
     5b4:	82 e3       	ldi	r24, 0x32	; 50
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>
		unsigned char found_straight=0;
		unsigned char found_right=0;

		// Now read the sensors and check the intersection type.
		unsigned int sensors[5];
		read_line(sensors,IR_EMITTERS_ON);
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	ce 01       	movw	r24, r28
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <read_line>

		// Check for left and right exits.
		if(sensors[0] > 100)
     5c6:	11 e0       	ldi	r17, 0x01	; 1
     5c8:	29 81       	ldd	r18, Y+1	; 0x01
     5ca:	3a 81       	ldd	r19, Y+2	; 0x02
     5cc:	25 36       	cpi	r18, 0x65	; 101
     5ce:	31 05       	cpc	r19, r1
     5d0:	08 f4       	brcc	.+2      	; 0x5d4 <maze_solve+0x44>
     5d2:	10 e0       	ldi	r17, 0x00	; 0
			found_left = 1;
		if(sensors[4] > 100)
     5d4:	41 e0       	ldi	r20, 0x01	; 1
     5d6:	29 85       	ldd	r18, Y+9	; 0x09
     5d8:	3a 85       	ldd	r19, Y+10	; 0x0a
     5da:	25 36       	cpi	r18, 0x65	; 101
     5dc:	31 05       	cpc	r19, r1
     5de:	08 f4       	brcc	.+2      	; 0x5e2 <maze_solve+0x52>
     5e0:	40 e0       	ldi	r20, 0x00	; 0
			found_right = 1;

		// Drive straight a bit more - this is enough to line up our
		// wheels with the intersection.
		set_motors(40,40);
     5e2:	68 e2       	ldi	r22, 0x28	; 40
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	88 e2       	ldi	r24, 0x28	; 40
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	4b 87       	std	Y+11, r20	; 0x0b
     5ec:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <set_motors>
		delay_ms(200);
     5f0:	88 ec       	ldi	r24, 0xC8	; 200
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>

		// Check for a straight exit.
		read_line(sensors,IR_EMITTERS_ON);
     5f8:	61 e0       	ldi	r22, 0x01	; 1
     5fa:	ce 01       	movw	r24, r28
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <read_line>
		if(sensors[1] > 200 || sensors[2] > 200 || sensors[3] > 200)
     602:	2b 81       	ldd	r18, Y+3	; 0x03
     604:	3c 81       	ldd	r19, Y+4	; 0x04
     606:	4b 85       	ldd	r20, Y+11	; 0x0b
     608:	29 3c       	cpi	r18, 0xC9	; 201
     60a:	31 05       	cpc	r19, r1
     60c:	60 f4       	brcc	.+24     	; 0x626 <maze_solve+0x96>
     60e:	2d 81       	ldd	r18, Y+5	; 0x05
     610:	3e 81       	ldd	r19, Y+6	; 0x06
     612:	29 3c       	cpi	r18, 0xC9	; 201
     614:	31 05       	cpc	r19, r1
     616:	a0 f4       	brcc	.+40     	; 0x640 <maze_solve+0xb0>
     618:	2f 81       	ldd	r18, Y+7	; 0x07
     61a:	38 85       	ldd	r19, Y+8	; 0x08
     61c:	29 3c       	cpi	r18, 0xC9	; 201
     61e:	31 05       	cpc	r19, r1
     620:	78 f4       	brcc	.+30     	; 0x640 <maze_solve+0xb0>

		// These variables record whether the robot has seen a line to the
		// left, straight ahead, and right, whil examining the current
		// intersection.
		unsigned char found_left=0;
		unsigned char found_straight=0;
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	0e c0       	rjmp	.+28     	; 0x642 <maze_solve+0xb2>
			found_straight = 1;

		// Check for the ending spot.
		// If all three middle sensors are on dark black, we have
		// solved the maze.
		if(sensors[1] > 600 && sensors[2] > 600 && sensors[3] > 600)
     626:	29 35       	cpi	r18, 0x59	; 89
     628:	32 40       	sbci	r19, 0x02	; 2
     62a:	50 f0       	brcs	.+20     	; 0x640 <maze_solve+0xb0>
     62c:	2d 81       	ldd	r18, Y+5	; 0x05
     62e:	3e 81       	ldd	r19, Y+6	; 0x06
     630:	29 35       	cpi	r18, 0x59	; 89
     632:	32 40       	sbci	r19, 0x02	; 2
     634:	28 f0       	brcs	.+10     	; 0x640 <maze_solve+0xb0>
     636:	2f 81       	ldd	r18, Y+7	; 0x07
     638:	38 85       	ldd	r19, Y+8	; 0x08
     63a:	29 35       	cpi	r18, 0x59	; 89
     63c:	32 40       	sbci	r19, 0x02	; 2
     63e:	b0 f4       	brcc	.+44     	; 0x66c <maze_solve+0xdc>
     640:	61 e0       	ldi	r22, 0x01	; 1
			break;

		// Intersection identification is complete.
		// If the maze has been solved, we can follow the existing
		// path.  Otherwise, we need to learn the solution.
		unsigned char dir = select_turn(found_left, found_straight, found_right);
     642:	81 2f       	mov	r24, r17
     644:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_turn>
     648:	18 2f       	mov	r17, r24

		// Make the turn indicated by the path.
		turn(dir);
     64a:	0e 94 9f 03 	call	0x73e	; 0x73e <turn>

		// Store the intersection in the path variable.
		path[path_length] = dir;
     64e:	80 91 cb 01 	lds	r24, 0x01CB
     652:	e8 2f       	mov	r30, r24
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	e4 53       	subi	r30, 0x34	; 52
     658:	fe 4f       	sbci	r31, 0xFE	; 254
     65a:	10 83       	st	Z, r17
		path_length ++;
     65c:	8f 5f       	subi	r24, 0xFF	; 255
     65e:	80 93 cb 01 	sts	0x01CB, r24
		// You should check to make sure that the path_length does not
		// exceed the bounds of the array.  We'll ignore that in this
		// example.

		// Simplify the learned path.
		simplify_path();
     662:	0e 94 77 02 	call	0x4ee	; 0x4ee <simplify_path>

		// Display the path on the LCD.
		display_path();
     666:	0e 94 50 02 	call	0x4a0	; 0x4a0 <display_path>
	}
     66a:	9c cf       	rjmp	.-200    	; 0x5a4 <maze_solve+0x14>

		// Wait for the user to press a button, while displaying
		// the solution.
		while(!button_is_pressed(BUTTON_B))
		{
			if(get_ms() % 2000 < 1000)
     66c:	80 ed       	ldi	r24, 0xD0	; 208
     66e:	c8 2e       	mov	r12, r24
     670:	87 e0       	ldi	r24, 0x07	; 7
     672:	d8 2e       	mov	r13, r24
     674:	e1 2c       	mov	r14, r1
     676:	f1 2c       	mov	r15, r1
	// Now enter an infinite loop - we can re-run the maze as many
	// times as we want to.
	while(1)
	{
		// Beep to show that we finished the maze.
		set_motors(0,0);
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <set_motors>
		play(">>a32");
     684:	8a e4       	ldi	r24, 0x4A	; 74
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 ef 07 	call	0xfde	; 0xfde <play>

		// Wait for the user to press a button, while displaying
		// the solution.
		while(!button_is_pressed(BUTTON_B))
     68c:	80 e1       	ldi	r24, 0x10	; 16
     68e:	0e 94 38 0b 	call	0x1670	; 0x1670 <button_is_pressed>
     692:	81 11       	cpse	r24, r1
     694:	21 c0       	rjmp	.+66     	; 0x6d8 <maze_solve+0x148>
		{
			if(get_ms() % 2000 < 1000)
     696:	0e 94 c5 0b 	call	0x178a	; 0x178a <get_ms>
     69a:	a7 01       	movw	r20, r14
     69c:	96 01       	movw	r18, r12
     69e:	0e 94 95 11 	call	0x232a	; 0x232a <__udivmodsi4>
     6a2:	68 3e       	cpi	r22, 0xE8	; 232
     6a4:	73 40       	sbci	r23, 0x03	; 3
     6a6:	81 05       	cpc	r24, r1
     6a8:	91 05       	cpc	r25, r1
     6aa:	78 f4       	brcc	.+30     	; 0x6ca <maze_solve+0x13a>
			{
				clear();
     6ac:	0e 94 43 09 	call	0x1286	; 0x1286 <clear>
				print("Solved!");
     6b0:	80 e5       	ldi	r24, 0x50	; 80
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <print>
				lcd_goto_xy(0,1);
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <lcd_goto_xy>
				print("Press B");
     6c0:	8e e3       	ldi	r24, 0x3E	; 62
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <print>
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <maze_solve+0x13e>
			}
			else
				display_path();
     6ca:	0e 94 50 02 	call	0x4a0	; 0x4a0 <display_path>
			delay_ms(30);
     6ce:	8e e1       	ldi	r24, 0x1E	; 30
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>
     6d6:	da cf       	rjmp	.-76     	; 0x68c <maze_solve+0xfc>
		}
		while(button_is_pressed(BUTTON_B));
     6d8:	80 e1       	ldi	r24, 0x10	; 16
     6da:	0e 94 38 0b 	call	0x1670	; 0x1670 <button_is_pressed>
     6de:	81 11       	cpse	r24, r1
     6e0:	fb cf       	rjmp	.-10     	; 0x6d8 <maze_solve+0x148>
	
		delay_ms(1000);
     6e2:	88 ee       	ldi	r24, 0xE8	; 232
     6e4:	93 e0       	ldi	r25, 0x03	; 3
     6e6:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>
     6ea:	0c ec       	ldi	r16, 0xCC	; 204
     6ec:	11 e0       	ldi	r17, 0x01	; 1

		// Re-run the maze.  It's not necessary to identify the
		// intersections, so this loop is really simple.
		int i;
		for(i=0;i<path_length;i++)
     6ee:	80 91 cb 01 	lds	r24, 0x01CB
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	98 01       	movw	r18, r16
     6f6:	2c 5c       	subi	r18, 0xCC	; 204
     6f8:	31 40       	sbci	r19, 0x01	; 1
     6fa:	28 17       	cp	r18, r24
     6fc:	39 07       	cpc	r19, r25
     6fe:	e4 f4       	brge	.+56     	; 0x738 <maze_solve+0x1a8>
		{
			// SECOND MAIN LOOP BODY  
			follow_segment();
     700:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>

			// Drive straight while slowing down, as before.
			set_motors(50,50);
     704:	62 e3       	ldi	r22, 0x32	; 50
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	82 e3       	ldi	r24, 0x32	; 50
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <set_motors>
			delay_ms(50);
     710:	82 e3       	ldi	r24, 0x32	; 50
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>
			set_motors(40,40);
     718:	68 e2       	ldi	r22, 0x28	; 40
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	88 e2       	ldi	r24, 0x28	; 40
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <set_motors>
			delay_ms(200);
     724:	88 ec       	ldi	r24, 0xC8	; 200
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>

			// Make a turn according to the instruction stored in
			// path[i].
			turn(path[i]);
     72c:	f8 01       	movw	r30, r16
     72e:	81 91       	ld	r24, Z+
     730:	8f 01       	movw	r16, r30
     732:	0e 94 9f 03 	call	0x73e	; 0x73e <turn>
     736:	db cf       	rjmp	.-74     	; 0x6ee <maze_solve+0x15e>
		}
		
		// Follow the last segment up to the finish.
		follow_segment();
     738:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <follow_segment>

		// Now we should be at the finish!  Restart the loop.
	}
     73c:	9d cf       	rjmp	.-198    	; 0x678 <maze_solve+0xe8>

0000073e <turn>:

// Turns according to the parameter dir, which should be 'L', 'R', 'S'
// (straight), or 'B' (back).
void turn(char dir)
{
	switch(dir)
     73e:	8c 34       	cpi	r24, 0x4C	; 76
     740:	69 f0       	breq	.+26     	; 0x75c <turn+0x1e>
     742:	82 35       	cpi	r24, 0x52	; 82
     744:	81 f0       	breq	.+32     	; 0x766 <turn+0x28>
     746:	82 34       	cpi	r24, 0x42	; 66
     748:	c1 f4       	brne	.+48     	; 0x77a <turn+0x3c>
		set_motors(80,-80);
		delay_ms(200);
		break;
	case 'B':
		// Turn around.
		set_motors(80,-80);
     74a:	60 eb       	ldi	r22, 0xB0	; 176
     74c:	7f ef       	ldi	r23, 0xFF	; 255
     74e:	80 e5       	ldi	r24, 0x50	; 80
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <set_motors>
		delay_ms(400);
     756:	80 e9       	ldi	r24, 0x90	; 144
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	0d c0       	rjmp	.+26     	; 0x776 <turn+0x38>
{
	switch(dir)
	{
	case 'L':
		// Turn left.
		set_motors(-80,80);
     75c:	60 e5       	ldi	r22, 0x50	; 80
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	80 eb       	ldi	r24, 0xB0	; 176
     762:	9f ef       	ldi	r25, 0xFF	; 255
     764:	04 c0       	rjmp	.+8      	; 0x76e <turn+0x30>
		delay_ms(200);
		break;
	case 'R':
		// Turn right.
		set_motors(80,-80);
     766:	60 eb       	ldi	r22, 0xB0	; 176
     768:	7f ef       	ldi	r23, 0xFF	; 255
     76a:	80 e5       	ldi	r24, 0x50	; 80
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <set_motors>
		delay_ms(200);
     772:	88 ec       	ldi	r24, 0xC8	; 200
     774:	90 e0       	ldi	r25, 0x00	; 0
		break;
	case 'B':
		// Turn around.
		set_motors(80,-80);
		delay_ms(400);
     776:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <delay_ms>
     77a:	08 95       	ret

0000077c <_ZN15OrangutanAnalog7setModeEh>:
     77c:	88 23       	and	r24, r24
     77e:	21 f4       	brne	.+8      	; 0x788 <_ZN15OrangutanAnalog7setModeEh+0xc>
     780:	80 91 7c 00 	lds	r24, 0x007C
     784:	8f 7d       	andi	r24, 0xDF	; 223
     786:	03 c0       	rjmp	.+6      	; 0x78e <_ZN15OrangutanAnalog7setModeEh+0x12>
     788:	80 91 7c 00 	lds	r24, 0x007C
     78c:	80 62       	ori	r24, 0x20	; 32
     78e:	80 93 7c 00 	sts	0x007C, r24
     792:	08 95       	ret

00000794 <_ZN15OrangutanAnalog7getModeEv>:
     794:	80 91 7c 00 	lds	r24, 0x007C
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	25 e0       	ldi	r18, 0x05	; 5
     79c:	95 95       	asr	r25
     79e:	87 95       	ror	r24
     7a0:	2a 95       	dec	r18
     7a2:	e1 f7       	brne	.-8      	; 0x79c <_ZN15OrangutanAnalog7getModeEv+0x8>
     7a4:	81 70       	andi	r24, 0x01	; 1
     7a6:	08 95       	ret

000007a8 <_ZN15OrangutanAnalog12isConvertingEv>:
     7a8:	80 91 7a 00 	lds	r24, 0x007A
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	36 e0       	ldi	r19, 0x06	; 6
     7b0:	95 95       	asr	r25
     7b2:	87 95       	ror	r24
     7b4:	3a 95       	dec	r19
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <_ZN15OrangutanAnalog12isConvertingEv+0x8>
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	08 95       	ret

000007bc <_ZN15OrangutanAnalog16conversionResultEv>:
     7bc:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN15OrangutanAnalog7getModeEv>
     7c0:	88 23       	and	r24, r24
     7c2:	21 f0       	breq	.+8      	; 0x7cc <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     7c4:	20 91 79 00 	lds	r18, 0x0079
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <_ZN15OrangutanAnalog16conversionResultEv+0x18>
     7cc:	20 91 78 00 	lds	r18, 0x0078
     7d0:	30 91 79 00 	lds	r19, 0x0079
     7d4:	c9 01       	movw	r24, r18
     7d6:	08 95       	ret

000007d8 <_ZN15OrangutanAnalog15startConversionEhh>:
     7d8:	80 32       	cpi	r24, 0x20	; 32
     7da:	b0 f4       	brcc	.+44     	; 0x808 <_ZN15OrangutanAnalog15startConversionEhh+0x30>
     7dc:	97 e8       	ldi	r25, 0x87	; 135
     7de:	90 93 7a 00 	sts	0x007A, r25
     7e2:	90 91 7c 00 	lds	r25, 0x007C
     7e6:	29 2f       	mov	r18, r25
     7e8:	20 64       	ori	r18, 0x40	; 64
     7ea:	66 23       	and	r22, r22
     7ec:	11 f0       	breq	.+4      	; 0x7f2 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     7ee:	90 6c       	ori	r25, 0xC0	; 192
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <_ZN15OrangutanAnalog15startConversionEhh+0x1e>
     7f2:	92 2f       	mov	r25, r18
     7f4:	9f 77       	andi	r25, 0x7F	; 127
     7f6:	90 7e       	andi	r25, 0xE0	; 224
     7f8:	98 2b       	or	r25, r24
     7fa:	90 93 7c 00 	sts	0x007C, r25
     7fe:	80 91 7a 00 	lds	r24, 0x007A
     802:	80 64       	ori	r24, 0x40	; 64
     804:	80 93 7a 00 	sts	0x007A, r24
     808:	08 95       	ret

0000080a <_ZN15OrangutanAnalog11readAverageEhj>:
     80a:	a0 e0       	ldi	r26, 0x00	; 0
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	eb e0       	ldi	r30, 0x0B	; 11
     810:	f4 e0       	ldi	r31, 0x04	; 4
     812:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__prologue_saves__+0x14>
     816:	6b 01       	movw	r12, r22
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <_ZN15OrangutanAnalog15startConversionEhh>
     81e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_ZN15OrangutanAnalog12isConvertingEv>
     822:	88 23       	and	r24, r24
     824:	e1 f7       	brne	.-8      	; 0x81e <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     826:	e6 01       	movw	r28, r12
     828:	ee 24       	eor	r14, r14
     82a:	ff 24       	eor	r15, r15
     82c:	87 01       	movw	r16, r14
     82e:	80 91 7a 00 	lds	r24, 0x007A
     832:	80 64       	ori	r24, 0x40	; 64
     834:	80 93 7a 00 	sts	0x007A, r24
     838:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_ZN15OrangutanAnalog12isConvertingEv>
     83c:	88 23       	and	r24, r24
     83e:	e1 f7       	brne	.-8      	; 0x838 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     840:	0e 94 de 03 	call	0x7bc	; 0x7bc <_ZN15OrangutanAnalog16conversionResultEv>
     844:	a0 e0       	ldi	r26, 0x00	; 0
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	e8 0e       	add	r14, r24
     84a:	f9 1e       	adc	r15, r25
     84c:	0a 1f       	adc	r16, r26
     84e:	1b 1f       	adc	r17, r27
     850:	21 97       	sbiw	r28, 0x01	; 1
     852:	69 f7       	brne	.-38     	; 0x82e <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     854:	c6 01       	movw	r24, r12
     856:	96 95       	lsr	r25
     858:	87 95       	ror	r24
     85a:	20 e4       	ldi	r18, 0x40	; 64
     85c:	c2 16       	cp	r12, r18
     85e:	d1 04       	cpc	r13, r1
     860:	40 f4       	brcc	.+16     	; 0x872 <_ZN15OrangutanAnalog11readAverageEhj+0x68>
     862:	8e 0d       	add	r24, r14
     864:	9f 1d       	adc	r25, r15
     866:	6c 2d       	mov	r22, r12
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	0e 94 6d 11 	call	0x22da	; 0x22da <__udivmodhi4>
     86e:	cb 01       	movw	r24, r22
     870:	0d c0       	rjmp	.+26     	; 0x88c <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     872:	bc 01       	movw	r22, r24
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	6e 0d       	add	r22, r14
     87a:	7f 1d       	adc	r23, r15
     87c:	80 1f       	adc	r24, r16
     87e:	91 1f       	adc	r25, r17
     880:	96 01       	movw	r18, r12
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	0e 94 95 11 	call	0x232a	; 0x232a <__udivmodsi4>
     88a:	c9 01       	movw	r24, r18
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	e8 e0       	ldi	r30, 0x08	; 8
     892:	0c 94 07 12 	jmp	0x240e	; 0x240e <__epilogue_restores__+0x14>

00000896 <_ZN15OrangutanAnalog12toMillivoltsEj>:
     896:	a3 e0       	ldi	r26, 0x03	; 3
     898:	b0 e0       	ldi	r27, 0x00	; 0
     89a:	e1 e5       	ldi	r30, 0x51	; 81
     89c:	f4 e0       	ldi	r31, 0x04	; 4
     89e:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__prologue_saves__+0x1e>
     8a2:	bc 01       	movw	r22, r24
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	20 91 00 01 	lds	r18, 0x0100
     8ac:	30 91 01 01 	lds	r19, 0x0101
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__mulsi3>
     8b8:	18 2f       	mov	r17, r24
     8ba:	69 83       	std	Y+1, r22	; 0x01
     8bc:	7a 83       	std	Y+2, r23	; 0x02
     8be:	9b 83       	std	Y+3, r25	; 0x03
     8c0:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN15OrangutanAnalog7getModeEv>
     8c4:	69 81       	ldd	r22, Y+1	; 0x01
     8c6:	7a 81       	ldd	r23, Y+2	; 0x02
     8c8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ca:	88 23       	and	r24, r24
     8cc:	71 f0       	breq	.+28     	; 0x8ea <_ZN15OrangutanAnalog12toMillivoltsEj+0x54>
     8ce:	9b 01       	movw	r18, r22
     8d0:	41 2f       	mov	r20, r17
     8d2:	59 2f       	mov	r21, r25
     8d4:	ca 01       	movw	r24, r20
     8d6:	b9 01       	movw	r22, r18
     8d8:	61 58       	subi	r22, 0x81	; 129
     8da:	7f 4f       	sbci	r23, 0xFF	; 255
     8dc:	8f 4f       	sbci	r24, 0xFF	; 255
     8de:	9f 4f       	sbci	r25, 0xFF	; 255
     8e0:	2f ef       	ldi	r18, 0xFF	; 255
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	0d c0       	rjmp	.+26     	; 0x904 <__stack+0x5>
     8ea:	9b 01       	movw	r18, r22
     8ec:	41 2f       	mov	r20, r17
     8ee:	59 2f       	mov	r21, r25
     8f0:	ca 01       	movw	r24, r20
     8f2:	b9 01       	movw	r22, r18
     8f4:	61 50       	subi	r22, 0x01	; 1
     8f6:	7e 4f       	sbci	r23, 0xFE	; 254
     8f8:	8f 4f       	sbci	r24, 0xFF	; 255
     8fa:	9f 4f       	sbci	r25, 0xFF	; 255
     8fc:	2f ef       	ldi	r18, 0xFF	; 255
     8fe:	33 e0       	ldi	r19, 0x03	; 3
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	0e 94 95 11 	call	0x232a	; 0x232a <__udivmodsi4>
     908:	c9 01       	movw	r24, r18
     90a:	23 96       	adiw	r28, 0x03	; 3
     90c:	e3 e0       	ldi	r30, 0x03	; 3
     90e:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x1e>

00000912 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     912:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN15OrangutanAnalog11readAverageEhj>
     916:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN15OrangutanAnalog12toMillivoltsEj>
     91a:	08 95       	ret

0000091c <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN15OrangutanAnalog7getModeEv>
     926:	18 2f       	mov	r17, r24
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	0e 94 be 03 	call	0x77c	; 0x77c <_ZN15OrangutanAnalog7setModeEh>
     92e:	86 e0       	ldi	r24, 0x06	; 6
     930:	6a e0       	ldi	r22, 0x0A	; 10
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	0e 94 89 04 	call	0x912	; 0x912 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     938:	ec 01       	movw	r28, r24
     93a:	81 2f       	mov	r24, r17
     93c:	0e 94 be 03 	call	0x77c	; 0x77c <_ZN15OrangutanAnalog7setModeEh>
     940:	9e 01       	movw	r18, r28
     942:	22 0f       	add	r18, r18
     944:	33 1f       	adc	r19, r19
     946:	2c 0f       	add	r18, r28
     948:	3d 1f       	adc	r19, r29
     94a:	2f 5f       	subi	r18, 0xFF	; 255
     94c:	3f 4f       	sbci	r19, 0xFF	; 255
     94e:	36 95       	lsr	r19
     950:	27 95       	ror	r18
     952:	c9 01       	movw	r24, r18
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	08 95       	ret

0000095c <read_battery_millivolts_3pi>:
     95c:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     960:	08 95       	ret

00000962 <_ZL16currentCharacterv>:
     962:	90 91 5d 01 	lds	r25, 0x015D
     966:	e0 91 59 01 	lds	r30, 0x0159
     96a:	f0 91 5a 01 	lds	r31, 0x015A
     96e:	99 23       	and	r25, r25
     970:	11 f0       	breq	.+4      	; 0x976 <_ZL16currentCharacterv+0x14>
     972:	84 91       	lpm	r24, Z
     974:	01 c0       	rjmp	.+2      	; 0x978 <_ZL16currentCharacterv+0x16>
     976:	80 81       	ld	r24, Z
     978:	28 2f       	mov	r18, r24
     97a:	21 54       	subi	r18, 0x41	; 65
     97c:	2a 31       	cpi	r18, 0x1A	; 26
     97e:	10 f4       	brcc	.+4      	; 0x984 <_ZL16currentCharacterv+0x22>
     980:	80 5e       	subi	r24, 0xE0	; 224
     982:	08 95       	ret
     984:	80 32       	cpi	r24, 0x20	; 32
     986:	71 f4       	brne	.+28     	; 0x9a4 <_ZL16currentCharacterv+0x42>
     988:	20 91 59 01 	lds	r18, 0x0159
     98c:	30 91 5a 01 	lds	r19, 0x015A
     990:	a9 01       	movw	r20, r18
     992:	4f 5f       	subi	r20, 0xFF	; 255
     994:	5f 4f       	sbci	r21, 0xFF	; 255
     996:	50 93 5a 01 	sts	0x015A, r21
     99a:	40 93 59 01 	sts	0x0159, r20
     99e:	21 15       	cp	r18, r1
     9a0:	31 05       	cpc	r19, r1
     9a2:	09 f7       	brne	.-62     	; 0x966 <_ZL16currentCharacterv+0x4>
     9a4:	08 95       	ret

000009a6 <_ZL9getNumberv>:
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	0e 94 b1 04 	call	0x962	; 0x962 <_ZL16currentCharacterv>
     9b2:	c0 e0       	ldi	r28, 0x00	; 0
     9b4:	d0 e0       	ldi	r29, 0x00	; 0
     9b6:	1b c0       	rjmp	.+54     	; 0x9ee <_ZL9getNumberv+0x48>
     9b8:	9e 01       	movw	r18, r28
     9ba:	22 0f       	add	r18, r18
     9bc:	33 1f       	adc	r19, r19
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	cc 0f       	add	r28, r28
     9c2:	dd 1f       	adc	r29, r29
     9c4:	9a 95       	dec	r25
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <_ZL9getNumberv+0x1a>
     9c8:	c2 0f       	add	r28, r18
     9ca:	d3 1f       	adc	r29, r19
     9cc:	99 27       	eor	r25, r25
     9ce:	87 fd       	sbrc	r24, 7
     9d0:	90 95       	com	r25
     9d2:	c8 0f       	add	r28, r24
     9d4:	d9 1f       	adc	r29, r25
     9d6:	e0 97       	sbiw	r28, 0x30	; 48
     9d8:	80 91 59 01 	lds	r24, 0x0159
     9dc:	90 91 5a 01 	lds	r25, 0x015A
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	90 93 5a 01 	sts	0x015A, r25
     9e6:	80 93 59 01 	sts	0x0159, r24
     9ea:	0e 94 b1 04 	call	0x962	; 0x962 <_ZL16currentCharacterv>
     9ee:	98 2f       	mov	r25, r24
     9f0:	90 53       	subi	r25, 0x30	; 48
     9f2:	9a 30       	cpi	r25, 0x0A	; 10
     9f4:	08 f3       	brcs	.-62     	; 0x9b8 <_ZL9getNumberv+0x12>
     9f6:	ce 01       	movw	r24, r28
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	08 95       	ret

00000a02 <_ZN15OrangutanBuzzer5init2Ev>:
     a02:	10 92 6f 00 	sts	0x006F, r1
     a06:	83 e2       	ldi	r24, 0x23	; 35
     a08:	80 93 80 00 	sts	0x0080, r24
     a0c:	81 e1       	ldi	r24, 0x11	; 17
     a0e:	80 93 81 00 	sts	0x0081, r24
     a12:	10 92 82 00 	sts	0x0082, r1
     a16:	80 e1       	ldi	r24, 0x10	; 16
     a18:	97 e2       	ldi	r25, 0x27	; 39
     a1a:	90 93 89 00 	sts	0x0089, r25
     a1e:	80 93 88 00 	sts	0x0088, r24
     a22:	10 92 8b 00 	sts	0x008B, r1
     a26:	10 92 8a 00 	sts	0x008A, r1
     a2a:	22 9a       	sbi	0x04, 2	; 4
     a2c:	78 94       	sei
     a2e:	08 95       	ret

00000a30 <_ZN15OrangutanBuzzer4initEv>:
     a30:	80 91 58 01 	lds	r24, 0x0158
     a34:	88 23       	and	r24, r24
     a36:	29 f4       	brne	.+10     	; 0xa42 <_ZN15OrangutanBuzzer4initEv+0x12>
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	80 93 58 01 	sts	0x0158, r24
     a3e:	0e 94 01 05 	call	0xa02	; 0xa02 <_ZN15OrangutanBuzzer5init2Ev>
     a42:	08 95       	ret

00000a44 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	e8 e2       	ldi	r30, 0x28	; 40
     a4a:	f5 e0       	ldi	r31, 0x05	; 5
     a4c:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__prologue_saves__+0xc>
     a50:	8c 01       	movw	r16, r24
     a52:	5b 01       	movw	r10, r22
     a54:	e4 2e       	mov	r14, r20
     a56:	0e 94 18 05 	call	0xa30	; 0xa30 <_ZN15OrangutanBuzzer4initEv>
     a5a:	10 92 02 01 	sts	0x0102, r1
     a5e:	17 ff       	sbrs	r17, 7
     a60:	04 c0       	rjmp	.+8      	; 0xa6a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x26>
     a62:	1f 77       	andi	r17, 0x7F	; 127
     a64:	aa e0       	ldi	r26, 0x0A	; 10
     a66:	fa 2e       	mov	r15, r26
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
     a6a:	ff 24       	eor	r15, r15
     a6c:	f3 94       	inc	r15
     a6e:	c0 90 81 00 	lds	r12, 0x0081
     a72:	dd 24       	eor	r13, r13
     a74:	28 ef       	ldi	r18, 0xF8	; 248
     a76:	c2 22       	and	r12, r18
     a78:	dd 24       	eor	r13, r13
     a7a:	88 ec       	ldi	r24, 0xC8	; 200
     a7c:	3f 2d       	mov	r19, r15
     a7e:	38 9f       	mul	r19, r24
     a80:	c0 01       	movw	r24, r0
     a82:	11 24       	eor	r1, r1
     a84:	80 17       	cp	r24, r16
     a86:	91 07       	cpc	r25, r17
     a88:	d8 f4       	brcc	.+54     	; 0xac0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x7c>
     a8a:	e8 01       	movw	r28, r16
     a8c:	67 e2       	ldi	r22, 0x27	; 39
     a8e:	01 31       	cpi	r16, 0x11	; 17
     a90:	16 07       	cpc	r17, r22
     a92:	10 f0       	brcs	.+4      	; 0xa98 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x54>
     a94:	c0 e1       	ldi	r28, 0x10	; 16
     a96:	d7 e2       	ldi	r29, 0x27	; 39
     a98:	be 01       	movw	r22, r28
     a9a:	76 95       	lsr	r23
     a9c:	67 95       	ror	r22
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	60 58       	subi	r22, 0x80	; 128
     aa4:	79 46       	sbci	r23, 0x69	; 105
     aa6:	87 46       	sbci	r24, 0x67	; 103
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	9e 01       	movw	r18, r28
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	0e 94 95 11 	call	0x232a	; 0x232a <__udivmodsi4>
     ab4:	89 01       	movw	r16, r18
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	c8 2a       	or	r12, r24
     abc:	d9 2a       	or	r13, r25
     abe:	2c c0       	rjmp	.+88     	; 0xb18 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd4>
     ac0:	98 e2       	ldi	r25, 0x28	; 40
     ac2:	f9 9e       	mul	r15, r25
     ac4:	90 2d       	mov	r25, r0
     ac6:	11 24       	eor	r1, r1
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	89 2e       	mov	r8, r25
     acc:	e4 01       	movw	r28, r8
     ace:	4e 01       	movw	r8, r28
     ad0:	98 2e       	mov	r9, r24
     ad2:	e4 01       	movw	r28, r8
     ad4:	80 16       	cp	r8, r16
     ad6:	91 06       	cpc	r9, r17
     ad8:	08 f4       	brcc	.+2      	; 0xadc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x98>
     ada:	e8 01       	movw	r28, r16
     adc:	be 01       	movw	r22, r28
     ade:	76 95       	lsr	r23
     ae0:	67 95       	ror	r22
     ae2:	9e 01       	movw	r18, r28
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	8f 2d       	mov	r24, r15
     aea:	8a 30       	cpi	r24, 0x0A	; 10
     aec:	39 f4       	brne	.+14     	; 0xafc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb8>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	60 5e       	subi	r22, 0xE0	; 224
     af4:	73 44       	sbci	r23, 0x43	; 67
     af6:	81 44       	sbci	r24, 0x41	; 65
     af8:	9f 4f       	sbci	r25, 0xFF	; 255
     afa:	06 c0       	rjmp	.+12     	; 0xb08 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc4>
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	60 53       	subi	r22, 0x30	; 48
     b02:	7d 4e       	sbci	r23, 0xED	; 237
     b04:	8c 4e       	sbci	r24, 0xEC	; 236
     b06:	9f 4f       	sbci	r25, 0xFF	; 255
     b08:	0e 94 95 11 	call	0x232a	; 0x232a <__udivmodsi4>
     b0c:	89 01       	movw	r16, r18
     b0e:	52 e0       	ldi	r21, 0x02	; 2
     b10:	85 2e       	mov	r8, r21
     b12:	91 2c       	mov	r9, r1
     b14:	c8 28       	or	r12, r8
     b16:	d9 28       	or	r13, r9
     b18:	2f 2d       	mov	r18, r15
     b1a:	2a 30       	cpi	r18, 0x0A	; 10
     b1c:	39 f4       	brne	.+14     	; 0xb2c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe8>
     b1e:	ce 01       	movw	r24, r28
     b20:	05 96       	adiw	r24, 0x05	; 5
     b22:	6a e0       	ldi	r22, 0x0A	; 10
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	0e 94 6d 11 	call	0x22da	; 0x22da <__udivmodhi4>
     b2a:	eb 01       	movw	r28, r22
     b2c:	33 e0       	ldi	r19, 0x03	; 3
     b2e:	c8 3e       	cpi	r28, 0xE8	; 232
     b30:	d3 07       	cpc	r29, r19
     b32:	79 f0       	breq	.+30     	; 0xb52 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x10e>
     b34:	be 01       	movw	r22, r28
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	95 01       	movw	r18, r10
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__mulsi3>
     b44:	28 ee       	ldi	r18, 0xE8	; 232
     b46:	33 e0       	ldi	r19, 0x03	; 3
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	0e 94 b7 11 	call	0x236e	; 0x236e <__divmodsi4>
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
     b52:	95 01       	movw	r18, r10
     b54:	10 92 6f 00 	sts	0x006F, r1
     b58:	c0 92 81 00 	sts	0x0081, r12
     b5c:	10 93 89 00 	sts	0x0089, r17
     b60:	00 93 88 00 	sts	0x0088, r16
     b64:	40 91 88 00 	lds	r20, 0x0088
     b68:	50 91 89 00 	lds	r21, 0x0089
     b6c:	6e 2d       	mov	r22, r14
     b6e:	60 31       	cpi	r22, 0x10	; 16
     b70:	08 f0       	brcs	.+2      	; 0xb74 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
     b72:	6f e0       	ldi	r22, 0x0F	; 15
     b74:	80 e1       	ldi	r24, 0x10	; 16
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	86 1b       	sub	r24, r22
     b7a:	91 09       	sbc	r25, r1
     b7c:	ba 01       	movw	r22, r20
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
     b80:	76 95       	lsr	r23
     b82:	67 95       	ror	r22
     b84:	8a 95       	dec	r24
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
     b88:	70 93 8b 00 	sts	0x008B, r23
     b8c:	60 93 8a 00 	sts	0x008A, r22
     b90:	30 93 60 01 	sts	0x0160, r19
     b94:	20 93 5f 01 	sts	0x015F, r18
     b98:	86 b3       	in	r24, 0x16	; 22
     b9a:	8f ef       	ldi	r24, 0xFF	; 255
     b9c:	86 bb       	out	0x16, r24	; 22
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 6f 00 	sts	0x006F, r24
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	ec e0       	ldi	r30, 0x0C	; 12
     baa:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__epilogue_restores__+0xc>

00000bae <_ZN15OrangutanBuzzer8playNoteEhjh>:
     bae:	9b 01       	movw	r18, r22
     bb0:	8f 3f       	cpi	r24, 0xFF	; 255
     bb2:	11 f0       	breq	.+4      	; 0xbb8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa>
     bb4:	44 23       	and	r20, r20
     bb6:	29 f4       	brne	.+10     	; 0xbc2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x14>
     bb8:	88 ee       	ldi	r24, 0xE8	; 232
     bba:	93 e0       	ldi	r25, 0x03	; 3
     bbc:	b9 01       	movw	r22, r18
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	49 c0       	rjmp	.+146    	; 0xc54 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa6>
     bc2:	81 31       	cpi	r24, 0x11	; 17
     bc4:	30 f0       	brcs	.+12     	; 0xbd2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x24>
     bc6:	58 2f       	mov	r21, r24
     bc8:	50 51       	subi	r21, 0x10	; 16
     bca:	50 36       	cpi	r21, 0x60	; 96
     bcc:	18 f0       	brcs	.+6      	; 0xbd4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
     bce:	5f e5       	ldi	r21, 0x5F	; 95
     bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	85 2f       	mov	r24, r21
     bd6:	6c e0       	ldi	r22, 0x0C	; 12
     bd8:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__udivmodqi4>
     bdc:	a8 2f       	mov	r26, r24
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e4 ef       	ldi	r30, 0xF4	; 244
     be2:	ff ef       	ldi	r31, 0xFF	; 255
     be4:	ae 9f       	mul	r26, r30
     be6:	b0 01       	movw	r22, r0
     be8:	af 9f       	mul	r26, r31
     bea:	70 0d       	add	r23, r0
     bec:	be 9f       	mul	r27, r30
     bee:	70 0d       	add	r23, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	65 0f       	add	r22, r21
     bf4:	71 1d       	adc	r23, r1
     bf6:	6c 30       	cpi	r22, 0x0C	; 12
     bf8:	71 05       	cpc	r23, r1
     bfa:	40 f4       	brcc	.+16     	; 0xc0c <_ZN15OrangutanBuzzer8playNoteEhjh+0x5e>
     bfc:	fb 01       	movw	r30, r22
     bfe:	ee 0f       	add	r30, r30
     c00:	ff 1f       	adc	r31, r31
     c02:	e4 5f       	subi	r30, 0xF4	; 244
     c04:	fe 4f       	sbci	r31, 0xFE	; 254
     c06:	60 81       	ld	r22, Z
     c08:	71 81       	ldd	r23, Z+1	; 0x01
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	87 30       	cpi	r24, 0x07	; 7
     c12:	81 f0       	breq	.+32     	; 0xc34 <_ZN15OrangutanBuzzer8playNoteEhjh+0x86>
     c14:	08 2e       	mov	r0, r24
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <_ZN15OrangutanBuzzer8playNoteEhjh+0x6e>
     c18:	66 0f       	add	r22, r22
     c1a:	77 1f       	adc	r23, r23
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6a>
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	28 f0       	brcs	.+10     	; 0xc2e <_ZN15OrangutanBuzzer8playNoteEhjh+0x80>
     c24:	cb 01       	movw	r24, r22
     c26:	05 96       	adiw	r24, 0x05	; 5
     c28:	6a e0       	ldi	r22, 0x0A	; 10
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	0c c0       	rjmp	.+24     	; 0xc46 <_ZN15OrangutanBuzzer8playNoteEhjh+0x98>
     c2e:	60 50       	subi	r22, 0x00	; 0
     c30:	70 48       	sbci	r23, 0x80	; 128
     c32:	0b c0       	rjmp	.+22     	; 0xc4a <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
     c34:	cb 01       	movw	r24, r22
     c36:	b6 e0       	ldi	r27, 0x06	; 6
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	ba 95       	dec	r27
     c3e:	e1 f7       	brne	.-8      	; 0xc38 <_ZN15OrangutanBuzzer8playNoteEhjh+0x8a>
     c40:	02 96       	adiw	r24, 0x02	; 2
     c42:	65 e0       	ldi	r22, 0x05	; 5
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	0e 94 6d 11 	call	0x22da	; 0x22da <__udivmodhi4>
     c4a:	40 31       	cpi	r20, 0x10	; 16
     c4c:	08 f0       	brcs	.+2      	; 0xc50 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa2>
     c4e:	4f e0       	ldi	r20, 0x0F	; 15
     c50:	cb 01       	movw	r24, r22
     c52:	b9 01       	movw	r22, r18
     c54:	0e 94 22 05 	call	0xa44	; 0xa44 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     c58:	08 95       	ret

00000c5a <_ZL8nextNotev>:
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e3 e3       	ldi	r30, 0x33	; 51
     c60:	f6 e0       	ldi	r31, 0x06	; 6
     c62:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__prologue_saves__+0xa>
     c66:	b0 90 03 01 	lds	r11, 0x0103
     c6a:	80 91 5b 01 	lds	r24, 0x015B
     c6e:	88 23       	and	r24, r24
     c70:	61 f0       	breq	.+24     	; 0xc8a <_ZL8nextNotev+0x30>
     c72:	60 91 5c 01 	lds	r22, 0x015C
     c76:	66 23       	and	r22, r22
     c78:	41 f0       	breq	.+16     	; 0xc8a <_ZL8nextNotev+0x30>
     c7a:	8f ef       	ldi	r24, 0xFF	; 255
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	0e 94 d7 05 	call	0xbae	; 0xbae <_ZN15OrangutanBuzzer8playNoteEhjh>
     c84:	10 92 5c 01 	sts	0x015C, r1
     c88:	34 c1       	rjmp	.+616    	; 0xef2 <_ZL8nextNotev+0x298>
     c8a:	c0 ec       	ldi	r28, 0xC0	; 192
     c8c:	dd e5       	ldi	r29, 0x5D	; 93
     c8e:	aa 24       	eor	r10, r10
     c90:	a3 94       	inc	r10
     c92:	14 e0       	ldi	r17, 0x04	; 4
     c94:	71 2e       	mov	r7, r17
     c96:	00 ed       	ldi	r16, 0xD0	; 208
     c98:	17 e0       	ldi	r17, 0x07	; 7
     c9a:	b4 e0       	ldi	r27, 0x04	; 4
     c9c:	eb 2e       	mov	r14, r27
     c9e:	f1 2c       	mov	r15, r1
     ca0:	a4 ef       	ldi	r26, 0xF4	; 244
     ca2:	ca 2e       	mov	r12, r26
     ca4:	a1 e0       	ldi	r26, 0x01	; 1
     ca6:	da 2e       	mov	r13, r26
     ca8:	ff e0       	ldi	r31, 0x0F	; 15
     caa:	8f 2e       	mov	r8, r31
     cac:	91 2c       	mov	r9, r1
     cae:	0e 94 b1 04 	call	0x962	; 0x962 <_ZL16currentCharacterv>
     cb2:	20 91 59 01 	lds	r18, 0x0159
     cb6:	30 91 5a 01 	lds	r19, 0x015A
     cba:	2f 5f       	subi	r18, 0xFF	; 255
     cbc:	3f 4f       	sbci	r19, 0xFF	; 255
     cbe:	30 93 5a 01 	sts	0x015A, r19
     cc2:	20 93 59 01 	sts	0x0159, r18
     cc6:	86 36       	cpi	r24, 0x66	; 102
     cc8:	f1 f1       	breq	.+124    	; 0xd46 <_ZL8nextNotev+0xec>
     cca:	87 36       	cpi	r24, 0x67	; 103
     ccc:	cc f4       	brge	.+50     	; 0xd00 <_ZL8nextNotev+0xa6>
     cce:	82 36       	cpi	r24, 0x62	; 98
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <_ZL8nextNotev+0x7a>
     cd2:	af c0       	rjmp	.+350    	; 0xe32 <_ZL8nextNotev+0x1d8>
     cd4:	83 36       	cpi	r24, 0x63	; 99
     cd6:	7c f4       	brge	.+30     	; 0xcf6 <_ZL8nextNotev+0x9c>
     cd8:	8e 33       	cpi	r24, 0x3E	; 62
     cda:	49 f1       	breq	.+82     	; 0xd2e <_ZL8nextNotev+0xd4>
     cdc:	8f 33       	cpi	r24, 0x3F	; 63
     cde:	3c f4       	brge	.+14     	; 0xcee <_ZL8nextNotev+0x94>
     ce0:	81 32       	cpi	r24, 0x21	; 33
     ce2:	09 f4       	brne	.+2      	; 0xce6 <_ZL8nextNotev+0x8c>
     ce4:	87 c0       	rjmp	.+270    	; 0xdf4 <_ZL8nextNotev+0x19a>
     ce6:	8c 33       	cpi	r24, 0x3C	; 60
     ce8:	09 f0       	breq	.+2      	; 0xcec <_ZL8nextNotev+0x92>
     cea:	9b c0       	rjmp	.+310    	; 0xe22 <_ZL8nextNotev+0x1c8>
     cec:	22 c0       	rjmp	.+68     	; 0xd32 <_ZL8nextNotev+0xd8>
     cee:	81 36       	cpi	r24, 0x61	; 97
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <_ZL8nextNotev+0x9a>
     cf2:	97 c0       	rjmp	.+302    	; 0xe22 <_ZL8nextNotev+0x1c8>
     cf4:	9b c0       	rjmp	.+310    	; 0xe2c <_ZL8nextNotev+0x1d2>
     cf6:	84 36       	cpi	r24, 0x64	; 100
     cf8:	01 f1       	breq	.+64     	; 0xd3a <_ZL8nextNotev+0xe0>
     cfa:	85 36       	cpi	r24, 0x65	; 101
     cfc:	0c f5       	brge	.+66     	; 0xd40 <_ZL8nextNotev+0xe6>
     cfe:	1b c0       	rjmp	.+54     	; 0xd36 <_ZL8nextNotev+0xdc>
     d00:	8f 36       	cpi	r24, 0x6F	; 111
     d02:	09 f4       	brne	.+2      	; 0xd06 <_ZL8nextNotev+0xac>
     d04:	47 c0       	rjmp	.+142    	; 0xd94 <_ZL8nextNotev+0x13a>
     d06:	80 37       	cpi	r24, 0x70	; 112
     d08:	44 f4       	brge	.+16     	; 0xd1a <_ZL8nextNotev+0xc0>
     d0a:	8c 36       	cpi	r24, 0x6C	; 108
     d0c:	11 f1       	breq	.+68     	; 0xd52 <_ZL8nextNotev+0xf8>
     d0e:	8d 36       	cpi	r24, 0x6D	; 109
     d10:	61 f1       	breq	.+88     	; 0xd6a <_ZL8nextNotev+0x110>
     d12:	87 36       	cpi	r24, 0x67	; 103
     d14:	09 f0       	breq	.+2      	; 0xd18 <_ZL8nextNotev+0xbe>
     d16:	85 c0       	rjmp	.+266    	; 0xe22 <_ZL8nextNotev+0x1c8>
     d18:	19 c0       	rjmp	.+50     	; 0xd4c <_ZL8nextNotev+0xf2>
     d1a:	84 37       	cpi	r24, 0x74	; 116
     d1c:	09 f4       	brne	.+2      	; 0xd20 <_ZL8nextNotev+0xc6>
     d1e:	44 c0       	rjmp	.+136    	; 0xda8 <_ZL8nextNotev+0x14e>
     d20:	86 37       	cpi	r24, 0x76	; 118
     d22:	09 f4       	brne	.+2      	; 0xd26 <_ZL8nextNotev+0xcc>
     d24:	60 c0       	rjmp	.+192    	; 0xde6 <_ZL8nextNotev+0x18c>
     d26:	82 37       	cpi	r24, 0x72	; 114
     d28:	09 f0       	breq	.+2      	; 0xd2c <_ZL8nextNotev+0xd2>
     d2a:	7b c0       	rjmp	.+246    	; 0xe22 <_ZL8nextNotev+0x1c8>
     d2c:	39 c0       	rjmp	.+114    	; 0xda0 <_ZL8nextNotev+0x146>
     d2e:	b3 94       	inc	r11
     d30:	be cf       	rjmp	.-132    	; 0xcae <_ZL8nextNotev+0x54>
     d32:	ba 94       	dec	r11
     d34:	bc cf       	rjmp	.-136    	; 0xcae <_ZL8nextNotev+0x54>
     d36:	ee 24       	eor	r14, r14
     d38:	35 c0       	rjmp	.+106    	; 0xda4 <_ZL8nextNotev+0x14a>
     d3a:	ee 24       	eor	r14, r14
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	7b c0       	rjmp	.+246    	; 0xe36 <_ZL8nextNotev+0x1dc>
     d40:	ee 24       	eor	r14, r14
     d42:	84 e0       	ldi	r24, 0x04	; 4
     d44:	78 c0       	rjmp	.+240    	; 0xe36 <_ZL8nextNotev+0x1dc>
     d46:	ee 24       	eor	r14, r14
     d48:	85 e0       	ldi	r24, 0x05	; 5
     d4a:	75 c0       	rjmp	.+234    	; 0xe36 <_ZL8nextNotev+0x1dc>
     d4c:	ee 24       	eor	r14, r14
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	72 c0       	rjmp	.+228    	; 0xe36 <_ZL8nextNotev+0x1dc>
     d52:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_ZL9getNumberv>
     d56:	bc 01       	movw	r22, r24
     d58:	90 93 05 01 	sts	0x0105, r25
     d5c:	80 93 04 01 	sts	0x0104, r24
     d60:	80 91 06 01 	lds	r24, 0x0106
     d64:	90 91 07 01 	lds	r25, 0x0107
     d68:	37 c0       	rjmp	.+110    	; 0xdd8 <_ZL8nextNotev+0x17e>
     d6a:	0e 94 b1 04 	call	0x962	; 0x962 <_ZL16currentCharacterv>
     d6e:	8c 36       	cpi	r24, 0x6C	; 108
     d70:	19 f4       	brne	.+6      	; 0xd78 <_ZL8nextNotev+0x11e>
     d72:	10 92 5b 01 	sts	0x015B, r1
     d76:	04 c0       	rjmp	.+8      	; 0xd80 <_ZL8nextNotev+0x126>
     d78:	a0 92 5b 01 	sts	0x015B, r10
     d7c:	10 92 5c 01 	sts	0x015C, r1
     d80:	80 91 59 01 	lds	r24, 0x0159
     d84:	90 91 5a 01 	lds	r25, 0x015A
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	90 93 5a 01 	sts	0x015A, r25
     d8e:	80 93 59 01 	sts	0x0159, r24
     d92:	8d cf       	rjmp	.-230    	; 0xcae <_ZL8nextNotev+0x54>
     d94:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_ZL9getNumberv>
     d98:	b8 2e       	mov	r11, r24
     d9a:	80 93 03 01 	sts	0x0103, r24
     d9e:	87 cf       	rjmp	.-242    	; 0xcae <_ZL8nextNotev+0x54>
     da0:	ee 24       	eor	r14, r14
     da2:	e3 94       	inc	r14
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	47 c0       	rjmp	.+142    	; 0xe36 <_ZL8nextNotev+0x1dc>
     da8:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_ZL9getNumberv>
     dac:	bc 01       	movw	r22, r24
     dae:	ce 01       	movw	r24, r28
     db0:	0e 94 6d 11 	call	0x22da	; 0x22da <__udivmodhi4>
     db4:	cb 01       	movw	r24, r22
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	53 e0       	ldi	r21, 0x03	; 3
     dbc:	66 0f       	add	r22, r22
     dbe:	77 1f       	adc	r23, r23
     dc0:	5a 95       	dec	r21
     dc2:	e1 f7       	brne	.-8      	; 0xdbc <_ZL8nextNotev+0x162>
     dc4:	86 0f       	add	r24, r22
     dc6:	97 1f       	adc	r25, r23
     dc8:	90 93 07 01 	sts	0x0107, r25
     dcc:	80 93 06 01 	sts	0x0106, r24
     dd0:	60 91 04 01 	lds	r22, 0x0104
     dd4:	70 91 05 01 	lds	r23, 0x0105
     dd8:	0e 94 6d 11 	call	0x22da	; 0x22da <__udivmodhi4>
     ddc:	70 93 09 01 	sts	0x0109, r23
     de0:	60 93 08 01 	sts	0x0108, r22
     de4:	64 cf       	rjmp	.-312    	; 0xcae <_ZL8nextNotev+0x54>
     de6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_ZL9getNumberv>
     dea:	90 93 0b 01 	sts	0x010B, r25
     dee:	80 93 0a 01 	sts	0x010A, r24
     df2:	5d cf       	rjmp	.-326    	; 0xcae <_ZL8nextNotev+0x54>
     df4:	70 92 03 01 	sts	0x0103, r7
     df8:	10 93 07 01 	sts	0x0107, r17
     dfc:	00 93 06 01 	sts	0x0106, r16
     e00:	f0 92 05 01 	sts	0x0105, r15
     e04:	e0 92 04 01 	sts	0x0104, r14
     e08:	d0 92 09 01 	sts	0x0109, r13
     e0c:	c0 92 08 01 	sts	0x0108, r12
     e10:	90 92 0b 01 	sts	0x010B, r9
     e14:	80 92 0a 01 	sts	0x010A, r8
     e18:	10 92 5b 01 	sts	0x015B, r1
     e1c:	44 e0       	ldi	r20, 0x04	; 4
     e1e:	b4 2e       	mov	r11, r20
     e20:	46 cf       	rjmp	.-372    	; 0xcae <_ZL8nextNotev+0x54>
     e22:	10 92 5a 01 	sts	0x015A, r1
     e26:	10 92 59 01 	sts	0x0159, r1
     e2a:	63 c0       	rjmp	.+198    	; 0xef2 <_ZL8nextNotev+0x298>
     e2c:	ee 24       	eor	r14, r14
     e2e:	89 e0       	ldi	r24, 0x09	; 9
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <_ZL8nextNotev+0x1dc>
     e32:	ee 24       	eor	r14, r14
     e34:	8b e0       	ldi	r24, 0x0B	; 11
     e36:	9c e0       	ldi	r25, 0x0C	; 12
     e38:	b9 9e       	mul	r11, r25
     e3a:	b0 2c       	mov	r11, r0
     e3c:	11 24       	eor	r1, r1
     e3e:	b8 0e       	add	r11, r24
     e40:	0e 94 b1 04 	call	0x962	; 0x962 <_ZL16currentCharacterv>
     e44:	8b 32       	cpi	r24, 0x2B	; 43
     e46:	11 f0       	breq	.+4      	; 0xe4c <_ZL8nextNotev+0x1f2>
     e48:	83 32       	cpi	r24, 0x23	; 35
     e4a:	b9 f4       	brne	.+46     	; 0xe7a <_ZL8nextNotev+0x220>
     e4c:	80 91 59 01 	lds	r24, 0x0159
     e50:	90 91 5a 01 	lds	r25, 0x015A
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	90 93 5a 01 	sts	0x015A, r25
     e5a:	80 93 59 01 	sts	0x0159, r24
     e5e:	b3 94       	inc	r11
     e60:	ef cf       	rjmp	.-34     	; 0xe40 <_ZL8nextNotev+0x1e6>
     e62:	80 91 59 01 	lds	r24, 0x0159
     e66:	90 91 5a 01 	lds	r25, 0x015A
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	90 93 5a 01 	sts	0x015A, r25
     e70:	80 93 59 01 	sts	0x0159, r24
     e74:	ba 94       	dec	r11
     e76:	0e 94 b1 04 	call	0x962	; 0x962 <_ZL16currentCharacterv>
     e7a:	8d 32       	cpi	r24, 0x2D	; 45
     e7c:	91 f3       	breq	.-28     	; 0xe62 <_ZL8nextNotev+0x208>
     e7e:	c0 91 08 01 	lds	r28, 0x0108
     e82:	d0 91 09 01 	lds	r29, 0x0109
     e86:	81 53       	subi	r24, 0x31	; 49
     e88:	88 30       	cpi	r24, 0x08	; 8
     e8a:	58 f4       	brcc	.+22     	; 0xea2 <_ZL8nextNotev+0x248>
     e8c:	c0 91 06 01 	lds	r28, 0x0106
     e90:	d0 91 07 01 	lds	r29, 0x0107
     e94:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_ZL9getNumberv>
     e98:	bc 01       	movw	r22, r24
     e9a:	ce 01       	movw	r24, r28
     e9c:	0e 94 6d 11 	call	0x22da	; 0x22da <__udivmodhi4>
     ea0:	eb 01       	movw	r28, r22
     ea2:	8e 01       	movw	r16, r28
     ea4:	0b c0       	rjmp	.+22     	; 0xebc <_ZL8nextNotev+0x262>
     ea6:	80 91 59 01 	lds	r24, 0x0159
     eaa:	90 91 5a 01 	lds	r25, 0x015A
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	90 93 5a 01 	sts	0x015A, r25
     eb4:	80 93 59 01 	sts	0x0159, r24
     eb8:	c0 0f       	add	r28, r16
     eba:	d1 1f       	adc	r29, r17
     ebc:	16 95       	lsr	r17
     ebe:	07 95       	ror	r16
     ec0:	0e 94 b1 04 	call	0x962	; 0x962 <_ZL16currentCharacterv>
     ec4:	8e 32       	cpi	r24, 0x2E	; 46
     ec6:	79 f3       	breq	.-34     	; 0xea6 <_ZL8nextNotev+0x24c>
     ec8:	80 91 5b 01 	lds	r24, 0x015B
     ecc:	88 23       	and	r24, r24
     ece:	39 f0       	breq	.+14     	; 0xede <_ZL8nextNotev+0x284>
     ed0:	ce 01       	movw	r24, r28
     ed2:	96 95       	lsr	r25
     ed4:	87 95       	ror	r24
     ed6:	80 93 5c 01 	sts	0x015C, r24
     eda:	c8 1b       	sub	r28, r24
     edc:	d1 09       	sbc	r29, r1
     ede:	ee 20       	and	r14, r14
     ee0:	11 f0       	breq	.+4      	; 0xee6 <_ZL8nextNotev+0x28c>
     ee2:	bb 24       	eor	r11, r11
     ee4:	ba 94       	dec	r11
     ee6:	8b 2d       	mov	r24, r11
     ee8:	be 01       	movw	r22, r28
     eea:	40 91 0a 01 	lds	r20, 0x010A
     eee:	0e 94 d7 05 	call	0xbae	; 0xbae <_ZN15OrangutanBuzzer8playNoteEhjh>
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	ed e0       	ldi	r30, 0x0D	; 13
     ef8:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__epilogue_restores__+0xa>

00000efc <__vector_13>:
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	4f 93       	push	r20
     f0c:	5f 93       	push	r21
     f0e:	6f 93       	push	r22
     f10:	7f 93       	push	r23
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	af 93       	push	r26
     f18:	bf 93       	push	r27
     f1a:	ef 93       	push	r30
     f1c:	ff 93       	push	r31
     f1e:	80 91 5f 01 	lds	r24, 0x015F
     f22:	90 91 60 01 	lds	r25, 0x0160
     f26:	9c 01       	movw	r18, r24
     f28:	21 50       	subi	r18, 0x01	; 1
     f2a:	30 40       	sbci	r19, 0x00	; 0
     f2c:	30 93 60 01 	sts	0x0160, r19
     f30:	20 93 5f 01 	sts	0x015F, r18
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	11 f5       	brne	.+68     	; 0xf7c <__vector_13+0x80>
     f38:	10 92 6f 00 	sts	0x006F, r1
     f3c:	78 94       	sei
     f3e:	80 91 81 00 	lds	r24, 0x0081
     f42:	88 7f       	andi	r24, 0xF8	; 248
     f44:	81 60       	ori	r24, 0x01	; 1
     f46:	80 93 81 00 	sts	0x0081, r24
     f4a:	80 e1       	ldi	r24, 0x10	; 16
     f4c:	97 e2       	ldi	r25, 0x27	; 39
     f4e:	90 93 89 00 	sts	0x0089, r25
     f52:	80 93 88 00 	sts	0x0088, r24
     f56:	10 92 8b 00 	sts	0x008B, r1
     f5a:	10 92 8a 00 	sts	0x008A, r1
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	80 93 02 01 	sts	0x0102, r24
     f64:	80 91 59 01 	lds	r24, 0x0159
     f68:	90 91 5a 01 	lds	r25, 0x015A
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	31 f0       	breq	.+12     	; 0xf7c <__vector_13+0x80>
     f70:	80 91 5e 01 	lds	r24, 0x015E
     f74:	88 23       	and	r24, r24
     f76:	11 f4       	brne	.+4      	; 0xf7c <__vector_13+0x80>
     f78:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZL8nextNotev>
     f7c:	ff 91       	pop	r31
     f7e:	ef 91       	pop	r30
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	4f 91       	pop	r20
     f90:	3f 91       	pop	r19
     f92:	2f 91       	pop	r18
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <_ZN15OrangutanBuzzer9isPlayingEv>:
     f9e:	80 91 02 01 	lds	r24, 0x0102
     fa2:	88 23       	and	r24, r24
     fa4:	51 f0       	breq	.+20     	; 0xfba <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	20 91 59 01 	lds	r18, 0x0159
     fac:	30 91 5a 01 	lds	r19, 0x015A
     fb0:	21 15       	cp	r18, r1
     fb2:	31 05       	cpc	r19, r1
     fb4:	19 f4       	brne	.+6      	; 0xfbc <_ZN15OrangutanBuzzer9isPlayingEv+0x1e>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	08 95       	ret
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	08 95       	ret

00000fbe <is_playing>:
     fbe:	0e 94 cf 07 	call	0xf9e	; 0xf9e <_ZN15OrangutanBuzzer9isPlayingEv>
     fc2:	08 95       	ret

00000fc4 <_ZN15OrangutanBuzzer4playEPKc>:
     fc4:	10 92 6f 00 	sts	0x006F, r1
     fc8:	90 93 5a 01 	sts	0x015A, r25
     fcc:	80 93 59 01 	sts	0x0159, r24
     fd0:	10 92 5d 01 	sts	0x015D, r1
     fd4:	10 92 5c 01 	sts	0x015C, r1
     fd8:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZL8nextNotev>
     fdc:	08 95       	ret

00000fde <play>:
     fde:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <_ZN15OrangutanBuzzer4playEPKc>
     fe2:	08 95       	ret

00000fe4 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
     fe4:	10 92 6f 00 	sts	0x006F, r1
     fe8:	90 93 5a 01 	sts	0x015A, r25
     fec:	80 93 59 01 	sts	0x0159, r24
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	80 93 5d 01 	sts	0x015D, r24
     ff6:	10 92 5c 01 	sts	0x015C, r1
     ffa:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZL8nextNotev>
     ffe:	08 95       	ret

00001000 <play_from_program_space>:
    1000:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1004:	08 95       	ret

00001006 <delayMicroseconds.clone.0>:
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	6f 93       	push	r22
    100c:	64 e0       	ldi	r22, 0x04	; 4
    100e:	6a 95       	dec	r22
    1010:	f1 f7       	brne	.-4      	; 0x100e <delayMicroseconds.clone.0+0x8>
    1012:	6f 91       	pop	r22
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	c9 f7       	brne	.-14     	; 0x100a <delayMicroseconds.clone.0+0x4>
    1018:	08 95       	ret

0000101a <_ZN12OrangutanLCD8busyWaitEv>:
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	1a b1       	in	r17, 0x0a	; 10
    1024:	57 98       	cbi	0x0a, 7	; 10
    1026:	5a 98       	cbi	0x0b, 2	; 11
    1028:	28 9a       	sbi	0x05, 0	; 5
    102a:	c0 e0       	ldi	r28, 0x00	; 0
    102c:	d0 e0       	ldi	r29, 0x00	; 0
    102e:	0e 94 03 08 	call	0x1006	; 0x1006 <delayMicroseconds.clone.0>
    1032:	5c 9a       	sbi	0x0b, 4	; 11
    1034:	0e 94 03 08 	call	0x1006	; 0x1006 <delayMicroseconds.clone.0>
    1038:	09 b1       	in	r16, 0x09	; 9
    103a:	5c 98       	cbi	0x0b, 4	; 11
    103c:	0e 94 03 08 	call	0x1006	; 0x1006 <delayMicroseconds.clone.0>
    1040:	5c 9a       	sbi	0x0b, 4	; 11
    1042:	0e 94 03 08 	call	0x1006	; 0x1006 <delayMicroseconds.clone.0>
    1046:	5c 98       	cbi	0x0b, 4	; 11
    1048:	07 ff       	sbrs	r16, 7
    104a:	11 c0       	rjmp	.+34     	; 0x106e <_ZN12OrangutanLCD8busyWaitEv+0x54>
    104c:	24 96       	adiw	r28, 0x04	; 4
    104e:	9e 01       	movw	r18, r28
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	80 91 65 01 	lds	r24, 0x0165
    1058:	90 91 66 01 	lds	r25, 0x0166
    105c:	a0 91 67 01 	lds	r26, 0x0167
    1060:	b0 91 68 01 	lds	r27, 0x0168
    1064:	28 17       	cp	r18, r24
    1066:	39 07       	cpc	r19, r25
    1068:	4a 07       	cpc	r20, r26
    106a:	5b 07       	cpc	r21, r27
    106c:	00 f3       	brcs	.-64     	; 0x102e <_ZN12OrangutanLCD8busyWaitEv+0x14>
    106e:	1a b9       	out	0x0a, r17	; 10
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	08 95       	ret

0000107a <_ZN12OrangutanLCD8sendDataEh>:
    107a:	65 b1       	in	r22, 0x05	; 5
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	ac 01       	movw	r20, r24
    1080:	41 70       	andi	r20, 0x01	; 1
    1082:	50 70       	andi	r21, 0x00	; 0
    1084:	44 0f       	add	r20, r20
    1086:	55 1f       	adc	r21, r21
    1088:	9c 01       	movw	r18, r24
    108a:	26 70       	andi	r18, 0x06	; 6
    108c:	30 70       	andi	r19, 0x00	; 0
    108e:	53 e0       	ldi	r21, 0x03	; 3
    1090:	22 0f       	add	r18, r18
    1092:	33 1f       	adc	r19, r19
    1094:	5a 95       	dec	r21
    1096:	e1 f7       	brne	.-8      	; 0x1090 <_ZN12OrangutanLCD8sendDataEh+0x16>
    1098:	24 2b       	or	r18, r20
    109a:	6d 7c       	andi	r22, 0xCD	; 205
    109c:	26 2b       	or	r18, r22
    109e:	25 b9       	out	0x05, r18	; 5
    10a0:	2b b1       	in	r18, 0x0b	; 11
    10a2:	88 70       	andi	r24, 0x08	; 8
    10a4:	90 70       	andi	r25, 0x00	; 0
    10a6:	34 e0       	ldi	r19, 0x04	; 4
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	3a 95       	dec	r19
    10ae:	e1 f7       	brne	.-8      	; 0x10a8 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    10b0:	2f 77       	andi	r18, 0x7F	; 127
    10b2:	28 2b       	or	r18, r24
    10b4:	2b b9       	out	0x0b, r18	; 11
    10b6:	5c 9a       	sbi	0x0b, 4	; 11
    10b8:	0e 94 03 08 	call	0x1006	; 0x1006 <delayMicroseconds.clone.0>
    10bc:	5c 98       	cbi	0x0b, 4	; 11
    10be:	0e 94 03 08 	call	0x1006	; 0x1006 <delayMicroseconds.clone.0>
    10c2:	08 95       	ret

000010c4 <_ZN12OrangutanLCD4sendEhhh>:
    10c4:	a2 e0       	ldi	r26, 0x02	; 2
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e8 e6       	ldi	r30, 0x68	; 104
    10ca:	f8 e0       	ldi	r31, 0x08	; 8
    10cc:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__prologue_saves__+0x16>
    10d0:	18 2f       	mov	r17, r24
    10d2:	4a 83       	std	Y+2, r20	; 0x02
    10d4:	69 83       	std	Y+1, r22	; 0x01
    10d6:	0e 94 0d 09 	call	0x121a	; 0x121a <_ZN12OrangutanLCD4initEv>
    10da:	0e 94 0d 08 	call	0x101a	; 0x101a <_ZN12OrangutanLCD8busyWaitEv>
    10de:	f4 b0       	in	r15, 0x04	; 4
    10e0:	05 b1       	in	r16, 0x05	; 5
    10e2:	da b0       	in	r13, 0x0a	; 10
    10e4:	eb b0       	in	r14, 0x0b	; 11
    10e6:	28 98       	cbi	0x05, 0	; 5
    10e8:	69 81       	ldd	r22, Y+1	; 0x01
    10ea:	4a 81       	ldd	r20, Y+2	; 0x02
    10ec:	66 23       	and	r22, r22
    10ee:	11 f0       	breq	.+4      	; 0x10f4 <_ZN12OrangutanLCD4sendEhhh+0x30>
    10f0:	5a 9a       	sbi	0x0b, 2	; 11
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <_ZN12OrangutanLCD4sendEhhh+0x32>
    10f4:	5a 98       	cbi	0x0b, 2	; 11
    10f6:	84 b1       	in	r24, 0x04	; 4
    10f8:	82 63       	ori	r24, 0x32	; 50
    10fa:	84 b9       	out	0x04, r24	; 4
    10fc:	57 9a       	sbi	0x0a, 7	; 10
    10fe:	41 30       	cpi	r20, 0x01	; 1
    1100:	29 f0       	breq	.+10     	; 0x110c <_ZN12OrangutanLCD4sendEhhh+0x48>
    1102:	81 2f       	mov	r24, r17
    1104:	82 95       	swap	r24
    1106:	8f 70       	andi	r24, 0x0F	; 15
    1108:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN12OrangutanLCD8sendDataEh>
    110c:	81 2f       	mov	r24, r17
    110e:	8f 70       	andi	r24, 0x0F	; 15
    1110:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN12OrangutanLCD8sendDataEh>
    1114:	da b8       	out	0x0a, r13	; 10
    1116:	eb b8       	out	0x0b, r14	; 11
    1118:	f4 b8       	out	0x04, r15	; 4
    111a:	05 b9       	out	0x05, r16	; 5
    111c:	22 96       	adiw	r28, 0x02	; 2
    111e:	e7 e0       	ldi	r30, 0x07	; 7
    1120:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__epilogue_restores__+0x16>

00001124 <_ZN12OrangutanLCD8send_cmdEh>:
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	42 e0       	ldi	r20, 0x02	; 2
    1128:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN12OrangutanLCD4sendEhhh>
    112c:	08 95       	ret

0000112e <_ZN12OrangutanLCD9send_dataEh>:
    112e:	61 e0       	ldi	r22, 0x01	; 1
    1130:	42 e0       	ldi	r20, 0x02	; 2
    1132:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN12OrangutanLCD4sendEhhh>
    1136:	08 95       	ret

00001138 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	1f 93       	push	r17
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	0f 92       	push	r0
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	66 0f       	add	r22, r22
    114a:	66 0f       	add	r22, r22
    114c:	66 0f       	add	r22, r22
    114e:	48 2f       	mov	r20, r24
    1150:	59 2f       	mov	r21, r25
    1152:	7a 01       	movw	r14, r20
    1154:	10 e0       	ldi	r17, 0x00	; 0
    1156:	81 2f       	mov	r24, r17
    1158:	86 0f       	add	r24, r22
    115a:	80 64       	ori	r24, 0x40	; 64
    115c:	69 83       	std	Y+1, r22	; 0x01
    115e:	0e 94 92 08 	call	0x1124	; 0x1124 <_ZN12OrangutanLCD8send_cmdEh>
    1162:	f7 01       	movw	r30, r14
    1164:	84 91       	lpm	r24, Z
    1166:	0e 94 97 08 	call	0x112e	; 0x112e <_ZN12OrangutanLCD9send_dataEh>
    116a:	1f 5f       	subi	r17, 0xFF	; 255
    116c:	08 94       	sec
    116e:	e1 1c       	adc	r14, r1
    1170:	f1 1c       	adc	r15, r1
    1172:	69 81       	ldd	r22, Y+1	; 0x01
    1174:	18 30       	cpi	r17, 0x08	; 8
    1176:	79 f7       	brne	.-34     	; 0x1156 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x1e>
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	1f 91       	pop	r17
    1180:	ff 90       	pop	r15
    1182:	ef 90       	pop	r14
    1184:	08 95       	ret

00001186 <lcd_load_custom_character>:
    1186:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    118a:	08 95       	ret

0000118c <print_character>:
    118c:	0e 94 97 08 	call	0x112e	; 0x112e <_ZN12OrangutanLCD9send_dataEh>
    1190:	08 95       	ret

00001192 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	41 e0       	ldi	r20, 0x01	; 1
    1196:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN12OrangutanLCD4sendEhhh>
    119a:	08 95       	ret

0000119c <_ZN12OrangutanLCD5init2Ev>:
    119c:	80 e1       	ldi	r24, 0x10	; 16
    119e:	97 e2       	ldi	r25, 0x27	; 39
    11a0:	a0 e0       	ldi	r26, 0x00	; 0
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	80 93 65 01 	sts	0x0165, r24
    11a8:	90 93 66 01 	sts	0x0166, r25
    11ac:	a0 93 67 01 	sts	0x0167, r26
    11b0:	b0 93 68 01 	sts	0x0168, r27
    11b4:	52 9a       	sbi	0x0a, 2	; 10
    11b6:	20 9a       	sbi	0x04, 0	; 4
    11b8:	54 9a       	sbi	0x0a, 4	; 10
    11ba:	8e e1       	ldi	r24, 0x1E	; 30
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    11c8:	86 e0       	ldi	r24, 0x06	; 6
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    11d6:	82 e0       	ldi	r24, 0x02	; 2
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>
    11de:	83 e0       	ldi	r24, 0x03	; 3
    11e0:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>
    11ec:	82 e0       	ldi	r24, 0x02	; 2
    11ee:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>
    11fa:	88 e2       	ldi	r24, 0x28	; 40
    11fc:	0e 94 92 08 	call	0x1124	; 0x1124 <_ZN12OrangutanLCD8send_cmdEh>
    1200:	88 e0       	ldi	r24, 0x08	; 8
    1202:	0e 94 92 08 	call	0x1124	; 0x1124 <_ZN12OrangutanLCD8send_cmdEh>
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	0e 94 92 08 	call	0x1124	; 0x1124 <_ZN12OrangutanLCD8send_cmdEh>
    120c:	86 e0       	ldi	r24, 0x06	; 6
    120e:	0e 94 92 08 	call	0x1124	; 0x1124 <_ZN12OrangutanLCD8send_cmdEh>
    1212:	8c e0       	ldi	r24, 0x0C	; 12
    1214:	0e 94 92 08 	call	0x1124	; 0x1124 <_ZN12OrangutanLCD8send_cmdEh>
    1218:	08 95       	ret

0000121a <_ZN12OrangutanLCD4initEv>:
    121a:	80 91 69 01 	lds	r24, 0x0169
    121e:	88 23       	and	r24, r24
    1220:	29 f4       	brne	.+10     	; 0x122c <_ZN12OrangutanLCD4initEv+0x12>
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	80 93 69 01 	sts	0x0169, r24
    1228:	0e 94 ce 08 	call	0x119c	; 0x119c <_ZN12OrangutanLCD5init2Ev>
    122c:	08 95       	ret

0000122e <_ZN12OrangutanLCD5clearEv>:
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	0e 94 92 08 	call	0x1124	; 0x1124 <_ZN12OrangutanLCD8send_cmdEh>
    1234:	80 91 61 01 	lds	r24, 0x0161
    1238:	90 91 62 01 	lds	r25, 0x0162
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	11 f1       	breq	.+68     	; 0x1284 <_ZN12OrangutanLCD5clearEv+0x56>
    1240:	a0 e0       	ldi	r26, 0x00	; 0
    1242:	b0 e2       	ldi	r27, 0x20	; 32
    1244:	08 c0       	rjmp	.+16     	; 0x1256 <_ZN12OrangutanLCD5clearEv+0x28>
    1246:	e0 91 61 01 	lds	r30, 0x0161
    124a:	f0 91 62 01 	lds	r31, 0x0162
    124e:	e2 0f       	add	r30, r18
    1250:	f3 1f       	adc	r31, r19
    1252:	b0 83       	st	Z, r27
    1254:	af 5f       	subi	r26, 0xFF	; 255
    1256:	2a 2f       	mov	r18, r26
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	80 91 24 01 	lds	r24, 0x0124
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	60 91 25 01 	lds	r22, 0x0125
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	86 9f       	mul	r24, r22
    126a:	a0 01       	movw	r20, r0
    126c:	87 9f       	mul	r24, r23
    126e:	50 0d       	add	r21, r0
    1270:	96 9f       	mul	r25, r22
    1272:	50 0d       	add	r21, r0
    1274:	11 24       	eor	r1, r1
    1276:	24 17       	cp	r18, r20
    1278:	35 07       	cpc	r19, r21
    127a:	2c f3       	brlt	.-54     	; 0x1246 <_ZN12OrangutanLCD5clearEv+0x18>
    127c:	10 92 64 01 	sts	0x0164, r1
    1280:	10 92 63 01 	sts	0x0163, r1
    1284:	08 95       	ret

00001286 <clear>:
    1286:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN12OrangutanLCD5clearEv>
    128a:	08 95       	ret

0000128c <_ZN12OrangutanLCD5printEPKc>:
    128c:	ef 92       	push	r14
    128e:	ff 92       	push	r15
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	e8 2e       	mov	r14, r24
    1296:	e7 01       	movw	r28, r14
    1298:	7e 01       	movw	r14, r28
    129a:	f9 2e       	mov	r15, r25
    129c:	e7 01       	movw	r28, r14
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <_ZN12OrangutanLCD5printEPKc+0x18>
    12a0:	0e 94 97 08 	call	0x112e	; 0x112e <_ZN12OrangutanLCD9send_dataEh>
    12a4:	89 91       	ld	r24, Y+
    12a6:	88 23       	and	r24, r24
    12a8:	d9 f7       	brne	.-10     	; 0x12a0 <_ZN12OrangutanLCD5printEPKc+0x14>
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	08 95       	ret

000012b4 <print>:
    12b4:	0e 94 46 09 	call	0x128c	; 0x128c <_ZN12OrangutanLCD5printEPKc>
    12b8:	08 95       	ret

000012ba <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	ec 01       	movw	r28, r24
    12c0:	03 c0       	rjmp	.+6      	; 0x12c8 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    12c2:	0e 94 97 08 	call	0x112e	; 0x112e <_ZN12OrangutanLCD9send_dataEh>
    12c6:	21 96       	adiw	r28, 0x01	; 1
    12c8:	fe 01       	movw	r30, r28
    12ca:	84 91       	lpm	r24, Z
    12cc:	88 23       	and	r24, r24
    12ce:	c9 f7       	brne	.-14     	; 0x12c2 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	08 95       	ret

000012d6 <print_from_program_space>:
    12d6:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    12da:	08 95       	ret

000012dc <_ZN12OrangutanLCD5printEm>:
    12dc:	aa e0       	ldi	r26, 0x0A	; 10
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e4 e7       	ldi	r30, 0x74	; 116
    12e2:	f9 e0       	ldi	r31, 0x09	; 9
    12e4:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__prologue_saves__+0x10>
    12e8:	9b 01       	movw	r18, r22
    12ea:	ac 01       	movw	r20, r24
    12ec:	1a e0       	ldi	r17, 0x0A	; 10
    12ee:	ea e0       	ldi	r30, 0x0A	; 10
    12f0:	ce 2e       	mov	r12, r30
    12f2:	d1 2c       	mov	r13, r1
    12f4:	e1 2c       	mov	r14, r1
    12f6:	f1 2c       	mov	r15, r1
    12f8:	5e 01       	movw	r10, r28
    12fa:	08 94       	sec
    12fc:	a1 1c       	adc	r10, r1
    12fe:	b1 1c       	adc	r11, r1
    1300:	02 2f       	mov	r16, r18
    1302:	ca 01       	movw	r24, r20
    1304:	b9 01       	movw	r22, r18
    1306:	a7 01       	movw	r20, r14
    1308:	96 01       	movw	r18, r12
    130a:	0e 94 95 11 	call	0x232a	; 0x232a <__udivmodsi4>
    130e:	11 50       	subi	r17, 0x01	; 1
    1310:	f5 01       	movw	r30, r10
    1312:	e1 0f       	add	r30, r17
    1314:	f1 1d       	adc	r31, r1
    1316:	00 5d       	subi	r16, 0xD0	; 208
    1318:	92 2f       	mov	r25, r18
    131a:	99 0f       	add	r25, r25
    131c:	89 2f       	mov	r24, r25
    131e:	88 0f       	add	r24, r24
    1320:	88 0f       	add	r24, r24
    1322:	89 0f       	add	r24, r25
    1324:	08 1b       	sub	r16, r24
    1326:	00 83       	st	Z, r16
    1328:	21 15       	cp	r18, r1
    132a:	31 05       	cpc	r19, r1
    132c:	41 05       	cpc	r20, r1
    132e:	51 05       	cpc	r21, r1
    1330:	39 f7       	brne	.-50     	; 0x1300 <_ZN12OrangutanLCD5printEm+0x24>
    1332:	08 c0       	rjmp	.+16     	; 0x1344 <_ZN12OrangutanLCD5printEm+0x68>
    1334:	f6 01       	movw	r30, r12
    1336:	e1 0f       	add	r30, r17
    1338:	f1 1d       	adc	r31, r1
    133a:	80 81       	ld	r24, Z
    133c:	0e 94 97 08 	call	0x112e	; 0x112e <_ZN12OrangutanLCD9send_dataEh>
    1340:	1f 5f       	subi	r17, 0xFF	; 255
    1342:	04 c0       	rjmp	.+8      	; 0x134c <_ZN12OrangutanLCD5printEm+0x70>
    1344:	6e 01       	movw	r12, r28
    1346:	08 94       	sec
    1348:	c1 1c       	adc	r12, r1
    134a:	d1 1c       	adc	r13, r1
    134c:	1a 30       	cpi	r17, 0x0A	; 10
    134e:	90 f3       	brcs	.-28     	; 0x1334 <_ZN12OrangutanLCD5printEm+0x58>
    1350:	2a 96       	adiw	r28, 0x0a	; 10
    1352:	ea e0       	ldi	r30, 0x0A	; 10
    1354:	0c 94 05 12 	jmp	0x240a	; 0x240a <__epilogue_restores__+0x10>

00001358 <_ZN12OrangutanLCD5printEl>:
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	7b 01       	movw	r14, r22
    1362:	8c 01       	movw	r16, r24
    1364:	97 ff       	sbrs	r25, 7
    1366:	0b c0       	rjmp	.+22     	; 0x137e <_ZN12OrangutanLCD5printEl+0x26>
    1368:	10 95       	com	r17
    136a:	00 95       	com	r16
    136c:	f0 94       	com	r15
    136e:	e0 94       	com	r14
    1370:	e1 1c       	adc	r14, r1
    1372:	f1 1c       	adc	r15, r1
    1374:	01 1d       	adc	r16, r1
    1376:	11 1d       	adc	r17, r1
    1378:	8d e2       	ldi	r24, 0x2D	; 45
    137a:	0e 94 97 08 	call	0x112e	; 0x112e <_ZN12OrangutanLCD9send_dataEh>
    137e:	c8 01       	movw	r24, r16
    1380:	b7 01       	movw	r22, r14
    1382:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_ZN12OrangutanLCD5printEm>
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	08 95       	ret

00001390 <print_long>:
    1390:	0e 94 ac 09 	call	0x1358	; 0x1358 <_ZN12OrangutanLCD5printEl>
    1394:	08 95       	ret

00001396 <_ZN12OrangutanLCD6gotoXYEhh>:
    1396:	a5 e0       	ldi	r26, 0x05	; 5
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e1 ed       	ldi	r30, 0xD1	; 209
    139c:	f9 e0       	ldi	r31, 0x09	; 9
    139e:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__prologue_saves__+0x1e>
    13a2:	18 2f       	mov	r17, r24
    13a4:	80 e8       	ldi	r24, 0x80	; 128
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	80 ec       	ldi	r24, 0xC0	; 192
    13aa:	8a 83       	std	Y+2, r24	; 0x02
    13ac:	84 e9       	ldi	r24, 0x94	; 148
    13ae:	8b 83       	std	Y+3, r24	; 0x03
    13b0:	84 ed       	ldi	r24, 0xD4	; 212
    13b2:	8c 83       	std	Y+4, r24	; 0x04
    13b4:	fe 01       	movw	r30, r28
    13b6:	e6 0f       	add	r30, r22
    13b8:	f1 1d       	adc	r31, r1
    13ba:	81 81       	ldd	r24, Z+1	; 0x01
    13bc:	81 0f       	add	r24, r17
    13be:	6d 83       	std	Y+5, r22	; 0x05
    13c0:	0e 94 92 08 	call	0x1124	; 0x1124 <_ZN12OrangutanLCD8send_cmdEh>
    13c4:	10 93 64 01 	sts	0x0164, r17
    13c8:	6d 81       	ldd	r22, Y+5	; 0x05
    13ca:	60 93 63 01 	sts	0x0163, r22
    13ce:	25 96       	adiw	r28, 0x05	; 5
    13d0:	e3 e0       	ldi	r30, 0x03	; 3
    13d2:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x1e>

000013d6 <lcd_goto_xy>:
    13d6:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN12OrangutanLCD6gotoXYEhh>
    13da:	08 95       	ret

000013dc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    13dc:	fc 01       	movw	r30, r24
    13de:	11 82       	std	Z+1, r1	; 0x01
    13e0:	10 82       	st	Z, r1
    13e2:	13 82       	std	Z+3, r1	; 0x03
    13e4:	12 82       	std	Z+2, r1	; 0x02
    13e6:	15 82       	std	Z+5, r1	; 0x05
    13e8:	14 82       	std	Z+4, r1	; 0x04
    13ea:	16 82       	std	Z+6, r1	; 0x06
    13ec:	68 30       	cpi	r22, 0x08	; 8
    13ee:	68 f4       	brcc	.+26     	; 0x140a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    13f0:	89 e2       	ldi	r24, 0x29	; 41
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	91 83       	std	Z+1, r25	; 0x01
    13f6:	80 83       	st	Z, r24
    13f8:	8b e2       	ldi	r24, 0x2B	; 43
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	93 83       	std	Z+3, r25	; 0x03
    13fe:	82 83       	std	Z+2, r24	; 0x02
    1400:	8a e2       	ldi	r24, 0x2A	; 42
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	95 83       	std	Z+5, r25	; 0x05
    1406:	84 83       	std	Z+4, r24	; 0x04
    1408:	11 c0       	rjmp	.+34     	; 0x142c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x50>
    140a:	6e 30       	cpi	r22, 0x0E	; 14
    140c:	c0 f4       	brcc	.+48     	; 0x143e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x62>
    140e:	83 e2       	ldi	r24, 0x23	; 35
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	91 83       	std	Z+1, r25	; 0x01
    1414:	80 83       	st	Z, r24
    1416:	85 e2       	ldi	r24, 0x25	; 37
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	93 83       	std	Z+3, r25	; 0x03
    141c:	82 83       	std	Z+2, r24	; 0x02
    141e:	84 e2       	ldi	r24, 0x24	; 36
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	95 83       	std	Z+5, r25	; 0x05
    1424:	84 83       	std	Z+4, r24	; 0x04
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	68 50       	subi	r22, 0x08	; 8
    142a:	70 40       	sbci	r23, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x5a>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	6a 95       	dec	r22
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x56>
    143a:	86 83       	std	Z+6, r24	; 0x06
    143c:	08 95       	ret
    143e:	65 31       	cpi	r22, 0x15	; 21
    1440:	b8 f4       	brcc	.+46     	; 0x1470 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x94>
    1442:	86 e2       	ldi	r24, 0x26	; 38
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	80 83       	st	Z, r24
    144a:	88 e2       	ldi	r24, 0x28	; 40
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	93 83       	std	Z+3, r25	; 0x03
    1450:	82 83       	std	Z+2, r24	; 0x02
    1452:	87 e2       	ldi	r24, 0x27	; 39
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	95 83       	std	Z+5, r25	; 0x05
    1458:	84 83       	std	Z+4, r24	; 0x04
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	6e 50       	subi	r22, 0x0E	; 14
    145e:	70 40       	sbci	r23, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 c0       	rjmp	.+4      	; 0x146a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8e>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	6a 95       	dec	r22
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8a>
    146e:	86 83       	std	Z+6, r24	; 0x06
    1470:	08 95       	ret

00001472 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>:
    1472:	fc 01       	movw	r30, r24
    1474:	a4 81       	ldd	r26, Z+4	; 0x04
    1476:	b5 81       	ldd	r27, Z+5	; 0x05
    1478:	86 81       	ldd	r24, Z+6	; 0x06
    147a:	66 23       	and	r22, r22
    147c:	21 f0       	breq	.+8      	; 0x1486 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh+0x14>
    147e:	9c 91       	ld	r25, X
    1480:	98 2b       	or	r25, r24
    1482:	9c 93       	st	X, r25
    1484:	08 95       	ret
    1486:	9c 91       	ld	r25, X
    1488:	80 95       	com	r24
    148a:	89 23       	and	r24, r25
    148c:	8c 93       	st	X, r24
    148e:	08 95       	ret

00001490 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>:
    1490:	fc 01       	movw	r30, r24
    1492:	6f 3f       	cpi	r22, 0xFF	; 255
    1494:	31 f4       	brne	.+12     	; 0x14a2 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x12>
    1496:	a2 81       	ldd	r26, Z+2	; 0x02
    1498:	b3 81       	ldd	r27, Z+3	; 0x03
    149a:	8c 91       	ld	r24, X
    149c:	96 81       	ldd	r25, Z+6	; 0x06
    149e:	89 27       	eor	r24, r25
    14a0:	0c c0       	rjmp	.+24     	; 0x14ba <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x2a>
    14a2:	a2 81       	ldd	r26, Z+2	; 0x02
    14a4:	b3 81       	ldd	r27, Z+3	; 0x03
    14a6:	86 81       	ldd	r24, Z+6	; 0x06
    14a8:	66 23       	and	r22, r22
    14aa:	21 f0       	breq	.+8      	; 0x14b4 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x24>
    14ac:	9c 91       	ld	r25, X
    14ae:	98 2b       	or	r25, r24
    14b0:	9c 93       	st	X, r25
    14b2:	08 95       	ret
    14b4:	9c 91       	ld	r25, X
    14b6:	80 95       	com	r24
    14b8:	89 23       	and	r24, r25
    14ba:	8c 93       	st	X, r24
    14bc:	08 95       	ret

000014be <_ZN16OrangutanDigital9setOutputEhh>:
    14be:	a7 e0       	ldi	r26, 0x07	; 7
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e5 e6       	ldi	r30, 0x65	; 101
    14c4:	fa e0       	ldi	r31, 0x0A	; 10
    14c6:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__prologue_saves__+0x1a>
    14ca:	28 2f       	mov	r18, r24
    14cc:	f6 2e       	mov	r15, r22
    14ce:	8e 01       	movw	r16, r28
    14d0:	0f 5f       	subi	r16, 0xFF	; 255
    14d2:	1f 4f       	sbci	r17, 0xFF	; 255
    14d4:	c8 01       	movw	r24, r16
    14d6:	62 2f       	mov	r22, r18
    14d8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    14dc:	c8 01       	movw	r24, r16
    14de:	6f 2d       	mov	r22, r15
    14e0:	0e 94 48 0a 	call	0x1490	; 0x1490 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>
    14e4:	c8 01       	movw	r24, r16
    14e6:	61 e0       	ldi	r22, 0x01	; 1
    14e8:	0e 94 39 0a 	call	0x1472	; 0x1472 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>
    14ec:	27 96       	adiw	r28, 0x07	; 7
    14ee:	e5 e0       	ldi	r30, 0x05	; 5
    14f0:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__epilogue_restores__+0x1a>

000014f4 <_ZN15OrangutanMotors5init2Ev>:
    14f4:	e0 eb       	ldi	r30, 0xB0	; 176
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	83 ef       	ldi	r24, 0xF3	; 243
    14fa:	80 83       	st	Z, r24
    14fc:	80 81       	ld	r24, Z
    14fe:	84 bd       	out	0x24, r24	; 36
    1500:	e1 eb       	ldi	r30, 0xB1	; 177
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	80 83       	st	Z, r24
    1508:	80 81       	ld	r24, Z
    150a:	85 bd       	out	0x25, r24	; 37
    150c:	e4 eb       	ldi	r30, 0xB4	; 180
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	10 82       	st	Z, r1
    1512:	80 81       	ld	r24, Z
    1514:	e3 eb       	ldi	r30, 0xB3	; 179
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 83       	st	Z, r24
    151a:	80 81       	ld	r24, Z
    151c:	88 bd       	out	0x28, r24	; 40
    151e:	88 b5       	in	r24, 0x28	; 40
    1520:	87 bd       	out	0x27, r24	; 39
    1522:	86 e0       	ldi	r24, 0x06	; 6
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	0e 94 5f 0a 	call	0x14be	; 0x14be <_ZN16OrangutanDigital9setOutputEhh>
    152a:	85 e0       	ldi	r24, 0x05	; 5
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	0e 94 5f 0a 	call	0x14be	; 0x14be <_ZN16OrangutanDigital9setOutputEhh>
    1532:	8b e0       	ldi	r24, 0x0B	; 11
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	0e 94 5f 0a 	call	0x14be	; 0x14be <_ZN16OrangutanDigital9setOutputEhh>
    153a:	83 e0       	ldi	r24, 0x03	; 3
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	0e 94 5f 0a 	call	0x14be	; 0x14be <_ZN16OrangutanDigital9setOutputEhh>
    1542:	08 95       	ret

00001544 <_ZN15OrangutanMotors4initEv>:
    1544:	80 91 6a 01 	lds	r24, 0x016A
    1548:	88 23       	and	r24, r24
    154a:	29 f4       	brne	.+10     	; 0x1556 <_ZN15OrangutanMotors4initEv+0x12>
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	80 93 6a 01 	sts	0x016A, r24
    1552:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <_ZN15OrangutanMotors5init2Ev>
    1556:	08 95       	ret

00001558 <_ZN15OrangutanMotors10setM1SpeedEi>:
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	ec 01       	movw	r28, r24
    155e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_ZN15OrangutanMotors4initEv>
    1562:	d7 ff       	sbrs	r29, 7
    1564:	05 c0       	rjmp	.+10     	; 0x1570 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    1566:	d0 95       	com	r29
    1568:	c1 95       	neg	r28
    156a:	df 4f       	sbci	r29, 0xFF	; 255
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	cf 3f       	cpi	r28, 0xFF	; 255
    1574:	d1 05       	cpc	r29, r1
    1576:	19 f0       	breq	.+6      	; 0x157e <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1578:	14 f0       	brlt	.+4      	; 0x157e <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    157a:	cf ef       	ldi	r28, 0xFF	; 255
    157c:	d0 e0       	ldi	r29, 0x00	; 0
    157e:	88 23       	and	r24, r24
    1580:	19 f0       	breq	.+6      	; 0x1588 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1582:	18 bc       	out	0x28, r1	; 40
    1584:	c7 bd       	out	0x27, r28	; 39
    1586:	02 c0       	rjmp	.+4      	; 0x158c <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1588:	c8 bd       	out	0x28, r28	; 40
    158a:	17 bc       	out	0x27, r1	; 39
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	08 95       	ret

00001592 <_ZN15OrangutanMotors10setM2SpeedEi>:
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	ec 01       	movw	r28, r24
    1598:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_ZN15OrangutanMotors4initEv>
    159c:	d7 ff       	sbrs	r29, 7
    159e:	05 c0       	rjmp	.+10     	; 0x15aa <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    15a0:	d0 95       	com	r29
    15a2:	c1 95       	neg	r28
    15a4:	df 4f       	sbci	r29, 0xFF	; 255
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	01 c0       	rjmp	.+2      	; 0x15ac <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	cf 3f       	cpi	r28, 0xFF	; 255
    15ae:	d1 05       	cpc	r29, r1
    15b0:	19 f0       	breq	.+6      	; 0x15b8 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    15b2:	14 f0       	brlt	.+4      	; 0x15b8 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    15b4:	cf ef       	ldi	r28, 0xFF	; 255
    15b6:	d0 e0       	ldi	r29, 0x00	; 0
    15b8:	88 23       	and	r24, r24
    15ba:	29 f0       	breq	.+10     	; 0x15c6 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    15bc:	10 92 b4 00 	sts	0x00B4, r1
    15c0:	c0 93 b3 00 	sts	0x00B3, r28
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    15c6:	c0 93 b4 00 	sts	0x00B4, r28
    15ca:	10 92 b3 00 	sts	0x00B3, r1
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	08 95       	ret

000015d4 <_ZN15OrangutanMotors9setSpeedsEii>:
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	eb 01       	movw	r28, r22
    15da:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_ZN15OrangutanMotors10setM1SpeedEi>
    15de:	ce 01       	movw	r24, r28
    15e0:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN15OrangutanMotors10setM2SpeedEi>
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	08 95       	ret

000015ea <set_motors>:
    15ea:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <_ZN15OrangutanMotors9setSpeedsEii>
    15ee:	08 95       	ret

000015f0 <_ZN20OrangutanPushbuttons5init2Ev>:
    15f0:	84 b1       	in	r24, 0x04	; 4
    15f2:	8d 7c       	andi	r24, 0xCD	; 205
    15f4:	84 b9       	out	0x04, r24	; 4
    15f6:	85 b1       	in	r24, 0x05	; 5
    15f8:	82 63       	ori	r24, 0x32	; 50
    15fa:	85 b9       	out	0x05, r24	; 5
    15fc:	85 e0       	ldi	r24, 0x05	; 5
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	6f 93       	push	r22
    1602:	64 e0       	ldi	r22, 0x04	; 4
    1604:	6a 95       	dec	r22
    1606:	f1 f7       	brne	.-4      	; 0x1604 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1608:	6f 91       	pop	r22
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	c9 f7       	brne	.-14     	; 0x1600 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    160e:	08 95       	ret

00001610 <_ZN20OrangutanPushbuttons4initEv>:
    1610:	80 91 6b 01 	lds	r24, 0x016B
    1614:	88 23       	and	r24, r24
    1616:	29 f4       	brne	.+10     	; 0x1622 <_ZN20OrangutanPushbuttons4initEv+0x12>
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	80 93 6b 01 	sts	0x016B, r24
    161e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <_ZN20OrangutanPushbuttons5init2Ev>
    1622:	08 95       	ret

00001624 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1624:	1f 93       	push	r17
    1626:	18 2f       	mov	r17, r24
    1628:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN20OrangutanPushbuttons4initEv>
    162c:	83 b1       	in	r24, 0x03	; 3
    162e:	81 23       	and	r24, r17
    1630:	e9 f3       	breq	.-6      	; 0x162c <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1632:	8a e0       	ldi	r24, 0x0A	; 10
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 8b 0b 	call	0x1716	; 0x1716 <delay_ms>
    163a:	83 b1       	in	r24, 0x03	; 3
    163c:	81 23       	and	r24, r17
    163e:	b1 f3       	breq	.-20     	; 0x162c <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1640:	83 b1       	in	r24, 0x03	; 3
    1642:	81 23       	and	r24, r17
    1644:	1f 91       	pop	r17
    1646:	08 95       	ret

00001648 <wait_for_button_release>:
    1648:	0e 94 12 0b 	call	0x1624	; 0x1624 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    164c:	08 95       	ret

0000164e <_ZN20OrangutanPushbuttons9isPressedEh>:
    164e:	a1 e0       	ldi	r26, 0x01	; 1
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	ed e2       	ldi	r30, 0x2D	; 45
    1654:	fb e0       	ldi	r31, 0x0B	; 11
    1656:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__+0x20>
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN20OrangutanPushbuttons4initEv>
    1660:	93 b1       	in	r25, 0x03	; 3
    1662:	90 95       	com	r25
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	89 23       	and	r24, r25
    1668:	21 96       	adiw	r28, 0x01	; 1
    166a:	e2 e0       	ldi	r30, 0x02	; 2
    166c:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__+0x20>

00001670 <button_is_pressed>:
    1670:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN20OrangutanPushbuttons9isPressedEh>
    1674:	08 95       	ret

00001676 <_ZN13OrangutanTime17delayMicrosecondsEj>:
    1676:	6f 93       	push	r22
    1678:	64 e0       	ldi	r22, 0x04	; 4
    167a:	6a 95       	dec	r22
    167c:	f1 f7       	brne	.-4      	; 0x167a <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
    167e:	6f 91       	pop	r22
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	c9 f7       	brne	.-14     	; 0x1676 <_ZN13OrangutanTime17delayMicrosecondsEj>
    1684:	08 95       	ret

00001686 <__vector_9>:
    1686:	2f 92       	push	r2
    1688:	8f 93       	push	r24
    168a:	9f 93       	push	r25
    168c:	2f b6       	in	r2, 0x3f	; 63
    168e:	80 91 79 01 	lds	r24, 0x0179
    1692:	90 91 7a 01 	lds	r25, 0x017A
    1696:	01 96       	adiw	r24, 0x01	; 1
    1698:	80 93 79 01 	sts	0x0179, r24
    169c:	90 93 7a 01 	sts	0x017A, r25
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	80 91 7b 01 	lds	r24, 0x017B
    16a6:	89 1f       	adc	r24, r25
    16a8:	80 93 7b 01 	sts	0x017B, r24
    16ac:	90 91 81 01 	lds	r25, 0x0181
    16b0:	9c 5f       	subi	r25, 0xFC	; 252
    16b2:	90 93 81 01 	sts	0x0181, r25
    16b6:	80 91 80 01 	lds	r24, 0x0180
    16ba:	80 51       	subi	r24, 0x10	; 16
    16bc:	97 42       	sbci	r25, 0x27	; 39
    16be:	c0 f0       	brcs	.+48     	; 0x16f0 <end>
    16c0:	90 93 81 01 	sts	0x0181, r25
    16c4:	80 93 80 01 	sts	0x0180, r24
    16c8:	80 91 7c 01 	lds	r24, 0x017C
    16cc:	90 91 7d 01 	lds	r25, 0x017D
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	80 93 7c 01 	sts	0x017C, r24
    16d6:	90 93 7d 01 	sts	0x017D, r25
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	80 91 7e 01 	lds	r24, 0x017E
    16e0:	89 1f       	adc	r24, r25
    16e2:	80 93 7e 01 	sts	0x017E, r24
    16e6:	80 91 7f 01 	lds	r24, 0x017F
    16ea:	89 1f       	adc	r24, r25
    16ec:	80 93 7f 01 	sts	0x017F, r24

000016f0 <end>:
    16f0:	2f be       	out	0x3f, r2	; 63
    16f2:	9f 91       	pop	r25
    16f4:	8f 91       	pop	r24
    16f6:	2f 90       	pop	r2
    16f8:	18 95       	reti

000016fa <_ZN13OrangutanTime17delayMillisecondsEj>:
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	ec 01       	movw	r28, r24
    1700:	05 c0       	rjmp	.+10     	; 0x170c <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
    1702:	88 ee       	ldi	r24, 0xE8	; 232
    1704:	93 e0       	ldi	r25, 0x03	; 3
    1706:	0e 94 3b 0b 	call	0x1676	; 0x1676 <_ZN13OrangutanTime17delayMicrosecondsEj>
    170a:	21 97       	sbiw	r28, 0x01	; 1
    170c:	20 97       	sbiw	r28, 0x00	; 0
    170e:	c9 f7       	brne	.-14     	; 0x1702 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <delay_ms>:
    1716:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_ZN13OrangutanTime17delayMillisecondsEj>
    171a:	08 95       	ret

0000171c <_ZN13OrangutanTime5init2Ev>:
    171c:	e0 e7       	ldi	r30, 0x70	; 112
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	8e 7f       	andi	r24, 0xFE	; 254
    1724:	80 83       	st	Z, r24
    1726:	a0 eb       	ldi	r26, 0xB0	; 176
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	8c 91       	ld	r24, X
    172c:	83 60       	ori	r24, 0x03	; 3
    172e:	8c 93       	st	X, r24
    1730:	a1 eb       	ldi	r26, 0xB1	; 177
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	8c 91       	ld	r24, X
    1736:	80 7f       	andi	r24, 0xF0	; 240
    1738:	8c 93       	st	X, r24
    173a:	8c 91       	ld	r24, X
    173c:	82 60       	ori	r24, 0x02	; 2
    173e:	8c 93       	st	X, r24
    1740:	b8 9a       	sbi	0x17, 0	; 23
    1742:	80 81       	ld	r24, Z
    1744:	81 60       	ori	r24, 0x01	; 1
    1746:	80 83       	st	Z, r24
    1748:	78 94       	sei
    174a:	08 95       	ret

0000174c <_ZN13OrangutanTime4initEv>:
    174c:	80 91 82 01 	lds	r24, 0x0182
    1750:	88 23       	and	r24, r24
    1752:	29 f4       	brne	.+10     	; 0x175e <_ZN13OrangutanTime4initEv+0x12>
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	80 93 82 01 	sts	0x0182, r24
    175a:	0e 94 8e 0b 	call	0x171c	; 0x171c <_ZN13OrangutanTime5init2Ev>
    175e:	08 95       	ret

00001760 <_ZN13OrangutanTime2msEv>:
    1760:	0e 94 a6 0b 	call	0x174c	; 0x174c <_ZN13OrangutanTime4initEv>
    1764:	e0 e7       	ldi	r30, 0x70	; 112
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	8e 7f       	andi	r24, 0xFE	; 254
    176c:	80 83       	st	Z, r24
    176e:	20 91 7c 01 	lds	r18, 0x017C
    1772:	30 91 7d 01 	lds	r19, 0x017D
    1776:	40 91 7e 01 	lds	r20, 0x017E
    177a:	50 91 7f 01 	lds	r21, 0x017F
    177e:	80 81       	ld	r24, Z
    1780:	81 60       	ori	r24, 0x01	; 1
    1782:	80 83       	st	Z, r24
    1784:	b9 01       	movw	r22, r18
    1786:	ca 01       	movw	r24, r20
    1788:	08 95       	ret

0000178a <get_ms>:
    178a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN13OrangutanTime2msEv>
    178e:	08 95       	ret

00001790 <_ZN13OrangutanTime5resetEv>:
    1790:	0e 94 a6 0b 	call	0x174c	; 0x174c <_ZN13OrangutanTime4initEv>
    1794:	e0 e7       	ldi	r30, 0x70	; 112
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8e 7f       	andi	r24, 0xFE	; 254
    179c:	80 83       	st	Z, r24
    179e:	10 92 7c 01 	sts	0x017C, r1
    17a2:	10 92 7d 01 	sts	0x017D, r1
    17a6:	10 92 7e 01 	sts	0x017E, r1
    17aa:	10 92 7f 01 	sts	0x017F, r1
    17ae:	10 92 81 01 	sts	0x0181, r1
    17b2:	10 92 80 01 	sts	0x0180, r1
    17b6:	80 81       	ld	r24, Z
    17b8:	81 60       	ori	r24, 0x01	; 1
    17ba:	80 83       	st	Z, r24
    17bc:	08 95       	ret

000017be <calibrate_line_sensors>:
    17be:	68 2f       	mov	r22, r24
    17c0:	83 e8       	ldi	r24, 0x83	; 131
    17c2:	91 e0       	ldi	r25, 0x01	; 1
    17c4:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN16PololuQTRSensors9calibrateEh>
    17c8:	08 95       	ret

000017ca <read_line>:
    17ca:	9c 01       	movw	r18, r24
    17cc:	46 2f       	mov	r20, r22
    17ce:	83 e8       	ldi	r24, 0x83	; 131
    17d0:	91 e0       	ldi	r25, 0x01	; 1
    17d2:	b9 01       	movw	r22, r18
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <_ZN16PololuQTRSensors8readLineEPjhh>
    17da:	08 95       	ret

000017dc <_ZN9Pololu3pi4initEjh>:
    17dc:	0f 93       	push	r16
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <_ZN9Pololu3pi4initEjh+0x8>
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <_ZN9Pololu3pi4initEjh+0xa>
    17e6:	0f 92       	push	r0
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	9c 01       	movw	r18, r24
    17ee:	96 2f       	mov	r25, r22
    17f0:	de 01       	movw	r26, r28
    17f2:	11 96       	adiw	r26, 0x01	; 1
    17f4:	e6 e2       	ldi	r30, 0x26	; 38
    17f6:	f1 e0       	ldi	r31, 0x01	; 1
    17f8:	85 e0       	ldi	r24, 0x05	; 5
    17fa:	01 90       	ld	r0, Z+
    17fc:	0d 92       	st	X+, r0
    17fe:	81 50       	subi	r24, 0x01	; 1
    1800:	e1 f7       	brne	.-8      	; 0x17fa <_ZN9Pololu3pi4initEjh+0x1e>
    1802:	be 01       	movw	r22, r28
    1804:	6f 5f       	subi	r22, 0xFF	; 255
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	99 23       	and	r25, r25
    180a:	29 f0       	breq	.+10     	; 0x1816 <_ZN9Pololu3pi4initEjh+0x3a>
    180c:	83 e8       	ldi	r24, 0x83	; 131
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	45 e0       	ldi	r20, 0x05	; 5
    1812:	0f ef       	ldi	r16, 0xFF	; 255
    1814:	04 c0       	rjmp	.+8      	; 0x181e <_ZN9Pololu3pi4initEjh+0x42>
    1816:	83 e8       	ldi	r24, 0x83	; 131
    1818:	91 e0       	ldi	r25, 0x01	; 1
    181a:	45 e0       	ldi	r20, 0x05	; 5
    181c:	03 e1       	ldi	r16, 0x13	; 19
    181e:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1822:	83 e8       	ldi	r24, 0x83	; 131
    1824:	91 e0       	ldi	r25, 0x01	; 1
    1826:	0e 94 5f 0c 	call	0x18be	; 0x18be <_ZN16PololuQTRSensors11emittersOffEv>
    182a:	0e 94 c8 0b 	call	0x1790	; 0x1790 <_ZN13OrangutanTime5resetEv>
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	0f 91       	pop	r16
    183e:	08 95       	ret

00001840 <pololu_3pi_init>:
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_ZN9Pololu3pi4initEjh>
    1846:	08 95       	ret

00001848 <_GLOBAL__I_pololu_3pi_init>:
    1848:	08 95       	ret

0000184a <_GLOBAL__D_pololu_3pi_init>:
    184a:	83 e8       	ldi	r24, 0x83	; 131
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	0e 94 33 11 	call	0x2266	; 0x2266 <_ZN16PololuQTRSensorsD1Ev>
    1852:	08 95       	ret

00001854 <delayMicroseconds>:
    1854:	6f 93       	push	r22
    1856:	64 e0       	ldi	r22, 0x04	; 4
    1858:	6a 95       	dec	r22
    185a:	f1 f7       	brne	.-4      	; 0x1858 <delayMicroseconds+0x4>
    185c:	6f 91       	pop	r22
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	c9 f7       	brne	.-14     	; 0x1854 <delayMicroseconds>
    1862:	08 95       	ret

00001864 <_ZN16PololuQTRSensors4initEhhh>:
    1864:	a7 e0       	ldi	r26, 0x07	; 7
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e8 e3       	ldi	r30, 0x38	; 56
    186a:	fc e0       	ldi	r31, 0x0C	; 12
    186c:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__prologue_saves__+0x1c>
    1870:	8c 01       	movw	r16, r24
    1872:	fc 01       	movw	r30, r24
    1874:	11 82       	std	Z+1, r1	; 0x01
    1876:	10 82       	st	Z, r1
    1878:	13 82       	std	Z+3, r1	; 0x03
    187a:	12 82       	std	Z+2, r1	; 0x02
    187c:	15 82       	std	Z+5, r1	; 0x05
    187e:	14 82       	std	Z+4, r1	; 0x04
    1880:	17 82       	std	Z+7, r1	; 0x07
    1882:	16 82       	std	Z+6, r1	; 0x06
    1884:	61 31       	cpi	r22, 0x11	; 17
    1886:	18 f0       	brcs	.+6      	; 0x188e <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1888:	80 e1       	ldi	r24, 0x10	; 16
    188a:	80 87       	std	Z+8, r24	; 0x08
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    188e:	fc 01       	movw	r30, r24
    1890:	60 87       	std	Z+8, r22	; 0x08
    1892:	f8 01       	movw	r30, r16
    1894:	20 8b       	std	Z+16, r18	; 0x10
    1896:	ce 01       	movw	r24, r28
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	64 2f       	mov	r22, r20
    189c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    18a0:	8f 81       	ldd	r24, Y+7	; 0x07
    18a2:	f8 01       	movw	r30, r16
    18a4:	81 87       	std	Z+9, r24	; 0x09
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	93 87       	std	Z+11, r25	; 0x0b
    18ac:	82 87       	std	Z+10, r24	; 0x0a
    18ae:	8d 81       	ldd	r24, Y+5	; 0x05
    18b0:	9e 81       	ldd	r25, Y+6	; 0x06
    18b2:	95 87       	std	Z+13, r25	; 0x0d
    18b4:	84 87       	std	Z+12, r24	; 0x0c
    18b6:	27 96       	adiw	r28, 0x07	; 7
    18b8:	e4 e0       	ldi	r30, 0x04	; 4
    18ba:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__epilogue_restores__+0x1c>

000018be <_ZN16PololuQTRSensors11emittersOffEv>:
    18be:	fc 01       	movw	r30, r24
    18c0:	a4 85       	ldd	r26, Z+12	; 0x0c
    18c2:	b5 85       	ldd	r27, Z+13	; 0x0d
    18c4:	10 97       	sbiw	r26, 0x00	; 0
    18c6:	79 f0       	breq	.+30     	; 0x18e6 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    18c8:	8c 91       	ld	r24, X
    18ca:	91 85       	ldd	r25, Z+9	; 0x09
    18cc:	89 2b       	or	r24, r25
    18ce:	8c 93       	st	X, r24
    18d0:	a2 85       	ldd	r26, Z+10	; 0x0a
    18d2:	b3 85       	ldd	r27, Z+11	; 0x0b
    18d4:	9c 91       	ld	r25, X
    18d6:	81 85       	ldd	r24, Z+9	; 0x09
    18d8:	80 95       	com	r24
    18da:	89 23       	and	r24, r25
    18dc:	8c 93       	st	X, r24
    18de:	88 ec       	ldi	r24, 0xC8	; 200
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	0e 94 2a 0c 	call	0x1854	; 0x1854 <delayMicroseconds>
    18e6:	08 95       	ret

000018e8 <_ZN16PololuQTRSensors10emittersOnEv>:
    18e8:	fc 01       	movw	r30, r24
    18ea:	a4 85       	ldd	r26, Z+12	; 0x0c
    18ec:	b5 85       	ldd	r27, Z+13	; 0x0d
    18ee:	10 97       	sbiw	r26, 0x00	; 0
    18f0:	71 f0       	breq	.+28     	; 0x190e <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    18f2:	8c 91       	ld	r24, X
    18f4:	91 85       	ldd	r25, Z+9	; 0x09
    18f6:	89 2b       	or	r24, r25
    18f8:	8c 93       	st	X, r24
    18fa:	a2 85       	ldd	r26, Z+10	; 0x0a
    18fc:	b3 85       	ldd	r27, Z+11	; 0x0b
    18fe:	8c 91       	ld	r24, X
    1900:	91 85       	ldd	r25, Z+9	; 0x09
    1902:	89 2b       	or	r24, r25
    1904:	8c 93       	st	X, r24
    1906:	88 ec       	ldi	r24, 0xC8	; 200
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <delayMicroseconds>
    190e:	08 95       	ret

00001910 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    1910:	a7 e0       	ldi	r26, 0x07	; 7
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	ee e8       	ldi	r30, 0x8E	; 142
    1916:	fc e0       	ldi	r31, 0x0C	; 12
    1918:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__prologue_saves__>
    191c:	7c 01       	movw	r14, r24
    191e:	1b 01       	movw	r2, r22
    1920:	64 2f       	mov	r22, r20
    1922:	39 01       	movw	r6, r18
    1924:	40 2f       	mov	r20, r16
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	0e 94 32 0c 	call	0x1864	; 0x1864 <_ZN16PololuQTRSensors4initEhhh>
    192c:	97 01       	movw	r18, r14
    192e:	2f 5b       	subi	r18, 0xBF	; 191
    1930:	3f 4f       	sbci	r19, 0xFF	; 255
    1932:	f9 01       	movw	r30, r18
    1934:	10 82       	st	Z, r1
    1936:	d7 01       	movw	r26, r14
    1938:	ae 5b       	subi	r26, 0xBE	; 190
    193a:	bf 4f       	sbci	r27, 0xFF	; 255
    193c:	1c 92       	st	X, r1
    193e:	c7 01       	movw	r24, r14
    1940:	8d 5b       	subi	r24, 0xBD	; 189
    1942:	9f 4f       	sbci	r25, 0xFF	; 255
    1944:	fc 01       	movw	r30, r24
    1946:	10 82       	st	Z, r1
    1948:	f7 01       	movw	r30, r14
    194a:	77 86       	std	Z+15, r7	; 0x0f
    194c:	66 86       	std	Z+14, r6	; 0x0e
    194e:	66 24       	eor	r6, r6
    1950:	2e 01       	movw	r4, r28
    1952:	08 94       	sec
    1954:	41 1c       	adc	r4, r1
    1956:	51 1c       	adc	r5, r1
    1958:	6c 01       	movw	r12, r24
    195a:	5d 01       	movw	r10, r26
    195c:	49 01       	movw	r8, r18
    195e:	29 c0       	rjmp	.+82     	; 0x19b2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1960:	06 2d       	mov	r16, r6
    1962:	10 e0       	ldi	r17, 0x00	; 0
    1964:	f1 01       	movw	r30, r2
    1966:	e0 0f       	add	r30, r16
    1968:	f1 1f       	adc	r31, r17
    196a:	c2 01       	movw	r24, r4
    196c:	60 81       	ld	r22, Z
    196e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1972:	2f 81       	ldd	r18, Y+7	; 0x07
    1974:	f7 01       	movw	r30, r14
    1976:	e0 0f       	add	r30, r16
    1978:	f1 1f       	adc	r31, r17
    197a:	21 8b       	std	Z+17, r18	; 0x11
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	9a 81       	ldd	r25, Y+2	; 0x02
    1980:	f8 01       	movw	r30, r16
    1982:	ee 0f       	add	r30, r30
    1984:	ff 1f       	adc	r31, r31
    1986:	ee 0d       	add	r30, r14
    1988:	ff 1d       	adc	r31, r15
    198a:	92 a3       	std	Z+34, r25	; 0x22
    198c:	81 a3       	std	Z+33, r24	; 0x21
    198e:	83 32       	cpi	r24, 0x23	; 35
    1990:	91 05       	cpc	r25, r1
    1992:	11 f4       	brne	.+4      	; 0x1998 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1994:	f4 01       	movw	r30, r8
    1996:	09 c0       	rjmp	.+18     	; 0x19aa <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1998:	86 32       	cpi	r24, 0x26	; 38
    199a:	91 05       	cpc	r25, r1
    199c:	11 f4       	brne	.+4      	; 0x19a2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    199e:	f5 01       	movw	r30, r10
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    19a2:	89 32       	cpi	r24, 0x29	; 41
    19a4:	91 05       	cpc	r25, r1
    19a6:	21 f4       	brne	.+8      	; 0x19b0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa0>
    19a8:	f6 01       	movw	r30, r12
    19aa:	80 81       	ld	r24, Z
    19ac:	82 2b       	or	r24, r18
    19ae:	80 83       	st	Z, r24
    19b0:	63 94       	inc	r6
    19b2:	f7 01       	movw	r30, r14
    19b4:	80 85       	ldd	r24, Z+8	; 0x08
    19b6:	68 16       	cp	r6, r24
    19b8:	98 f2       	brcs	.-90     	; 0x1960 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x50>
    19ba:	27 96       	adiw	r28, 0x07	; 7
    19bc:	e2 e1       	ldi	r30, 0x12	; 18
    19be:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__epilogue_restores__>

000019c2 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    19c2:	a0 e0       	ldi	r26, 0x00	; 0
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e7 ee       	ldi	r30, 0xE7	; 231
    19c8:	fc e0       	ldi	r31, 0x0C	; 12
    19ca:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__prologue_saves__+0xa>
    19ce:	ec 01       	movw	r28, r24
    19d0:	5b 01       	movw	r10, r22
    19d2:	fc 01       	movw	r30, r24
    19d4:	ef 5b       	subi	r30, 0xBF	; 191
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	90 80       	ld	r9, Z
    19da:	fc 01       	movw	r30, r24
    19dc:	ee 5b       	subi	r30, 0xBE	; 190
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	80 80       	ld	r8, Z
    19e2:	fc 01       	movw	r30, r24
    19e4:	ed 5b       	subi	r30, 0xBD	; 189
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	70 80       	ld	r7, Z
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	09 c0       	rjmp	.+18     	; 0x1a00 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x3e>
    19ee:	e8 2f       	mov	r30, r24
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	ee 0f       	add	r30, r30
    19f4:	ff 1f       	adc	r31, r31
    19f6:	ea 0d       	add	r30, r10
    19f8:	fb 1d       	adc	r31, r11
    19fa:	11 82       	std	Z+1, r1	; 0x01
    19fc:	10 82       	st	Z, r1
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	98 85       	ldd	r25, Y+8	; 0x08
    1a02:	89 17       	cp	r24, r25
    1a04:	a0 f3       	brcs	.-24     	; 0x19ee <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x2c>
    1a06:	84 b1       	in	r24, 0x04	; 4
    1a08:	21 e4       	ldi	r18, 0x41	; 65
    1a0a:	e2 2e       	mov	r14, r18
    1a0c:	f1 2c       	mov	r15, r1
    1a0e:	ec 0e       	add	r14, r28
    1a10:	fd 1e       	adc	r15, r29
    1a12:	d7 01       	movw	r26, r14
    1a14:	9c 91       	ld	r25, X
    1a16:	89 2b       	or	r24, r25
    1a18:	84 b9       	out	0x04, r24	; 4
    1a1a:	87 b1       	in	r24, 0x07	; 7
    1a1c:	8e 01       	movw	r16, r28
    1a1e:	0e 5b       	subi	r16, 0xBE	; 190
    1a20:	1f 4f       	sbci	r17, 0xFF	; 255
    1a22:	f8 01       	movw	r30, r16
    1a24:	90 81       	ld	r25, Z
    1a26:	89 2b       	or	r24, r25
    1a28:	87 b9       	out	0x07, r24	; 7
    1a2a:	8a b1       	in	r24, 0x0a	; 10
    1a2c:	93 e4       	ldi	r25, 0x43	; 67
    1a2e:	c9 2e       	mov	r12, r25
    1a30:	d1 2c       	mov	r13, r1
    1a32:	cc 0e       	add	r12, r28
    1a34:	dd 1e       	adc	r13, r29
    1a36:	d6 01       	movw	r26, r12
    1a38:	9c 91       	ld	r25, X
    1a3a:	89 2b       	or	r24, r25
    1a3c:	8a b9       	out	0x0a, r24	; 10
    1a3e:	85 b1       	in	r24, 0x05	; 5
    1a40:	f7 01       	movw	r30, r14
    1a42:	90 81       	ld	r25, Z
    1a44:	89 2b       	or	r24, r25
    1a46:	85 b9       	out	0x05, r24	; 5
    1a48:	88 b1       	in	r24, 0x08	; 8
    1a4a:	d8 01       	movw	r26, r16
    1a4c:	9c 91       	ld	r25, X
    1a4e:	89 2b       	or	r24, r25
    1a50:	88 b9       	out	0x08, r24	; 8
    1a52:	8b b1       	in	r24, 0x0b	; 11
    1a54:	f6 01       	movw	r30, r12
    1a56:	90 81       	ld	r25, Z
    1a58:	89 2b       	or	r24, r25
    1a5a:	8b b9       	out	0x0b, r24	; 11
    1a5c:	8a e0       	ldi	r24, 0x0A	; 10
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 2a 0c 	call	0x1854	; 0x1854 <delayMicroseconds>
    1a64:	94 b1       	in	r25, 0x04	; 4
    1a66:	d7 01       	movw	r26, r14
    1a68:	8c 91       	ld	r24, X
    1a6a:	80 95       	com	r24
    1a6c:	89 23       	and	r24, r25
    1a6e:	84 b9       	out	0x04, r24	; 4
    1a70:	97 b1       	in	r25, 0x07	; 7
    1a72:	f8 01       	movw	r30, r16
    1a74:	80 81       	ld	r24, Z
    1a76:	80 95       	com	r24
    1a78:	89 23       	and	r24, r25
    1a7a:	87 b9       	out	0x07, r24	; 7
    1a7c:	9a b1       	in	r25, 0x0a	; 10
    1a7e:	d6 01       	movw	r26, r12
    1a80:	8c 91       	ld	r24, X
    1a82:	80 95       	com	r24
    1a84:	89 23       	and	r24, r25
    1a86:	8a b9       	out	0x0a, r24	; 10
    1a88:	95 b1       	in	r25, 0x05	; 5
    1a8a:	f7 01       	movw	r30, r14
    1a8c:	80 81       	ld	r24, Z
    1a8e:	80 95       	com	r24
    1a90:	89 23       	and	r24, r25
    1a92:	85 b9       	out	0x05, r24	; 5
    1a94:	98 b1       	in	r25, 0x08	; 8
    1a96:	d8 01       	movw	r26, r16
    1a98:	8c 91       	ld	r24, X
    1a9a:	80 95       	com	r24
    1a9c:	89 23       	and	r24, r25
    1a9e:	88 b9       	out	0x08, r24	; 8
    1aa0:	9b b1       	in	r25, 0x0b	; 11
    1aa2:	f6 01       	movw	r30, r12
    1aa4:	80 81       	ld	r24, Z
    1aa6:	80 95       	com	r24
    1aa8:	89 23       	and	r24, r25
    1aaa:	8b b9       	out	0x0b, r24	; 11
    1aac:	c0 90 b0 00 	lds	r12, 0x00B0
    1ab0:	e0 90 b1 00 	lds	r14, 0x00B1
    1ab4:	80 91 b0 00 	lds	r24, 0x00B0
    1ab8:	83 60       	ori	r24, 0x03	; 3
    1aba:	80 93 b0 00 	sts	0x00B0, r24
    1abe:	82 e0       	ldi	r24, 0x02	; 2
    1ac0:	80 93 b1 00 	sts	0x00B1, r24
    1ac4:	00 91 b2 00 	lds	r16, 0x00B2
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	39 c0       	rjmp	.+114    	; 0x1b40 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17e>
    1ace:	20 91 b2 00 	lds	r18, 0x00B2
    1ad2:	20 1b       	sub	r18, r16
    1ad4:	82 0f       	add	r24, r18
    1ad6:	91 1d       	adc	r25, r1
    1ad8:	02 0f       	add	r16, r18
    1ada:	f3 b0       	in	r15, 0x03	; 3
    1adc:	f9 14       	cp	r15, r9
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x120>
    1ae0:	4d c0       	rjmp	.+154    	; 0x1b7c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1ae2:	96 b0       	in	r9, 0x06	; 6
    1ae4:	98 14       	cp	r9, r8
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x128>
    1ae8:	49 c0       	rjmp	.+146    	; 0x1b7c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1aea:	29 b1       	in	r18, 0x09	; 9
    1aec:	27 15       	cp	r18, r7
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x130>
    1af0:	45 c0       	rjmp	.+138    	; 0x1b7c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1af2:	24 c0       	rjmp	.+72     	; 0x1b3c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17a>
    1af4:	21 2f       	mov	r18, r17
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	a9 01       	movw	r20, r18
    1afa:	44 0f       	add	r20, r20
    1afc:	55 1f       	adc	r21, r21
    1afe:	f5 01       	movw	r30, r10
    1b00:	e4 0f       	add	r30, r20
    1b02:	f5 1f       	adc	r31, r21
    1b04:	60 81       	ld	r22, Z
    1b06:	71 81       	ldd	r23, Z+1	; 0x01
    1b08:	61 15       	cp	r22, r1
    1b0a:	71 05       	cpc	r23, r1
    1b0c:	99 f4       	brne	.+38     	; 0x1b34 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    1b0e:	4c 0f       	add	r20, r28
    1b10:	5d 1f       	adc	r21, r29
    1b12:	da 01       	movw	r26, r20
    1b14:	91 96       	adiw	r26, 0x21	; 33
    1b16:	4d 91       	ld	r20, X+
    1b18:	5c 91       	ld	r21, X
    1b1a:	92 97       	sbiw	r26, 0x22	; 34
    1b1c:	da 01       	movw	r26, r20
    1b1e:	4c 91       	ld	r20, X
    1b20:	2c 0f       	add	r18, r28
    1b22:	3d 1f       	adc	r19, r29
    1b24:	d9 01       	movw	r26, r18
    1b26:	51 96       	adiw	r26, 0x11	; 17
    1b28:	2c 91       	ld	r18, X
    1b2a:	51 97       	sbiw	r26, 0x11	; 17
    1b2c:	42 23       	and	r20, r18
    1b2e:	11 f4       	brne	.+4      	; 0x1b34 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
    1b34:	1f 5f       	subi	r17, 0xFF	; 255
    1b36:	28 85       	ldd	r18, Y+8	; 0x08
    1b38:	12 17       	cp	r17, r18
    1b3a:	e0 f2       	brcs	.-72     	; 0x1af4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x132>
    1b3c:	89 2c       	mov	r8, r9
    1b3e:	9f 2c       	mov	r9, r15
    1b40:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b42:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b44:	82 17       	cp	r24, r18
    1b46:	93 07       	cpc	r25, r19
    1b48:	10 f2       	brcs	.-124    	; 0x1ace <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x10c>
    1b4a:	c0 92 b0 00 	sts	0x00B0, r12
    1b4e:	e0 92 b1 00 	sts	0x00B1, r14
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	0f c0       	rjmp	.+30     	; 0x1b74 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b2>
    1b56:	e2 2f       	mov	r30, r18
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	ee 0f       	add	r30, r30
    1b5c:	ff 1f       	adc	r31, r31
    1b5e:	ea 0d       	add	r30, r10
    1b60:	fb 1d       	adc	r31, r11
    1b62:	80 81       	ld	r24, Z
    1b64:	91 81       	ldd	r25, Z+1	; 0x01
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	21 f4       	brne	.+8      	; 0x1b72 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b0>
    1b6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b6e:	91 83       	std	Z+1, r25	; 0x01
    1b70:	80 83       	st	Z, r24
    1b72:	2f 5f       	subi	r18, 0xFF	; 255
    1b74:	88 85       	ldd	r24, Y+8	; 0x08
    1b76:	28 17       	cp	r18, r24
    1b78:	70 f3       	brcs	.-36     	; 0x1b56 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x194>
    1b7a:	05 c0       	rjmp	.+10     	; 0x1b86 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1c4>
    1b7c:	f3 b0       	in	r15, 0x03	; 3
    1b7e:	96 b0       	in	r9, 0x06	; 6
    1b80:	79 b0       	in	r7, 0x09	; 9
    1b82:	10 e0       	ldi	r17, 0x00	; 0
    1b84:	d8 cf       	rjmp	.-80     	; 0x1b36 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	ed e0       	ldi	r30, 0x0D	; 13
    1b8c:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__epilogue_restores__+0xa>

00001b90 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	9b 01       	movw	r18, r22
    1ba0:	00 91 7c 00 	lds	r16, 0x007C
    1ba4:	10 91 7a 00 	lds	r17, 0x007A
    1ba8:	e7 b0       	in	r14, 0x07	; 7
    1baa:	f8 b0       	in	r15, 0x08	; 8
    1bac:	80 91 7a 00 	lds	r24, 0x007A
    1bb0:	86 fd       	sbrc	r24, 6
    1bb2:	fc cf       	rjmp	.-8      	; 0x1bac <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	0a c0       	rjmp	.+20     	; 0x1bcc <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3c>
    1bb8:	a8 2f       	mov	r26, r24
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	aa 0f       	add	r26, r26
    1bbe:	bb 1f       	adc	r27, r27
    1bc0:	a2 0f       	add	r26, r18
    1bc2:	b3 1f       	adc	r27, r19
    1bc4:	11 96       	adiw	r26, 0x01	; 1
    1bc6:	1c 92       	st	X, r1
    1bc8:	1e 92       	st	-X, r1
    1bca:	8f 5f       	subi	r24, 0xFF	; 255
    1bcc:	90 85       	ldd	r25, Z+8	; 0x08
    1bce:	89 17       	cp	r24, r25
    1bd0:	98 f3       	brcs	.-26     	; 0x1bb8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x28>
    1bd2:	97 b1       	in	r25, 0x07	; 7
    1bd4:	82 a1       	ldd	r24, Z+34	; 0x22
    1bd6:	80 95       	com	r24
    1bd8:	89 23       	and	r24, r25
    1bda:	87 b9       	out	0x07, r24	; 7
    1bdc:	98 b1       	in	r25, 0x08	; 8
    1bde:	82 a1       	ldd	r24, Z+34	; 0x22
    1be0:	80 95       	com	r24
    1be2:	89 23       	and	r24, r25
    1be4:	88 b9       	out	0x08, r24	; 8
    1be6:	87 e8       	ldi	r24, 0x87	; 135
    1be8:	80 93 7a 00 	sts	0x007A, r24
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	29 c0       	rjmp	.+82     	; 0x1c42 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    1bf0:	df 01       	movw	r26, r30
    1bf2:	a6 0f       	add	r26, r22
    1bf4:	b1 1d       	adc	r27, r1
    1bf6:	51 96       	adiw	r26, 0x11	; 17
    1bf8:	8c 91       	ld	r24, X
    1bfa:	51 97       	sbiw	r26, 0x11	; 17
    1bfc:	80 64       	ori	r24, 0x40	; 64
    1bfe:	80 93 7c 00 	sts	0x007C, r24
    1c02:	80 91 7a 00 	lds	r24, 0x007A
    1c06:	80 64       	ori	r24, 0x40	; 64
    1c08:	80 93 7a 00 	sts	0x007A, r24
    1c0c:	80 91 7a 00 	lds	r24, 0x007A
    1c10:	86 fd       	sbrc	r24, 6
    1c12:	fc cf       	rjmp	.-8      	; 0x1c0c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x7c>
    1c14:	a6 2f       	mov	r26, r22
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	aa 0f       	add	r26, r26
    1c1a:	bb 1f       	adc	r27, r27
    1c1c:	a2 0f       	add	r26, r18
    1c1e:	b3 1f       	adc	r27, r19
    1c20:	40 91 78 00 	lds	r20, 0x0078
    1c24:	50 91 79 00 	lds	r21, 0x0079
    1c28:	8d 91       	ld	r24, X+
    1c2a:	9c 91       	ld	r25, X
    1c2c:	11 97       	sbiw	r26, 0x01	; 1
    1c2e:	84 0f       	add	r24, r20
    1c30:	95 1f       	adc	r25, r21
    1c32:	11 96       	adiw	r26, 0x01	; 1
    1c34:	9c 93       	st	X, r25
    1c36:	8e 93       	st	-X, r24
    1c38:	6f 5f       	subi	r22, 0xFF	; 255
    1c3a:	80 85       	ldd	r24, Z+8	; 0x08
    1c3c:	68 17       	cp	r22, r24
    1c3e:	c0 f2       	brcs	.-80     	; 0x1bf0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x60>
    1c40:	7f 5f       	subi	r23, 0xFF	; 255
    1c42:	81 a1       	ldd	r24, Z+33	; 0x21
    1c44:	78 17       	cp	r23, r24
    1c46:	10 f4       	brcc	.+4      	; 0x1c4c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xbc>
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	f7 cf       	rjmp	.-18     	; 0x1c3a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xaa>
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	14 c0       	rjmp	.+40     	; 0x1c78 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe8>
    1c50:	c4 2f       	mov	r28, r20
    1c52:	d0 e0       	ldi	r29, 0x00	; 0
    1c54:	cc 0f       	add	r28, r28
    1c56:	dd 1f       	adc	r29, r29
    1c58:	c2 0f       	add	r28, r18
    1c5a:	d3 1f       	adc	r29, r19
    1c5c:	61 a1       	ldd	r22, Z+33	; 0x21
    1c5e:	70 e0       	ldi	r23, 0x00	; 0
    1c60:	cb 01       	movw	r24, r22
    1c62:	95 95       	asr	r25
    1c64:	87 95       	ror	r24
    1c66:	a8 81       	ld	r26, Y
    1c68:	b9 81       	ldd	r27, Y+1	; 0x01
    1c6a:	8a 0f       	add	r24, r26
    1c6c:	9b 1f       	adc	r25, r27
    1c6e:	0e 94 6d 11 	call	0x22da	; 0x22da <__udivmodhi4>
    1c72:	79 83       	std	Y+1, r23	; 0x01
    1c74:	68 83       	st	Y, r22
    1c76:	4f 5f       	subi	r20, 0xFF	; 255
    1c78:	80 85       	ldd	r24, Z+8	; 0x08
    1c7a:	48 17       	cp	r20, r24
    1c7c:	48 f3       	brcs	.-46     	; 0x1c50 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xc0>
    1c7e:	00 93 7c 00 	sts	0x007C, r16
    1c82:	10 93 7a 00 	sts	0x007A, r17
    1c86:	f8 b8       	out	0x08, r15	; 8
    1c88:	e7 b8       	out	0x07, r14	; 7
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	e6 e0       	ldi	r30, 0x06	; 6
    1c90:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__epilogue_restores__+0x18>

00001c94 <_ZN16PololuQTRSensors4readEPjh>:
    1c94:	a0 e2       	ldi	r26, 0x20	; 32
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e0 e5       	ldi	r30, 0x50	; 80
    1c9a:	fe e0       	ldi	r31, 0x0E	; 14
    1c9c:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__prologue_saves__+0x16>
    1ca0:	8c 01       	movw	r16, r24
    1ca2:	7b 01       	movw	r14, r22
    1ca4:	d4 2e       	mov	r13, r20
    1ca6:	84 2f       	mov	r24, r20
    1ca8:	81 50       	subi	r24, 0x01	; 1
    1caa:	82 30       	cpi	r24, 0x02	; 2
    1cac:	18 f4       	brcc	.+6      	; 0x1cb4 <_ZN16PololuQTRSensors4readEPjh+0x20>
    1cae:	c8 01       	movw	r24, r16
    1cb0:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN16PololuQTRSensors10emittersOnEv>
    1cb4:	d8 01       	movw	r26, r16
    1cb6:	50 96       	adiw	r26, 0x10	; 16
    1cb8:	8c 91       	ld	r24, X
    1cba:	50 97       	sbiw	r26, 0x10	; 16
    1cbc:	88 23       	and	r24, r24
    1cbe:	89 f4       	brne	.+34     	; 0x1ce2 <_ZN16PololuQTRSensors4readEPjh+0x4e>
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	b7 01       	movw	r22, r14
    1cc4:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1cc8:	c8 01       	movw	r24, r16
    1cca:	0e 94 5f 0c 	call	0x18be	; 0x18be <_ZN16PololuQTRSensors11emittersOffEv>
    1cce:	bd 2d       	mov	r27, r13
    1cd0:	b2 30       	cpi	r27, 0x02	; 2
    1cd2:	d9 f5       	brne	.+118    	; 0x1d4a <_ZN16PololuQTRSensors4readEPjh+0xb6>
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	be 01       	movw	r22, r28
    1cd8:	6f 5f       	subi	r22, 0xFF	; 255
    1cda:	7f 4f       	sbci	r23, 0xFF	; 255
    1cdc:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1ce0:	10 c0       	rjmp	.+32     	; 0x1d02 <_ZN16PololuQTRSensors4readEPjh+0x6e>
    1ce2:	c8 01       	movw	r24, r16
    1ce4:	b7 01       	movw	r22, r14
    1ce6:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1cea:	c8 01       	movw	r24, r16
    1cec:	0e 94 5f 0c 	call	0x18be	; 0x18be <_ZN16PololuQTRSensors11emittersOffEv>
    1cf0:	ed 2d       	mov	r30, r13
    1cf2:	e2 30       	cpi	r30, 0x02	; 2
    1cf4:	51 f5       	brne	.+84     	; 0x1d4a <_ZN16PololuQTRSensors4readEPjh+0xb6>
    1cf6:	c8 01       	movw	r24, r16
    1cf8:	be 01       	movw	r22, r28
    1cfa:	6f 5f       	subi	r22, 0xFF	; 255
    1cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfe:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1d02:	60 e0       	ldi	r22, 0x00	; 0
    1d04:	ae 01       	movw	r20, r28
    1d06:	4f 5f       	subi	r20, 0xFF	; 255
    1d08:	5f 4f       	sbci	r21, 0xFF	; 255
    1d0a:	1b c0       	rjmp	.+54     	; 0x1d42 <_ZN16PololuQTRSensors4readEPjh+0xae>
    1d0c:	86 2f       	mov	r24, r22
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	f7 01       	movw	r30, r14
    1d16:	e8 0f       	add	r30, r24
    1d18:	f9 1f       	adc	r31, r25
    1d1a:	84 0f       	add	r24, r20
    1d1c:	95 1f       	adc	r25, r21
    1d1e:	d8 01       	movw	r26, r16
    1d20:	1e 96       	adiw	r26, 0x0e	; 14
    1d22:	2d 91       	ld	r18, X+
    1d24:	3c 91       	ld	r19, X
    1d26:	1f 97       	sbiw	r26, 0x0f	; 15
    1d28:	dc 01       	movw	r26, r24
    1d2a:	8d 91       	ld	r24, X+
    1d2c:	9c 91       	ld	r25, X
    1d2e:	11 97       	sbiw	r26, 0x01	; 1
    1d30:	28 1b       	sub	r18, r24
    1d32:	39 0b       	sbc	r19, r25
    1d34:	80 81       	ld	r24, Z
    1d36:	91 81       	ldd	r25, Z+1	; 0x01
    1d38:	82 0f       	add	r24, r18
    1d3a:	93 1f       	adc	r25, r19
    1d3c:	91 83       	std	Z+1, r25	; 0x01
    1d3e:	80 83       	st	Z, r24
    1d40:	6f 5f       	subi	r22, 0xFF	; 255
    1d42:	f8 01       	movw	r30, r16
    1d44:	80 85       	ldd	r24, Z+8	; 0x08
    1d46:	68 17       	cp	r22, r24
    1d48:	08 f3       	brcs	.-62     	; 0x1d0c <_ZN16PololuQTRSensors4readEPjh+0x78>
    1d4a:	a0 96       	adiw	r28, 0x20	; 32
    1d4c:	e7 e0       	ldi	r30, 0x07	; 7
    1d4e:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__epilogue_restores__+0x16>

00001d52 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    1d52:	8f 92       	push	r8
    1d54:	9f 92       	push	r9
    1d56:	af 92       	push	r10
    1d58:	bf 92       	push	r11
    1d5a:	cf 92       	push	r12
    1d5c:	df 92       	push	r13
    1d5e:	ff 92       	push	r15
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	ec 01       	movw	r28, r24
    1d6a:	c6 2e       	mov	r12, r22
    1d6c:	07 2f       	mov	r16, r23
    1d6e:	f4 2e       	mov	r15, r20
    1d70:	42 30       	cpi	r20, 0x02	; 2
    1d72:	11 f0       	breq	.+4      	; 0x1d78 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x26>
    1d74:	ff 20       	and	r15, r15
    1d76:	51 f4       	brne	.+20     	; 0x1d8c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    1d78:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x30>
    1d80:	a0 c0       	rjmp	.+320    	; 0x1ec2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    1d82:	8e 81       	ldd	r24, Y+6	; 0x06
    1d84:	9f 81       	ldd	r25, Y+7	; 0x07
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    1d8a:	9b c0       	rjmp	.+310    	; 0x1ec2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    1d8c:	8f 2d       	mov	r24, r15
    1d8e:	81 50       	subi	r24, 0x01	; 1
    1d90:	82 30       	cpi	r24, 0x02	; 2
    1d92:	50 f4       	brcc	.+20     	; 0x1da8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    1d94:	88 81       	ld	r24, Y
    1d96:	99 81       	ldd	r25, Y+1	; 0x01
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x4c>
    1d9c:	92 c0       	rjmp	.+292    	; 0x1ec2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	9b 81       	ldd	r25, Y+3	; 0x03
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    1da6:	8d c0       	rjmp	.+282    	; 0x1ec2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    1da8:	ce 01       	movw	r24, r28
    1daa:	6c 2d       	mov	r22, r12
    1dac:	70 2f       	mov	r23, r16
    1dae:	4f 2d       	mov	r20, r15
    1db0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <_ZN16PololuQTRSensors4readEPjh>
    1db4:	ac 2c       	mov	r10, r12
    1db6:	b0 2e       	mov	r11, r16
    1db8:	00 e0       	ldi	r16, 0x00	; 0
    1dba:	10 e0       	ldi	r17, 0x00	; 0
    1dbc:	88 24       	eor	r8, r8
    1dbe:	99 24       	eor	r9, r9
    1dc0:	7a c0       	rjmp	.+244    	; 0x1eb6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x164>
    1dc2:	8f 2d       	mov	r24, r15
    1dc4:	81 30       	cpi	r24, 0x01	; 1
    1dc6:	59 f4       	brne	.+22     	; 0x1dde <_ZN16PololuQTRSensors14readCalibratedEPjh+0x8c>
    1dc8:	ea 81       	ldd	r30, Y+2	; 0x02
    1dca:	fb 81       	ldd	r31, Y+3	; 0x03
    1dcc:	e0 0f       	add	r30, r16
    1dce:	f1 1f       	adc	r31, r17
    1dd0:	c0 80       	ld	r12, Z
    1dd2:	d1 80       	ldd	r13, Z+1	; 0x01
    1dd4:	e8 81       	ld	r30, Y
    1dd6:	f9 81       	ldd	r31, Y+1	; 0x01
    1dd8:	e0 0f       	add	r30, r16
    1dda:	f1 1f       	adc	r31, r17
    1ddc:	0d c0       	rjmp	.+26     	; 0x1df8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    1dde:	8c 81       	ldd	r24, Y+4	; 0x04
    1de0:	9d 81       	ldd	r25, Y+5	; 0x05
    1de2:	ff 20       	and	r15, r15
    1de4:	61 f4       	brne	.+24     	; 0x1dfe <_ZN16PololuQTRSensors14readCalibratedEPjh+0xac>
    1de6:	ee 81       	ldd	r30, Y+6	; 0x06
    1de8:	ff 81       	ldd	r31, Y+7	; 0x07
    1dea:	e0 0f       	add	r30, r16
    1dec:	f1 1f       	adc	r31, r17
    1dee:	c0 80       	ld	r12, Z
    1df0:	d1 80       	ldd	r13, Z+1	; 0x01
    1df2:	80 0f       	add	r24, r16
    1df4:	91 1f       	adc	r25, r17
    1df6:	fc 01       	movw	r30, r24
    1df8:	40 81       	ld	r20, Z
    1dfa:	51 81       	ldd	r21, Z+1	; 0x01
    1dfc:	2b c0       	rjmp	.+86     	; 0x1e54 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    1dfe:	80 0f       	add	r24, r16
    1e00:	91 1f       	adc	r25, r17
    1e02:	fc 01       	movw	r30, r24
    1e04:	80 81       	ld	r24, Z
    1e06:	91 81       	ldd	r25, Z+1	; 0x01
    1e08:	e8 81       	ld	r30, Y
    1e0a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e0c:	e0 0f       	add	r30, r16
    1e0e:	f1 1f       	adc	r31, r17
    1e10:	40 81       	ld	r20, Z
    1e12:	51 81       	ldd	r21, Z+1	; 0x01
    1e14:	ce 84       	ldd	r12, Y+14	; 0x0e
    1e16:	df 84       	ldd	r13, Y+15	; 0x0f
    1e18:	84 17       	cp	r24, r20
    1e1a:	95 07       	cpc	r25, r21
    1e1c:	10 f4       	brcc	.+4      	; 0x1e22 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd0>
    1e1e:	a6 01       	movw	r20, r12
    1e20:	04 c0       	rjmp	.+8      	; 0x1e2a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd8>
    1e22:	4c 0d       	add	r20, r12
    1e24:	5d 1d       	adc	r21, r13
    1e26:	48 1b       	sub	r20, r24
    1e28:	59 0b       	sbc	r21, r25
    1e2a:	ee 81       	ldd	r30, Y+6	; 0x06
    1e2c:	ff 81       	ldd	r31, Y+7	; 0x07
    1e2e:	e0 0f       	add	r30, r16
    1e30:	f1 1f       	adc	r31, r17
    1e32:	80 81       	ld	r24, Z
    1e34:	91 81       	ldd	r25, Z+1	; 0x01
    1e36:	ea 81       	ldd	r30, Y+2	; 0x02
    1e38:	fb 81       	ldd	r31, Y+3	; 0x03
    1e3a:	e0 0f       	add	r30, r16
    1e3c:	f1 1f       	adc	r31, r17
    1e3e:	20 81       	ld	r18, Z
    1e40:	31 81       	ldd	r19, Z+1	; 0x01
    1e42:	ce 84       	ldd	r12, Y+14	; 0x0e
    1e44:	df 84       	ldd	r13, Y+15	; 0x0f
    1e46:	82 17       	cp	r24, r18
    1e48:	93 07       	cpc	r25, r19
    1e4a:	20 f0       	brcs	.+8      	; 0x1e54 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    1e4c:	c2 0e       	add	r12, r18
    1e4e:	d3 1e       	adc	r13, r19
    1e50:	c8 1a       	sub	r12, r24
    1e52:	d9 0a       	sbc	r13, r25
    1e54:	c4 1a       	sub	r12, r20
    1e56:	d5 0a       	sbc	r13, r21
    1e58:	d1 f0       	breq	.+52     	; 0x1e8e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    1e5a:	f5 01       	movw	r30, r10
    1e5c:	60 81       	ld	r22, Z
    1e5e:	71 81       	ldd	r23, Z+1	; 0x01
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9a 01       	movw	r18, r20
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	62 1b       	sub	r22, r18
    1e6c:	73 0b       	sbc	r23, r19
    1e6e:	84 0b       	sbc	r24, r20
    1e70:	95 0b       	sbc	r25, r21
    1e72:	28 ee       	ldi	r18, 0xE8	; 232
    1e74:	33 e0       	ldi	r19, 0x03	; 3
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	50 e0       	ldi	r21, 0x00	; 0
    1e7a:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__mulsi3>
    1e7e:	96 01       	movw	r18, r12
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	50 e0       	ldi	r21, 0x00	; 0
    1e84:	0e 94 b7 11 	call	0x236e	; 0x236e <__divmodsi4>
    1e88:	37 fd       	sbrc	r19, 7
    1e8a:	0a c0       	rjmp	.+20     	; 0x1ea0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x14e>
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x140>
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	f3 e0       	ldi	r31, 0x03	; 3
    1e94:	29 3e       	cpi	r18, 0xE9	; 233
    1e96:	3f 07       	cpc	r19, r31
    1e98:	2c f0       	brlt	.+10     	; 0x1ea4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    1e9a:	28 ee       	ldi	r18, 0xE8	; 232
    1e9c:	33 e0       	ldi	r19, 0x03	; 3
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	f5 01       	movw	r30, r10
    1ea6:	21 93       	st	Z+, r18
    1ea8:	31 93       	st	Z+, r19
    1eaa:	5f 01       	movw	r10, r30
    1eac:	08 94       	sec
    1eae:	81 1c       	adc	r8, r1
    1eb0:	91 1c       	adc	r9, r1
    1eb2:	0e 5f       	subi	r16, 0xFE	; 254
    1eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb6:	88 85       	ldd	r24, Y+8	; 0x08
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	88 16       	cp	r8, r24
    1ebc:	99 06       	cpc	r9, r25
    1ebe:	0c f4       	brge	.+2      	; 0x1ec2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    1ec0:	80 cf       	rjmp	.-256    	; 0x1dc2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x70>
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	df 90       	pop	r13
    1ece:	cf 90       	pop	r12
    1ed0:	bf 90       	pop	r11
    1ed2:	af 90       	pop	r10
    1ed4:	9f 90       	pop	r9
    1ed6:	8f 90       	pop	r8
    1ed8:	08 95       	ret

00001eda <_ZN16PololuQTRSensors8readLineEPjhh>:
    1eda:	a5 e0       	ldi	r26, 0x05	; 5
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e3 e7       	ldi	r30, 0x73	; 115
    1ee0:	ff e0       	ldi	r31, 0x0F	; 15
    1ee2:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__prologue_saves__>
    1ee6:	4c 01       	movw	r8, r24
    1ee8:	c6 2e       	mov	r12, r22
    1eea:	e7 2e       	mov	r14, r23
    1eec:	2d 83       	std	Y+5, r18	; 0x05
    1eee:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    1ef2:	d4 01       	movw	r26, r8
    1ef4:	18 96       	adiw	r26, 0x08	; 8
    1ef6:	4c 90       	ld	r4, X
    1ef8:	18 97       	sbiw	r26, 0x08	; 8
    1efa:	de 2c       	mov	r13, r14
    1efc:	64 2d       	mov	r22, r4
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	28 ee       	ldi	r18, 0xE8	; 232
    1f06:	33 e0       	ldi	r19, 0x03	; 3
    1f08:	40 e0       	ldi	r20, 0x00	; 0
    1f0a:	50 e0       	ldi	r21, 0x00	; 0
    1f0c:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__mulsi3>
    1f10:	69 83       	std	Y+1, r22	; 0x01
    1f12:	7a 83       	std	Y+2, r23	; 0x02
    1f14:	8b 83       	std	Y+3, r24	; 0x03
    1f16:	9c 83       	std	Y+4, r25	; 0x04
    1f18:	ee 24       	eor	r14, r14
    1f1a:	ff 24       	eor	r15, r15
    1f1c:	87 01       	movw	r16, r14
    1f1e:	66 24       	eor	r6, r6
    1f20:	77 24       	eor	r7, r7
    1f22:	88 24       	eor	r8, r8
    1f24:	99 24       	eor	r9, r9
    1f26:	54 01       	movw	r10, r8
    1f28:	55 24       	eor	r5, r5
    1f2a:	36 c0       	rjmp	.+108    	; 0x1f98 <_ZN16PololuQTRSensors8readLineEPjhh+0xbe>
    1f2c:	f6 01       	movw	r30, r12
    1f2e:	30 81       	ld	r19, Z
    1f30:	21 81       	ldd	r18, Z+1	; 0x01
    1f32:	42 e0       	ldi	r20, 0x02	; 2
    1f34:	24 2e       	mov	r2, r20
    1f36:	31 2c       	mov	r3, r1
    1f38:	c2 0c       	add	r12, r2
    1f3a:	d3 1c       	adc	r13, r3
    1f3c:	c9 01       	movw	r24, r18
    1f3e:	49 2f       	mov	r20, r25
    1f40:	58 2f       	mov	r21, r24
    1f42:	1a 01       	movw	r2, r20
    1f44:	2d 81       	ldd	r18, Y+5	; 0x05
    1f46:	22 23       	and	r18, r18
    1f48:	29 f0       	breq	.+10     	; 0x1f54 <_ZN16PololuQTRSensors8readLineEPjhh+0x7a>
    1f4a:	88 ee       	ldi	r24, 0xE8	; 232
    1f4c:	93 e0       	ldi	r25, 0x03	; 3
    1f4e:	82 19       	sub	r24, r2
    1f50:	93 09       	sbc	r25, r3
    1f52:	1c 01       	movw	r2, r24
    1f54:	99 ec       	ldi	r25, 0xC9	; 201
    1f56:	29 16       	cp	r2, r25
    1f58:	31 04       	cpc	r3, r1
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <_ZN16PololuQTRSensors8readLineEPjhh+0x8c>
    1f5c:	a3 e3       	ldi	r26, 0x33	; 51
    1f5e:	2a 16       	cp	r2, r26
    1f60:	31 04       	cpc	r3, r1
    1f62:	94 f0       	brlt	.+36     	; 0x1f88 <_ZN16PololuQTRSensors8readLineEPjhh+0xae>
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <_ZN16PololuQTRSensors8readLineEPjhh+0x90>
    1f66:	55 24       	eor	r5, r5
    1f68:	53 94       	inc	r5
    1f6a:	b1 01       	movw	r22, r2
    1f6c:	88 27       	eor	r24, r24
    1f6e:	77 fd       	sbrc	r23, 7
    1f70:	80 95       	com	r24
    1f72:	98 2f       	mov	r25, r24
    1f74:	a8 01       	movw	r20, r16
    1f76:	97 01       	movw	r18, r14
    1f78:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__mulsi3>
    1f7c:	86 0e       	add	r8, r22
    1f7e:	97 1e       	adc	r9, r23
    1f80:	a8 1e       	adc	r10, r24
    1f82:	b9 1e       	adc	r11, r25
    1f84:	62 0c       	add	r6, r2
    1f86:	73 1c       	adc	r7, r3
    1f88:	88 ee       	ldi	r24, 0xE8	; 232
    1f8a:	93 e0       	ldi	r25, 0x03	; 3
    1f8c:	a0 e0       	ldi	r26, 0x00	; 0
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e8 0e       	add	r14, r24
    1f92:	f9 1e       	adc	r15, r25
    1f94:	0a 1f       	adc	r16, r26
    1f96:	1b 1f       	adc	r17, r27
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9c:	ab 81       	ldd	r26, Y+3	; 0x03
    1f9e:	bc 81       	ldd	r27, Y+4	; 0x04
    1fa0:	e8 16       	cp	r14, r24
    1fa2:	f9 06       	cpc	r15, r25
    1fa4:	0a 07       	cpc	r16, r26
    1fa6:	1b 07       	cpc	r17, r27
    1fa8:	09 f6       	brne	.-126    	; 0x1f2c <_ZN16PololuQTRSensors8readLineEPjhh+0x52>
    1faa:	55 20       	and	r5, r5
    1fac:	f1 f4       	brne	.+60     	; 0x1fea <_ZN16PololuQTRSensors8readLineEPjhh+0x110>
    1fae:	55 24       	eor	r5, r5
    1fb0:	08 94       	sec
    1fb2:	41 08       	sbc	r4, r1
    1fb4:	51 08       	sbc	r5, r1
    1fb6:	24 ef       	ldi	r18, 0xF4	; 244
    1fb8:	31 e0       	ldi	r19, 0x01	; 1
    1fba:	42 9e       	mul	r4, r18
    1fbc:	c0 01       	movw	r24, r0
    1fbe:	43 9e       	mul	r4, r19
    1fc0:	90 0d       	add	r25, r0
    1fc2:	52 9e       	mul	r5, r18
    1fc4:	90 0d       	add	r25, r0
    1fc6:	11 24       	eor	r1, r1
    1fc8:	20 91 c7 01 	lds	r18, 0x01C7
    1fcc:	30 91 c8 01 	lds	r19, 0x01C8
    1fd0:	28 17       	cp	r18, r24
    1fd2:	39 07       	cpc	r19, r25
    1fd4:	b4 f0       	brlt	.+44     	; 0x2002 <_ZN16PololuQTRSensors8readLineEPjhh+0x128>
    1fd6:	88 ee       	ldi	r24, 0xE8	; 232
    1fd8:	93 e0       	ldi	r25, 0x03	; 3
    1fda:	48 9e       	mul	r4, r24
    1fdc:	90 01       	movw	r18, r0
    1fde:	49 9e       	mul	r4, r25
    1fe0:	30 0d       	add	r19, r0
    1fe2:	58 9e       	mul	r5, r24
    1fe4:	30 0d       	add	r19, r0
    1fe6:	11 24       	eor	r1, r1
    1fe8:	0e c0       	rjmp	.+28     	; 0x2006 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    1fea:	93 01       	movw	r18, r6
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	50 e0       	ldi	r21, 0x00	; 0
    1ff0:	c5 01       	movw	r24, r10
    1ff2:	b4 01       	movw	r22, r8
    1ff4:	0e 94 95 11 	call	0x232a	; 0x232a <__udivmodsi4>
    1ff8:	20 93 c7 01 	sts	0x01C7, r18
    1ffc:	30 93 c8 01 	sts	0x01C8, r19
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	c9 01       	movw	r24, r18
    2008:	25 96       	adiw	r28, 0x05	; 5
    200a:	e2 e1       	ldi	r30, 0x12	; 18
    200c:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__epilogue_restores__>

00002010 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    2010:	a7 e6       	ldi	r26, 0x67	; 103
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	ee e0       	ldi	r30, 0x0E	; 14
    2016:	f0 e1       	ldi	r31, 0x10	; 16
    2018:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__prologue_saves__>
    201c:	8c 01       	movw	r16, r24
    201e:	4b 01       	movw	r8, r22
    2020:	6a 01       	movw	r12, r20
    2022:	a6 96       	adiw	r28, 0x26	; 38
    2024:	2f af       	std	Y+63, r18	; 0x3f
    2026:	a6 97       	sbiw	r28, 0x26	; 38
    2028:	da 01       	movw	r26, r20
    202a:	8d 91       	ld	r24, X+
    202c:	9c 91       	ld	r25, X
    202e:	11 97       	sbiw	r26, 0x01	; 1
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	e9 f4       	brne	.+58     	; 0x206e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x5e>
    2034:	f8 01       	movw	r30, r16
    2036:	80 85       	ldd	r24, Z+8	; 0x08
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	88 0f       	add	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	0e 94 2d 12 	call	0x245a	; 0x245a <malloc>
    2042:	d6 01       	movw	r26, r12
    2044:	11 96       	adiw	r26, 0x01	; 1
    2046:	9c 93       	st	X, r25
    2048:	8e 93       	st	-X, r24
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	09 f4       	brne	.+2      	; 0x2050 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x40>
    204e:	e2 c0       	rjmp	.+452    	; 0x2214 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    2050:	fc 01       	movw	r30, r24
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	03 c0       	rjmp	.+6      	; 0x205e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x4e>
    2058:	11 92       	st	Z+, r1
    205a:	11 92       	st	Z+, r1
    205c:	01 96       	adiw	r24, 0x01	; 1
    205e:	d8 01       	movw	r26, r16
    2060:	18 96       	adiw	r26, 0x08	; 8
    2062:	2c 91       	ld	r18, X
    2064:	18 97       	sbiw	r26, 0x08	; 8
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	82 17       	cp	r24, r18
    206a:	93 07       	cpc	r25, r19
    206c:	ac f3       	brlt	.-22     	; 0x2058 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x48>
    206e:	f4 01       	movw	r30, r8
    2070:	80 81       	ld	r24, Z
    2072:	91 81       	ldd	r25, Z+1	; 0x01
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	89 f0       	breq	.+34     	; 0x209a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8a>
    2078:	ee 24       	eor	r14, r14
    207a:	ff 24       	eor	r15, r15
    207c:	5e 01       	movw	r10, r28
    207e:	08 94       	sec
    2080:	a1 1c       	adc	r10, r1
    2082:	b1 1c       	adc	r11, r1
    2084:	b1 e4       	ldi	r27, 0x41	; 65
    2086:	6b 2e       	mov	r6, r27
    2088:	71 2c       	mov	r7, r1
    208a:	6c 0e       	add	r6, r28
    208c:	7d 1e       	adc	r7, r29
    208e:	a1 e2       	ldi	r26, 0x21	; 33
    2090:	4a 2e       	mov	r4, r26
    2092:	51 2c       	mov	r5, r1
    2094:	4c 0e       	add	r4, r28
    2096:	5d 1e       	adc	r5, r29
    2098:	23 c0       	rjmp	.+70     	; 0x20e0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    209a:	d8 01       	movw	r26, r16
    209c:	18 96       	adiw	r26, 0x08	; 8
    209e:	8c 91       	ld	r24, X
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	88 0f       	add	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	0e 94 2d 12 	call	0x245a	; 0x245a <malloc>
    20aa:	f4 01       	movw	r30, r8
    20ac:	91 83       	std	Z+1, r25	; 0x01
    20ae:	80 83       	st	Z, r24
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xa6>
    20b4:	af c0       	rjmp	.+350    	; 0x2214 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    20b6:	fc 01       	movw	r30, r24
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	d8 01       	movw	r26, r16
    20be:	07 c0       	rjmp	.+14     	; 0x20ce <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xbe>
    20c0:	1e 96       	adiw	r26, 0x0e	; 14
    20c2:	2d 91       	ld	r18, X+
    20c4:	3c 91       	ld	r19, X
    20c6:	1f 97       	sbiw	r26, 0x0f	; 15
    20c8:	21 93       	st	Z+, r18
    20ca:	31 93       	st	Z+, r19
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	18 96       	adiw	r26, 0x08	; 8
    20d0:	2c 91       	ld	r18, X
    20d2:	18 97       	sbiw	r26, 0x08	; 8
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	82 17       	cp	r24, r18
    20d8:	93 07       	cpc	r25, r19
    20da:	94 f3       	brlt	.-28     	; 0x20c0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb0>
    20dc:	8d 01       	movw	r16, r26
    20de:	cc cf       	rjmp	.-104    	; 0x2078 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x68>
    20e0:	c8 01       	movw	r24, r16
    20e2:	b5 01       	movw	r22, r10
    20e4:	a6 96       	adiw	r28, 0x26	; 38
    20e6:	4f ad       	ldd	r20, Y+63	; 0x3f
    20e8:	a6 97       	sbiw	r28, 0x26	; 38
    20ea:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <_ZN16PololuQTRSensors4readEPjh>
    20ee:	d8 01       	movw	r26, r16
    20f0:	18 96       	adiw	r26, 0x08	; 8
    20f2:	8c 91       	ld	r24, X
    20f4:	18 97       	sbiw	r26, 0x08	; 8
    20f6:	e8 2f       	mov	r30, r24
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	a5 96       	adiw	r28, 0x25	; 37
    20fc:	ff af       	std	Y+63, r31	; 0x3f
    20fe:	ee af       	std	Y+62, r30	; 0x3e
    2100:	a5 97       	sbiw	r28, 0x25	; 37
    2102:	13 01       	movw	r2, r6
    2104:	f5 01       	movw	r30, r10
    2106:	a3 96       	adiw	r28, 0x23	; 35
    2108:	5f ae       	std	Y+63, r5	; 0x3f
    210a:	4e ae       	std	Y+62, r4	; 0x3e
    210c:	a3 97       	sbiw	r28, 0x23	; 35
    210e:	93 01       	movw	r18, r6
    2110:	40 e0       	ldi	r20, 0x00	; 0
    2112:	50 e0       	ldi	r21, 0x00	; 0
    2114:	a8 96       	adiw	r28, 0x28	; 40
    2116:	5f ae       	std	Y+63, r5	; 0x3f
    2118:	4e ae       	std	Y+62, r4	; 0x3e
    211a:	a8 97       	sbiw	r28, 0x28	; 40
    211c:	37 c0       	rjmp	.+110    	; 0x218c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17c>
    211e:	e1 14       	cp	r14, r1
    2120:	f1 04       	cpc	r15, r1
    2122:	61 f0       	breq	.+24     	; 0x213c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x12c>
    2124:	a8 96       	adiw	r28, 0x28	; 40
    2126:	ae ad       	ldd	r26, Y+62	; 0x3e
    2128:	bf ad       	ldd	r27, Y+63	; 0x3f
    212a:	a8 97       	sbiw	r28, 0x28	; 40
    212c:	6d 91       	ld	r22, X+
    212e:	7c 91       	ld	r23, X
    2130:	11 97       	sbiw	r26, 0x01	; 1
    2132:	80 81       	ld	r24, Z
    2134:	91 81       	ldd	r25, Z+1	; 0x01
    2136:	68 17       	cp	r22, r24
    2138:	79 07       	cpc	r23, r25
    213a:	60 f4       	brcc	.+24     	; 0x2154 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x144>
    213c:	80 81       	ld	r24, Z
    213e:	91 81       	ldd	r25, Z+1	; 0x01
    2140:	a8 96       	adiw	r28, 0x28	; 40
    2142:	ae ad       	ldd	r26, Y+62	; 0x3e
    2144:	bf ad       	ldd	r27, Y+63	; 0x3f
    2146:	a8 97       	sbiw	r28, 0x28	; 40
    2148:	11 96       	adiw	r26, 0x01	; 1
    214a:	9c 93       	st	X, r25
    214c:	8e 93       	st	-X, r24
    214e:	e1 14       	cp	r14, r1
    2150:	f1 04       	cpc	r15, r1
    2152:	49 f0       	breq	.+18     	; 0x2166 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x156>
    2154:	d9 01       	movw	r26, r18
    2156:	6d 91       	ld	r22, X+
    2158:	7c 91       	ld	r23, X
    215a:	11 97       	sbiw	r26, 0x01	; 1
    215c:	80 81       	ld	r24, Z
    215e:	91 81       	ldd	r25, Z+1	; 0x01
    2160:	86 17       	cp	r24, r22
    2162:	97 07       	cpc	r25, r23
    2164:	28 f4       	brcc	.+10     	; 0x2170 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x160>
    2166:	80 81       	ld	r24, Z
    2168:	91 81       	ldd	r25, Z+1	; 0x01
    216a:	d9 01       	movw	r26, r18
    216c:	8d 93       	st	X+, r24
    216e:	9c 93       	st	X, r25
    2170:	4f 5f       	subi	r20, 0xFF	; 255
    2172:	5f 4f       	sbci	r21, 0xFF	; 255
    2174:	2e 5f       	subi	r18, 0xFE	; 254
    2176:	3f 4f       	sbci	r19, 0xFF	; 255
    2178:	32 96       	adiw	r30, 0x02	; 2
    217a:	a8 96       	adiw	r28, 0x28	; 40
    217c:	8e ad       	ldd	r24, Y+62	; 0x3e
    217e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2180:	a8 97       	sbiw	r28, 0x28	; 40
    2182:	02 96       	adiw	r24, 0x02	; 2
    2184:	a8 96       	adiw	r28, 0x28	; 40
    2186:	9f af       	std	Y+63, r25	; 0x3f
    2188:	8e af       	std	Y+62, r24	; 0x3e
    218a:	a8 97       	sbiw	r28, 0x28	; 40
    218c:	a5 96       	adiw	r28, 0x25	; 37
    218e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2190:	bf ad       	ldd	r27, Y+63	; 0x3f
    2192:	a5 97       	sbiw	r28, 0x25	; 37
    2194:	4a 17       	cp	r20, r26
    2196:	5b 07       	cpc	r21, r27
    2198:	14 f2       	brlt	.-124    	; 0x211e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x10e>
    219a:	08 94       	sec
    219c:	e1 1c       	adc	r14, r1
    219e:	f1 1c       	adc	r15, r1
    21a0:	ba e0       	ldi	r27, 0x0A	; 10
    21a2:	eb 16       	cp	r14, r27
    21a4:	f1 04       	cpc	r15, r1
    21a6:	09 f0       	breq	.+2      	; 0x21aa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x19a>
    21a8:	9b cf       	rjmp	.-202    	; 0x20e0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	2c c0       	rjmp	.+88     	; 0x2208 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f8>
    21b0:	f1 01       	movw	r30, r2
    21b2:	41 91       	ld	r20, Z+
    21b4:	51 91       	ld	r21, Z+
    21b6:	1f 01       	movw	r2, r30
    21b8:	bc 01       	movw	r22, r24
    21ba:	66 0f       	add	r22, r22
    21bc:	77 1f       	adc	r23, r23
    21be:	d6 01       	movw	r26, r12
    21c0:	ed 91       	ld	r30, X+
    21c2:	fc 91       	ld	r31, X
    21c4:	11 97       	sbiw	r26, 0x01	; 1
    21c6:	e6 0f       	add	r30, r22
    21c8:	f7 1f       	adc	r31, r23
    21ca:	20 81       	ld	r18, Z
    21cc:	31 81       	ldd	r19, Z+1	; 0x01
    21ce:	24 17       	cp	r18, r20
    21d0:	35 07       	cpc	r19, r21
    21d2:	10 f4       	brcc	.+4      	; 0x21d8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1c8>
    21d4:	51 83       	std	Z+1, r21	; 0x01
    21d6:	40 83       	st	Z, r20
    21d8:	a3 96       	adiw	r28, 0x23	; 35
    21da:	ee ad       	ldd	r30, Y+62	; 0x3e
    21dc:	ff ad       	ldd	r31, Y+63	; 0x3f
    21de:	a3 97       	sbiw	r28, 0x23	; 35
    21e0:	41 91       	ld	r20, Z+
    21e2:	51 91       	ld	r21, Z+
    21e4:	a3 96       	adiw	r28, 0x23	; 35
    21e6:	ff af       	std	Y+63, r31	; 0x3f
    21e8:	ee af       	std	Y+62, r30	; 0x3e
    21ea:	a3 97       	sbiw	r28, 0x23	; 35
    21ec:	d4 01       	movw	r26, r8
    21ee:	ed 91       	ld	r30, X+
    21f0:	fc 91       	ld	r31, X
    21f2:	11 97       	sbiw	r26, 0x01	; 1
    21f4:	e6 0f       	add	r30, r22
    21f6:	f7 1f       	adc	r31, r23
    21f8:	20 81       	ld	r18, Z
    21fa:	31 81       	ldd	r19, Z+1	; 0x01
    21fc:	42 17       	cp	r20, r18
    21fe:	53 07       	cpc	r21, r19
    2200:	10 f4       	brcc	.+4      	; 0x2206 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f6>
    2202:	51 83       	std	Z+1, r21	; 0x01
    2204:	40 83       	st	Z, r20
    2206:	01 96       	adiw	r24, 0x01	; 1
    2208:	f8 01       	movw	r30, r16
    220a:	20 85       	ldd	r18, Z+8	; 0x08
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	82 17       	cp	r24, r18
    2210:	93 07       	cpc	r25, r19
    2212:	74 f2       	brlt	.-100    	; 0x21b0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1a0>
    2214:	c9 59       	subi	r28, 0x99	; 153
    2216:	df 4f       	sbci	r29, 0xFF	; 255
    2218:	e2 e1       	ldi	r30, 0x12	; 18
    221a:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__epilogue_restores__>

0000221e <_ZN16PololuQTRSensors9calibrateEh>:
    221e:	1f 93       	push	r17
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	ec 01       	movw	r28, r24
    2226:	16 2f       	mov	r17, r22
    2228:	86 2f       	mov	r24, r22
    222a:	81 50       	subi	r24, 0x01	; 1
    222c:	82 30       	cpi	r24, 0x02	; 2
    222e:	58 f4       	brcc	.+22     	; 0x2246 <_ZN16PololuQTRSensors9calibrateEh+0x28>
    2230:	ae 01       	movw	r20, r28
    2232:	4e 5f       	subi	r20, 0xFE	; 254
    2234:	5f 4f       	sbci	r21, 0xFF	; 255
    2236:	ce 01       	movw	r24, r28
    2238:	be 01       	movw	r22, r28
    223a:	21 e0       	ldi	r18, 0x01	; 1
    223c:	0e 94 08 10 	call	0x2010	; 0x2010 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2240:	12 30       	cpi	r17, 0x02	; 2
    2242:	19 f0       	breq	.+6      	; 0x224a <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    2244:	0c c0       	rjmp	.+24     	; 0x225e <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2246:	66 23       	and	r22, r22
    2248:	51 f4       	brne	.+20     	; 0x225e <_ZN16PololuQTRSensors9calibrateEh+0x40>
    224a:	be 01       	movw	r22, r28
    224c:	6c 5f       	subi	r22, 0xFC	; 252
    224e:	7f 4f       	sbci	r23, 0xFF	; 255
    2250:	ae 01       	movw	r20, r28
    2252:	4a 5f       	subi	r20, 0xFA	; 250
    2254:	5f 4f       	sbci	r21, 0xFF	; 255
    2256:	ce 01       	movw	r24, r28
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	0e 94 08 10 	call	0x2010	; 0x2010 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	1f 91       	pop	r17
    2264:	08 95       	ret

00002266 <_ZN16PololuQTRSensorsD1Ev>:
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	ec 01       	movw	r28, r24
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	9b 81       	ldd	r25, Y+3	; 0x03
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	11 f0       	breq	.+4      	; 0x2278 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2274:	0e 94 c5 12 	call	0x258a	; 0x258a <free>
    2278:	8e 81       	ldd	r24, Y+6	; 0x06
    227a:	9f 81       	ldd	r25, Y+7	; 0x07
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	11 f0       	breq	.+4      	; 0x2284 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2280:	0e 94 c5 12 	call	0x258a	; 0x258a <free>
    2284:	88 81       	ld	r24, Y
    2286:	99 81       	ldd	r25, Y+1	; 0x01
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	11 f0       	breq	.+4      	; 0x2290 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    228c:	0e 94 c5 12 	call	0x258a	; 0x258a <free>
    2290:	8c 81       	ldd	r24, Y+4	; 0x04
    2292:	9d 81       	ldd	r25, Y+5	; 0x05
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	11 f0       	breq	.+4      	; 0x229c <_ZN16PololuQTRSensorsD1Ev+0x36>
    2298:	0e 94 c5 12 	call	0x258a	; 0x258a <free>
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	08 95       	ret

000022a2 <__mulsi3>:
    22a2:	db 01       	movw	r26, r22
    22a4:	8f 93       	push	r24
    22a6:	9f 93       	push	r25
    22a8:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__muluhisi3>
    22ac:	bf 91       	pop	r27
    22ae:	af 91       	pop	r26
    22b0:	a2 9f       	mul	r26, r18
    22b2:	80 0d       	add	r24, r0
    22b4:	91 1d       	adc	r25, r1
    22b6:	a3 9f       	mul	r26, r19
    22b8:	90 0d       	add	r25, r0
    22ba:	b2 9f       	mul	r27, r18
    22bc:	90 0d       	add	r25, r0
    22be:	11 24       	eor	r1, r1
    22c0:	08 95       	ret

000022c2 <__udivmodqi4>:
    22c2:	99 1b       	sub	r25, r25
    22c4:	79 e0       	ldi	r23, 0x09	; 9
    22c6:	04 c0       	rjmp	.+8      	; 0x22d0 <__udivmodqi4_ep>

000022c8 <__udivmodqi4_loop>:
    22c8:	99 1f       	adc	r25, r25
    22ca:	96 17       	cp	r25, r22
    22cc:	08 f0       	brcs	.+2      	; 0x22d0 <__udivmodqi4_ep>
    22ce:	96 1b       	sub	r25, r22

000022d0 <__udivmodqi4_ep>:
    22d0:	88 1f       	adc	r24, r24
    22d2:	7a 95       	dec	r23
    22d4:	c9 f7       	brne	.-14     	; 0x22c8 <__udivmodqi4_loop>
    22d6:	80 95       	com	r24
    22d8:	08 95       	ret

000022da <__udivmodhi4>:
    22da:	aa 1b       	sub	r26, r26
    22dc:	bb 1b       	sub	r27, r27
    22de:	51 e1       	ldi	r21, 0x11	; 17
    22e0:	07 c0       	rjmp	.+14     	; 0x22f0 <__udivmodhi4_ep>

000022e2 <__udivmodhi4_loop>:
    22e2:	aa 1f       	adc	r26, r26
    22e4:	bb 1f       	adc	r27, r27
    22e6:	a6 17       	cp	r26, r22
    22e8:	b7 07       	cpc	r27, r23
    22ea:	10 f0       	brcs	.+4      	; 0x22f0 <__udivmodhi4_ep>
    22ec:	a6 1b       	sub	r26, r22
    22ee:	b7 0b       	sbc	r27, r23

000022f0 <__udivmodhi4_ep>:
    22f0:	88 1f       	adc	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	5a 95       	dec	r21
    22f6:	a9 f7       	brne	.-22     	; 0x22e2 <__udivmodhi4_loop>
    22f8:	80 95       	com	r24
    22fa:	90 95       	com	r25
    22fc:	bc 01       	movw	r22, r24
    22fe:	cd 01       	movw	r24, r26
    2300:	08 95       	ret

00002302 <__divmodhi4>:
    2302:	97 fb       	bst	r25, 7
    2304:	07 2e       	mov	r0, r23
    2306:	16 f4       	brtc	.+4      	; 0x230c <__divmodhi4+0xa>
    2308:	00 94       	com	r0
    230a:	07 d0       	rcall	.+14     	; 0x231a <__divmodhi4_neg1>
    230c:	77 fd       	sbrc	r23, 7
    230e:	09 d0       	rcall	.+18     	; 0x2322 <__divmodhi4_neg2>
    2310:	0e 94 6d 11 	call	0x22da	; 0x22da <__udivmodhi4>
    2314:	07 fc       	sbrc	r0, 7
    2316:	05 d0       	rcall	.+10     	; 0x2322 <__divmodhi4_neg2>
    2318:	3e f4       	brtc	.+14     	; 0x2328 <__divmodhi4_exit>

0000231a <__divmodhi4_neg1>:
    231a:	90 95       	com	r25
    231c:	81 95       	neg	r24
    231e:	9f 4f       	sbci	r25, 0xFF	; 255
    2320:	08 95       	ret

00002322 <__divmodhi4_neg2>:
    2322:	70 95       	com	r23
    2324:	61 95       	neg	r22
    2326:	7f 4f       	sbci	r23, 0xFF	; 255

00002328 <__divmodhi4_exit>:
    2328:	08 95       	ret

0000232a <__udivmodsi4>:
    232a:	a1 e2       	ldi	r26, 0x21	; 33
    232c:	1a 2e       	mov	r1, r26
    232e:	aa 1b       	sub	r26, r26
    2330:	bb 1b       	sub	r27, r27
    2332:	fd 01       	movw	r30, r26
    2334:	0d c0       	rjmp	.+26     	; 0x2350 <__udivmodsi4_ep>

00002336 <__udivmodsi4_loop>:
    2336:	aa 1f       	adc	r26, r26
    2338:	bb 1f       	adc	r27, r27
    233a:	ee 1f       	adc	r30, r30
    233c:	ff 1f       	adc	r31, r31
    233e:	a2 17       	cp	r26, r18
    2340:	b3 07       	cpc	r27, r19
    2342:	e4 07       	cpc	r30, r20
    2344:	f5 07       	cpc	r31, r21
    2346:	20 f0       	brcs	.+8      	; 0x2350 <__udivmodsi4_ep>
    2348:	a2 1b       	sub	r26, r18
    234a:	b3 0b       	sbc	r27, r19
    234c:	e4 0b       	sbc	r30, r20
    234e:	f5 0b       	sbc	r31, r21

00002350 <__udivmodsi4_ep>:
    2350:	66 1f       	adc	r22, r22
    2352:	77 1f       	adc	r23, r23
    2354:	88 1f       	adc	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	1a 94       	dec	r1
    235a:	69 f7       	brne	.-38     	; 0x2336 <__udivmodsi4_loop>
    235c:	60 95       	com	r22
    235e:	70 95       	com	r23
    2360:	80 95       	com	r24
    2362:	90 95       	com	r25
    2364:	9b 01       	movw	r18, r22
    2366:	ac 01       	movw	r20, r24
    2368:	bd 01       	movw	r22, r26
    236a:	cf 01       	movw	r24, r30
    236c:	08 95       	ret

0000236e <__divmodsi4>:
    236e:	05 2e       	mov	r0, r21
    2370:	97 fb       	bst	r25, 7
    2372:	1e f4       	brtc	.+6      	; 0x237a <__divmodsi4+0xc>
    2374:	00 94       	com	r0
    2376:	0e 94 ce 11 	call	0x239c	; 0x239c <__negsi2>
    237a:	57 fd       	sbrc	r21, 7
    237c:	07 d0       	rcall	.+14     	; 0x238c <__divmodsi4_neg2>
    237e:	0e 94 95 11 	call	0x232a	; 0x232a <__udivmodsi4>
    2382:	07 fc       	sbrc	r0, 7
    2384:	03 d0       	rcall	.+6      	; 0x238c <__divmodsi4_neg2>
    2386:	4e f4       	brtc	.+18     	; 0x239a <__divmodsi4_exit>
    2388:	0c 94 ce 11 	jmp	0x239c	; 0x239c <__negsi2>

0000238c <__divmodsi4_neg2>:
    238c:	50 95       	com	r21
    238e:	40 95       	com	r20
    2390:	30 95       	com	r19
    2392:	21 95       	neg	r18
    2394:	3f 4f       	sbci	r19, 0xFF	; 255
    2396:	4f 4f       	sbci	r20, 0xFF	; 255
    2398:	5f 4f       	sbci	r21, 0xFF	; 255

0000239a <__divmodsi4_exit>:
    239a:	08 95       	ret

0000239c <__negsi2>:
    239c:	90 95       	com	r25
    239e:	80 95       	com	r24
    23a0:	70 95       	com	r23
    23a2:	61 95       	neg	r22
    23a4:	7f 4f       	sbci	r23, 0xFF	; 255
    23a6:	8f 4f       	sbci	r24, 0xFF	; 255
    23a8:	9f 4f       	sbci	r25, 0xFF	; 255
    23aa:	08 95       	ret

000023ac <__muluhisi3>:
    23ac:	0e 94 1e 12 	call	0x243c	; 0x243c <__umulhisi3>
    23b0:	a5 9f       	mul	r26, r21
    23b2:	90 0d       	add	r25, r0
    23b4:	b4 9f       	mul	r27, r20
    23b6:	90 0d       	add	r25, r0
    23b8:	a4 9f       	mul	r26, r20
    23ba:	80 0d       	add	r24, r0
    23bc:	91 1d       	adc	r25, r1
    23be:	11 24       	eor	r1, r1
    23c0:	08 95       	ret

000023c2 <__prologue_saves__>:
    23c2:	2f 92       	push	r2
    23c4:	3f 92       	push	r3
    23c6:	4f 92       	push	r4
    23c8:	5f 92       	push	r5
    23ca:	6f 92       	push	r6
    23cc:	7f 92       	push	r7
    23ce:	8f 92       	push	r8
    23d0:	9f 92       	push	r9
    23d2:	af 92       	push	r10
    23d4:	bf 92       	push	r11
    23d6:	cf 92       	push	r12
    23d8:	df 92       	push	r13
    23da:	ef 92       	push	r14
    23dc:	ff 92       	push	r15
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	ca 1b       	sub	r28, r26
    23ec:	db 0b       	sbc	r29, r27
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	09 94       	ijmp

000023fa <__epilogue_restores__>:
    23fa:	2a 88       	ldd	r2, Y+18	; 0x12
    23fc:	39 88       	ldd	r3, Y+17	; 0x11
    23fe:	48 88       	ldd	r4, Y+16	; 0x10
    2400:	5f 84       	ldd	r5, Y+15	; 0x0f
    2402:	6e 84       	ldd	r6, Y+14	; 0x0e
    2404:	7d 84       	ldd	r7, Y+13	; 0x0d
    2406:	8c 84       	ldd	r8, Y+12	; 0x0c
    2408:	9b 84       	ldd	r9, Y+11	; 0x0b
    240a:	aa 84       	ldd	r10, Y+10	; 0x0a
    240c:	b9 84       	ldd	r11, Y+9	; 0x09
    240e:	c8 84       	ldd	r12, Y+8	; 0x08
    2410:	df 80       	ldd	r13, Y+7	; 0x07
    2412:	ee 80       	ldd	r14, Y+6	; 0x06
    2414:	fd 80       	ldd	r15, Y+5	; 0x05
    2416:	0c 81       	ldd	r16, Y+4	; 0x04
    2418:	1b 81       	ldd	r17, Y+3	; 0x03
    241a:	aa 81       	ldd	r26, Y+2	; 0x02
    241c:	b9 81       	ldd	r27, Y+1	; 0x01
    241e:	ce 0f       	add	r28, r30
    2420:	d1 1d       	adc	r29, r1
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	ed 01       	movw	r28, r26
    242e:	08 95       	ret

00002430 <__tablejump2__>:
    2430:	ee 0f       	add	r30, r30
    2432:	ff 1f       	adc	r31, r31

00002434 <__tablejump__>:
    2434:	05 90       	lpm	r0, Z+
    2436:	f4 91       	lpm	r31, Z
    2438:	e0 2d       	mov	r30, r0
    243a:	09 94       	ijmp

0000243c <__umulhisi3>:
    243c:	a2 9f       	mul	r26, r18
    243e:	b0 01       	movw	r22, r0
    2440:	b3 9f       	mul	r27, r19
    2442:	c0 01       	movw	r24, r0
    2444:	a3 9f       	mul	r26, r19
    2446:	70 0d       	add	r23, r0
    2448:	81 1d       	adc	r24, r1
    244a:	11 24       	eor	r1, r1
    244c:	91 1d       	adc	r25, r1
    244e:	b2 9f       	mul	r27, r18
    2450:	70 0d       	add	r23, r0
    2452:	81 1d       	adc	r24, r1
    2454:	11 24       	eor	r1, r1
    2456:	91 1d       	adc	r25, r1
    2458:	08 95       	ret

0000245a <malloc>:
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	82 30       	cpi	r24, 0x02	; 2
    2460:	91 05       	cpc	r25, r1
    2462:	10 f4       	brcc	.+4      	; 0x2468 <malloc+0xe>
    2464:	82 e0       	ldi	r24, 0x02	; 2
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	e0 91 32 02 	lds	r30, 0x0232
    246c:	f0 91 33 02 	lds	r31, 0x0233
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	a0 e0       	ldi	r26, 0x00	; 0
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	30 97       	sbiw	r30, 0x00	; 0
    247a:	39 f1       	breq	.+78     	; 0x24ca <malloc+0x70>
    247c:	40 81       	ld	r20, Z
    247e:	51 81       	ldd	r21, Z+1	; 0x01
    2480:	48 17       	cp	r20, r24
    2482:	59 07       	cpc	r21, r25
    2484:	b8 f0       	brcs	.+46     	; 0x24b4 <malloc+0x5a>
    2486:	48 17       	cp	r20, r24
    2488:	59 07       	cpc	r21, r25
    248a:	71 f4       	brne	.+28     	; 0x24a8 <malloc+0x4e>
    248c:	82 81       	ldd	r24, Z+2	; 0x02
    248e:	93 81       	ldd	r25, Z+3	; 0x03
    2490:	10 97       	sbiw	r26, 0x00	; 0
    2492:	29 f0       	breq	.+10     	; 0x249e <malloc+0x44>
    2494:	13 96       	adiw	r26, 0x03	; 3
    2496:	9c 93       	st	X, r25
    2498:	8e 93       	st	-X, r24
    249a:	12 97       	sbiw	r26, 0x02	; 2
    249c:	2c c0       	rjmp	.+88     	; 0x24f6 <malloc+0x9c>
    249e:	90 93 33 02 	sts	0x0233, r25
    24a2:	80 93 32 02 	sts	0x0232, r24
    24a6:	27 c0       	rjmp	.+78     	; 0x24f6 <malloc+0x9c>
    24a8:	21 15       	cp	r18, r1
    24aa:	31 05       	cpc	r19, r1
    24ac:	31 f0       	breq	.+12     	; 0x24ba <malloc+0x60>
    24ae:	42 17       	cp	r20, r18
    24b0:	53 07       	cpc	r21, r19
    24b2:	18 f0       	brcs	.+6      	; 0x24ba <malloc+0x60>
    24b4:	a9 01       	movw	r20, r18
    24b6:	db 01       	movw	r26, r22
    24b8:	01 c0       	rjmp	.+2      	; 0x24bc <malloc+0x62>
    24ba:	ef 01       	movw	r28, r30
    24bc:	9a 01       	movw	r18, r20
    24be:	bd 01       	movw	r22, r26
    24c0:	df 01       	movw	r26, r30
    24c2:	02 80       	ldd	r0, Z+2	; 0x02
    24c4:	f3 81       	ldd	r31, Z+3	; 0x03
    24c6:	e0 2d       	mov	r30, r0
    24c8:	d7 cf       	rjmp	.-82     	; 0x2478 <malloc+0x1e>
    24ca:	21 15       	cp	r18, r1
    24cc:	31 05       	cpc	r19, r1
    24ce:	f9 f0       	breq	.+62     	; 0x250e <malloc+0xb4>
    24d0:	28 1b       	sub	r18, r24
    24d2:	39 0b       	sbc	r19, r25
    24d4:	24 30       	cpi	r18, 0x04	; 4
    24d6:	31 05       	cpc	r19, r1
    24d8:	80 f4       	brcc	.+32     	; 0x24fa <malloc+0xa0>
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	9b 81       	ldd	r25, Y+3	; 0x03
    24de:	61 15       	cp	r22, r1
    24e0:	71 05       	cpc	r23, r1
    24e2:	21 f0       	breq	.+8      	; 0x24ec <malloc+0x92>
    24e4:	fb 01       	movw	r30, r22
    24e6:	93 83       	std	Z+3, r25	; 0x03
    24e8:	82 83       	std	Z+2, r24	; 0x02
    24ea:	04 c0       	rjmp	.+8      	; 0x24f4 <malloc+0x9a>
    24ec:	90 93 33 02 	sts	0x0233, r25
    24f0:	80 93 32 02 	sts	0x0232, r24
    24f4:	fe 01       	movw	r30, r28
    24f6:	32 96       	adiw	r30, 0x02	; 2
    24f8:	44 c0       	rjmp	.+136    	; 0x2582 <malloc+0x128>
    24fa:	fe 01       	movw	r30, r28
    24fc:	e2 0f       	add	r30, r18
    24fe:	f3 1f       	adc	r31, r19
    2500:	81 93       	st	Z+, r24
    2502:	91 93       	st	Z+, r25
    2504:	22 50       	subi	r18, 0x02	; 2
    2506:	31 09       	sbc	r19, r1
    2508:	39 83       	std	Y+1, r19	; 0x01
    250a:	28 83       	st	Y, r18
    250c:	3a c0       	rjmp	.+116    	; 0x2582 <malloc+0x128>
    250e:	20 91 30 02 	lds	r18, 0x0230
    2512:	30 91 31 02 	lds	r19, 0x0231
    2516:	23 2b       	or	r18, r19
    2518:	41 f4       	brne	.+16     	; 0x252a <malloc+0xd0>
    251a:	20 91 2d 01 	lds	r18, 0x012D
    251e:	30 91 2e 01 	lds	r19, 0x012E
    2522:	30 93 31 02 	sts	0x0231, r19
    2526:	20 93 30 02 	sts	0x0230, r18
    252a:	20 91 2b 01 	lds	r18, 0x012B
    252e:	30 91 2c 01 	lds	r19, 0x012C
    2532:	21 15       	cp	r18, r1
    2534:	31 05       	cpc	r19, r1
    2536:	41 f4       	brne	.+16     	; 0x2548 <malloc+0xee>
    2538:	2d b7       	in	r18, 0x3d	; 61
    253a:	3e b7       	in	r19, 0x3e	; 62
    253c:	40 91 2f 01 	lds	r20, 0x012F
    2540:	50 91 30 01 	lds	r21, 0x0130
    2544:	24 1b       	sub	r18, r20
    2546:	35 0b       	sbc	r19, r21
    2548:	e0 91 30 02 	lds	r30, 0x0230
    254c:	f0 91 31 02 	lds	r31, 0x0231
    2550:	e2 17       	cp	r30, r18
    2552:	f3 07       	cpc	r31, r19
    2554:	a0 f4       	brcc	.+40     	; 0x257e <malloc+0x124>
    2556:	2e 1b       	sub	r18, r30
    2558:	3f 0b       	sbc	r19, r31
    255a:	28 17       	cp	r18, r24
    255c:	39 07       	cpc	r19, r25
    255e:	78 f0       	brcs	.+30     	; 0x257e <malloc+0x124>
    2560:	ac 01       	movw	r20, r24
    2562:	4e 5f       	subi	r20, 0xFE	; 254
    2564:	5f 4f       	sbci	r21, 0xFF	; 255
    2566:	24 17       	cp	r18, r20
    2568:	35 07       	cpc	r19, r21
    256a:	48 f0       	brcs	.+18     	; 0x257e <malloc+0x124>
    256c:	4e 0f       	add	r20, r30
    256e:	5f 1f       	adc	r21, r31
    2570:	50 93 31 02 	sts	0x0231, r21
    2574:	40 93 30 02 	sts	0x0230, r20
    2578:	81 93       	st	Z+, r24
    257a:	91 93       	st	Z+, r25
    257c:	02 c0       	rjmp	.+4      	; 0x2582 <malloc+0x128>
    257e:	e0 e0       	ldi	r30, 0x00	; 0
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	cf 01       	movw	r24, r30
    2584:	df 91       	pop	r29
    2586:	cf 91       	pop	r28
    2588:	08 95       	ret

0000258a <free>:
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	09 f4       	brne	.+2      	; 0x2594 <free+0xa>
    2592:	87 c0       	rjmp	.+270    	; 0x26a2 <free+0x118>
    2594:	fc 01       	movw	r30, r24
    2596:	32 97       	sbiw	r30, 0x02	; 2
    2598:	13 82       	std	Z+3, r1	; 0x03
    259a:	12 82       	std	Z+2, r1	; 0x02
    259c:	c0 91 32 02 	lds	r28, 0x0232
    25a0:	d0 91 33 02 	lds	r29, 0x0233
    25a4:	20 97       	sbiw	r28, 0x00	; 0
    25a6:	81 f4       	brne	.+32     	; 0x25c8 <free+0x3e>
    25a8:	20 81       	ld	r18, Z
    25aa:	31 81       	ldd	r19, Z+1	; 0x01
    25ac:	28 0f       	add	r18, r24
    25ae:	39 1f       	adc	r19, r25
    25b0:	80 91 30 02 	lds	r24, 0x0230
    25b4:	90 91 31 02 	lds	r25, 0x0231
    25b8:	82 17       	cp	r24, r18
    25ba:	93 07       	cpc	r25, r19
    25bc:	79 f5       	brne	.+94     	; 0x261c <free+0x92>
    25be:	f0 93 31 02 	sts	0x0231, r31
    25c2:	e0 93 30 02 	sts	0x0230, r30
    25c6:	6d c0       	rjmp	.+218    	; 0x26a2 <free+0x118>
    25c8:	de 01       	movw	r26, r28
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	ae 17       	cp	r26, r30
    25d0:	bf 07       	cpc	r27, r31
    25d2:	50 f4       	brcc	.+20     	; 0x25e8 <free+0x5e>
    25d4:	12 96       	adiw	r26, 0x02	; 2
    25d6:	4d 91       	ld	r20, X+
    25d8:	5c 91       	ld	r21, X
    25da:	13 97       	sbiw	r26, 0x03	; 3
    25dc:	9d 01       	movw	r18, r26
    25de:	41 15       	cp	r20, r1
    25e0:	51 05       	cpc	r21, r1
    25e2:	09 f1       	breq	.+66     	; 0x2626 <free+0x9c>
    25e4:	da 01       	movw	r26, r20
    25e6:	f3 cf       	rjmp	.-26     	; 0x25ce <free+0x44>
    25e8:	b3 83       	std	Z+3, r27	; 0x03
    25ea:	a2 83       	std	Z+2, r26	; 0x02
    25ec:	40 81       	ld	r20, Z
    25ee:	51 81       	ldd	r21, Z+1	; 0x01
    25f0:	84 0f       	add	r24, r20
    25f2:	95 1f       	adc	r25, r21
    25f4:	8a 17       	cp	r24, r26
    25f6:	9b 07       	cpc	r25, r27
    25f8:	71 f4       	brne	.+28     	; 0x2616 <free+0x8c>
    25fa:	8d 91       	ld	r24, X+
    25fc:	9c 91       	ld	r25, X
    25fe:	11 97       	sbiw	r26, 0x01	; 1
    2600:	84 0f       	add	r24, r20
    2602:	95 1f       	adc	r25, r21
    2604:	02 96       	adiw	r24, 0x02	; 2
    2606:	91 83       	std	Z+1, r25	; 0x01
    2608:	80 83       	st	Z, r24
    260a:	12 96       	adiw	r26, 0x02	; 2
    260c:	8d 91       	ld	r24, X+
    260e:	9c 91       	ld	r25, X
    2610:	13 97       	sbiw	r26, 0x03	; 3
    2612:	93 83       	std	Z+3, r25	; 0x03
    2614:	82 83       	std	Z+2, r24	; 0x02
    2616:	21 15       	cp	r18, r1
    2618:	31 05       	cpc	r19, r1
    261a:	29 f4       	brne	.+10     	; 0x2626 <free+0x9c>
    261c:	f0 93 33 02 	sts	0x0233, r31
    2620:	e0 93 32 02 	sts	0x0232, r30
    2624:	3e c0       	rjmp	.+124    	; 0x26a2 <free+0x118>
    2626:	d9 01       	movw	r26, r18
    2628:	13 96       	adiw	r26, 0x03	; 3
    262a:	fc 93       	st	X, r31
    262c:	ee 93       	st	-X, r30
    262e:	12 97       	sbiw	r26, 0x02	; 2
    2630:	4d 91       	ld	r20, X+
    2632:	5d 91       	ld	r21, X+
    2634:	a4 0f       	add	r26, r20
    2636:	b5 1f       	adc	r27, r21
    2638:	ea 17       	cp	r30, r26
    263a:	fb 07       	cpc	r31, r27
    263c:	79 f4       	brne	.+30     	; 0x265c <free+0xd2>
    263e:	80 81       	ld	r24, Z
    2640:	91 81       	ldd	r25, Z+1	; 0x01
    2642:	84 0f       	add	r24, r20
    2644:	95 1f       	adc	r25, r21
    2646:	02 96       	adiw	r24, 0x02	; 2
    2648:	d9 01       	movw	r26, r18
    264a:	11 96       	adiw	r26, 0x01	; 1
    264c:	9c 93       	st	X, r25
    264e:	8e 93       	st	-X, r24
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	93 81       	ldd	r25, Z+3	; 0x03
    2654:	13 96       	adiw	r26, 0x03	; 3
    2656:	9c 93       	st	X, r25
    2658:	8e 93       	st	-X, r24
    265a:	12 97       	sbiw	r26, 0x02	; 2
    265c:	e0 e0       	ldi	r30, 0x00	; 0
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	9b 81       	ldd	r25, Y+3	; 0x03
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	19 f0       	breq	.+6      	; 0x266e <free+0xe4>
    2668:	fe 01       	movw	r30, r28
    266a:	ec 01       	movw	r28, r24
    266c:	f9 cf       	rjmp	.-14     	; 0x2660 <free+0xd6>
    266e:	ce 01       	movw	r24, r28
    2670:	02 96       	adiw	r24, 0x02	; 2
    2672:	28 81       	ld	r18, Y
    2674:	39 81       	ldd	r19, Y+1	; 0x01
    2676:	82 0f       	add	r24, r18
    2678:	93 1f       	adc	r25, r19
    267a:	20 91 30 02 	lds	r18, 0x0230
    267e:	30 91 31 02 	lds	r19, 0x0231
    2682:	28 17       	cp	r18, r24
    2684:	39 07       	cpc	r19, r25
    2686:	69 f4       	brne	.+26     	; 0x26a2 <free+0x118>
    2688:	30 97       	sbiw	r30, 0x00	; 0
    268a:	29 f4       	brne	.+10     	; 0x2696 <free+0x10c>
    268c:	10 92 33 02 	sts	0x0233, r1
    2690:	10 92 32 02 	sts	0x0232, r1
    2694:	02 c0       	rjmp	.+4      	; 0x269a <free+0x110>
    2696:	13 82       	std	Z+3, r1	; 0x03
    2698:	12 82       	std	Z+2, r1	; 0x02
    269a:	d0 93 31 02 	sts	0x0231, r29
    269e:	c0 93 30 02 	sts	0x0230, r28
    26a2:	df 91       	pop	r29
    26a4:	cf 91       	pop	r28
    26a6:	08 95       	ret

000026a8 <__do_global_dtors>:
    26a8:	10 e0       	ldi	r17, 0x00	; 0
    26aa:	cc ea       	ldi	r28, 0xAC	; 172
    26ac:	d0 e0       	ldi	r29, 0x00	; 0
    26ae:	04 c0       	rjmp	.+8      	; 0x26b8 <__do_global_dtors+0x10>
    26b0:	fe 01       	movw	r30, r28
    26b2:	0e 94 1a 12 	call	0x2434	; 0x2434 <__tablejump__>
    26b6:	22 96       	adiw	r28, 0x02	; 2
    26b8:	ce 3a       	cpi	r28, 0xAE	; 174
    26ba:	d1 07       	cpc	r29, r17
    26bc:	c9 f7       	brne	.-14     	; 0x26b0 <__do_global_dtors+0x8>
    26be:	f8 94       	cli

000026c0 <__stop_program>:
    26c0:	ff cf       	rjmp	.-2      	; 0x26c0 <__stop_program>
