
3pi-mazesolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00002b4c  00002be0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026d  0080014a  0080014a  00002c2a  2**0
                  ALLOC
  3 .stab         00006624  00000000  00000000  00002c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008bbc  00000000  00000000  00009250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00011e0c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  00011e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000018a8  00000000  00000000  00011f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007a9  00000000  00000000  000137f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001100  00000000  00000000  00013f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000284  00000000  00000000  000150a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000524  00000000  00000000  00015324  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c87  00000000  00000000  00015848  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f0  00000000  00000000  000164cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__dtors_end>
       4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      24:	0c 94 90 0d 	jmp	0x1b20	; 0x1b20 <__vector_9>
      28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      34:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__vector_13>
      38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      60:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <go>:
      76:	4c 31 36 20 63 64 65 67 72 65 67 34 00              L16 cdegreg4.

00000083 <welcome>:
      83:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000008d <demo_name_line2>:
      8d:	20 53 4f 4c 56 45 52 00                              SOLVER.

00000095 <demo_name_line1>:
      95:	20 20 4d 41 5a 45 00                                  MAZE.

0000009c <welcome_line2>:
      9c:	20 50 41 4e 54 48 4f 00                              PANTHO.

000000a4 <welcome_line1>:
      a4:	55 49 55 20 54 45 41 4d 00 00                       UIU TEAM..

000000ae <__ctors_start>:
      ae:	59 0e       	add	r5, r25

000000b0 <__ctors_end>:
      b0:	5a 0e       	add	r5, r26

000000b2 <__dtors_end>:
      b2:	11 24       	eor	r1, r1
      b4:	1f be       	out	0x3f, r1	; 63
      b6:	cf ef       	ldi	r28, 0xFF	; 255
      b8:	d8 e0       	ldi	r29, 0x08	; 8
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
      be:	11 e0       	ldi	r17, 0x01	; 1
      c0:	a0 e0       	ldi	r26, 0x00	; 0
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	ec e4       	ldi	r30, 0x4C	; 76
      c6:	fb e2       	ldi	r31, 0x2B	; 43
      c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x10>
      ca:	05 90       	lpm	r0, Z+
      cc:	0d 92       	st	X+, r0
      ce:	aa 34       	cpi	r26, 0x4A	; 74
      d0:	b1 07       	cpc	r27, r17
      d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0xc>

000000d4 <__do_clear_bss>:
      d4:	23 e0       	ldi	r18, 0x03	; 3
      d6:	aa e4       	ldi	r26, 0x4A	; 74
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
      dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
      de:	a7 3b       	cpi	r26, 0xB7	; 183
      e0:	b2 07       	cpc	r27, r18
      e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>

000000e4 <__do_global_ctors>:
      e4:	10 e0       	ldi	r17, 0x00	; 0
      e6:	c0 eb       	ldi	r28, 0xB0	; 176
      e8:	d0 e0       	ldi	r29, 0x00	; 0
      ea:	04 c0       	rjmp	.+8      	; 0xf4 <__do_global_ctors+0x10>
      ec:	22 97       	sbiw	r28, 0x02	; 2
      ee:	fe 01       	movw	r30, r28
      f0:	0e 94 4f 14 	call	0x289e	; 0x289e <__tablejump__>
      f4:	ce 3a       	cpi	r28, 0xAE	; 174
      f6:	d1 07       	cpc	r29, r17
      f8:	c9 f7       	brne	.-14     	; 0xec <__do_global_ctors+0x8>
      fa:	0e 94 46 02 	call	0x48c	; 0x48c <main>
      fe:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__do_global_dtors>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <load_custom_characters>:

// This function loads custom characters into the LCD.  Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
     106:	60 e0       	ldi	r22, 0x00	; 0
     108:	88 e6       	ldi	r24, 0x68	; 104
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 10 0b 	call	0x1620	; 0x1620 <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
     110:	61 e0       	ldi	r22, 0x01	; 1
     112:	89 e6       	ldi	r24, 0x69	; 105
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	0e 94 10 0b 	call	0x1620	; 0x1620 <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
     11a:	62 e0       	ldi	r22, 0x02	; 2
     11c:	8a e6       	ldi	r24, 0x6A	; 106
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	0e 94 10 0b 	call	0x1620	; 0x1620 <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     124:	63 e0       	ldi	r22, 0x03	; 3
     126:	8b e6       	ldi	r24, 0x6B	; 107
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 10 0b 	call	0x1620	; 0x1620 <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     12e:	64 e0       	ldi	r22, 0x04	; 4
     130:	8c e6       	ldi	r24, 0x6C	; 108
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 10 0b 	call	0x1620	; 0x1620 <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     138:	65 e0       	ldi	r22, 0x05	; 5
     13a:	8d e6       	ldi	r24, 0x6D	; 109
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 10 0b 	call	0x1620	; 0x1620 <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     142:	66 e0       	ldi	r22, 0x06	; 6
     144:	8e e6       	ldi	r24, 0x6E	; 110
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	0e 94 10 0b 	call	0x1620	; 0x1620 <lcd_load_custom_character>
	clear(); // the LCD must be cleared for the characters to take effect
     14c:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <clear>

00000150 <display_readings>:
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
     150:	cf 92       	push	r12
     152:	df 92       	push	r13
     154:	ef 92       	push	r14
     156:	ff 92       	push	r15
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
     164:	2a 97       	sbiw	r28, 0x0a	; 10
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	f8 94       	cli
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	0f be       	out	0x3f, r0	; 63
     16e:	cd bf       	out	0x3d, r28	; 61
     170:	8c 01       	movw	r16, r24
	unsigned char i;

	for(i=0;i<5;i++) {
     172:	d1 2c       	mov	r13, r1
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     174:	8a e0       	ldi	r24, 0x0A	; 10
     176:	c8 2e       	mov	r12, r24

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     178:	95 e6       	ldi	r25, 0x65	; 101
     17a:	e9 2e       	mov	r14, r25
     17c:	f1 2c       	mov	r15, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     17e:	e1 e3       	ldi	r30, 0x31	; 49
     180:	f1 e0       	ldi	r31, 0x01	; 1
     182:	de 01       	movw	r26, r28
     184:	11 96       	adiw	r26, 0x01	; 1
     186:	8c 2d       	mov	r24, r12
     188:	01 90       	ld	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	8a 95       	dec	r24
     18e:	e1 f7       	brne	.-8      	; 0x188 <display_readings+0x38>

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     190:	f8 01       	movw	r30, r16
     192:	81 91       	ld	r24, Z+
     194:	91 91       	ld	r25, Z+
     196:	8f 01       	movw	r16, r30
     198:	b7 01       	movw	r22, r14
     19a:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodhi4>
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	8c 0f       	add	r24, r28
     1a4:	9d 1f       	adc	r25, r29
     1a6:	68 0f       	add	r22, r24
     1a8:	79 1f       	adc	r23, r25

		// Display the bar graph character.
		print_character(c);
     1aa:	fb 01       	movw	r30, r22
     1ac:	80 81       	ld	r24, Z
     1ae:	0e 94 13 0b 	call	0x1626	; 0x1626 <print_character>
// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     1b2:	d3 94       	inc	r13
     1b4:	f5 e0       	ldi	r31, 0x05	; 5
     1b6:	df 12       	cpse	r13, r31
     1b8:	e2 cf       	rjmp	.-60     	; 0x17e <display_readings+0x2e>
		char c = display_characters[calibrated_values[i]/101];

		// Display the bar graph character.
		print_character(c);
	}
}
     1ba:	2a 96       	adiw	r28, 0x0a	; 10
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	f8 94       	cli
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	cd bf       	out	0x3d, r28	; 61
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	df 90       	pop	r13
     1d4:	cf 90       	pop	r12
     1d6:	08 95       	ret

000001d8 <follow_segment>:
#include <pololu/3pi.h>

void follow_segment(int max)
{
     1d8:	2f 92       	push	r2
     1da:	3f 92       	push	r3
     1dc:	4f 92       	push	r4
     1de:	5f 92       	push	r5
     1e0:	6f 92       	push	r6
     1e2:	7f 92       	push	r7
     1e4:	8f 92       	push	r8
     1e6:	9f 92       	push	r9
     1e8:	af 92       	push	r10
     1ea:	bf 92       	push	r11
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	2a 97       	sbiw	r28, 0x0a	; 10
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	8c 01       	movw	r16, r24
	int last_proportional = 0;
	long integral=0;
     20e:	c1 2c       	mov	r12, r1
     210:	d1 2c       	mov	r13, r1
     212:	76 01       	movw	r14, r12
#include <pololu/3pi.h>

void follow_segment(int max)
{
	int last_proportional = 0;
     214:	21 2c       	mov	r2, r1
     216:	31 2c       	mov	r3, r1
		int derivative = proportional - last_proportional;
		integral += proportional;

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     218:	50 e1       	ldi	r21, 0x10	; 16
     21a:	45 2e       	mov	r4, r21
     21c:	57 e2       	ldi	r21, 0x27	; 39
     21e:	55 2e       	mov	r5, r21
     220:	61 2c       	mov	r6, r1
     222:	71 2c       	mov	r7, r1

		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
     224:	88 24       	eor	r8, r8
     226:	99 24       	eor	r9, r9
     228:	88 1a       	sub	r8, r24
     22a:	99 0a       	sbc	r9, r25
	long integral=0;

	while(1)
	{
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	ce 01       	movw	r24, r28
     230:	01 96       	adiw	r24, 0x01	; 1
     232:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <read_line>

		int proportional = ((int)position) - 2000;
     236:	80 5d       	subi	r24, 0xD0	; 208
     238:	97 40       	sbci	r25, 0x07	; 7
     23a:	5c 01       	movw	r10, r24

		int derivative = proportional - last_proportional;
		integral += proportional;
     23c:	aa 27       	eor	r26, r26
     23e:	97 fd       	sbrc	r25, 7
     240:	a0 95       	com	r26
     242:	ba 2f       	mov	r27, r26
     244:	c8 0e       	add	r12, r24
     246:	d9 1e       	adc	r13, r25
     248:	ea 1e       	adc	r14, r26
     24a:	fb 1e       	adc	r15, r27

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     24c:	c7 01       	movw	r24, r14
     24e:	b6 01       	movw	r22, r12
     250:	a3 01       	movw	r20, r6
     252:	92 01       	movw	r18, r4
     254:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__divmodsi4>
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);

		int proportional = ((int)position) - 2000;

		int derivative = proportional - last_proportional;
     258:	b5 01       	movw	r22, r10
     25a:	62 19       	sub	r22, r2
     25c:	73 09       	sbc	r23, r3
		integral += proportional;

		last_proportional = proportional;
		
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     25e:	cb 01       	movw	r24, r22
     260:	88 0f       	add	r24, r24
     262:	99 1f       	adc	r25, r25
     264:	86 0f       	add	r24, r22
     266:	97 1f       	adc	r25, r23
     268:	97 fd       	sbrc	r25, 7
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	fc 01       	movw	r30, r24
     26e:	f5 95       	asr	r31
     270:	e7 95       	ror	r30
     272:	e2 0f       	add	r30, r18
     274:	f3 1f       	adc	r31, r19
     276:	c5 01       	movw	r24, r10
     278:	64 e1       	ldi	r22, 0x14	; 20
     27a:	70 e0       	ldi	r23, 0x00	; 0
     27c:	0e 94 b6 13 	call	0x276c	; 0x276c <__divmodhi4>
     280:	e6 0f       	add	r30, r22
     282:	f7 1f       	adc	r31, r23
     284:	0e 17       	cp	r16, r30
     286:	1f 07       	cpc	r17, r31
     288:	0c f4       	brge	.+2      	; 0x28c <follow_segment+0xb4>
     28a:	f8 01       	movw	r30, r16
     28c:	cf 01       	movw	r24, r30
     28e:	e8 15       	cp	r30, r8
     290:	f9 05       	cpc	r31, r9
     292:	0c f4       	brge	.+2      	; 0x296 <follow_segment+0xbe>
     294:	c4 01       	movw	r24, r8
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
     296:	b8 01       	movw	r22, r16
		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
		
		if(power_difference < 0)
     298:	97 ff       	sbrs	r25, 7
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <follow_segment+0xca>
			set_motors(max+power_difference,max);
     29c:	80 0f       	add	r24, r16
     29e:	91 1f       	adc	r25, r17
     2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <follow_segment+0xd0>
		else
			set_motors(max,max-power_difference);
     2a2:	68 1b       	sub	r22, r24
     2a4:	79 0b       	sbc	r23, r25
     2a6:	c8 01       	movw	r24, r16
     2a8:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>

		if(sensors[1] < 100 && sensors[2] < 100 && sensors[3] < 100)
     2ac:	8b 81       	ldd	r24, Y+3	; 0x03
     2ae:	9c 81       	ldd	r25, Y+4	; 0x04
     2b0:	84 36       	cpi	r24, 0x64	; 100
     2b2:	91 05       	cpc	r25, r1
     2b4:	50 f4       	brcc	.+20     	; 0x2ca <follow_segment+0xf2>
     2b6:	8d 81       	ldd	r24, Y+5	; 0x05
     2b8:	9e 81       	ldd	r25, Y+6	; 0x06
     2ba:	84 36       	cpi	r24, 0x64	; 100
     2bc:	91 05       	cpc	r25, r1
     2be:	28 f4       	brcc	.+10     	; 0x2ca <follow_segment+0xf2>
     2c0:	8f 81       	ldd	r24, Y+7	; 0x07
     2c2:	98 85       	ldd	r25, Y+8	; 0x08
     2c4:	84 36       	cpi	r24, 0x64	; 100
     2c6:	91 05       	cpc	r25, r1
     2c8:	60 f0       	brcs	.+24     	; 0x2e2 <follow_segment+0x10a>
		{
			return;
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
     2ca:	89 81       	ldd	r24, Y+1	; 0x01
     2cc:	9a 81       	ldd	r25, Y+2	; 0x02
     2ce:	89 3c       	cpi	r24, 0xC9	; 201
     2d0:	91 05       	cpc	r25, r1
     2d2:	38 f4       	brcc	.+14     	; 0x2e2 <follow_segment+0x10a>
     2d4:	89 85       	ldd	r24, Y+9	; 0x09
     2d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     2d8:	89 3c       	cpi	r24, 0xC9	; 201
     2da:	91 05       	cpc	r25, r1
     2dc:	10 f4       	brcc	.+4      	; 0x2e2 <follow_segment+0x10a>
		int proportional = ((int)position) - 2000;

		int derivative = proportional - last_proportional;
		integral += proportional;

		last_proportional = proportional;
     2de:	15 01       	movw	r2, r10
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
		{
			return;
		}
	}
     2e0:	a5 cf       	rjmp	.-182    	; 0x22c <follow_segment+0x54>
     2e2:	2a 96       	adiw	r28, 0x0a	; 10
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	ff 90       	pop	r15
     2f8:	ef 90       	pop	r14
     2fa:	df 90       	pop	r13
     2fc:	cf 90       	pop	r12
     2fe:	bf 90       	pop	r11
     300:	af 90       	pop	r10
     302:	9f 90       	pop	r9
     304:	8f 90       	pop	r8
     306:	7f 90       	pop	r7
     308:	6f 90       	pop	r6
     30a:	5f 90       	pop	r5
     30c:	4f 90       	pop	r4
     30e:	3f 90       	pop	r3
     310:	2f 90       	pop	r2
     312:	08 95       	ret

00000314 <initialize>:

const char welcome[] PROGMEM = ">g32>>c32";
const char go[] PROGMEM = "L16 cdegreg4";

void initialize()
{
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	2a 97       	sbiw	r28, 0x0a	; 10
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	f8 94       	cli
     326:	de bf       	out	0x3e, r29	; 62
     328:	0f be       	out	0x3f, r0	; 63
     32a:	cd bf       	out	0x3d, r28	; 61
	unsigned int counter; 
	unsigned int sensors[5]; 
	
	pololu_3pi_init(2000);
     32c:	80 ed       	ldi	r24, 0xD0	; 208
     32e:	97 e0       	ldi	r25, 0x07	; 7
     330:	0e 94 55 0e 	call	0x1caa	; 0x1caa <pololu_3pi_init>
	load_custom_characters();
     334:	0e 94 83 00 	call	0x106	; 0x106 <load_custom_characters>
	
	print_from_program_space(welcome_line1);
     338:	84 ea       	ldi	r24, 0xA4	; 164
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <print_from_program_space>
	lcd_goto_xy(0,1);
     340:	61 e0       	ldi	r22, 0x01	; 1
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 38 0c 	call	0x1870	; 0x1870 <lcd_goto_xy>
	print_from_program_space(welcome_line2);
     348:	8c e9       	ldi	r24, 0x9C	; 156
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <print_from_program_space>
	play_from_program_space(welcome);
     350:	83 e8       	ldi	r24, 0x83	; 131
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 4d 0a 	call	0x149a	; 0x149a <play_from_program_space>
	delay_ms(1000);
     358:	88 ee       	ldi	r24, 0xE8	; 232
     35a:	93 e0       	ldi	r25, 0x03	; 3
     35c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>

	clear();
     360:	0e 94 90 0b 	call	0x1720	; 0x1720 <clear>
	print_from_program_space(demo_name_line1);
     364:	85 e9       	ldi	r24, 0x95	; 149
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 b8 0b 	call	0x1770	; 0x1770 <print_from_program_space>
	lcd_goto_xy(0,1);
     36c:	61 e0       	ldi	r22, 0x01	; 1
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 38 0c 	call	0x1870	; 0x1870 <lcd_goto_xy>
	print_from_program_space(demo_name_line2);
     374:	8d e8       	ldi	r24, 0x8D	; 141
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 b8 0b 	call	0x1770	; 0x1770 <print_from_program_space>
	delay_ms(1000);
     37c:	88 ee       	ldi	r24, 0xE8	; 232
     37e:	93 e0       	ldi	r25, 0x03	; 3
		print_long(bat);
		print("mV");
		lcd_goto_xy(0,1);
		print("Press B");

		delay_ms(100);
     380:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
	print_from_program_space(demo_name_line1);
	lcd_goto_xy(0,1);
	print_from_program_space(demo_name_line2);
	delay_ms(1000);

	while(!button_is_pressed(BUTTON_B))
     384:	80 e1       	ldi	r24, 0x10	; 16
     386:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <button_is_pressed>
     38a:	81 11       	cpse	r24, r1
     38c:	1b c0       	rjmp	.+54     	; 0x3c4 <initialize+0xb0>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     38e:	0e 94 0b 07 	call	0xe16	; 0xe16 <read_battery_millivolts_3pi>
     392:	8c 01       	movw	r16, r24
	{
		int bat = read_battery_millivolts();

		clear();
     394:	0e 94 90 0b 	call	0x1720	; 0x1720 <clear>
		print_long(bat);
     398:	b8 01       	movw	r22, r16
     39a:	88 27       	eor	r24, r24
     39c:	77 fd       	sbrc	r23, 7
     39e:	80 95       	com	r24
     3a0:	98 2f       	mov	r25, r24
     3a2:	0e 94 15 0c 	call	0x182a	; 0x182a <print_long>
		print("mV");
     3a6:	8b e3       	ldi	r24, 0x3B	; 59
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	0e 94 a7 0b 	call	0x174e	; 0x174e <print>
		lcd_goto_xy(0,1);
     3ae:	61 e0       	ldi	r22, 0x01	; 1
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	0e 94 38 0c 	call	0x1870	; 0x1870 <lcd_goto_xy>
		print("Press B");
     3b6:	8e e3       	ldi	r24, 0x3E	; 62
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 a7 0b 	call	0x174e	; 0x174e <print>

		delay_ms(100);
     3be:	84 e6       	ldi	r24, 0x64	; 100
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	de cf       	rjmp	.-68     	; 0x380 <initialize+0x6c>
	}

	wait_for_button_release(BUTTON_B);
     3c4:	80 e1       	ldi	r24, 0x10	; 16
     3c6:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <wait_for_button_release>
	delay_ms(1000);
     3ca:	88 ee       	ldi	r24, 0xE8	; 232
     3cc:	93 e0       	ldi	r25, 0x03	; 3
     3ce:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
     3d2:	0c ee       	ldi	r16, 0xEC	; 236
     3d4:	1f ef       	ldi	r17, 0xFF	; 255

	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     3d6:	08 32       	cpi	r16, 0x28	; 40
     3d8:	11 05       	cpc	r17, r1
     3da:	28 f0       	brcs	.+10     	; 0x3e6 <initialize+0xd2>
			set_motors(40,-40);
     3dc:	68 ed       	ldi	r22, 0xD8	; 216
     3de:	7f ef       	ldi	r23, 0xFF	; 255
     3e0:	88 e2       	ldi	r24, 0x28	; 40
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	04 c0       	rjmp	.+8      	; 0x3ee <initialize+0xda>
		else
			set_motors(-40,40);
     3e6:	68 e2       	ldi	r22, 0x28	; 40
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	88 ed       	ldi	r24, 0xD8	; 216
     3ec:	9f ef       	ldi	r25, 0xFF	; 255
     3ee:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <calibrate_line_sensors>
		delay_ms(20);
     3f8:	84 e1       	ldi	r24, 0x14	; 20
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
     400:	0f 5f       	subi	r16, 0xFF	; 255
     402:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	for(counter=0;counter<80;counter++)
     404:	0c 33       	cpi	r16, 0x3C	; 60
     406:	11 05       	cpc	r17, r1
     408:	31 f7       	brne	.-52     	; 0x3d6 <initialize+0xc2>
		else
			set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	set_motors(0,0);
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>

	while(!button_is_pressed(BUTTON_B))
     416:	80 e1       	ldi	r24, 0x10	; 16
     418:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <button_is_pressed>
     41c:	81 11       	cpse	r24, r1
     41e:	1a c0       	rjmp	.+52     	; 0x454 <initialize+0x140>
	{
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     420:	61 e0       	ldi	r22, 0x01	; 1
     422:	ce 01       	movw	r24, r28
     424:	01 96       	adiw	r24, 0x01	; 1
     426:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <read_line>
     42a:	8c 01       	movw	r16, r24

		clear();
     42c:	0e 94 90 0b 	call	0x1720	; 0x1720 <clear>
		print_long(position);
     430:	b8 01       	movw	r22, r16
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 15 0c 	call	0x182a	; 0x182a <print_long>
		lcd_goto_xy(0,1);
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	0e 94 38 0c 	call	0x1870	; 0x1870 <lcd_goto_xy>
		display_readings(sensors);
     442:	ce 01       	movw	r24, r28
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	0e 94 a8 00 	call	0x150	; 0x150 <display_readings>

		delay_ms(100);
     44a:	84 e6       	ldi	r24, 0x64	; 100
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
     452:	e1 cf       	rjmp	.-62     	; 0x416 <initialize+0x102>
	}
	wait_for_button_release(BUTTON_B);
     454:	80 e1       	ldi	r24, 0x10	; 16
     456:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <wait_for_button_release>

	clear();
     45a:	0e 94 90 0b 	call	0x1720	; 0x1720 <clear>

	print("Go!");		
     45e:	86 e4       	ldi	r24, 0x46	; 70
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	0e 94 a7 0b 	call	0x174e	; 0x174e <print>

	play_from_program_space(go);
     466:	86 e7       	ldi	r24, 0x76	; 118
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 4d 0a 	call	0x149a	; 0x149a <play_from_program_space>
	while(is_playing());
     46e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <is_playing>
     472:	81 11       	cpse	r24, r1
     474:	fc cf       	rjmp	.-8      	; 0x46e <initialize+0x15a>
}
     476:	2a 96       	adiw	r28, 0x0a	; 10
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	0f be       	out	0x3f, r0	; 63
     480:	cd bf       	out	0x3d, r28	; 61
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	08 95       	ret

0000048c <main>:


int main()
{
	initialize();//3pi initialization
     48c:	0e 94 8a 01 	call	0x314	; 0x314 <initialize>
	
	maze_solve(170); //std 160
     490:	8a ea       	ldi	r24, 0xAA	; 170
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 53 03 	call	0x6a6	; 0x6a6 <maze_solve>
     498:	ff cf       	rjmp	.-2      	; 0x498 <main+0xc>

0000049a <sensor_data>:
uint16_t  node_number = 0;



uint8_t sensor_data(void)
{
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	2a 97       	sbiw	r28, 0x0a	; 10
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	f8 94       	cli
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5], edge_th = 400, line_th = 300;
	uint8_t sn_dta = 0x00;
	read_line(sensors,IR_EMITTERS_ON);
     4ae:	61 e0       	ldi	r22, 0x01	; 1
     4b0:	ce 01       	movw	r24, r28
     4b2:	01 96       	adiw	r24, 0x01	; 1
     4b4:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <read_line>
	if (sensors[0] > edge_th)	sn_dta |= (1<<4);
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	9a 81       	ldd	r25, Y+2	; 0x02
     4bc:	81 39       	cpi	r24, 0x91	; 145
     4be:	91 40       	sbci	r25, 0x01	; 1
     4c0:	10 f0       	brcs	.+4      	; 0x4c6 <sensor_data+0x2c>
     4c2:	80 e1       	ldi	r24, 0x10	; 16
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <sensor_data+0x2e>
	else						sn_dta &= ~(1<<4);
     4c6:	80 e0       	ldi	r24, 0x00	; 0
	if (sensors[1] > line_th)	sn_dta |= (1<<3);
     4c8:	2b 81       	ldd	r18, Y+3	; 0x03
     4ca:	3c 81       	ldd	r19, Y+4	; 0x04
     4cc:	2d 32       	cpi	r18, 0x2D	; 45
     4ce:	31 40       	sbci	r19, 0x01	; 1
     4d0:	10 f0       	brcs	.+4      	; 0x4d6 <sensor_data+0x3c>
     4d2:	88 60       	ori	r24, 0x08	; 8
     4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <sensor_data+0x3e>
	else						sn_dta &= ~(1<<3);
     4d6:	87 7f       	andi	r24, 0xF7	; 247
	if (sensors[2] > line_th)	sn_dta |= (1<<2);
     4d8:	2d 81       	ldd	r18, Y+5	; 0x05
     4da:	3e 81       	ldd	r19, Y+6	; 0x06
     4dc:	2d 32       	cpi	r18, 0x2D	; 45
     4de:	31 40       	sbci	r19, 0x01	; 1
     4e0:	10 f0       	brcs	.+4      	; 0x4e6 <sensor_data+0x4c>
     4e2:	84 60       	ori	r24, 0x04	; 4
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <sensor_data+0x4e>
	else						sn_dta &= ~(1<<2);
     4e6:	8b 7f       	andi	r24, 0xFB	; 251
	if (sensors[3] > line_th)	sn_dta |= (1<<1);
     4e8:	2f 81       	ldd	r18, Y+7	; 0x07
     4ea:	38 85       	ldd	r19, Y+8	; 0x08
     4ec:	2d 32       	cpi	r18, 0x2D	; 45
     4ee:	31 40       	sbci	r19, 0x01	; 1
     4f0:	10 f0       	brcs	.+4      	; 0x4f6 <sensor_data+0x5c>
     4f2:	82 60       	ori	r24, 0x02	; 2
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <sensor_data+0x5e>
	else						sn_dta &= ~(1<<1);
     4f6:	8d 7f       	andi	r24, 0xFD	; 253
	if (sensors[4] > edge_th)	sn_dta |= (1<<0);
     4f8:	29 85       	ldd	r18, Y+9	; 0x09
     4fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     4fc:	21 39       	cpi	r18, 0x91	; 145
     4fe:	31 40       	sbci	r19, 0x01	; 1
     500:	10 f0       	brcs	.+4      	; 0x506 <sensor_data+0x6c>
     502:	81 60       	ori	r24, 0x01	; 1
     504:	01 c0       	rjmp	.+2      	; 0x508 <sensor_data+0x6e>
	else						sn_dta &= ~(1<<0);
     506:	8e 7f       	andi	r24, 0xFE	; 254
	
	return sn_dta;
}
     508:	2a 96       	adiw	r28, 0x0a	; 10
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <sensor_data_verified>:

uint8_t sensor_data_verified(void)
{
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
void time_reset(void);

// This is inline for efficiency:
static inline void delay_us(unsigned int microseconds)
{
  __asm__ volatile (
     520:	c4 e1       	ldi	r28, 0x14	; 20
     522:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t snsr_data;
re_data:
	snsr_data = sensor_data();
     524:	0e 94 4d 02 	call	0x49a	; 0x49a <sensor_data>
     528:	18 2f       	mov	r17, r24
     52a:	fe 01       	movw	r30, r28
     52c:	6f 93       	push	r22
     52e:	64 e0       	ldi	r22, 0x04	; 4
     530:	6a 95       	dec	r22
     532:	f1 f7       	brne	.-4      	; 0x530 <sensor_data_verified+0x16>
     534:	6f 91       	pop	r22
     536:	31 97       	sbiw	r30, 0x01	; 1
     538:	c9 f7       	brne	.-14     	; 0x52c <sensor_data_verified+0x12>
	delay_us(20);
	if (snsr_data == sensor_data())
     53a:	0e 94 4d 02 	call	0x49a	; 0x49a <sensor_data>
     53e:	18 13       	cpse	r17, r24
     540:	f1 cf       	rjmp	.-30     	; 0x524 <sensor_data_verified+0xa>
	{
		return snsr_data;
	}
	else goto re_data;
}
     542:	81 2f       	mov	r24, r17
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	08 95       	ret

0000054c <process_u>:


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
			{
				directions_solved[i-1] = 's';
     550:	43 e7       	ldi	r20, 0x73	; 115
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'r';
     552:	52 e7       	ldi	r21, 0x72	; 114
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
			{
				directions_solved[i-1] = 'l';
     554:	6c e6       	ldi	r22, 0x6C	; 108


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     556:	dc 01       	movw	r26, r24
     558:	a1 54       	subi	r26, 0x41	; 65
     55a:	be 4f       	sbci	r27, 0xFE	; 254
     55c:	2c 91       	ld	r18, X
     55e:	22 23       	and	r18, r18
     560:	e1 f1       	breq	.+120    	; 0x5da <process_u+0x8e>
	{
		if (directions_solved[i] == 'u')
     562:	25 37       	cpi	r18, 0x75	; 117
     564:	c1 f5       	brne	.+112    	; 0x5d6 <process_u+0x8a>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
     566:	fc 01       	movw	r30, r24
     568:	e2 54       	subi	r30, 0x42	; 66
     56a:	fe 4f       	sbci	r31, 0xFE	; 254
     56c:	30 81       	ld	r19, Z
     56e:	32 37       	cpi	r19, 0x72	; 114
     570:	29 f4       	brne	.+10     	; 0x57c <process_u+0x30>
     572:	11 96       	adiw	r26, 0x01	; 1
     574:	3c 91       	ld	r19, X
     576:	33 37       	cpi	r19, 0x73	; 115
     578:	81 f4       	brne	.+32     	; 0x59a <process_u+0x4e>
     57a:	06 c0       	rjmp	.+12     	; 0x588 <process_u+0x3c>
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
     57c:	33 37       	cpi	r19, 0x73	; 115
     57e:	31 f4       	brne	.+12     	; 0x58c <process_u+0x40>
     580:	11 96       	adiw	r26, 0x01	; 1
     582:	3c 91       	ld	r19, X
     584:	32 37       	cpi	r19, 0x72	; 114
     586:	a1 f4       	brne	.+40     	; 0x5b0 <process_u+0x64>
			{
				directions_solved[i-1] = 'l';
     588:	60 83       	st	Z, r22
     58a:	19 c0       	rjmp	.+50     	; 0x5be <process_u+0x72>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'r')
     58c:	3c 36       	cpi	r19, 0x6C	; 108
     58e:	b9 f4       	brne	.+46     	; 0x5be <process_u+0x72>
     590:	11 96       	adiw	r26, 0x01	; 1
     592:	3c 91       	ld	r19, X
     594:	32 37       	cpi	r19, 0x72	; 114
     596:	31 f4       	brne	.+12     	; 0x5a4 <process_u+0x58>
     598:	11 c0       	rjmp	.+34     	; 0x5bc <process_u+0x70>
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'r')
     59a:	32 37       	cpi	r19, 0x72	; 114
     59c:	39 f0       	breq	.+14     	; 0x5ac <process_u+0x60>
			{
				directions_solved[i-1] = 's';
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'l')
     59e:	3c 36       	cpi	r19, 0x6C	; 108
     5a0:	71 f4       	brne	.+28     	; 0x5be <process_u+0x72>
     5a2:	0c c0       	rjmp	.+24     	; 0x5bc <process_u+0x70>
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
     5a4:	33 37       	cpi	r19, 0x73	; 115
     5a6:	31 f0       	breq	.+12     	; 0x5b4 <process_u+0x68>
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
     5a8:	3c 36       	cpi	r19, 0x6C	; 108
     5aa:	49 f4       	brne	.+18     	; 0x5be <process_u+0x72>
			{
				directions_solved[i-1] = 's';
     5ac:	40 83       	st	Z, r20
     5ae:	07 c0       	rjmp	.+14     	; 0x5be <process_u+0x72>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'l')
     5b0:	3c 36       	cpi	r19, 0x6C	; 108
     5b2:	11 f4       	brne	.+4      	; 0x5b8 <process_u+0x6c>
			{
				directions_solved[i-1] = 'r';
     5b4:	50 83       	st	Z, r21
     5b6:	03 c0       	rjmp	.+6      	; 0x5be <process_u+0x72>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
     5b8:	33 37       	cpi	r19, 0x73	; 115
     5ba:	09 f4       	brne	.+2      	; 0x5be <process_u+0x72>
			{
				directions_solved[i-1] = 'u';
     5bc:	20 83       	st	Z, r18
     5be:	fc 01       	movw	r30, r24
     5c0:	e1 54       	subi	r30, 0x41	; 65
     5c2:	fe 4f       	sbci	r31, 0xFE	; 254
			}

			
			while (directions_solved[i+2])
     5c4:	22 81       	ldd	r18, Z+2	; 0x02
     5c6:	22 23       	and	r18, r18
     5c8:	19 f0       	breq	.+6      	; 0x5d0 <process_u+0x84>
			{
				directions_solved[i] = directions_solved[i+2];
     5ca:	20 83       	st	Z, r18
				i++;
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	f7 cf       	rjmp	.-18     	; 0x5be <process_u+0x72>
			}
			directions_solved[i] = '\0';
     5d0:	10 82       	st	Z, r1
			i=0;
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0


void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     5d6:	01 96       	adiw	r24, 0x01	; 1
     5d8:	be cf       	rjmp	.-132    	; 0x556 <process_u+0xa>
			}
			directions_solved[i] = '\0';
			i=0;
		}
	}
}
     5da:	08 95       	ret

000005dc <process_array>:
		}
	}
}

void process_array(void)
{
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
     5e4:	8f eb       	ldi	r24, 0xBF	; 191
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	0e 94 89 15 	call	0x2b12	; 0x2b12 <strrev>
     5ec:	ef eb       	ldi	r30, 0xBF	; 191
     5ee:	f1 e0       	ldi	r31, 0x01	; 1
		{
			directions_solved[i] = 'r';
		}
		else if (directions_solved[i] == 'r')
		{
			directions_solved[i] = 'l';
     5f0:	9c e6       	ldi	r25, 0x6C	; 108
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'l')
		{
			directions_solved[i] = 'r';
     5f2:	22 e7       	ldi	r18, 0x72	; 114
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
	
	for (i=0;directions_solved[i];i++)
     5f4:	80 81       	ld	r24, Z
     5f6:	88 23       	and	r24, r24
     5f8:	49 f0       	breq	.+18     	; 0x60c <process_array+0x30>
	{
		if (directions_solved[i] == 'l')
     5fa:	8c 36       	cpi	r24, 0x6C	; 108
     5fc:	11 f4       	brne	.+4      	; 0x602 <process_array+0x26>
		{
			directions_solved[i] = 'r';
     5fe:	20 83       	st	Z, r18
     600:	03 c0       	rjmp	.+6      	; 0x608 <process_array+0x2c>
		}
		else if (directions_solved[i] == 'r')
     602:	82 37       	cpi	r24, 0x72	; 114
     604:	09 f4       	brne	.+2      	; 0x608 <process_array+0x2c>
		{
			directions_solved[i] = 'l';
     606:	90 83       	st	Z, r25
     608:	31 96       	adiw	r30, 0x01	; 1
     60a:	f4 cf       	rjmp	.-24     	; 0x5f4 <process_array+0x18>
		}
	}
	
	while(1)
	{
		length_sln_prev = strlen(directions_solved);
     60c:	0f eb       	ldi	r16, 0xBF	; 191
     60e:	11 e0       	ldi	r17, 0x01	; 1
     610:	e8 01       	movw	r28, r16
     612:	09 90       	ld	r0, Y+
     614:	00 20       	and	r0, r0
     616:	e9 f7       	brne	.-6      	; 0x612 <process_array+0x36>
     618:	21 97       	sbiw	r28, 0x01	; 1
     61a:	cf 5b       	subi	r28, 0xBF	; 191
     61c:	d1 40       	sbci	r29, 0x01	; 1
		
		process_u();
     61e:	0e 94 a6 02 	call	0x54c	; 0x54c <process_u>
		
		//process_loop();
		
		if (length_sln_prev == strlen(directions_solved))
     622:	f8 01       	movw	r30, r16
     624:	01 90       	ld	r0, Z+
     626:	00 20       	and	r0, r0
     628:	e9 f7       	brne	.-6      	; 0x624 <process_array+0x48>
     62a:	31 97       	sbiw	r30, 0x01	; 1
     62c:	ef 5b       	subi	r30, 0xBF	; 191
     62e:	f1 40       	sbci	r31, 0x01	; 1
     630:	ce 17       	cp	r28, r30
     632:	df 07       	cpc	r29, r31
     634:	69 f7       	brne	.-38     	; 0x610 <process_array+0x34>
		{
			break;
		}
	}
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	08 95       	ret

00000640 <evaluate_direction>:


void evaluate_direction(uint16_t speed)
{
     640:	bc 01       	movw	r22, r24
	char evaluation = 0;
	evaluation = directions_solved[node_number];
     642:	80 91 bd 01 	lds	r24, 0x01BD
     646:	90 91 be 01 	lds	r25, 0x01BE
     64a:	fc 01       	movw	r30, r24
     64c:	e1 54       	subi	r30, 0x41	; 65
     64e:	fe 4f       	sbci	r31, 0xFE	; 254
     650:	20 81       	ld	r18, Z
	node_number = node_number + 1;
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	90 93 be 01 	sts	0x01BE, r25
     658:	80 93 bd 01 	sts	0x01BD, r24
	
	if (evaluation == 's')
     65c:	23 37       	cpi	r18, 0x73	; 115
     65e:	11 f4       	brne	.+4      	; 0x664 <evaluate_direction+0x24>
	{
		turn('S',speed);
     660:	83 e5       	ldi	r24, 0x53	; 83
     662:	0b c0       	rjmp	.+22     	; 0x67a <evaluate_direction+0x3a>
	}
	else if (evaluation == 'u')
     664:	25 37       	cpi	r18, 0x75	; 117
     666:	11 f4       	brne	.+4      	; 0x66c <evaluate_direction+0x2c>
	{
		turn('U',speed);
     668:	85 e5       	ldi	r24, 0x55	; 85
     66a:	07 c0       	rjmp	.+14     	; 0x67a <evaluate_direction+0x3a>
	}
	else if (evaluation == 'l')
     66c:	2c 36       	cpi	r18, 0x6C	; 108
     66e:	11 f4       	brne	.+4      	; 0x674 <evaluate_direction+0x34>
	{
		turn('L',speed);
     670:	8c e4       	ldi	r24, 0x4C	; 76
     672:	03 c0       	rjmp	.+6      	; 0x67a <evaluate_direction+0x3a>
	}
	else if (evaluation == 'r')
     674:	22 37       	cpi	r18, 0x72	; 114
     676:	19 f4       	brne	.+6      	; 0x67e <evaluate_direction+0x3e>
	{
		turn('R',speed);
     678:	82 e5       	ldi	r24, 0x52	; 82
     67a:	0c 94 c5 04 	jmp	0x98a	; 0x98a <turn>
	}
	else
	{
		set_motors(0,0);
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
     68a:	ff cf       	rjmp	.-2      	; 0x68a <evaluate_direction+0x4a>

0000068c <destination_operation>:
}


void destination_operation(int speed)
{
	directions_solved[node_number] = '\0';
     68c:	e0 91 bd 01 	lds	r30, 0x01BD
     690:	f0 91 be 01 	lds	r31, 0x01BE
     694:	e1 54       	subi	r30, 0x41	; 65
     696:	fe 4f       	sbci	r31, 0xFE	; 254
     698:	10 82       	st	Z, r1
	turn('D',speed);
     69a:	bc 01       	movw	r22, r24
     69c:	84 e4       	ldi	r24, 0x44	; 68
     69e:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
	process_array();
     6a2:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <process_array>

000006a6 <maze_solve>:
}


void maze_solve(int speed)
{
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	1f 92       	push	r1
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	3c 01       	movw	r6, r24
	uint16_t destination = 0;
	const signed int speed_node = 100;
	char sensor_data_hold = 0, Right_trigged = 0, Left_trigged = 0, Forward_trigged = 0; 
     6b2:	a1 2c       	mov	r10, r1
     6b4:	91 2c       	mov	r9, r1
     6b6:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
			}
		}
		else if (sensor_data_hold == 0b00000) //-100
		{	
			directions_solved[node_number] = 'u';
     6b8:	85 e7       	ldi	r24, 0x75	; 117
     6ba:	e8 2e       	mov	r14, r24
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 'l';
     6bc:	9c e6       	ldi	r25, 0x6C	; 108
     6be:	f9 2e       	mov	r15, r25
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 's';
     6c0:	23 e7       	ldi	r18, 0x73	; 115
     6c2:	d2 2e       	mov	r13, r18
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
			{
				directions_solved[node_number] = 'r';
     6c4:	32 e7       	ldi	r19, 0x72	; 114
     6c6:	c3 2e       	mov	r12, r19
//****** Explore the path *****************************************************************************
///////////////////////////////////////////////////////////////////////////////////////////////////////

	while(1)
	{
		follow_segment(speed);
     6c8:	c3 01       	movw	r24, r6
     6ca:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <follow_segment>
		
		sensor_data_hold = sensor_data_verified();
     6ce:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     6d2:	28 2f       	mov	r18, r24
		
		if(sensor_data_hold & 0b10000)  //left trigging 
     6d4:	84 ff       	sbrs	r24, 4
     6d6:	6e c0       	rjmp	.+220    	; 0x7b4 <maze_solve+0x10e>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     6d8:	64 e6       	ldi	r22, 0x64	; 100
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	84 e6       	ldi	r24, 0x64	; 100
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	29 83       	std	Y+1, r18	; 0x01
     6e2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
			destination = 0;
     6e6:	00 e0       	ldi	r16, 0x00	; 0
     6e8:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     6ea:	29 81       	ldd	r18, Y+1	; 0x01
     6ec:	21 71       	andi	r18, 0x11	; 17
     6ee:	c1 f0       	breq	.+48     	; 0x720 <maze_solve+0x7a>
			{
				sensor_data_hold = sensor_data_verified();
     6f0:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     6f4:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b00001) && (Right_trigged == 0))
     6f6:	80 ff       	sbrs	r24, 0
     6f8:	04 c0       	rjmp	.+8      	; 0x702 <maze_solve+0x5c>
     6fa:	b1 10       	cpse	r11, r1
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <maze_solve+0x5c>
				{
					Right_trigged=1;
     6fe:	bb 24       	eor	r11, r11
     700:	b3 94       	inc	r11
				}
				if (sensor_data_hold == 0b11111)
     702:	2f 31       	cpi	r18, 0x1F	; 31
     704:	99 f7       	brne	.-26     	; 0x6ec <maze_solve+0x46>
				{
					destination = destination + 1;
     706:	0f 5f       	subi	r16, 0xFF	; 255
     708:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     70a:	03 33       	cpi	r16, 0x33	; 51
     70c:	11 05       	cpc	r17, r1
     70e:	70 f3       	brcs	.-36     	; 0x6ec <maze_solve+0x46>
					{
						destination = 0x00;
						destination_operation(speed);
     710:	c3 01       	movw	r24, r6
     712:	0e 94 46 03 	call	0x68c	; 0x68c <destination_operation>
	//****** Follow the Solved path************************************************************************
	///////////////////////////////////////////////////////////////////////////////////////////////////////

solv_maze:

node_number = 0x00;
     716:	10 92 be 01 	sts	0x01BE, r1
     71a:	10 92 bd 01 	sts	0x01BD, r1
     71e:	e0 c0       	rjmp	.+448    	; 0x8e0 <maze_solve+0x23a>
						goto solv_maze;
					}
				}
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
     720:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
			if (sensor_data_hold & 0b00100)
     724:	82 fd       	sbrc	r24, 2
     726:	1d c1       	rjmp	.+570    	; 0x962 <__stack+0x63>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     728:	b1 10       	cpse	r11, r1
     72a:	16 c0       	rjmp	.+44     	; 0x758 <maze_solve+0xb2>
     72c:	a1 10       	cpse	r10, r1
     72e:	10 c0       	rjmp	.+32     	; 0x750 <maze_solve+0xaa>
			{
				directions_solved[node_number] = 'l';
     730:	80 91 bd 01 	lds	r24, 0x01BD
     734:	90 91 be 01 	lds	r25, 0x01BE
     738:	fc 01       	movw	r30, r24
     73a:	e1 54       	subi	r30, 0x41	; 65
     73c:	fe 4f       	sbci	r31, 0xFE	; 254
     73e:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	90 93 be 01 	sts	0x01BE, r25
     746:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     74a:	b3 01       	movw	r22, r6
     74c:	8c e4       	ldi	r24, 0x4C	; 76
     74e:	bb c0       	rjmp	.+374    	; 0x8c6 <maze_solve+0x220>
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	a8 12       	cpse	r10, r24
     754:	b9 cf       	rjmp	.-142    	; 0x6c8 <maze_solve+0x22>
     756:	1b c0       	rjmp	.+54     	; 0x78e <maze_solve+0xe8>
				node_number = node_number + 1;
				turn('L',speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     758:	e1 e0       	ldi	r30, 0x01	; 1
     75a:	be 12       	cpse	r11, r30
     75c:	b5 cf       	rjmp	.-150    	; 0x6c8 <maze_solve+0x22>
     75e:	a1 10       	cpse	r10, r1
     760:	13 c0       	rjmp	.+38     	; 0x788 <maze_solve+0xe2>
			{
				directions_solved[node_number] = 'l';
     762:	80 91 bd 01 	lds	r24, 0x01BD
     766:	90 91 be 01 	lds	r25, 0x01BE
     76a:	fc 01       	movw	r30, r24
     76c:	e1 54       	subi	r30, 0x41	; 65
     76e:	fe 4f       	sbci	r31, 0xFE	; 254
     770:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	90 93 be 01 	sts	0x01BE, r25
     778:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     77c:	b3 01       	movw	r22, r6
     77e:	8c e4       	ldi	r24, 0x4C	; 76
     780:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
				Right_trigged = 0;
     784:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
     786:	a0 cf       	rjmp	.-192    	; 0x6c8 <maze_solve+0x22>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
     788:	f1 e0       	ldi	r31, 0x01	; 1
     78a:	af 12       	cpse	r10, r31
     78c:	9d cf       	rjmp	.-198    	; 0x6c8 <maze_solve+0x22>
			{
				directions_solved[node_number] = 'l';
     78e:	80 91 bd 01 	lds	r24, 0x01BD
     792:	90 91 be 01 	lds	r25, 0x01BE
     796:	fc 01       	movw	r30, r24
     798:	e1 54       	subi	r30, 0x41	; 65
     79a:	fe 4f       	sbci	r31, 0xFE	; 254
     79c:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	90 93 be 01 	sts	0x01BE, r25
     7a4:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     7a8:	b3 01       	movw	r22, r6
     7aa:	8c e4       	ldi	r24, 0x4C	; 76
     7ac:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
				Right_trigged = 0;
				Forward_trigged = 0;
     7b0:	a1 2c       	mov	r10, r1
     7b2:	e8 cf       	rjmp	.-48     	; 0x784 <maze_solve+0xde>
			}
		}
		else if (sensor_data_hold & 0b00001) //right trigging
     7b4:	80 ff       	sbrs	r24, 0
     7b6:	76 c0       	rjmp	.+236    	; 0x8a4 <maze_solve+0x1fe>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     7b8:	64 e6       	ldi	r22, 0x64	; 100
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	84 e6       	ldi	r24, 0x64	; 100
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	29 83       	std	Y+1, r18	; 0x01
     7c2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
			destination = 0;
     7c6:	00 e0       	ldi	r16, 0x00	; 0
     7c8:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     7ca:	29 81       	ldd	r18, Y+1	; 0x01
     7cc:	21 71       	andi	r18, 0x11	; 17
     7ce:	89 f0       	breq	.+34     	; 0x7f2 <maze_solve+0x14c>
			{
				sensor_data_hold = sensor_data_verified();
     7d0:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     7d4:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b10000) && (Left_trigged == 0))
     7d6:	84 ff       	sbrs	r24, 4
     7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <maze_solve+0x13c>
     7da:	91 10       	cpse	r9, r1
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <maze_solve+0x13c>
				{
					Left_trigged=1;
     7de:	99 24       	eor	r9, r9
     7e0:	93 94       	inc	r9
				}
				if (sensor_data_hold == 0b11111)
     7e2:	2f 31       	cpi	r18, 0x1F	; 31
     7e4:	99 f7       	brne	.-26     	; 0x7cc <maze_solve+0x126>
				{
					destination = destination + 1;
     7e6:	0f 5f       	subi	r16, 0xFF	; 255
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     7ea:	03 33       	cpi	r16, 0x33	; 51
     7ec:	11 05       	cpc	r17, r1
     7ee:	70 f3       	brcs	.-36     	; 0x7cc <maze_solve+0x126>
     7f0:	8f cf       	rjmp	.-226    	; 0x710 <maze_solve+0x6a>
						goto solv_maze;
					}
				}
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
     7f2:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
			if (sensor_data_hold & 0b00100)
     7f6:	82 fd       	sbrc	r24, 2
     7f8:	b8 c0       	rjmp	.+368    	; 0x96a <__stack+0x6b>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     7fa:	91 10       	cpse	r9, r1
     7fc:	25 c0       	rjmp	.+74     	; 0x848 <maze_solve+0x1a2>
     7fe:	a1 10       	cpse	r10, r1
     800:	10 c0       	rjmp	.+32     	; 0x822 <maze_solve+0x17c>
			{
				directions_solved[node_number] = 'r';
     802:	80 91 bd 01 	lds	r24, 0x01BD
     806:	90 91 be 01 	lds	r25, 0x01BE
     80a:	fc 01       	movw	r30, r24
     80c:	e1 54       	subi	r30, 0x41	; 65
     80e:	fe 4f       	sbci	r31, 0xFE	; 254
     810:	c0 82       	st	Z, r12
				node_number = node_number + 1;
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	90 93 be 01 	sts	0x01BE, r25
     818:	80 93 bd 01 	sts	0x01BD, r24
				turn('R',speed);
     81c:	b3 01       	movw	r22, r6
     81e:	82 e5       	ldi	r24, 0x52	; 82
     820:	52 c0       	rjmp	.+164    	; 0x8c6 <maze_solve+0x220>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	a8 12       	cpse	r10, r24
     826:	50 cf       	rjmp	.-352    	; 0x6c8 <maze_solve+0x22>
			{
				directions_solved[node_number] = 's';
     828:	80 91 bd 01 	lds	r24, 0x01BD
     82c:	90 91 be 01 	lds	r25, 0x01BE
     830:	fc 01       	movw	r30, r24
     832:	e1 54       	subi	r30, 0x41	; 65
     834:	fe 4f       	sbci	r31, 0xFE	; 254
     836:	d0 82       	st	Z, r13
				node_number = node_number + 1;
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	90 93 be 01 	sts	0x01BE, r25
     83e:	80 93 bd 01 	sts	0x01BD, r24
				turn('S',speed);
     842:	b3 01       	movw	r22, r6
     844:	83 e5       	ldi	r24, 0x53	; 83
     846:	29 c0       	rjmp	.+82     	; 0x89a <maze_solve+0x1f4>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     848:	e1 e0       	ldi	r30, 0x01	; 1
     84a:	9e 12       	cpse	r9, r30
     84c:	3d cf       	rjmp	.-390    	; 0x6c8 <maze_solve+0x22>
     84e:	a1 10       	cpse	r10, r1
     850:	12 c0       	rjmp	.+36     	; 0x876 <maze_solve+0x1d0>
			{
				directions_solved[node_number] = 'l';
     852:	80 91 bd 01 	lds	r24, 0x01BD
     856:	90 91 be 01 	lds	r25, 0x01BE
     85a:	fc 01       	movw	r30, r24
     85c:	e1 54       	subi	r30, 0x41	; 65
     85e:	fe 4f       	sbci	r31, 0xFE	; 254
     860:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	90 93 be 01 	sts	0x01BE, r25
     868:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     86c:	b3 01       	movw	r22, r6
     86e:	8c e4       	ldi	r24, 0x4C	; 76
     870:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
     874:	15 c0       	rjmp	.+42     	; 0x8a0 <maze_solve+0x1fa>
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
     876:	f1 e0       	ldi	r31, 0x01	; 1
     878:	af 12       	cpse	r10, r31
     87a:	26 cf       	rjmp	.-436    	; 0x6c8 <maze_solve+0x22>
			{
				directions_solved[node_number] = 'l';
     87c:	80 91 bd 01 	lds	r24, 0x01BD
     880:	90 91 be 01 	lds	r25, 0x01BE
     884:	fc 01       	movw	r30, r24
     886:	e1 54       	subi	r30, 0x41	; 65
     888:	fe 4f       	sbci	r31, 0xFE	; 254
     88a:	f0 82       	st	Z, r15
				node_number = node_number + 1;
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	90 93 be 01 	sts	0x01BE, r25
     892:	80 93 bd 01 	sts	0x01BD, r24
				turn('L',speed);
     896:	b3 01       	movw	r22, r6
     898:	8c e4       	ldi	r24, 0x4C	; 76
     89a:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
				Left_trigged = 0;
				Forward_trigged = 0;
     89e:	a1 2c       	mov	r10, r1
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				directions_solved[node_number] = 'l';
				node_number = node_number + 1;
				turn('L',speed);
				Left_trigged = 0;
     8a0:	91 2c       	mov	r9, r1
     8a2:	12 cf       	rjmp	.-476    	; 0x6c8 <maze_solve+0x22>
				Forward_trigged = 0;
			}
		}
		else if (sensor_data_hold == 0b00000) //-100
     8a4:	81 11       	cpse	r24, r1
     8a6:	10 cf       	rjmp	.-480    	; 0x6c8 <maze_solve+0x22>
		{	
			directions_solved[node_number] = 'u';
     8a8:	80 91 bd 01 	lds	r24, 0x01BD
     8ac:	90 91 be 01 	lds	r25, 0x01BE
     8b0:	fc 01       	movw	r30, r24
     8b2:	e1 54       	subi	r30, 0x41	; 65
     8b4:	fe 4f       	sbci	r31, 0xFE	; 254
     8b6:	e0 82       	st	Z, r14
			node_number = node_number + 1;
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	90 93 be 01 	sts	0x01BE, r25
     8be:	80 93 bd 01 	sts	0x01BD, r24
			turn('U',speed);
     8c2:	b3 01       	movw	r22, r6
     8c4:	85 e5       	ldi	r24, 0x55	; 85
     8c6:	0e 94 c5 04 	call	0x98a	; 0x98a <turn>
     8ca:	fe ce       	rjmp	.-516    	; 0x6c8 <maze_solve+0x22>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
			destination = 0;
			while (sensor_data_hold & 0b10001)
			{
				sensor_data_hold = sensor_data_verified();
     8cc:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     8d0:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b00001) && (Right_trigged == 0))
				{
					Right_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
     8d2:	8f 31       	cpi	r24, 0x1F	; 31
     8d4:	c1 f0       	breq	.+48     	; 0x906 <__stack+0x7>
		
		if(sensor_data_hold & 0b10000)  //left trigging 
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
			destination = 0;
			while (sensor_data_hold & 0b10001)
     8d6:	21 71       	andi	r18, 0x11	; 17
     8d8:	c9 f7       	brne	.-14     	; 0x8cc <maze_solve+0x226>
						set_motors(0,0);
						while(1);
					}
				}
			}
			evaluate_direction(speed);
     8da:	c3 01       	movw	r24, r6
     8dc:	0e 94 20 03 	call	0x640	; 0x640 <evaluate_direction>

node_number = 0x00;

	while(1)
	{
		follow_segment(speed);
     8e0:	c3 01       	movw	r24, r6
     8e2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <follow_segment>
		
		sensor_data_hold = sensor_data_verified();
     8e6:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     8ea:	28 2f       	mov	r18, r24
		
		if(sensor_data_hold & 0b10000)  //left trigging 
     8ec:	84 ff       	sbrs	r24, 4
     8ee:	17 c0       	rjmp	.+46     	; 0x91e <__stack+0x1f>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     8f0:	64 e6       	ldi	r22, 0x64	; 100
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	84 e6       	ldi	r24, 0x64	; 100
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	29 83       	std	Y+1, r18	; 0x01
     8fa:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
			destination = 0;
     8fe:	00 e0       	ldi	r16, 0x00	; 0
     900:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     902:	29 81       	ldd	r18, Y+1	; 0x01
     904:	e8 cf       	rjmp	.-48     	; 0x8d6 <maze_solve+0x230>
				{
					Right_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
				{
					destination = destination + 1;
     906:	0f 5f       	subi	r16, 0xFF	; 255
     908:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     90a:	03 33       	cpi	r16, 0x33	; 51
     90c:	11 05       	cpc	r17, r1
     90e:	18 f3       	brcs	.-58     	; 0x8d6 <maze_solve+0x230>
					{
						set_motors(0,0);
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
     91c:	ff cf       	rjmp	.-2      	; 0x91c <__stack+0x1d>
					}
				}
			}
			evaluate_direction(speed);
		}
		else if (sensor_data_hold & 0b00001) //right trigging
     91e:	80 ff       	sbrs	r24, 0
     920:	1d c0       	rjmp	.+58     	; 0x95c <__stack+0x5d>
		{
			set_motors(speed_node,speed_node);  //can be divide by a factor
     922:	64 e6       	ldi	r22, 0x64	; 100
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	84 e6       	ldi	r24, 0x64	; 100
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	29 83       	std	Y+1, r18	; 0x01
     92c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
			destination = 0;
     930:	00 e0       	ldi	r16, 0x00	; 0
     932:	10 e0       	ldi	r17, 0x00	; 0
			while (sensor_data_hold & 0b10001)
     934:	29 81       	ldd	r18, Y+1	; 0x01
     936:	21 71       	andi	r18, 0x11	; 17
     938:	81 f2       	breq	.-96     	; 0x8da <maze_solve+0x234>
			{
				sensor_data_hold = sensor_data_verified();
     93a:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     93e:	28 2f       	mov	r18, r24

				if ((sensor_data_hold & 0b10000) && (Left_trigged == 0))
				{
					Left_trigged=1;
				}
				if (sensor_data_hold == 0b11111)
     940:	8f 31       	cpi	r24, 0x1F	; 31
     942:	c9 f7       	brne	.-14     	; 0x936 <__stack+0x37>
				{
					destination = destination + 1;
     944:	0f 5f       	subi	r16, 0xFF	; 255
     946:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 50)   // destination triggering
     948:	03 33       	cpi	r16, 0x33	; 51
     94a:	11 05       	cpc	r17, r1
     94c:	a0 f3       	brcs	.-24     	; 0x936 <__stack+0x37>
					{
						set_motors(0,0);
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
     95a:	ff cf       	rjmp	.-2      	; 0x95a <__stack+0x5b>
					}
				}
			}
			evaluate_direction(speed);
		}
		else if (sensor_data_hold == 0b00000) //-100
     95c:	81 11       	cpse	r24, r1
     95e:	c0 cf       	rjmp	.-128    	; 0x8e0 <maze_solve+0x23a>
     960:	bc cf       	rjmp	.-136    	; 0x8da <maze_solve+0x234>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     962:	bb 20       	and	r11, r11
     964:	09 f4       	brne	.+2      	; 0x968 <__stack+0x69>
     966:	13 cf       	rjmp	.-474    	; 0x78e <maze_solve+0xe8>
     968:	04 c0       	rjmp	.+8      	; 0x972 <__stack+0x73>
				Forward_trigged = 1;
			}
			//temporary pgm
			
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     96a:	99 20       	and	r9, r9
     96c:	09 f4       	brne	.+2      	; 0x970 <__stack+0x71>
     96e:	5c cf       	rjmp	.-328    	; 0x828 <maze_solve+0x182>
     970:	05 c0       	rjmp	.+10     	; 0x97c <__stack+0x7d>
				node_number = node_number + 1;
				turn('L',speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	b8 16       	cp	r11, r24
     976:	09 f4       	brne	.+2      	; 0x97a <__stack+0x7b>
     978:	0a cf       	rjmp	.-492    	; 0x78e <maze_solve+0xe8>
     97a:	04 c0       	rjmp	.+8      	; 0x984 <__stack+0x85>
				node_number = node_number + 1;
				turn('S',speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     97c:	e1 e0       	ldi	r30, 0x01	; 1
     97e:	9e 16       	cp	r9, r30
     980:	09 f4       	brne	.+2      	; 0x984 <__stack+0x85>
     982:	7c cf       	rjmp	.-264    	; 0x87c <maze_solve+0x1d6>
			}
			//delay_ms(20);  //delay can be changed  //******************************************************
			sensor_data_hold = sensor_data_verified();
			if (sensor_data_hold & 0b00100)
			{
				Forward_trigged = 1;
     984:	aa 24       	eor	r10, r10
     986:	a3 94       	inc	r10
     988:	9f ce       	rjmp	.-706    	; 0x6c8 <maze_solve+0x22>

0000098a <turn>:

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
	
	if (dir == 'L')
     98a:	8c 34       	cpi	r24, 0x4C	; 76
     98c:	09 f0       	breq	.+2      	; 0x990 <turn+0x6>
     98e:	41 c0       	rjmp	.+130    	; 0xa12 <turn+0x88>
	{
		delay_ms(17); //25
     990:	81 e1       	ldi	r24, 0x11	; 17
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(0,0);
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(10);
     9a4:	8a e0       	ldi	r24, 0x0A	; 10
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(-200,-200);
     9ac:	68 e3       	ldi	r22, 0x38	; 56
     9ae:	7f ef       	ldi	r23, 0xFF	; 255
     9b0:	88 e3       	ldi	r24, 0x38	; 56
     9b2:	9f ef       	ldi	r25, 0xFF	; 255
     9b4:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(10);
     9b8:	8a e0       	ldi	r24, 0x0A	; 10
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(0,0);
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(20);
     9cc:	84 e1       	ldi	r24, 0x14	; 20
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		
		set_motors(-90,90);
     9d4:	6a e5       	ldi	r22, 0x5A	; 90
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	86 ea       	ldi	r24, 0xA6	; 166
     9da:	9f ef       	ldi	r25, 0xFF	; 255
     9dc:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     9e0:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(20);
		
		set_motors(-90,90);
		
		while(!(sensor_data_save & 0b10000))
     9e2:	84 fd       	sbrc	r24, 4
     9e4:	03 c0       	rjmp	.+6      	; 0x9ec <turn+0x62>
		{
			sensor_data_save = sensor_data_verified();
     9e6:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     9ea:	fb cf       	rjmp	.-10     	; 0x9e2 <turn+0x58>
		}
		while(sensor_data_save & 0b10000)
     9ec:	84 ff       	sbrs	r24, 4
     9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <turn+0x6c>
		{
			sensor_data_save = sensor_data_verified();
     9f0:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     9f4:	fb cf       	rjmp	.-10     	; 0x9ec <turn+0x62>
		}
		while(!(sensor_data_save & 0b00010))
     9f6:	81 fd       	sbrc	r24, 1
     9f8:	03 c0       	rjmp	.+6      	; 0xa00 <turn+0x76>
		{
			sensor_data_save = sensor_data_verified();
     9fa:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     9fe:	fb cf       	rjmp	.-10     	; 0x9f6 <turn+0x6c>
		}
		
		set_motors(0,0);
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(1); //30
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	9e c0       	rjmp	.+316    	; 0xb4e <turn+0x1c4>
		delay_ms(20);
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);
	}
	else if (dir == 'R')
     a12:	82 35       	cpi	r24, 0x52	; 82
     a14:	09 f0       	breq	.+2      	; 0xa18 <turn+0x8e>
     a16:	55 c0       	rjmp	.+170    	; 0xac2 <turn+0x138>
	{
		delay_ms(17);  //25
     a18:	81 e1       	ldi	r24, 0x11	; 17
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(0,0);
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(10);
     a2c:	8a e0       	ldi	r24, 0x0A	; 10
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(-200,-200);
     a34:	68 e3       	ldi	r22, 0x38	; 56
     a36:	7f ef       	ldi	r23, 0xFF	; 255
     a38:	88 e3       	ldi	r24, 0x38	; 56
     a3a:	9f ef       	ldi	r25, 0xFF	; 255
     a3c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(10);
     a40:	8a e0       	ldi	r24, 0x0A	; 10
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(0,0);
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(20);
     a54:	84 e1       	ldi	r24, 0x14	; 20
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		
		set_motors(90,-90);
     a5c:	66 ea       	ldi	r22, 0xA6	; 166
     a5e:	7f ef       	ldi	r23, 0xFF	; 255
     a60:	8a e5       	ldi	r24, 0x5A	; 90
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     a68:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(20);
		
		set_motors(90,-90);
		
		while(!(sensor_data_save & 0b00001))
     a6a:	80 fd       	sbrc	r24, 0
     a6c:	03 c0       	rjmp	.+6      	; 0xa74 <turn+0xea>
		{
			sensor_data_save = sensor_data_verified();
     a6e:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     a72:	fb cf       	rjmp	.-10     	; 0xa6a <turn+0xe0>
		}
		while(sensor_data_save & 0b00001)
     a74:	80 ff       	sbrs	r24, 0
     a76:	03 c0       	rjmp	.+6      	; 0xa7e <turn+0xf4>
		{
			sensor_data_save = sensor_data_verified();
     a78:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     a7c:	fb cf       	rjmp	.-10     	; 0xa74 <turn+0xea>
		}
		while(!(sensor_data_save & 0b01000))
     a7e:	83 fd       	sbrc	r24, 3
     a80:	03 c0       	rjmp	.+6      	; 0xa88 <turn+0xfe>
		{
			sensor_data_save = sensor_data_verified();
     a82:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     a86:	fb cf       	rjmp	.-10     	; 0xa7e <turn+0xf4>
		}
		//delay_ms(7); // external 
		set_motors(0,0);
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(1);//30
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(-100,100);
     a9c:	64 e6       	ldi	r22, 0x64	; 100
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	8c e9       	ldi	r24, 0x9C	; 156
     aa2:	9f ef       	ldi	r25, 0xFF	; 255
     aa4:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(10);
     aa8:	8a e0       	ldi	r24, 0x0A	; 10
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(0,0);
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(20);
     abc:	84 e1       	ldi	r24, 0x14	; 20
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	b7 c0       	rjmp	.+366    	; 0xc30 <turn+0x2a6>
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);

	}
	else if (dir == 'S')
     ac2:	83 35       	cpi	r24, 0x53	; 83
     ac4:	09 f4       	brne	.+2      	; 0xac8 <turn+0x13e>
     ac6:	b6 c0       	rjmp	.+364    	; 0xc34 <turn+0x2aa>
		//delay_ms(10);
		//set_motors(0,0);
		//delay_ms(50);
		////follow_segment(speed);
	}
	else if (dir == 'U')
     ac8:	85 35       	cpi	r24, 0x55	; 85
     aca:	09 f0       	breq	.+2      	; 0xace <turn+0x144>
     acc:	47 c0       	rjmp	.+142    	; 0xb5c <turn+0x1d2>
	{
		delay_ms(25);
     ace:	89 e1       	ldi	r24, 0x19	; 25
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(0,0);
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(10);
     ae2:	8a e0       	ldi	r24, 0x0A	; 10
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(-200,-200);
     aea:	68 e3       	ldi	r22, 0x38	; 56
     aec:	7f ef       	ldi	r23, 0xFF	; 255
     aee:	88 e3       	ldi	r24, 0x38	; 56
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(10);
     af6:	8a e0       	ldi	r24, 0x0A	; 10
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(0,0);
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(20);
     b0a:	84 e1       	ldi	r24, 0x14	; 20
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		
		set_motors(-90,90);
     b12:	6a e5       	ldi	r22, 0x5A	; 90
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	86 ea       	ldi	r24, 0xA6	; 166
     b18:	9f ef       	ldi	r25, 0xFF	; 255
     b1a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
#include "follow-segment.h"
#include "maze-solve.h"

void turn(char dir, int speed)
{
	uint8_t sensor_data_save = 0x00;
     b1e:	80 e0       	ldi	r24, 0x00	; 0
		set_motors(0,0);
		delay_ms(20);
		
		set_motors(-90,90);
		
		while(!(sensor_data_save & 0b10000))
     b20:	84 fd       	sbrc	r24, 4
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <turn+0x1a0>
		{
			sensor_data_save = sensor_data_verified();
     b24:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     b28:	fb cf       	rjmp	.-10     	; 0xb20 <turn+0x196>
		}
		while(sensor_data_save & 0b10000)
     b2a:	84 ff       	sbrs	r24, 4
     b2c:	03 c0       	rjmp	.+6      	; 0xb34 <turn+0x1aa>
		{
			sensor_data_save = sensor_data_verified();
     b2e:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     b32:	fb cf       	rjmp	.-10     	; 0xb2a <turn+0x1a0>
		}
		while(!(sensor_data_save & 0b00010))
     b34:	81 fd       	sbrc	r24, 1
     b36:	03 c0       	rjmp	.+6      	; 0xb3e <turn+0x1b4>
		{
			sensor_data_save = sensor_data_verified();
     b38:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     b3c:	fb cf       	rjmp	.-10     	; 0xb34 <turn+0x1aa>
		}
		
		set_motors(0,0);
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(10);//30
     b4a:	8a e0       	ldi	r24, 0x0A	; 10
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(100,-100);
     b52:	6c e9       	ldi	r22, 0x9C	; 156
     b54:	7f ef       	ldi	r23, 0xFF	; 255
     b56:	84 e6       	ldi	r24, 0x64	; 100
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a4 cf       	rjmp	.-184    	; 0xaa4 <turn+0x11a>
		delay_ms(20);
		//follow_segment(80);
		//follow_segment(120);
		//set_motors(speed,speed);
	}
	else if (dir == 'D')
     b5c:	84 34       	cpi	r24, 0x44	; 68
     b5e:	09 f0       	breq	.+2      	; 0xb62 <turn+0x1d8>
     b60:	69 c0       	rjmp	.+210    	; 0xc34 <turn+0x2aa>
	{
		uint16_t sensor_data_hold;
		set_motors(0,0);
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		//delay_ms(50);
		//set_motors(-100,-100);
		//delay_ms(50);
		//set_motors(0,0);
		//process_array();
		delay_ms(200);
     b6e:	88 ec       	ldi	r24, 0xC8	; 200
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(-50,-50);
     b76:	6e ec       	ldi	r22, 0xCE	; 206
     b78:	7f ef       	ldi	r23, 0xFF	; 255
     b7a:	8e ec       	ldi	r24, 0xCE	; 206
     b7c:	9f ef       	ldi	r25, 0xFF	; 255
     b7e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		sensor_data_hold = sensor_data_verified();
		while((sensor_data_hold & 0b10001) == 0b10001)
		{
			sensor_data_hold = sensor_data_verified();
     b82:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     b86:	90 e0       	ldi	r25, 0x00	; 0
		//set_motors(0,0);
		//process_array();
		delay_ms(200);
		set_motors(-50,-50);
		sensor_data_hold = sensor_data_verified();
		while((sensor_data_hold & 0b10001) == 0b10001)
     b88:	81 71       	andi	r24, 0x11	; 17
     b8a:	99 27       	eor	r25, r25
     b8c:	41 97       	sbiw	r24, 0x11	; 17
     b8e:	c9 f3       	breq	.-14     	; 0xb82 <turn+0x1f8>
		{
			sensor_data_hold = sensor_data_verified();
		}
		set_motors(0,0);
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(50);
     b9c:	82 e3       	ldi	r24, 0x32	; 50
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(50,50);
     ba4:	62 e3       	ldi	r22, 0x32	; 50
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	82 e3       	ldi	r24, 0x32	; 50
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(150);
     bb0:	86 e9       	ldi	r24, 0x96	; 150
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		//set_motors(-100,-100);
		//delay_ms(50);
		set_motors(0,0);
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(50);
     bc4:	82 e3       	ldi	r24, 0x32	; 50
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(-60,60);
     bcc:	6c e3       	ldi	r22, 0x3C	; 60
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	84 ec       	ldi	r24, 0xC4	; 196
     bd2:	9f ef       	ldi	r25, 0xFF	; 255
     bd4:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(50);
     bd8:	82 e3       	ldi	r24, 0x32	; 50
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		while((sensor_data_verified() & 0b10000) != 0x00);
     be0:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     be4:	84 fd       	sbrc	r24, 4
     be6:	fc cf       	rjmp	.-8      	; 0xbe0 <turn+0x256>
		while((sensor_data_verified() & 0b10000) != 0b10000);
     be8:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     bec:	84 ff       	sbrs	r24, 4
     bee:	fc cf       	rjmp	.-8      	; 0xbe8 <turn+0x25e>
		while((sensor_data_verified() & 0b00010) != 0b00010);
     bf0:	0e 94 8d 02 	call	0x51a	; 0x51a <sensor_data_verified>
     bf4:	81 ff       	sbrs	r24, 1
     bf6:	fc cf       	rjmp	.-8      	; 0xbf0 <turn+0x266>
		////while(sensor_data() & (3<<3)) != (3<<3));
		//delay_ms(20);
		//set_motors(0,0);
		//delay_ms(50);
		
		set_motors(0,0);
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(20); //30
     c04:	84 e1       	ldi	r24, 0x14	; 20
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(100,-100);
     c0c:	6c e9       	ldi	r22, 0x9C	; 156
     c0e:	7f ef       	ldi	r23, 0xFF	; 255
     c10:	84 e6       	ldi	r24, 0x64	; 100
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(10);
     c18:	8a e0       	ldi	r24, 0x0A	; 10
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
		set_motors(0,0);
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <set_motors>
		delay_ms(50);
     c2c:	82 e3       	ldi	r24, 0x32	; 50
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <delay_ms>
     c34:	08 95       	ret

00000c36 <_ZN15OrangutanAnalog7setModeEh>:
     c36:	88 23       	and	r24, r24
     c38:	21 f4       	brne	.+8      	; 0xc42 <_ZN15OrangutanAnalog7setModeEh+0xc>
     c3a:	80 91 7c 00 	lds	r24, 0x007C
     c3e:	8f 7d       	andi	r24, 0xDF	; 223
     c40:	03 c0       	rjmp	.+6      	; 0xc48 <_ZN15OrangutanAnalog7setModeEh+0x12>
     c42:	80 91 7c 00 	lds	r24, 0x007C
     c46:	80 62       	ori	r24, 0x20	; 32
     c48:	80 93 7c 00 	sts	0x007C, r24
     c4c:	08 95       	ret

00000c4e <_ZN15OrangutanAnalog7getModeEv>:
     c4e:	80 91 7c 00 	lds	r24, 0x007C
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	25 e0       	ldi	r18, 0x05	; 5
     c56:	95 95       	asr	r25
     c58:	87 95       	ror	r24
     c5a:	2a 95       	dec	r18
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <_ZN15OrangutanAnalog7getModeEv+0x8>
     c5e:	81 70       	andi	r24, 0x01	; 1
     c60:	08 95       	ret

00000c62 <_ZN15OrangutanAnalog12isConvertingEv>:
     c62:	80 91 7a 00 	lds	r24, 0x007A
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	36 e0       	ldi	r19, 0x06	; 6
     c6a:	95 95       	asr	r25
     c6c:	87 95       	ror	r24
     c6e:	3a 95       	dec	r19
     c70:	e1 f7       	brne	.-8      	; 0xc6a <_ZN15OrangutanAnalog12isConvertingEv+0x8>
     c72:	81 70       	andi	r24, 0x01	; 1
     c74:	08 95       	ret

00000c76 <_ZN15OrangutanAnalog16conversionResultEv>:
     c76:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZN15OrangutanAnalog7getModeEv>
     c7a:	88 23       	and	r24, r24
     c7c:	21 f0       	breq	.+8      	; 0xc86 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     c7e:	20 91 79 00 	lds	r18, 0x0079
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <_ZN15OrangutanAnalog16conversionResultEv+0x18>
     c86:	20 91 78 00 	lds	r18, 0x0078
     c8a:	30 91 79 00 	lds	r19, 0x0079
     c8e:	c9 01       	movw	r24, r18
     c90:	08 95       	ret

00000c92 <_ZN15OrangutanAnalog15startConversionEhh>:
     c92:	80 32       	cpi	r24, 0x20	; 32
     c94:	b0 f4       	brcc	.+44     	; 0xcc2 <_ZN15OrangutanAnalog15startConversionEhh+0x30>
     c96:	97 e8       	ldi	r25, 0x87	; 135
     c98:	90 93 7a 00 	sts	0x007A, r25
     c9c:	90 91 7c 00 	lds	r25, 0x007C
     ca0:	29 2f       	mov	r18, r25
     ca2:	20 64       	ori	r18, 0x40	; 64
     ca4:	66 23       	and	r22, r22
     ca6:	11 f0       	breq	.+4      	; 0xcac <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     ca8:	90 6c       	ori	r25, 0xC0	; 192
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <_ZN15OrangutanAnalog15startConversionEhh+0x1e>
     cac:	92 2f       	mov	r25, r18
     cae:	9f 77       	andi	r25, 0x7F	; 127
     cb0:	90 7e       	andi	r25, 0xE0	; 224
     cb2:	98 2b       	or	r25, r24
     cb4:	90 93 7c 00 	sts	0x007C, r25
     cb8:	80 91 7a 00 	lds	r24, 0x007A
     cbc:	80 64       	ori	r24, 0x40	; 64
     cbe:	80 93 7a 00 	sts	0x007A, r24
     cc2:	08 95       	ret

00000cc4 <_ZN15OrangutanAnalog11readAverageEhj>:
     cc4:	a0 e0       	ldi	r26, 0x00	; 0
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e8 e6       	ldi	r30, 0x68	; 104
     cca:	f6 e0       	ldi	r31, 0x06	; 6
     ccc:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__+0x14>
     cd0:	6b 01       	movw	r12, r22
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	0e 94 49 06 	call	0xc92	; 0xc92 <_ZN15OrangutanAnalog15startConversionEhh>
     cd8:	0e 94 31 06 	call	0xc62	; 0xc62 <_ZN15OrangutanAnalog12isConvertingEv>
     cdc:	88 23       	and	r24, r24
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     ce0:	e6 01       	movw	r28, r12
     ce2:	ee 24       	eor	r14, r14
     ce4:	ff 24       	eor	r15, r15
     ce6:	87 01       	movw	r16, r14
     ce8:	80 91 7a 00 	lds	r24, 0x007A
     cec:	80 64       	ori	r24, 0x40	; 64
     cee:	80 93 7a 00 	sts	0x007A, r24
     cf2:	0e 94 31 06 	call	0xc62	; 0xc62 <_ZN15OrangutanAnalog12isConvertingEv>
     cf6:	88 23       	and	r24, r24
     cf8:	e1 f7       	brne	.-8      	; 0xcf2 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     cfa:	0e 94 3b 06 	call	0xc76	; 0xc76 <_ZN15OrangutanAnalog16conversionResultEv>
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e8 0e       	add	r14, r24
     d04:	f9 1e       	adc	r15, r25
     d06:	0a 1f       	adc	r16, r26
     d08:	1b 1f       	adc	r17, r27
     d0a:	21 97       	sbiw	r28, 0x01	; 1
     d0c:	69 f7       	brne	.-38     	; 0xce8 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     d0e:	c6 01       	movw	r24, r12
     d10:	96 95       	lsr	r25
     d12:	87 95       	ror	r24
     d14:	20 e4       	ldi	r18, 0x40	; 64
     d16:	c2 16       	cp	r12, r18
     d18:	d1 04       	cpc	r13, r1
     d1a:	40 f4       	brcc	.+16     	; 0xd2c <_ZN15OrangutanAnalog11readAverageEhj+0x68>
     d1c:	8e 0d       	add	r24, r14
     d1e:	9f 1d       	adc	r25, r15
     d20:	6c 2d       	mov	r22, r12
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodhi4>
     d28:	cb 01       	movw	r24, r22
     d2a:	0d c0       	rjmp	.+26     	; 0xd46 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     d2c:	bc 01       	movw	r22, r24
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	6e 0d       	add	r22, r14
     d34:	7f 1d       	adc	r23, r15
     d36:	80 1f       	adc	r24, r16
     d38:	91 1f       	adc	r25, r17
     d3a:	96 01       	movw	r18, r12
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	50 e0       	ldi	r21, 0x00	; 0
     d40:	0e 94 ca 13 	call	0x2794	; 0x2794 <__udivmodsi4>
     d44:	c9 01       	movw	r24, r18
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	e8 e0       	ldi	r30, 0x08	; 8
     d4c:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__+0x14>

00000d50 <_ZN15OrangutanAnalog12toMillivoltsEj>:
     d50:	a3 e0       	ldi	r26, 0x03	; 3
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	ee ea       	ldi	r30, 0xAE	; 174
     d56:	f6 e0       	ldi	r31, 0x06	; 6
     d58:	0c 94 25 14 	jmp	0x284a	; 0x284a <__prologue_saves__+0x1e>
     d5c:	bc 01       	movw	r22, r24
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	20 91 00 01 	lds	r18, 0x0100
     d66:	30 91 01 01 	lds	r19, 0x0101
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	0e 94 86 13 	call	0x270c	; 0x270c <__mulsi3>
     d72:	18 2f       	mov	r17, r24
     d74:	69 83       	std	Y+1, r22	; 0x01
     d76:	7a 83       	std	Y+2, r23	; 0x02
     d78:	9b 83       	std	Y+3, r25	; 0x03
     d7a:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZN15OrangutanAnalog7getModeEv>
     d7e:	69 81       	ldd	r22, Y+1	; 0x01
     d80:	7a 81       	ldd	r23, Y+2	; 0x02
     d82:	9b 81       	ldd	r25, Y+3	; 0x03
     d84:	88 23       	and	r24, r24
     d86:	71 f0       	breq	.+28     	; 0xda4 <_ZN15OrangutanAnalog12toMillivoltsEj+0x54>
     d88:	9b 01       	movw	r18, r22
     d8a:	41 2f       	mov	r20, r17
     d8c:	59 2f       	mov	r21, r25
     d8e:	ca 01       	movw	r24, r20
     d90:	b9 01       	movw	r22, r18
     d92:	61 58       	subi	r22, 0x81	; 129
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	8f 4f       	sbci	r24, 0xFF	; 255
     d98:	9f 4f       	sbci	r25, 0xFF	; 255
     d9a:	2f ef       	ldi	r18, 0xFF	; 255
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	0d c0       	rjmp	.+26     	; 0xdbe <_ZN15OrangutanAnalog12toMillivoltsEj+0x6e>
     da4:	9b 01       	movw	r18, r22
     da6:	41 2f       	mov	r20, r17
     da8:	59 2f       	mov	r21, r25
     daa:	ca 01       	movw	r24, r20
     dac:	b9 01       	movw	r22, r18
     dae:	61 50       	subi	r22, 0x01	; 1
     db0:	7e 4f       	sbci	r23, 0xFE	; 254
     db2:	8f 4f       	sbci	r24, 0xFF	; 255
     db4:	9f 4f       	sbci	r25, 0xFF	; 255
     db6:	2f ef       	ldi	r18, 0xFF	; 255
     db8:	33 e0       	ldi	r19, 0x03	; 3
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	0e 94 ca 13 	call	0x2794	; 0x2794 <__udivmodsi4>
     dc2:	c9 01       	movw	r24, r18
     dc4:	23 96       	adiw	r28, 0x03	; 3
     dc6:	e3 e0       	ldi	r30, 0x03	; 3
     dc8:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__epilogue_restores__+0x1e>

00000dcc <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     dcc:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_ZN15OrangutanAnalog11readAverageEhj>
     dd0:	0e 94 a8 06 	call	0xd50	; 0xd50 <_ZN15OrangutanAnalog12toMillivoltsEj>
     dd4:	08 95       	ret

00000dd6 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZN15OrangutanAnalog7getModeEv>
     de0:	18 2f       	mov	r17, r24
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN15OrangutanAnalog7setModeEh>
     de8:	86 e0       	ldi	r24, 0x06	; 6
     dea:	6a e0       	ldi	r22, 0x0A	; 10
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     df2:	ec 01       	movw	r28, r24
     df4:	81 2f       	mov	r24, r17
     df6:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN15OrangutanAnalog7setModeEh>
     dfa:	9e 01       	movw	r18, r28
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	2c 0f       	add	r18, r28
     e02:	3d 1f       	adc	r19, r29
     e04:	2f 5f       	subi	r18, 0xFF	; 255
     e06:	3f 4f       	sbci	r19, 0xFF	; 255
     e08:	36 95       	lsr	r19
     e0a:	27 95       	ror	r18
     e0c:	c9 01       	movw	r24, r18
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	08 95       	ret

00000e16 <read_battery_millivolts_3pi>:
     e16:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     e1a:	08 95       	ret

00000e1c <_ZL16currentCharacterv>:
     e1c:	90 91 4f 01 	lds	r25, 0x014F
     e20:	e0 91 4b 01 	lds	r30, 0x014B
     e24:	f0 91 4c 01 	lds	r31, 0x014C
     e28:	99 23       	and	r25, r25
     e2a:	11 f0       	breq	.+4      	; 0xe30 <_ZL16currentCharacterv+0x14>
     e2c:	84 91       	lpm	r24, Z
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <_ZL16currentCharacterv+0x16>
     e30:	80 81       	ld	r24, Z
     e32:	28 2f       	mov	r18, r24
     e34:	21 54       	subi	r18, 0x41	; 65
     e36:	2a 31       	cpi	r18, 0x1A	; 26
     e38:	10 f4       	brcc	.+4      	; 0xe3e <_ZL16currentCharacterv+0x22>
     e3a:	80 5e       	subi	r24, 0xE0	; 224
     e3c:	08 95       	ret
     e3e:	80 32       	cpi	r24, 0x20	; 32
     e40:	71 f4       	brne	.+28     	; 0xe5e <_ZL16currentCharacterv+0x42>
     e42:	20 91 4b 01 	lds	r18, 0x014B
     e46:	30 91 4c 01 	lds	r19, 0x014C
     e4a:	a9 01       	movw	r20, r18
     e4c:	4f 5f       	subi	r20, 0xFF	; 255
     e4e:	5f 4f       	sbci	r21, 0xFF	; 255
     e50:	50 93 4c 01 	sts	0x014C, r21
     e54:	40 93 4b 01 	sts	0x014B, r20
     e58:	21 15       	cp	r18, r1
     e5a:	31 05       	cpc	r19, r1
     e5c:	09 f7       	brne	.-62     	; 0xe20 <_ZL16currentCharacterv+0x4>
     e5e:	08 95       	ret

00000e60 <_ZL9getNumberv>:
     e60:	ef 92       	push	r14
     e62:	ff 92       	push	r15
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZL16currentCharacterv>
     e6c:	c0 e0       	ldi	r28, 0x00	; 0
     e6e:	d0 e0       	ldi	r29, 0x00	; 0
     e70:	1b c0       	rjmp	.+54     	; 0xea8 <_ZL9getNumberv+0x48>
     e72:	9e 01       	movw	r18, r28
     e74:	22 0f       	add	r18, r18
     e76:	33 1f       	adc	r19, r19
     e78:	93 e0       	ldi	r25, 0x03	; 3
     e7a:	cc 0f       	add	r28, r28
     e7c:	dd 1f       	adc	r29, r29
     e7e:	9a 95       	dec	r25
     e80:	e1 f7       	brne	.-8      	; 0xe7a <_ZL9getNumberv+0x1a>
     e82:	c2 0f       	add	r28, r18
     e84:	d3 1f       	adc	r29, r19
     e86:	99 27       	eor	r25, r25
     e88:	87 fd       	sbrc	r24, 7
     e8a:	90 95       	com	r25
     e8c:	c8 0f       	add	r28, r24
     e8e:	d9 1f       	adc	r29, r25
     e90:	e0 97       	sbiw	r28, 0x30	; 48
     e92:	80 91 4b 01 	lds	r24, 0x014B
     e96:	90 91 4c 01 	lds	r25, 0x014C
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	90 93 4c 01 	sts	0x014C, r25
     ea0:	80 93 4b 01 	sts	0x014B, r24
     ea4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZL16currentCharacterv>
     ea8:	98 2f       	mov	r25, r24
     eaa:	90 53       	subi	r25, 0x30	; 48
     eac:	9a 30       	cpi	r25, 0x0A	; 10
     eae:	08 f3       	brcs	.-62     	; 0xe72 <_ZL9getNumberv+0x12>
     eb0:	ce 01       	movw	r24, r28
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	08 95       	ret

00000ebc <_ZN15OrangutanBuzzer5init2Ev>:
     ebc:	10 92 6f 00 	sts	0x006F, r1
     ec0:	83 e2       	ldi	r24, 0x23	; 35
     ec2:	80 93 80 00 	sts	0x0080, r24
     ec6:	81 e1       	ldi	r24, 0x11	; 17
     ec8:	80 93 81 00 	sts	0x0081, r24
     ecc:	10 92 82 00 	sts	0x0082, r1
     ed0:	80 e1       	ldi	r24, 0x10	; 16
     ed2:	97 e2       	ldi	r25, 0x27	; 39
     ed4:	90 93 89 00 	sts	0x0089, r25
     ed8:	80 93 88 00 	sts	0x0088, r24
     edc:	10 92 8b 00 	sts	0x008B, r1
     ee0:	10 92 8a 00 	sts	0x008A, r1
     ee4:	22 9a       	sbi	0x04, 2	; 4
     ee6:	78 94       	sei
     ee8:	08 95       	ret

00000eea <_ZN15OrangutanBuzzer4initEv>:
     eea:	80 91 4a 01 	lds	r24, 0x014A
     eee:	88 23       	and	r24, r24
     ef0:	29 f4       	brne	.+10     	; 0xefc <_ZN15OrangutanBuzzer4initEv+0x12>
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	80 93 4a 01 	sts	0x014A, r24
     ef8:	0e 94 5e 07 	call	0xebc	; 0xebc <_ZN15OrangutanBuzzer5init2Ev>
     efc:	08 95       	ret

00000efe <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     efe:	a0 e0       	ldi	r26, 0x00	; 0
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e5 e8       	ldi	r30, 0x85	; 133
     f04:	f7 e0       	ldi	r31, 0x07	; 7
     f06:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__prologue_saves__+0xc>
     f0a:	8c 01       	movw	r16, r24
     f0c:	5b 01       	movw	r10, r22
     f0e:	e4 2e       	mov	r14, r20
     f10:	0e 94 75 07 	call	0xeea	; 0xeea <_ZN15OrangutanBuzzer4initEv>
     f14:	10 92 02 01 	sts	0x0102, r1
     f18:	17 ff       	sbrs	r17, 7
     f1a:	04 c0       	rjmp	.+8      	; 0xf24 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x26>
     f1c:	1f 77       	andi	r17, 0x7F	; 127
     f1e:	aa e0       	ldi	r26, 0x0A	; 10
     f20:	fa 2e       	mov	r15, r26
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
     f24:	ff 24       	eor	r15, r15
     f26:	f3 94       	inc	r15
     f28:	c0 90 81 00 	lds	r12, 0x0081
     f2c:	dd 24       	eor	r13, r13
     f2e:	28 ef       	ldi	r18, 0xF8	; 248
     f30:	c2 22       	and	r12, r18
     f32:	dd 24       	eor	r13, r13
     f34:	88 ec       	ldi	r24, 0xC8	; 200
     f36:	3f 2d       	mov	r19, r15
     f38:	38 9f       	mul	r19, r24
     f3a:	c0 01       	movw	r24, r0
     f3c:	11 24       	eor	r1, r1
     f3e:	80 17       	cp	r24, r16
     f40:	91 07       	cpc	r25, r17
     f42:	d8 f4       	brcc	.+54     	; 0xf7a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x7c>
     f44:	e8 01       	movw	r28, r16
     f46:	67 e2       	ldi	r22, 0x27	; 39
     f48:	01 31       	cpi	r16, 0x11	; 17
     f4a:	16 07       	cpc	r17, r22
     f4c:	10 f0       	brcs	.+4      	; 0xf52 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x54>
     f4e:	c0 e1       	ldi	r28, 0x10	; 16
     f50:	d7 e2       	ldi	r29, 0x27	; 39
     f52:	be 01       	movw	r22, r28
     f54:	76 95       	lsr	r23
     f56:	67 95       	ror	r22
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	60 58       	subi	r22, 0x80	; 128
     f5e:	79 46       	sbci	r23, 0x69	; 105
     f60:	87 46       	sbci	r24, 0x67	; 103
     f62:	9f 4f       	sbci	r25, 0xFF	; 255
     f64:	9e 01       	movw	r18, r28
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	0e 94 ca 13 	call	0x2794	; 0x2794 <__udivmodsi4>
     f6e:	89 01       	movw	r16, r18
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	c8 2a       	or	r12, r24
     f76:	d9 2a       	or	r13, r25
     f78:	2c c0       	rjmp	.+88     	; 0xfd2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd4>
     f7a:	98 e2       	ldi	r25, 0x28	; 40
     f7c:	f9 9e       	mul	r15, r25
     f7e:	90 2d       	mov	r25, r0
     f80:	11 24       	eor	r1, r1
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	89 2e       	mov	r8, r25
     f86:	e4 01       	movw	r28, r8
     f88:	4e 01       	movw	r8, r28
     f8a:	98 2e       	mov	r9, r24
     f8c:	e4 01       	movw	r28, r8
     f8e:	80 16       	cp	r8, r16
     f90:	91 06       	cpc	r9, r17
     f92:	08 f4       	brcc	.+2      	; 0xf96 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x98>
     f94:	e8 01       	movw	r28, r16
     f96:	be 01       	movw	r22, r28
     f98:	76 95       	lsr	r23
     f9a:	67 95       	ror	r22
     f9c:	9e 01       	movw	r18, r28
     f9e:	40 e0       	ldi	r20, 0x00	; 0
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	8f 2d       	mov	r24, r15
     fa4:	8a 30       	cpi	r24, 0x0A	; 10
     fa6:	39 f4       	brne	.+14     	; 0xfb6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb8>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	60 5e       	subi	r22, 0xE0	; 224
     fae:	73 44       	sbci	r23, 0x43	; 67
     fb0:	81 44       	sbci	r24, 0x41	; 65
     fb2:	9f 4f       	sbci	r25, 0xFF	; 255
     fb4:	06 c0       	rjmp	.+12     	; 0xfc2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc4>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	60 53       	subi	r22, 0x30	; 48
     fbc:	7d 4e       	sbci	r23, 0xED	; 237
     fbe:	8c 4e       	sbci	r24, 0xEC	; 236
     fc0:	9f 4f       	sbci	r25, 0xFF	; 255
     fc2:	0e 94 ca 13 	call	0x2794	; 0x2794 <__udivmodsi4>
     fc6:	89 01       	movw	r16, r18
     fc8:	52 e0       	ldi	r21, 0x02	; 2
     fca:	85 2e       	mov	r8, r21
     fcc:	91 2c       	mov	r9, r1
     fce:	c8 28       	or	r12, r8
     fd0:	d9 28       	or	r13, r9
     fd2:	2f 2d       	mov	r18, r15
     fd4:	2a 30       	cpi	r18, 0x0A	; 10
     fd6:	39 f4       	brne	.+14     	; 0xfe6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe8>
     fd8:	ce 01       	movw	r24, r28
     fda:	05 96       	adiw	r24, 0x05	; 5
     fdc:	6a e0       	ldi	r22, 0x0A	; 10
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodhi4>
     fe4:	eb 01       	movw	r28, r22
     fe6:	33 e0       	ldi	r19, 0x03	; 3
     fe8:	c8 3e       	cpi	r28, 0xE8	; 232
     fea:	d3 07       	cpc	r29, r19
     fec:	79 f0       	breq	.+30     	; 0x100c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x10e>
     fee:	be 01       	movw	r22, r28
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	95 01       	movw	r18, r10
     ff6:	40 e0       	ldi	r20, 0x00	; 0
     ff8:	50 e0       	ldi	r21, 0x00	; 0
     ffa:	0e 94 86 13 	call	0x270c	; 0x270c <__mulsi3>
     ffe:	28 ee       	ldi	r18, 0xE8	; 232
    1000:	33 e0       	ldi	r19, 0x03	; 3
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__divmodsi4>
    100a:	01 c0       	rjmp	.+2      	; 0x100e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    100c:	95 01       	movw	r18, r10
    100e:	10 92 6f 00 	sts	0x006F, r1
    1012:	c0 92 81 00 	sts	0x0081, r12
    1016:	10 93 89 00 	sts	0x0089, r17
    101a:	00 93 88 00 	sts	0x0088, r16
    101e:	40 91 88 00 	lds	r20, 0x0088
    1022:	50 91 89 00 	lds	r21, 0x0089
    1026:	6e 2d       	mov	r22, r14
    1028:	60 31       	cpi	r22, 0x10	; 16
    102a:	08 f0       	brcs	.+2      	; 0x102e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    102c:	6f e0       	ldi	r22, 0x0F	; 15
    102e:	80 e1       	ldi	r24, 0x10	; 16
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	86 1b       	sub	r24, r22
    1034:	91 09       	sbc	r25, r1
    1036:	ba 01       	movw	r22, r20
    1038:	02 c0       	rjmp	.+4      	; 0x103e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    103a:	76 95       	lsr	r23
    103c:	67 95       	ror	r22
    103e:	8a 95       	dec	r24
    1040:	e2 f7       	brpl	.-8      	; 0x103a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1042:	70 93 8b 00 	sts	0x008B, r23
    1046:	60 93 8a 00 	sts	0x008A, r22
    104a:	30 93 52 01 	sts	0x0152, r19
    104e:	20 93 51 01 	sts	0x0151, r18
    1052:	86 b3       	in	r24, 0x16	; 22
    1054:	8f ef       	ldi	r24, 0xFF	; 255
    1056:	86 bb       	out	0x16, r24	; 22
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	80 93 6f 00 	sts	0x006F, r24
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	ec e0       	ldi	r30, 0x0C	; 12
    1064:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__epilogue_restores__+0xc>

00001068 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1068:	9b 01       	movw	r18, r22
    106a:	8f 3f       	cpi	r24, 0xFF	; 255
    106c:	11 f0       	breq	.+4      	; 0x1072 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa>
    106e:	44 23       	and	r20, r20
    1070:	29 f4       	brne	.+10     	; 0x107c <_ZN15OrangutanBuzzer8playNoteEhjh+0x14>
    1072:	88 ee       	ldi	r24, 0xE8	; 232
    1074:	93 e0       	ldi	r25, 0x03	; 3
    1076:	b9 01       	movw	r22, r18
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	49 c0       	rjmp	.+146    	; 0x110e <_ZN15OrangutanBuzzer8playNoteEhjh+0xa6>
    107c:	81 31       	cpi	r24, 0x11	; 17
    107e:	30 f0       	brcs	.+12     	; 0x108c <_ZN15OrangutanBuzzer8playNoteEhjh+0x24>
    1080:	58 2f       	mov	r21, r24
    1082:	50 51       	subi	r21, 0x10	; 16
    1084:	50 36       	cpi	r21, 0x60	; 96
    1086:	18 f0       	brcs	.+6      	; 0x108e <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    1088:	5f e5       	ldi	r21, 0x5F	; 95
    108a:	01 c0       	rjmp	.+2      	; 0x108e <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	85 2f       	mov	r24, r21
    1090:	6c e0       	ldi	r22, 0x0C	; 12
    1092:	0e 94 96 13 	call	0x272c	; 0x272c <__udivmodqi4>
    1096:	a8 2f       	mov	r26, r24
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e4 ef       	ldi	r30, 0xF4	; 244
    109c:	ff ef       	ldi	r31, 0xFF	; 255
    109e:	ae 9f       	mul	r26, r30
    10a0:	b0 01       	movw	r22, r0
    10a2:	af 9f       	mul	r26, r31
    10a4:	70 0d       	add	r23, r0
    10a6:	be 9f       	mul	r27, r30
    10a8:	70 0d       	add	r23, r0
    10aa:	11 24       	eor	r1, r1
    10ac:	65 0f       	add	r22, r21
    10ae:	71 1d       	adc	r23, r1
    10b0:	6c 30       	cpi	r22, 0x0C	; 12
    10b2:	71 05       	cpc	r23, r1
    10b4:	40 f4       	brcc	.+16     	; 0x10c6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5e>
    10b6:	fb 01       	movw	r30, r22
    10b8:	ee 0f       	add	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	e4 5f       	subi	r30, 0xF4	; 244
    10be:	fe 4f       	sbci	r31, 0xFE	; 254
    10c0:	60 81       	ld	r22, Z
    10c2:	71 81       	ldd	r23, Z+1	; 0x01
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	87 30       	cpi	r24, 0x07	; 7
    10cc:	81 f0       	breq	.+32     	; 0x10ee <_ZN15OrangutanBuzzer8playNoteEhjh+0x86>
    10ce:	08 2e       	mov	r0, r24
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6e>
    10d2:	66 0f       	add	r22, r22
    10d4:	77 1f       	adc	r23, r23
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6a>
    10da:	82 30       	cpi	r24, 0x02	; 2
    10dc:	28 f0       	brcs	.+10     	; 0x10e8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x80>
    10de:	cb 01       	movw	r24, r22
    10e0:	05 96       	adiw	r24, 0x05	; 5
    10e2:	6a e0       	ldi	r22, 0x0A	; 10
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	0c c0       	rjmp	.+24     	; 0x1100 <_ZN15OrangutanBuzzer8playNoteEhjh+0x98>
    10e8:	60 50       	subi	r22, 0x00	; 0
    10ea:	70 48       	sbci	r23, 0x80	; 128
    10ec:	0b c0       	rjmp	.+22     	; 0x1104 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    10ee:	cb 01       	movw	r24, r22
    10f0:	b6 e0       	ldi	r27, 0x06	; 6
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	ba 95       	dec	r27
    10f8:	e1 f7       	brne	.-8      	; 0x10f2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x8a>
    10fa:	02 96       	adiw	r24, 0x02	; 2
    10fc:	65 e0       	ldi	r22, 0x05	; 5
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodhi4>
    1104:	40 31       	cpi	r20, 0x10	; 16
    1106:	08 f0       	brcs	.+2      	; 0x110a <_ZN15OrangutanBuzzer8playNoteEhjh+0xa2>
    1108:	4f e0       	ldi	r20, 0x0F	; 15
    110a:	cb 01       	movw	r24, r22
    110c:	b9 01       	movw	r22, r18
    110e:	0e 94 7f 07 	call	0xefe	; 0xefe <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1112:	08 95       	ret

00001114 <_ZL8nextNotev>:
    1114:	a0 e0       	ldi	r26, 0x00	; 0
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e0 e9       	ldi	r30, 0x90	; 144
    111a:	f8 e0       	ldi	r31, 0x08	; 8
    111c:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__prologue_saves__+0xa>
    1120:	b0 90 03 01 	lds	r11, 0x0103
    1124:	80 91 4d 01 	lds	r24, 0x014D
    1128:	88 23       	and	r24, r24
    112a:	61 f0       	breq	.+24     	; 0x1144 <_ZL8nextNotev+0x30>
    112c:	60 91 4e 01 	lds	r22, 0x014E
    1130:	66 23       	and	r22, r22
    1132:	41 f0       	breq	.+16     	; 0x1144 <_ZL8nextNotev+0x30>
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	0e 94 34 08 	call	0x1068	; 0x1068 <_ZN15OrangutanBuzzer8playNoteEhjh>
    113e:	10 92 4e 01 	sts	0x014E, r1
    1142:	34 c1       	rjmp	.+616    	; 0x13ac <_ZL8nextNotev+0x298>
    1144:	c0 ec       	ldi	r28, 0xC0	; 192
    1146:	dd e5       	ldi	r29, 0x5D	; 93
    1148:	aa 24       	eor	r10, r10
    114a:	a3 94       	inc	r10
    114c:	14 e0       	ldi	r17, 0x04	; 4
    114e:	71 2e       	mov	r7, r17
    1150:	00 ed       	ldi	r16, 0xD0	; 208
    1152:	17 e0       	ldi	r17, 0x07	; 7
    1154:	b4 e0       	ldi	r27, 0x04	; 4
    1156:	eb 2e       	mov	r14, r27
    1158:	f1 2c       	mov	r15, r1
    115a:	a4 ef       	ldi	r26, 0xF4	; 244
    115c:	ca 2e       	mov	r12, r26
    115e:	a1 e0       	ldi	r26, 0x01	; 1
    1160:	da 2e       	mov	r13, r26
    1162:	ff e0       	ldi	r31, 0x0F	; 15
    1164:	8f 2e       	mov	r8, r31
    1166:	91 2c       	mov	r9, r1
    1168:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZL16currentCharacterv>
    116c:	20 91 4b 01 	lds	r18, 0x014B
    1170:	30 91 4c 01 	lds	r19, 0x014C
    1174:	2f 5f       	subi	r18, 0xFF	; 255
    1176:	3f 4f       	sbci	r19, 0xFF	; 255
    1178:	30 93 4c 01 	sts	0x014C, r19
    117c:	20 93 4b 01 	sts	0x014B, r18
    1180:	86 36       	cpi	r24, 0x66	; 102
    1182:	f1 f1       	breq	.+124    	; 0x1200 <_ZL8nextNotev+0xec>
    1184:	87 36       	cpi	r24, 0x67	; 103
    1186:	cc f4       	brge	.+50     	; 0x11ba <_ZL8nextNotev+0xa6>
    1188:	82 36       	cpi	r24, 0x62	; 98
    118a:	09 f4       	brne	.+2      	; 0x118e <_ZL8nextNotev+0x7a>
    118c:	af c0       	rjmp	.+350    	; 0x12ec <_ZL8nextNotev+0x1d8>
    118e:	83 36       	cpi	r24, 0x63	; 99
    1190:	7c f4       	brge	.+30     	; 0x11b0 <_ZL8nextNotev+0x9c>
    1192:	8e 33       	cpi	r24, 0x3E	; 62
    1194:	49 f1       	breq	.+82     	; 0x11e8 <_ZL8nextNotev+0xd4>
    1196:	8f 33       	cpi	r24, 0x3F	; 63
    1198:	3c f4       	brge	.+14     	; 0x11a8 <_ZL8nextNotev+0x94>
    119a:	81 32       	cpi	r24, 0x21	; 33
    119c:	09 f4       	brne	.+2      	; 0x11a0 <_ZL8nextNotev+0x8c>
    119e:	87 c0       	rjmp	.+270    	; 0x12ae <_ZL8nextNotev+0x19a>
    11a0:	8c 33       	cpi	r24, 0x3C	; 60
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <_ZL8nextNotev+0x92>
    11a4:	9b c0       	rjmp	.+310    	; 0x12dc <_ZL8nextNotev+0x1c8>
    11a6:	22 c0       	rjmp	.+68     	; 0x11ec <_ZL8nextNotev+0xd8>
    11a8:	81 36       	cpi	r24, 0x61	; 97
    11aa:	09 f0       	breq	.+2      	; 0x11ae <_ZL8nextNotev+0x9a>
    11ac:	97 c0       	rjmp	.+302    	; 0x12dc <_ZL8nextNotev+0x1c8>
    11ae:	9b c0       	rjmp	.+310    	; 0x12e6 <_ZL8nextNotev+0x1d2>
    11b0:	84 36       	cpi	r24, 0x64	; 100
    11b2:	01 f1       	breq	.+64     	; 0x11f4 <_ZL8nextNotev+0xe0>
    11b4:	85 36       	cpi	r24, 0x65	; 101
    11b6:	0c f5       	brge	.+66     	; 0x11fa <_ZL8nextNotev+0xe6>
    11b8:	1b c0       	rjmp	.+54     	; 0x11f0 <_ZL8nextNotev+0xdc>
    11ba:	8f 36       	cpi	r24, 0x6F	; 111
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <_ZL8nextNotev+0xac>
    11be:	47 c0       	rjmp	.+142    	; 0x124e <_ZL8nextNotev+0x13a>
    11c0:	80 37       	cpi	r24, 0x70	; 112
    11c2:	44 f4       	brge	.+16     	; 0x11d4 <_ZL8nextNotev+0xc0>
    11c4:	8c 36       	cpi	r24, 0x6C	; 108
    11c6:	11 f1       	breq	.+68     	; 0x120c <_ZL8nextNotev+0xf8>
    11c8:	8d 36       	cpi	r24, 0x6D	; 109
    11ca:	61 f1       	breq	.+88     	; 0x1224 <_ZL8nextNotev+0x110>
    11cc:	87 36       	cpi	r24, 0x67	; 103
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <_ZL8nextNotev+0xbe>
    11d0:	85 c0       	rjmp	.+266    	; 0x12dc <_ZL8nextNotev+0x1c8>
    11d2:	19 c0       	rjmp	.+50     	; 0x1206 <_ZL8nextNotev+0xf2>
    11d4:	84 37       	cpi	r24, 0x74	; 116
    11d6:	09 f4       	brne	.+2      	; 0x11da <_ZL8nextNotev+0xc6>
    11d8:	44 c0       	rjmp	.+136    	; 0x1262 <_ZL8nextNotev+0x14e>
    11da:	86 37       	cpi	r24, 0x76	; 118
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <_ZL8nextNotev+0xcc>
    11de:	60 c0       	rjmp	.+192    	; 0x12a0 <_ZL8nextNotev+0x18c>
    11e0:	82 37       	cpi	r24, 0x72	; 114
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <_ZL8nextNotev+0xd2>
    11e4:	7b c0       	rjmp	.+246    	; 0x12dc <_ZL8nextNotev+0x1c8>
    11e6:	39 c0       	rjmp	.+114    	; 0x125a <_ZL8nextNotev+0x146>
    11e8:	b3 94       	inc	r11
    11ea:	be cf       	rjmp	.-132    	; 0x1168 <_ZL8nextNotev+0x54>
    11ec:	ba 94       	dec	r11
    11ee:	bc cf       	rjmp	.-136    	; 0x1168 <_ZL8nextNotev+0x54>
    11f0:	ee 24       	eor	r14, r14
    11f2:	35 c0       	rjmp	.+106    	; 0x125e <_ZL8nextNotev+0x14a>
    11f4:	ee 24       	eor	r14, r14
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	7b c0       	rjmp	.+246    	; 0x12f0 <_ZL8nextNotev+0x1dc>
    11fa:	ee 24       	eor	r14, r14
    11fc:	84 e0       	ldi	r24, 0x04	; 4
    11fe:	78 c0       	rjmp	.+240    	; 0x12f0 <_ZL8nextNotev+0x1dc>
    1200:	ee 24       	eor	r14, r14
    1202:	85 e0       	ldi	r24, 0x05	; 5
    1204:	75 c0       	rjmp	.+234    	; 0x12f0 <_ZL8nextNotev+0x1dc>
    1206:	ee 24       	eor	r14, r14
    1208:	87 e0       	ldi	r24, 0x07	; 7
    120a:	72 c0       	rjmp	.+228    	; 0x12f0 <_ZL8nextNotev+0x1dc>
    120c:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZL9getNumberv>
    1210:	bc 01       	movw	r22, r24
    1212:	90 93 05 01 	sts	0x0105, r25
    1216:	80 93 04 01 	sts	0x0104, r24
    121a:	80 91 06 01 	lds	r24, 0x0106
    121e:	90 91 07 01 	lds	r25, 0x0107
    1222:	37 c0       	rjmp	.+110    	; 0x1292 <_ZL8nextNotev+0x17e>
    1224:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZL16currentCharacterv>
    1228:	8c 36       	cpi	r24, 0x6C	; 108
    122a:	19 f4       	brne	.+6      	; 0x1232 <_ZL8nextNotev+0x11e>
    122c:	10 92 4d 01 	sts	0x014D, r1
    1230:	04 c0       	rjmp	.+8      	; 0x123a <_ZL8nextNotev+0x126>
    1232:	a0 92 4d 01 	sts	0x014D, r10
    1236:	10 92 4e 01 	sts	0x014E, r1
    123a:	80 91 4b 01 	lds	r24, 0x014B
    123e:	90 91 4c 01 	lds	r25, 0x014C
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	90 93 4c 01 	sts	0x014C, r25
    1248:	80 93 4b 01 	sts	0x014B, r24
    124c:	8d cf       	rjmp	.-230    	; 0x1168 <_ZL8nextNotev+0x54>
    124e:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZL9getNumberv>
    1252:	b8 2e       	mov	r11, r24
    1254:	80 93 03 01 	sts	0x0103, r24
    1258:	87 cf       	rjmp	.-242    	; 0x1168 <_ZL8nextNotev+0x54>
    125a:	ee 24       	eor	r14, r14
    125c:	e3 94       	inc	r14
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	47 c0       	rjmp	.+142    	; 0x12f0 <_ZL8nextNotev+0x1dc>
    1262:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZL9getNumberv>
    1266:	bc 01       	movw	r22, r24
    1268:	ce 01       	movw	r24, r28
    126a:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodhi4>
    126e:	cb 01       	movw	r24, r22
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	53 e0       	ldi	r21, 0x03	; 3
    1276:	66 0f       	add	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	5a 95       	dec	r21
    127c:	e1 f7       	brne	.-8      	; 0x1276 <_ZL8nextNotev+0x162>
    127e:	86 0f       	add	r24, r22
    1280:	97 1f       	adc	r25, r23
    1282:	90 93 07 01 	sts	0x0107, r25
    1286:	80 93 06 01 	sts	0x0106, r24
    128a:	60 91 04 01 	lds	r22, 0x0104
    128e:	70 91 05 01 	lds	r23, 0x0105
    1292:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodhi4>
    1296:	70 93 09 01 	sts	0x0109, r23
    129a:	60 93 08 01 	sts	0x0108, r22
    129e:	64 cf       	rjmp	.-312    	; 0x1168 <_ZL8nextNotev+0x54>
    12a0:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZL9getNumberv>
    12a4:	90 93 0b 01 	sts	0x010B, r25
    12a8:	80 93 0a 01 	sts	0x010A, r24
    12ac:	5d cf       	rjmp	.-326    	; 0x1168 <_ZL8nextNotev+0x54>
    12ae:	70 92 03 01 	sts	0x0103, r7
    12b2:	10 93 07 01 	sts	0x0107, r17
    12b6:	00 93 06 01 	sts	0x0106, r16
    12ba:	f0 92 05 01 	sts	0x0105, r15
    12be:	e0 92 04 01 	sts	0x0104, r14
    12c2:	d0 92 09 01 	sts	0x0109, r13
    12c6:	c0 92 08 01 	sts	0x0108, r12
    12ca:	90 92 0b 01 	sts	0x010B, r9
    12ce:	80 92 0a 01 	sts	0x010A, r8
    12d2:	10 92 4d 01 	sts	0x014D, r1
    12d6:	44 e0       	ldi	r20, 0x04	; 4
    12d8:	b4 2e       	mov	r11, r20
    12da:	46 cf       	rjmp	.-372    	; 0x1168 <_ZL8nextNotev+0x54>
    12dc:	10 92 4c 01 	sts	0x014C, r1
    12e0:	10 92 4b 01 	sts	0x014B, r1
    12e4:	63 c0       	rjmp	.+198    	; 0x13ac <_ZL8nextNotev+0x298>
    12e6:	ee 24       	eor	r14, r14
    12e8:	89 e0       	ldi	r24, 0x09	; 9
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <_ZL8nextNotev+0x1dc>
    12ec:	ee 24       	eor	r14, r14
    12ee:	8b e0       	ldi	r24, 0x0B	; 11
    12f0:	9c e0       	ldi	r25, 0x0C	; 12
    12f2:	b9 9e       	mul	r11, r25
    12f4:	b0 2c       	mov	r11, r0
    12f6:	11 24       	eor	r1, r1
    12f8:	b8 0e       	add	r11, r24
    12fa:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZL16currentCharacterv>
    12fe:	8b 32       	cpi	r24, 0x2B	; 43
    1300:	11 f0       	breq	.+4      	; 0x1306 <_ZL8nextNotev+0x1f2>
    1302:	83 32       	cpi	r24, 0x23	; 35
    1304:	b9 f4       	brne	.+46     	; 0x1334 <_ZL8nextNotev+0x220>
    1306:	80 91 4b 01 	lds	r24, 0x014B
    130a:	90 91 4c 01 	lds	r25, 0x014C
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	90 93 4c 01 	sts	0x014C, r25
    1314:	80 93 4b 01 	sts	0x014B, r24
    1318:	b3 94       	inc	r11
    131a:	ef cf       	rjmp	.-34     	; 0x12fa <_ZL8nextNotev+0x1e6>
    131c:	80 91 4b 01 	lds	r24, 0x014B
    1320:	90 91 4c 01 	lds	r25, 0x014C
    1324:	01 96       	adiw	r24, 0x01	; 1
    1326:	90 93 4c 01 	sts	0x014C, r25
    132a:	80 93 4b 01 	sts	0x014B, r24
    132e:	ba 94       	dec	r11
    1330:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZL16currentCharacterv>
    1334:	8d 32       	cpi	r24, 0x2D	; 45
    1336:	91 f3       	breq	.-28     	; 0x131c <_ZL8nextNotev+0x208>
    1338:	c0 91 08 01 	lds	r28, 0x0108
    133c:	d0 91 09 01 	lds	r29, 0x0109
    1340:	81 53       	subi	r24, 0x31	; 49
    1342:	88 30       	cpi	r24, 0x08	; 8
    1344:	58 f4       	brcc	.+22     	; 0x135c <_ZL8nextNotev+0x248>
    1346:	c0 91 06 01 	lds	r28, 0x0106
    134a:	d0 91 07 01 	lds	r29, 0x0107
    134e:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZL9getNumberv>
    1352:	bc 01       	movw	r22, r24
    1354:	ce 01       	movw	r24, r28
    1356:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodhi4>
    135a:	eb 01       	movw	r28, r22
    135c:	8e 01       	movw	r16, r28
    135e:	0b c0       	rjmp	.+22     	; 0x1376 <_ZL8nextNotev+0x262>
    1360:	80 91 4b 01 	lds	r24, 0x014B
    1364:	90 91 4c 01 	lds	r25, 0x014C
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	90 93 4c 01 	sts	0x014C, r25
    136e:	80 93 4b 01 	sts	0x014B, r24
    1372:	c0 0f       	add	r28, r16
    1374:	d1 1f       	adc	r29, r17
    1376:	16 95       	lsr	r17
    1378:	07 95       	ror	r16
    137a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZL16currentCharacterv>
    137e:	8e 32       	cpi	r24, 0x2E	; 46
    1380:	79 f3       	breq	.-34     	; 0x1360 <_ZL8nextNotev+0x24c>
    1382:	80 91 4d 01 	lds	r24, 0x014D
    1386:	88 23       	and	r24, r24
    1388:	39 f0       	breq	.+14     	; 0x1398 <_ZL8nextNotev+0x284>
    138a:	ce 01       	movw	r24, r28
    138c:	96 95       	lsr	r25
    138e:	87 95       	ror	r24
    1390:	80 93 4e 01 	sts	0x014E, r24
    1394:	c8 1b       	sub	r28, r24
    1396:	d1 09       	sbc	r29, r1
    1398:	ee 20       	and	r14, r14
    139a:	11 f0       	breq	.+4      	; 0x13a0 <_ZL8nextNotev+0x28c>
    139c:	bb 24       	eor	r11, r11
    139e:	ba 94       	dec	r11
    13a0:	8b 2d       	mov	r24, r11
    13a2:	be 01       	movw	r22, r28
    13a4:	40 91 0a 01 	lds	r20, 0x010A
    13a8:	0e 94 34 08 	call	0x1068	; 0x1068 <_ZN15OrangutanBuzzer8playNoteEhjh>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	ed e0       	ldi	r30, 0x0D	; 13
    13b2:	0c 94 37 14 	jmp	0x286e	; 0x286e <__epilogue_restores__+0xa>

000013b6 <__vector_13>:
    13b6:	1f 92       	push	r1
    13b8:	0f 92       	push	r0
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	0f 92       	push	r0
    13be:	11 24       	eor	r1, r1
    13c0:	2f 93       	push	r18
    13c2:	3f 93       	push	r19
    13c4:	4f 93       	push	r20
    13c6:	5f 93       	push	r21
    13c8:	6f 93       	push	r22
    13ca:	7f 93       	push	r23
    13cc:	8f 93       	push	r24
    13ce:	9f 93       	push	r25
    13d0:	af 93       	push	r26
    13d2:	bf 93       	push	r27
    13d4:	ef 93       	push	r30
    13d6:	ff 93       	push	r31
    13d8:	80 91 51 01 	lds	r24, 0x0151
    13dc:	90 91 52 01 	lds	r25, 0x0152
    13e0:	9c 01       	movw	r18, r24
    13e2:	21 50       	subi	r18, 0x01	; 1
    13e4:	30 40       	sbci	r19, 0x00	; 0
    13e6:	30 93 52 01 	sts	0x0152, r19
    13ea:	20 93 51 01 	sts	0x0151, r18
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	11 f5       	brne	.+68     	; 0x1436 <__vector_13+0x80>
    13f2:	10 92 6f 00 	sts	0x006F, r1
    13f6:	78 94       	sei
    13f8:	80 91 81 00 	lds	r24, 0x0081
    13fc:	88 7f       	andi	r24, 0xF8	; 248
    13fe:	81 60       	ori	r24, 0x01	; 1
    1400:	80 93 81 00 	sts	0x0081, r24
    1404:	80 e1       	ldi	r24, 0x10	; 16
    1406:	97 e2       	ldi	r25, 0x27	; 39
    1408:	90 93 89 00 	sts	0x0089, r25
    140c:	80 93 88 00 	sts	0x0088, r24
    1410:	10 92 8b 00 	sts	0x008B, r1
    1414:	10 92 8a 00 	sts	0x008A, r1
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	80 93 02 01 	sts	0x0102, r24
    141e:	80 91 4b 01 	lds	r24, 0x014B
    1422:	90 91 4c 01 	lds	r25, 0x014C
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	31 f0       	breq	.+12     	; 0x1436 <__vector_13+0x80>
    142a:	80 91 50 01 	lds	r24, 0x0150
    142e:	88 23       	and	r24, r24
    1430:	11 f4       	brne	.+4      	; 0x1436 <__vector_13+0x80>
    1432:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZL8nextNotev>
    1436:	ff 91       	pop	r31
    1438:	ef 91       	pop	r30
    143a:	bf 91       	pop	r27
    143c:	af 91       	pop	r26
    143e:	9f 91       	pop	r25
    1440:	8f 91       	pop	r24
    1442:	7f 91       	pop	r23
    1444:	6f 91       	pop	r22
    1446:	5f 91       	pop	r21
    1448:	4f 91       	pop	r20
    144a:	3f 91       	pop	r19
    144c:	2f 91       	pop	r18
    144e:	0f 90       	pop	r0
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	0f 90       	pop	r0
    1454:	1f 90       	pop	r1
    1456:	18 95       	reti

00001458 <_ZN15OrangutanBuzzer9isPlayingEv>:
    1458:	80 91 02 01 	lds	r24, 0x0102
    145c:	88 23       	and	r24, r24
    145e:	51 f0       	breq	.+20     	; 0x1474 <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	20 91 4b 01 	lds	r18, 0x014B
    1466:	30 91 4c 01 	lds	r19, 0x014C
    146a:	21 15       	cp	r18, r1
    146c:	31 05       	cpc	r19, r1
    146e:	19 f4       	brne	.+6      	; 0x1476 <_ZN15OrangutanBuzzer9isPlayingEv+0x1e>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	08 95       	ret
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	08 95       	ret

00001478 <is_playing>:
    1478:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_ZN15OrangutanBuzzer9isPlayingEv>
    147c:	08 95       	ret

0000147e <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    147e:	10 92 6f 00 	sts	0x006F, r1
    1482:	90 93 4c 01 	sts	0x014C, r25
    1486:	80 93 4b 01 	sts	0x014B, r24
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	80 93 4f 01 	sts	0x014F, r24
    1490:	10 92 4e 01 	sts	0x014E, r1
    1494:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZL8nextNotev>
    1498:	08 95       	ret

0000149a <play_from_program_space>:
    149a:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    149e:	08 95       	ret

000014a0 <delayMicroseconds.clone.0>:
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	6f 93       	push	r22
    14a6:	64 e0       	ldi	r22, 0x04	; 4
    14a8:	6a 95       	dec	r22
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <delayMicroseconds.clone.0+0x8>
    14ac:	6f 91       	pop	r22
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	c9 f7       	brne	.-14     	; 0x14a4 <delayMicroseconds.clone.0+0x4>
    14b2:	08 95       	ret

000014b4 <_ZN12OrangutanLCD8busyWaitEv>:
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	1a b1       	in	r17, 0x0a	; 10
    14be:	57 98       	cbi	0x0a, 7	; 10
    14c0:	5a 98       	cbi	0x0b, 2	; 11
    14c2:	28 9a       	sbi	0x05, 0	; 5
    14c4:	c0 e0       	ldi	r28, 0x00	; 0
    14c6:	d0 e0       	ldi	r29, 0x00	; 0
    14c8:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <delayMicroseconds.clone.0>
    14cc:	5c 9a       	sbi	0x0b, 4	; 11
    14ce:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <delayMicroseconds.clone.0>
    14d2:	09 b1       	in	r16, 0x09	; 9
    14d4:	5c 98       	cbi	0x0b, 4	; 11
    14d6:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <delayMicroseconds.clone.0>
    14da:	5c 9a       	sbi	0x0b, 4	; 11
    14dc:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <delayMicroseconds.clone.0>
    14e0:	5c 98       	cbi	0x0b, 4	; 11
    14e2:	07 ff       	sbrs	r16, 7
    14e4:	11 c0       	rjmp	.+34     	; 0x1508 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    14e6:	24 96       	adiw	r28, 0x04	; 4
    14e8:	9e 01       	movw	r18, r28
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	80 91 57 01 	lds	r24, 0x0157
    14f2:	90 91 58 01 	lds	r25, 0x0158
    14f6:	a0 91 59 01 	lds	r26, 0x0159
    14fa:	b0 91 5a 01 	lds	r27, 0x015A
    14fe:	28 17       	cp	r18, r24
    1500:	39 07       	cpc	r19, r25
    1502:	4a 07       	cpc	r20, r26
    1504:	5b 07       	cpc	r21, r27
    1506:	00 f3       	brcs	.-64     	; 0x14c8 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1508:	1a b9       	out	0x0a, r17	; 10
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	08 95       	ret

00001514 <_ZN12OrangutanLCD8sendDataEh>:
    1514:	65 b1       	in	r22, 0x05	; 5
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	ac 01       	movw	r20, r24
    151a:	41 70       	andi	r20, 0x01	; 1
    151c:	50 70       	andi	r21, 0x00	; 0
    151e:	44 0f       	add	r20, r20
    1520:	55 1f       	adc	r21, r21
    1522:	9c 01       	movw	r18, r24
    1524:	26 70       	andi	r18, 0x06	; 6
    1526:	30 70       	andi	r19, 0x00	; 0
    1528:	53 e0       	ldi	r21, 0x03	; 3
    152a:	22 0f       	add	r18, r18
    152c:	33 1f       	adc	r19, r19
    152e:	5a 95       	dec	r21
    1530:	e1 f7       	brne	.-8      	; 0x152a <_ZN12OrangutanLCD8sendDataEh+0x16>
    1532:	24 2b       	or	r18, r20
    1534:	6d 7c       	andi	r22, 0xCD	; 205
    1536:	26 2b       	or	r18, r22
    1538:	25 b9       	out	0x05, r18	; 5
    153a:	2b b1       	in	r18, 0x0b	; 11
    153c:	88 70       	andi	r24, 0x08	; 8
    153e:	90 70       	andi	r25, 0x00	; 0
    1540:	34 e0       	ldi	r19, 0x04	; 4
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	3a 95       	dec	r19
    1548:	e1 f7       	brne	.-8      	; 0x1542 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    154a:	2f 77       	andi	r18, 0x7F	; 127
    154c:	28 2b       	or	r18, r24
    154e:	2b b9       	out	0x0b, r18	; 11
    1550:	5c 9a       	sbi	0x0b, 4	; 11
    1552:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <delayMicroseconds.clone.0>
    1556:	5c 98       	cbi	0x0b, 4	; 11
    1558:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <delayMicroseconds.clone.0>
    155c:	08 95       	ret

0000155e <_ZN12OrangutanLCD4sendEhhh>:
    155e:	a2 e0       	ldi	r26, 0x02	; 2
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e5 eb       	ldi	r30, 0xB5	; 181
    1564:	fa e0       	ldi	r31, 0x0A	; 10
    1566:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__prologue_saves__+0x16>
    156a:	18 2f       	mov	r17, r24
    156c:	4a 83       	std	Y+2, r20	; 0x02
    156e:	69 83       	std	Y+1, r22	; 0x01
    1570:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <_ZN12OrangutanLCD4initEv>
    1574:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <_ZN12OrangutanLCD8busyWaitEv>
    1578:	f4 b0       	in	r15, 0x04	; 4
    157a:	05 b1       	in	r16, 0x05	; 5
    157c:	da b0       	in	r13, 0x0a	; 10
    157e:	eb b0       	in	r14, 0x0b	; 11
    1580:	28 98       	cbi	0x05, 0	; 5
    1582:	69 81       	ldd	r22, Y+1	; 0x01
    1584:	4a 81       	ldd	r20, Y+2	; 0x02
    1586:	66 23       	and	r22, r22
    1588:	11 f0       	breq	.+4      	; 0x158e <_ZN12OrangutanLCD4sendEhhh+0x30>
    158a:	5a 9a       	sbi	0x0b, 2	; 11
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <_ZN12OrangutanLCD4sendEhhh+0x32>
    158e:	5a 98       	cbi	0x0b, 2	; 11
    1590:	84 b1       	in	r24, 0x04	; 4
    1592:	82 63       	ori	r24, 0x32	; 50
    1594:	84 b9       	out	0x04, r24	; 4
    1596:	57 9a       	sbi	0x0a, 7	; 10
    1598:	41 30       	cpi	r20, 0x01	; 1
    159a:	29 f0       	breq	.+10     	; 0x15a6 <_ZN12OrangutanLCD4sendEhhh+0x48>
    159c:	81 2f       	mov	r24, r17
    159e:	82 95       	swap	r24
    15a0:	8f 70       	andi	r24, 0x0F	; 15
    15a2:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_ZN12OrangutanLCD8sendDataEh>
    15a6:	81 2f       	mov	r24, r17
    15a8:	8f 70       	andi	r24, 0x0F	; 15
    15aa:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_ZN12OrangutanLCD8sendDataEh>
    15ae:	da b8       	out	0x0a, r13	; 10
    15b0:	eb b8       	out	0x0b, r14	; 11
    15b2:	f4 b8       	out	0x04, r15	; 4
    15b4:	05 b9       	out	0x05, r16	; 5
    15b6:	22 96       	adiw	r28, 0x02	; 2
    15b8:	e7 e0       	ldi	r30, 0x07	; 7
    15ba:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__epilogue_restores__+0x16>

000015be <_ZN12OrangutanLCD8send_cmdEh>:
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	42 e0       	ldi	r20, 0x02	; 2
    15c2:	0e 94 af 0a 	call	0x155e	; 0x155e <_ZN12OrangutanLCD4sendEhhh>
    15c6:	08 95       	ret

000015c8 <_ZN12OrangutanLCD9send_dataEh>:
    15c8:	61 e0       	ldi	r22, 0x01	; 1
    15ca:	42 e0       	ldi	r20, 0x02	; 2
    15cc:	0e 94 af 0a 	call	0x155e	; 0x155e <_ZN12OrangutanLCD4sendEhhh>
    15d0:	08 95       	ret

000015d2 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    15d2:	ef 92       	push	r14
    15d4:	ff 92       	push	r15
    15d6:	1f 93       	push	r17
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	0f 92       	push	r0
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	66 0f       	add	r22, r22
    15e4:	66 0f       	add	r22, r22
    15e6:	66 0f       	add	r22, r22
    15e8:	48 2f       	mov	r20, r24
    15ea:	59 2f       	mov	r21, r25
    15ec:	7a 01       	movw	r14, r20
    15ee:	10 e0       	ldi	r17, 0x00	; 0
    15f0:	81 2f       	mov	r24, r17
    15f2:	86 0f       	add	r24, r22
    15f4:	80 64       	ori	r24, 0x40	; 64
    15f6:	69 83       	std	Y+1, r22	; 0x01
    15f8:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN12OrangutanLCD8send_cmdEh>
    15fc:	f7 01       	movw	r30, r14
    15fe:	84 91       	lpm	r24, Z
    1600:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN12OrangutanLCD9send_dataEh>
    1604:	1f 5f       	subi	r17, 0xFF	; 255
    1606:	08 94       	sec
    1608:	e1 1c       	adc	r14, r1
    160a:	f1 1c       	adc	r15, r1
    160c:	69 81       	ldd	r22, Y+1	; 0x01
    160e:	18 30       	cpi	r17, 0x08	; 8
    1610:	79 f7       	brne	.-34     	; 0x15f0 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x1e>
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	1f 91       	pop	r17
    161a:	ff 90       	pop	r15
    161c:	ef 90       	pop	r14
    161e:	08 95       	ret

00001620 <lcd_load_custom_character>:
    1620:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    1624:	08 95       	ret

00001626 <print_character>:
    1626:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN12OrangutanLCD9send_dataEh>
    162a:	08 95       	ret

0000162c <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	41 e0       	ldi	r20, 0x01	; 1
    1630:	0e 94 af 0a 	call	0x155e	; 0x155e <_ZN12OrangutanLCD4sendEhhh>
    1634:	08 95       	ret

00001636 <_ZN12OrangutanLCD5init2Ev>:
    1636:	80 e1       	ldi	r24, 0x10	; 16
    1638:	97 e2       	ldi	r25, 0x27	; 39
    163a:	a0 e0       	ldi	r26, 0x00	; 0
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	80 93 57 01 	sts	0x0157, r24
    1642:	90 93 58 01 	sts	0x0158, r25
    1646:	a0 93 59 01 	sts	0x0159, r26
    164a:	b0 93 5a 01 	sts	0x015A, r27
    164e:	52 9a       	sbi	0x0a, 2	; 10
    1650:	20 9a       	sbi	0x04, 0	; 4
    1652:	54 9a       	sbi	0x0a, 4	; 10
    1654:	8e e1       	ldi	r24, 0x1E	; 30
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1662:	86 e0       	ldi	r24, 0x06	; 6
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
    1678:	83 e0       	ldi	r24, 0x03	; 3
    167a:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
    1686:	82 e0       	ldi	r24, 0x02	; 2
    1688:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    168c:	82 e0       	ldi	r24, 0x02	; 2
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
    1694:	88 e2       	ldi	r24, 0x28	; 40
    1696:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN12OrangutanLCD8send_cmdEh>
    169a:	88 e0       	ldi	r24, 0x08	; 8
    169c:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN12OrangutanLCD8send_cmdEh>
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN12OrangutanLCD8send_cmdEh>
    16a6:	86 e0       	ldi	r24, 0x06	; 6
    16a8:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN12OrangutanLCD8send_cmdEh>
    16ac:	8c e0       	ldi	r24, 0x0C	; 12
    16ae:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN12OrangutanLCD8send_cmdEh>
    16b2:	08 95       	ret

000016b4 <_ZN12OrangutanLCD4initEv>:
    16b4:	80 91 5b 01 	lds	r24, 0x015B
    16b8:	88 23       	and	r24, r24
    16ba:	29 f4       	brne	.+10     	; 0x16c6 <_ZN12OrangutanLCD4initEv+0x12>
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	80 93 5b 01 	sts	0x015B, r24
    16c2:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN12OrangutanLCD5init2Ev>
    16c6:	08 95       	ret

000016c8 <_ZN12OrangutanLCD5clearEv>:
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN12OrangutanLCD8send_cmdEh>
    16ce:	80 91 53 01 	lds	r24, 0x0153
    16d2:	90 91 54 01 	lds	r25, 0x0154
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	11 f1       	breq	.+68     	; 0x171e <_ZN12OrangutanLCD5clearEv+0x56>
    16da:	a0 e0       	ldi	r26, 0x00	; 0
    16dc:	b0 e2       	ldi	r27, 0x20	; 32
    16de:	08 c0       	rjmp	.+16     	; 0x16f0 <_ZN12OrangutanLCD5clearEv+0x28>
    16e0:	e0 91 53 01 	lds	r30, 0x0153
    16e4:	f0 91 54 01 	lds	r31, 0x0154
    16e8:	e2 0f       	add	r30, r18
    16ea:	f3 1f       	adc	r31, r19
    16ec:	b0 83       	st	Z, r27
    16ee:	af 5f       	subi	r26, 0xFF	; 255
    16f0:	2a 2f       	mov	r18, r26
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	80 91 24 01 	lds	r24, 0x0124
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	60 91 25 01 	lds	r22, 0x0125
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	86 9f       	mul	r24, r22
    1704:	a0 01       	movw	r20, r0
    1706:	87 9f       	mul	r24, r23
    1708:	50 0d       	add	r21, r0
    170a:	96 9f       	mul	r25, r22
    170c:	50 0d       	add	r21, r0
    170e:	11 24       	eor	r1, r1
    1710:	24 17       	cp	r18, r20
    1712:	35 07       	cpc	r19, r21
    1714:	2c f3       	brlt	.-54     	; 0x16e0 <_ZN12OrangutanLCD5clearEv+0x18>
    1716:	10 92 56 01 	sts	0x0156, r1
    171a:	10 92 55 01 	sts	0x0155, r1
    171e:	08 95       	ret

00001720 <clear>:
    1720:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN12OrangutanLCD5clearEv>
    1724:	08 95       	ret

00001726 <_ZN12OrangutanLCD5printEPKc>:
    1726:	ef 92       	push	r14
    1728:	ff 92       	push	r15
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	e8 2e       	mov	r14, r24
    1730:	e7 01       	movw	r28, r14
    1732:	7e 01       	movw	r14, r28
    1734:	f9 2e       	mov	r15, r25
    1736:	e7 01       	movw	r28, r14
    1738:	02 c0       	rjmp	.+4      	; 0x173e <_ZN12OrangutanLCD5printEPKc+0x18>
    173a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN12OrangutanLCD9send_dataEh>
    173e:	89 91       	ld	r24, Y+
    1740:	88 23       	and	r24, r24
    1742:	d9 f7       	brne	.-10     	; 0x173a <_ZN12OrangutanLCD5printEPKc+0x14>
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	ff 90       	pop	r15
    174a:	ef 90       	pop	r14
    174c:	08 95       	ret

0000174e <print>:
    174e:	0e 94 93 0b 	call	0x1726	; 0x1726 <_ZN12OrangutanLCD5printEPKc>
    1752:	08 95       	ret

00001754 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	ec 01       	movw	r28, r24
    175a:	03 c0       	rjmp	.+6      	; 0x1762 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    175c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN12OrangutanLCD9send_dataEh>
    1760:	21 96       	adiw	r28, 0x01	; 1
    1762:	fe 01       	movw	r30, r28
    1764:	84 91       	lpm	r24, Z
    1766:	88 23       	and	r24, r24
    1768:	c9 f7       	brne	.-14     	; 0x175c <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	08 95       	ret

00001770 <print_from_program_space>:
    1770:	0e 94 aa 0b 	call	0x1754	; 0x1754 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    1774:	08 95       	ret

00001776 <_ZN12OrangutanLCD5printEm>:
    1776:	aa e0       	ldi	r26, 0x0A	; 10
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e1 ec       	ldi	r30, 0xC1	; 193
    177c:	fb e0       	ldi	r31, 0x0B	; 11
    177e:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__prologue_saves__+0x10>
    1782:	9b 01       	movw	r18, r22
    1784:	ac 01       	movw	r20, r24
    1786:	1a e0       	ldi	r17, 0x0A	; 10
    1788:	ea e0       	ldi	r30, 0x0A	; 10
    178a:	ce 2e       	mov	r12, r30
    178c:	d1 2c       	mov	r13, r1
    178e:	e1 2c       	mov	r14, r1
    1790:	f1 2c       	mov	r15, r1
    1792:	5e 01       	movw	r10, r28
    1794:	08 94       	sec
    1796:	a1 1c       	adc	r10, r1
    1798:	b1 1c       	adc	r11, r1
    179a:	02 2f       	mov	r16, r18
    179c:	ca 01       	movw	r24, r20
    179e:	b9 01       	movw	r22, r18
    17a0:	a7 01       	movw	r20, r14
    17a2:	96 01       	movw	r18, r12
    17a4:	0e 94 ca 13 	call	0x2794	; 0x2794 <__udivmodsi4>
    17a8:	11 50       	subi	r17, 0x01	; 1
    17aa:	f5 01       	movw	r30, r10
    17ac:	e1 0f       	add	r30, r17
    17ae:	f1 1d       	adc	r31, r1
    17b0:	00 5d       	subi	r16, 0xD0	; 208
    17b2:	92 2f       	mov	r25, r18
    17b4:	99 0f       	add	r25, r25
    17b6:	89 2f       	mov	r24, r25
    17b8:	88 0f       	add	r24, r24
    17ba:	88 0f       	add	r24, r24
    17bc:	89 0f       	add	r24, r25
    17be:	08 1b       	sub	r16, r24
    17c0:	00 83       	st	Z, r16
    17c2:	21 15       	cp	r18, r1
    17c4:	31 05       	cpc	r19, r1
    17c6:	41 05       	cpc	r20, r1
    17c8:	51 05       	cpc	r21, r1
    17ca:	39 f7       	brne	.-50     	; 0x179a <_ZN12OrangutanLCD5printEm+0x24>
    17cc:	08 c0       	rjmp	.+16     	; 0x17de <_ZN12OrangutanLCD5printEm+0x68>
    17ce:	f6 01       	movw	r30, r12
    17d0:	e1 0f       	add	r30, r17
    17d2:	f1 1d       	adc	r31, r1
    17d4:	80 81       	ld	r24, Z
    17d6:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN12OrangutanLCD9send_dataEh>
    17da:	1f 5f       	subi	r17, 0xFF	; 255
    17dc:	04 c0       	rjmp	.+8      	; 0x17e6 <_ZN12OrangutanLCD5printEm+0x70>
    17de:	6e 01       	movw	r12, r28
    17e0:	08 94       	sec
    17e2:	c1 1c       	adc	r12, r1
    17e4:	d1 1c       	adc	r13, r1
    17e6:	1a 30       	cpi	r17, 0x0A	; 10
    17e8:	90 f3       	brcs	.-28     	; 0x17ce <_ZN12OrangutanLCD5printEm+0x58>
    17ea:	2a 96       	adiw	r28, 0x0a	; 10
    17ec:	ea e0       	ldi	r30, 0x0A	; 10
    17ee:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <__epilogue_restores__+0x10>

000017f2 <_ZN12OrangutanLCD5printEl>:
    17f2:	ef 92       	push	r14
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	7b 01       	movw	r14, r22
    17fc:	8c 01       	movw	r16, r24
    17fe:	97 ff       	sbrs	r25, 7
    1800:	0b c0       	rjmp	.+22     	; 0x1818 <_ZN12OrangutanLCD5printEl+0x26>
    1802:	10 95       	com	r17
    1804:	00 95       	com	r16
    1806:	f0 94       	com	r15
    1808:	e0 94       	com	r14
    180a:	e1 1c       	adc	r14, r1
    180c:	f1 1c       	adc	r15, r1
    180e:	01 1d       	adc	r16, r1
    1810:	11 1d       	adc	r17, r1
    1812:	8d e2       	ldi	r24, 0x2D	; 45
    1814:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN12OrangutanLCD9send_dataEh>
    1818:	c8 01       	movw	r24, r16
    181a:	b7 01       	movw	r22, r14
    181c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <_ZN12OrangutanLCD5printEm>
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	ff 90       	pop	r15
    1826:	ef 90       	pop	r14
    1828:	08 95       	ret

0000182a <print_long>:
    182a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_ZN12OrangutanLCD5printEl>
    182e:	08 95       	ret

00001830 <_ZN12OrangutanLCD6gotoXYEhh>:
    1830:	a5 e0       	ldi	r26, 0x05	; 5
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	ee e1       	ldi	r30, 0x1E	; 30
    1836:	fc e0       	ldi	r31, 0x0C	; 12
    1838:	0c 94 25 14 	jmp	0x284a	; 0x284a <__prologue_saves__+0x1e>
    183c:	18 2f       	mov	r17, r24
    183e:	80 e8       	ldi	r24, 0x80	; 128
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	80 ec       	ldi	r24, 0xC0	; 192
    1844:	8a 83       	std	Y+2, r24	; 0x02
    1846:	84 e9       	ldi	r24, 0x94	; 148
    1848:	8b 83       	std	Y+3, r24	; 0x03
    184a:	84 ed       	ldi	r24, 0xD4	; 212
    184c:	8c 83       	std	Y+4, r24	; 0x04
    184e:	fe 01       	movw	r30, r28
    1850:	e6 0f       	add	r30, r22
    1852:	f1 1d       	adc	r31, r1
    1854:	81 81       	ldd	r24, Z+1	; 0x01
    1856:	81 0f       	add	r24, r17
    1858:	6d 83       	std	Y+5, r22	; 0x05
    185a:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN12OrangutanLCD8send_cmdEh>
    185e:	10 93 56 01 	sts	0x0156, r17
    1862:	6d 81       	ldd	r22, Y+5	; 0x05
    1864:	60 93 55 01 	sts	0x0155, r22
    1868:	25 96       	adiw	r28, 0x05	; 5
    186a:	e3 e0       	ldi	r30, 0x03	; 3
    186c:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__epilogue_restores__+0x1e>

00001870 <lcd_goto_xy>:
    1870:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN12OrangutanLCD6gotoXYEhh>
    1874:	08 95       	ret

00001876 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    1876:	fc 01       	movw	r30, r24
    1878:	11 82       	std	Z+1, r1	; 0x01
    187a:	10 82       	st	Z, r1
    187c:	13 82       	std	Z+3, r1	; 0x03
    187e:	12 82       	std	Z+2, r1	; 0x02
    1880:	15 82       	std	Z+5, r1	; 0x05
    1882:	14 82       	std	Z+4, r1	; 0x04
    1884:	16 82       	std	Z+6, r1	; 0x06
    1886:	68 30       	cpi	r22, 0x08	; 8
    1888:	68 f4       	brcc	.+26     	; 0x18a4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    188a:	89 e2       	ldi	r24, 0x29	; 41
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	91 83       	std	Z+1, r25	; 0x01
    1890:	80 83       	st	Z, r24
    1892:	8b e2       	ldi	r24, 0x2B	; 43
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	93 83       	std	Z+3, r25	; 0x03
    1898:	82 83       	std	Z+2, r24	; 0x02
    189a:	8a e2       	ldi	r24, 0x2A	; 42
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	95 83       	std	Z+5, r25	; 0x05
    18a0:	84 83       	std	Z+4, r24	; 0x04
    18a2:	11 c0       	rjmp	.+34     	; 0x18c6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x50>
    18a4:	6e 30       	cpi	r22, 0x0E	; 14
    18a6:	c0 f4       	brcc	.+48     	; 0x18d8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x62>
    18a8:	83 e2       	ldi	r24, 0x23	; 35
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
    18b0:	85 e2       	ldi	r24, 0x25	; 37
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	93 83       	std	Z+3, r25	; 0x03
    18b6:	82 83       	std	Z+2, r24	; 0x02
    18b8:	84 e2       	ldi	r24, 0x24	; 36
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	95 83       	std	Z+5, r25	; 0x05
    18be:	84 83       	std	Z+4, r24	; 0x04
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	68 50       	subi	r22, 0x08	; 8
    18c4:	70 40       	sbci	r23, 0x00	; 0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x5a>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	6a 95       	dec	r22
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x56>
    18d4:	86 83       	std	Z+6, r24	; 0x06
    18d6:	08 95       	ret
    18d8:	65 31       	cpi	r22, 0x15	; 21
    18da:	b8 f4       	brcc	.+46     	; 0x190a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x94>
    18dc:	86 e2       	ldi	r24, 0x26	; 38
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
    18e4:	88 e2       	ldi	r24, 0x28	; 40
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	93 83       	std	Z+3, r25	; 0x03
    18ea:	82 83       	std	Z+2, r24	; 0x02
    18ec:	87 e2       	ldi	r24, 0x27	; 39
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	95 83       	std	Z+5, r25	; 0x05
    18f2:	84 83       	std	Z+4, r24	; 0x04
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	6e 50       	subi	r22, 0x0E	; 14
    18f8:	70 40       	sbci	r23, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8e>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	6a 95       	dec	r22
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x8a>
    1908:	86 83       	std	Z+6, r24	; 0x06
    190a:	08 95       	ret

0000190c <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>:
    190c:	fc 01       	movw	r30, r24
    190e:	a4 81       	ldd	r26, Z+4	; 0x04
    1910:	b5 81       	ldd	r27, Z+5	; 0x05
    1912:	86 81       	ldd	r24, Z+6	; 0x06
    1914:	66 23       	and	r22, r22
    1916:	21 f0       	breq	.+8      	; 0x1920 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh+0x14>
    1918:	9c 91       	ld	r25, X
    191a:	98 2b       	or	r25, r24
    191c:	9c 93       	st	X, r25
    191e:	08 95       	ret
    1920:	9c 91       	ld	r25, X
    1922:	80 95       	com	r24
    1924:	89 23       	and	r24, r25
    1926:	8c 93       	st	X, r24
    1928:	08 95       	ret

0000192a <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>:
    192a:	fc 01       	movw	r30, r24
    192c:	6f 3f       	cpi	r22, 0xFF	; 255
    192e:	31 f4       	brne	.+12     	; 0x193c <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x12>
    1930:	a2 81       	ldd	r26, Z+2	; 0x02
    1932:	b3 81       	ldd	r27, Z+3	; 0x03
    1934:	8c 91       	ld	r24, X
    1936:	96 81       	ldd	r25, Z+6	; 0x06
    1938:	89 27       	eor	r24, r25
    193a:	0c c0       	rjmp	.+24     	; 0x1954 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x2a>
    193c:	a2 81       	ldd	r26, Z+2	; 0x02
    193e:	b3 81       	ldd	r27, Z+3	; 0x03
    1940:	86 81       	ldd	r24, Z+6	; 0x06
    1942:	66 23       	and	r22, r22
    1944:	21 f0       	breq	.+8      	; 0x194e <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x24>
    1946:	9c 91       	ld	r25, X
    1948:	98 2b       	or	r25, r24
    194a:	9c 93       	st	X, r25
    194c:	08 95       	ret
    194e:	9c 91       	ld	r25, X
    1950:	80 95       	com	r24
    1952:	89 23       	and	r24, r25
    1954:	8c 93       	st	X, r24
    1956:	08 95       	ret

00001958 <_ZN16OrangutanDigital9setOutputEhh>:
    1958:	a7 e0       	ldi	r26, 0x07	; 7
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e2 eb       	ldi	r30, 0xB2	; 178
    195e:	fc e0       	ldi	r31, 0x0C	; 12
    1960:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__prologue_saves__+0x1a>
    1964:	28 2f       	mov	r18, r24
    1966:	f6 2e       	mov	r15, r22
    1968:	8e 01       	movw	r16, r28
    196a:	0f 5f       	subi	r16, 0xFF	; 255
    196c:	1f 4f       	sbci	r17, 0xFF	; 255
    196e:	c8 01       	movw	r24, r16
    1970:	62 2f       	mov	r22, r18
    1972:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1976:	c8 01       	movw	r24, r16
    1978:	6f 2d       	mov	r22, r15
    197a:	0e 94 95 0c 	call	0x192a	; 0x192a <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>
    197e:	c8 01       	movw	r24, r16
    1980:	61 e0       	ldi	r22, 0x01	; 1
    1982:	0e 94 86 0c 	call	0x190c	; 0x190c <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>
    1986:	27 96       	adiw	r28, 0x07	; 7
    1988:	e5 e0       	ldi	r30, 0x05	; 5
    198a:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__epilogue_restores__+0x1a>

0000198e <_ZN15OrangutanMotors5init2Ev>:
    198e:	e0 eb       	ldi	r30, 0xB0	; 176
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	83 ef       	ldi	r24, 0xF3	; 243
    1994:	80 83       	st	Z, r24
    1996:	80 81       	ld	r24, Z
    1998:	84 bd       	out	0x24, r24	; 36
    199a:	e1 eb       	ldi	r30, 0xB1	; 177
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	82 e0       	ldi	r24, 0x02	; 2
    19a0:	80 83       	st	Z, r24
    19a2:	80 81       	ld	r24, Z
    19a4:	85 bd       	out	0x25, r24	; 37
    19a6:	e4 eb       	ldi	r30, 0xB4	; 180
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	10 82       	st	Z, r1
    19ac:	80 81       	ld	r24, Z
    19ae:	e3 eb       	ldi	r30, 0xB3	; 179
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 83       	st	Z, r24
    19b4:	80 81       	ld	r24, Z
    19b6:	88 bd       	out	0x28, r24	; 40
    19b8:	88 b5       	in	r24, 0x28	; 40
    19ba:	87 bd       	out	0x27, r24	; 39
    19bc:	86 e0       	ldi	r24, 0x06	; 6
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	0e 94 ac 0c 	call	0x1958	; 0x1958 <_ZN16OrangutanDigital9setOutputEhh>
    19c4:	85 e0       	ldi	r24, 0x05	; 5
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <_ZN16OrangutanDigital9setOutputEhh>
    19cc:	8b e0       	ldi	r24, 0x0B	; 11
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	0e 94 ac 0c 	call	0x1958	; 0x1958 <_ZN16OrangutanDigital9setOutputEhh>
    19d4:	83 e0       	ldi	r24, 0x03	; 3
    19d6:	60 e0       	ldi	r22, 0x00	; 0
    19d8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <_ZN16OrangutanDigital9setOutputEhh>
    19dc:	08 95       	ret

000019de <_ZN15OrangutanMotors4initEv>:
    19de:	80 91 5c 01 	lds	r24, 0x015C
    19e2:	88 23       	and	r24, r24
    19e4:	29 f4       	brne	.+10     	; 0x19f0 <_ZN15OrangutanMotors4initEv+0x12>
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	80 93 5c 01 	sts	0x015C, r24
    19ec:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN15OrangutanMotors5init2Ev>
    19f0:	08 95       	ret

000019f2 <_ZN15OrangutanMotors10setM1SpeedEi>:
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	ec 01       	movw	r28, r24
    19f8:	0e 94 ef 0c 	call	0x19de	; 0x19de <_ZN15OrangutanMotors4initEv>
    19fc:	d7 ff       	sbrs	r29, 7
    19fe:	05 c0       	rjmp	.+10     	; 0x1a0a <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    1a00:	d0 95       	com	r29
    1a02:	c1 95       	neg	r28
    1a04:	df 4f       	sbci	r29, 0xFF	; 255
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	01 c0       	rjmp	.+2      	; 0x1a0c <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	cf 3f       	cpi	r28, 0xFF	; 255
    1a0e:	d1 05       	cpc	r29, r1
    1a10:	19 f0       	breq	.+6      	; 0x1a18 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1a12:	14 f0       	brlt	.+4      	; 0x1a18 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1a14:	cf ef       	ldi	r28, 0xFF	; 255
    1a16:	d0 e0       	ldi	r29, 0x00	; 0
    1a18:	88 23       	and	r24, r24
    1a1a:	19 f0       	breq	.+6      	; 0x1a22 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1a1c:	18 bc       	out	0x28, r1	; 40
    1a1e:	c7 bd       	out	0x27, r28	; 39
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1a22:	c8 bd       	out	0x28, r28	; 40
    1a24:	17 bc       	out	0x27, r1	; 39
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	08 95       	ret

00001a2c <_ZN15OrangutanMotors10setM2SpeedEi>:
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	ec 01       	movw	r28, r24
    1a32:	0e 94 ef 0c 	call	0x19de	; 0x19de <_ZN15OrangutanMotors4initEv>
    1a36:	d7 ff       	sbrs	r29, 7
    1a38:	05 c0       	rjmp	.+10     	; 0x1a44 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1a3a:	d0 95       	com	r29
    1a3c:	c1 95       	neg	r28
    1a3e:	df 4f       	sbci	r29, 0xFF	; 255
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	01 c0       	rjmp	.+2      	; 0x1a46 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	cf 3f       	cpi	r28, 0xFF	; 255
    1a48:	d1 05       	cpc	r29, r1
    1a4a:	19 f0       	breq	.+6      	; 0x1a52 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1a4c:	14 f0       	brlt	.+4      	; 0x1a52 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1a4e:	cf ef       	ldi	r28, 0xFF	; 255
    1a50:	d0 e0       	ldi	r29, 0x00	; 0
    1a52:	88 23       	and	r24, r24
    1a54:	29 f0       	breq	.+10     	; 0x1a60 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1a56:	10 92 b4 00 	sts	0x00B4, r1
    1a5a:	c0 93 b3 00 	sts	0x00B3, r28
    1a5e:	04 c0       	rjmp	.+8      	; 0x1a68 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1a60:	c0 93 b4 00 	sts	0x00B4, r28
    1a64:	10 92 b3 00 	sts	0x00B3, r1
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	08 95       	ret

00001a6e <_ZN15OrangutanMotors9setSpeedsEii>:
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	eb 01       	movw	r28, r22
    1a74:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_ZN15OrangutanMotors10setM1SpeedEi>
    1a78:	ce 01       	movw	r24, r28
    1a7a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <_ZN15OrangutanMotors10setM2SpeedEi>
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	08 95       	ret

00001a84 <set_motors>:
    1a84:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_ZN15OrangutanMotors9setSpeedsEii>
    1a88:	08 95       	ret

00001a8a <_ZN20OrangutanPushbuttons5init2Ev>:
    1a8a:	84 b1       	in	r24, 0x04	; 4
    1a8c:	8d 7c       	andi	r24, 0xCD	; 205
    1a8e:	84 b9       	out	0x04, r24	; 4
    1a90:	85 b1       	in	r24, 0x05	; 5
    1a92:	82 63       	ori	r24, 0x32	; 50
    1a94:	85 b9       	out	0x05, r24	; 5
    1a96:	85 e0       	ldi	r24, 0x05	; 5
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	6f 93       	push	r22
    1a9c:	64 e0       	ldi	r22, 0x04	; 4
    1a9e:	6a 95       	dec	r22
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1aa2:	6f 91       	pop	r22
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	c9 f7       	brne	.-14     	; 0x1a9a <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1aa8:	08 95       	ret

00001aaa <_ZN20OrangutanPushbuttons4initEv>:
    1aaa:	80 91 5d 01 	lds	r24, 0x015D
    1aae:	88 23       	and	r24, r24
    1ab0:	29 f4       	brne	.+10     	; 0x1abc <_ZN20OrangutanPushbuttons4initEv+0x12>
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	80 93 5d 01 	sts	0x015D, r24
    1ab8:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_ZN20OrangutanPushbuttons5init2Ev>
    1abc:	08 95       	ret

00001abe <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1abe:	1f 93       	push	r17
    1ac0:	18 2f       	mov	r17, r24
    1ac2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <_ZN20OrangutanPushbuttons4initEv>
    1ac6:	83 b1       	in	r24, 0x03	; 3
    1ac8:	81 23       	and	r24, r17
    1aca:	e9 f3       	breq	.-6      	; 0x1ac6 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1acc:	8a e0       	ldi	r24, 0x0A	; 10
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <delay_ms>
    1ad4:	83 b1       	in	r24, 0x03	; 3
    1ad6:	81 23       	and	r24, r17
    1ad8:	b1 f3       	breq	.-20     	; 0x1ac6 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1ada:	83 b1       	in	r24, 0x03	; 3
    1adc:	81 23       	and	r24, r17
    1ade:	1f 91       	pop	r17
    1ae0:	08 95       	ret

00001ae2 <wait_for_button_release>:
    1ae2:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    1ae6:	08 95       	ret

00001ae8 <_ZN20OrangutanPushbuttons9isPressedEh>:
    1ae8:	a1 e0       	ldi	r26, 0x01	; 1
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ea e7       	ldi	r30, 0x7A	; 122
    1aee:	fd e0       	ldi	r31, 0x0D	; 13
    1af0:	0c 94 26 14 	jmp	0x284c	; 0x284c <__prologue_saves__+0x20>
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <_ZN20OrangutanPushbuttons4initEv>
    1afa:	93 b1       	in	r25, 0x03	; 3
    1afc:	90 95       	com	r25
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	89 23       	and	r24, r25
    1b02:	21 96       	adiw	r28, 0x01	; 1
    1b04:	e2 e0       	ldi	r30, 0x02	; 2
    1b06:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__epilogue_restores__+0x20>

00001b0a <button_is_pressed>:
    1b0a:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_ZN20OrangutanPushbuttons9isPressedEh>
    1b0e:	08 95       	ret

00001b10 <_ZN13OrangutanTime17delayMicrosecondsEj>:
    1b10:	6f 93       	push	r22
    1b12:	64 e0       	ldi	r22, 0x04	; 4
    1b14:	6a 95       	dec	r22
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
    1b18:	6f 91       	pop	r22
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	c9 f7       	brne	.-14     	; 0x1b10 <_ZN13OrangutanTime17delayMicrosecondsEj>
    1b1e:	08 95       	ret

00001b20 <__vector_9>:
    1b20:	2f 92       	push	r2
    1b22:	8f 93       	push	r24
    1b24:	9f 93       	push	r25
    1b26:	2f b6       	in	r2, 0x3f	; 63
    1b28:	80 91 6b 01 	lds	r24, 0x016B
    1b2c:	90 91 6c 01 	lds	r25, 0x016C
    1b30:	01 96       	adiw	r24, 0x01	; 1
    1b32:	80 93 6b 01 	sts	0x016B, r24
    1b36:	90 93 6c 01 	sts	0x016C, r25
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	80 91 6d 01 	lds	r24, 0x016D
    1b40:	89 1f       	adc	r24, r25
    1b42:	80 93 6d 01 	sts	0x016D, r24
    1b46:	90 91 73 01 	lds	r25, 0x0173
    1b4a:	9c 5f       	subi	r25, 0xFC	; 252
    1b4c:	90 93 73 01 	sts	0x0173, r25
    1b50:	80 91 72 01 	lds	r24, 0x0172
    1b54:	80 51       	subi	r24, 0x10	; 16
    1b56:	97 42       	sbci	r25, 0x27	; 39
    1b58:	c0 f0       	brcs	.+48     	; 0x1b8a <end>
    1b5a:	90 93 73 01 	sts	0x0173, r25
    1b5e:	80 93 72 01 	sts	0x0172, r24
    1b62:	80 91 6e 01 	lds	r24, 0x016E
    1b66:	90 91 6f 01 	lds	r25, 0x016F
    1b6a:	01 96       	adiw	r24, 0x01	; 1
    1b6c:	80 93 6e 01 	sts	0x016E, r24
    1b70:	90 93 6f 01 	sts	0x016F, r25
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	80 91 70 01 	lds	r24, 0x0170
    1b7a:	89 1f       	adc	r24, r25
    1b7c:	80 93 70 01 	sts	0x0170, r24
    1b80:	80 91 71 01 	lds	r24, 0x0171
    1b84:	89 1f       	adc	r24, r25
    1b86:	80 93 71 01 	sts	0x0171, r24

00001b8a <end>:
    1b8a:	2f be       	out	0x3f, r2	; 63
    1b8c:	9f 91       	pop	r25
    1b8e:	8f 91       	pop	r24
    1b90:	2f 90       	pop	r2
    1b92:	18 95       	reti

00001b94 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	ec 01       	movw	r28, r24
    1b9a:	05 c0       	rjmp	.+10     	; 0x1ba6 <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
    1b9c:	88 ee       	ldi	r24, 0xE8	; 232
    1b9e:	93 e0       	ldi	r25, 0x03	; 3
    1ba0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <_ZN13OrangutanTime17delayMicrosecondsEj>
    1ba4:	21 97       	sbiw	r28, 0x01	; 1
    1ba6:	20 97       	sbiw	r28, 0x00	; 0
    1ba8:	c9 f7       	brne	.-14     	; 0x1b9c <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	08 95       	ret

00001bb0 <delay_ms>:
    1bb0:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <_ZN13OrangutanTime17delayMillisecondsEj>
    1bb4:	08 95       	ret

00001bb6 <_ZN13OrangutanTime5init2Ev>:
    1bb6:	e0 e7       	ldi	r30, 0x70	; 112
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	8e 7f       	andi	r24, 0xFE	; 254
    1bbe:	80 83       	st	Z, r24
    1bc0:	a0 eb       	ldi	r26, 0xB0	; 176
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	8c 91       	ld	r24, X
    1bc6:	83 60       	ori	r24, 0x03	; 3
    1bc8:	8c 93       	st	X, r24
    1bca:	a1 eb       	ldi	r26, 0xB1	; 177
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	8c 91       	ld	r24, X
    1bd0:	80 7f       	andi	r24, 0xF0	; 240
    1bd2:	8c 93       	st	X, r24
    1bd4:	8c 91       	ld	r24, X
    1bd6:	82 60       	ori	r24, 0x02	; 2
    1bd8:	8c 93       	st	X, r24
    1bda:	b8 9a       	sbi	0x17, 0	; 23
    1bdc:	80 81       	ld	r24, Z
    1bde:	81 60       	ori	r24, 0x01	; 1
    1be0:	80 83       	st	Z, r24
    1be2:	78 94       	sei
    1be4:	08 95       	ret

00001be6 <_ZN13OrangutanTime4initEv>:
    1be6:	80 91 74 01 	lds	r24, 0x0174
    1bea:	88 23       	and	r24, r24
    1bec:	29 f4       	brne	.+10     	; 0x1bf8 <_ZN13OrangutanTime4initEv+0x12>
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	80 93 74 01 	sts	0x0174, r24
    1bf4:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <_ZN13OrangutanTime5init2Ev>
    1bf8:	08 95       	ret

00001bfa <_ZN13OrangutanTime5resetEv>:
    1bfa:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN13OrangutanTime4initEv>
    1bfe:	e0 e7       	ldi	r30, 0x70	; 112
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	8e 7f       	andi	r24, 0xFE	; 254
    1c06:	80 83       	st	Z, r24
    1c08:	10 92 6e 01 	sts	0x016E, r1
    1c0c:	10 92 6f 01 	sts	0x016F, r1
    1c10:	10 92 70 01 	sts	0x0170, r1
    1c14:	10 92 71 01 	sts	0x0171, r1
    1c18:	10 92 73 01 	sts	0x0173, r1
    1c1c:	10 92 72 01 	sts	0x0172, r1
    1c20:	80 81       	ld	r24, Z
    1c22:	81 60       	ori	r24, 0x01	; 1
    1c24:	80 83       	st	Z, r24
    1c26:	08 95       	ret

00001c28 <calibrate_line_sensors>:
    1c28:	68 2f       	mov	r22, r24
    1c2a:	85 e7       	ldi	r24, 0x75	; 117
    1c2c:	91 e0       	ldi	r25, 0x01	; 1
    1c2e:	0e 94 44 13 	call	0x2688	; 0x2688 <_ZN16PololuQTRSensors9calibrateEh>
    1c32:	08 95       	ret

00001c34 <read_line>:
    1c34:	9c 01       	movw	r18, r24
    1c36:	46 2f       	mov	r20, r22
    1c38:	85 e7       	ldi	r24, 0x75	; 117
    1c3a:	91 e0       	ldi	r25, 0x01	; 1
    1c3c:	b9 01       	movw	r22, r18
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN16PololuQTRSensors8readLineEPjhh>
    1c44:	08 95       	ret

00001c46 <_ZN9Pololu3pi4initEjh>:
    1c46:	0f 93       	push	r16
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <_ZN9Pololu3pi4initEjh+0x8>
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <_ZN9Pololu3pi4initEjh+0xa>
    1c50:	0f 92       	push	r0
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	9c 01       	movw	r18, r24
    1c58:	96 2f       	mov	r25, r22
    1c5a:	de 01       	movw	r26, r28
    1c5c:	11 96       	adiw	r26, 0x01	; 1
    1c5e:	e6 e2       	ldi	r30, 0x26	; 38
    1c60:	f1 e0       	ldi	r31, 0x01	; 1
    1c62:	85 e0       	ldi	r24, 0x05	; 5
    1c64:	01 90       	ld	r0, Z+
    1c66:	0d 92       	st	X+, r0
    1c68:	81 50       	subi	r24, 0x01	; 1
    1c6a:	e1 f7       	brne	.-8      	; 0x1c64 <_ZN9Pololu3pi4initEjh+0x1e>
    1c6c:	be 01       	movw	r22, r28
    1c6e:	6f 5f       	subi	r22, 0xFF	; 255
    1c70:	7f 4f       	sbci	r23, 0xFF	; 255
    1c72:	99 23       	and	r25, r25
    1c74:	29 f0       	breq	.+10     	; 0x1c80 <_ZN9Pololu3pi4initEjh+0x3a>
    1c76:	85 e7       	ldi	r24, 0x75	; 117
    1c78:	91 e0       	ldi	r25, 0x01	; 1
    1c7a:	45 e0       	ldi	r20, 0x05	; 5
    1c7c:	0f ef       	ldi	r16, 0xFF	; 255
    1c7e:	04 c0       	rjmp	.+8      	; 0x1c88 <_ZN9Pololu3pi4initEjh+0x42>
    1c80:	85 e7       	ldi	r24, 0x75	; 117
    1c82:	91 e0       	ldi	r25, 0x01	; 1
    1c84:	45 e0       	ldi	r20, 0x05	; 5
    1c86:	03 e1       	ldi	r16, 0x13	; 19
    1c88:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1c8c:	85 e7       	ldi	r24, 0x75	; 117
    1c8e:	91 e0       	ldi	r25, 0x01	; 1
    1c90:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <_ZN16PololuQTRSensors11emittersOffEv>
    1c94:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <_ZN13OrangutanTime5resetEv>
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	0f 91       	pop	r16
    1ca8:	08 95       	ret

00001caa <pololu_3pi_init>:
    1caa:	60 e0       	ldi	r22, 0x00	; 0
    1cac:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <_ZN9Pololu3pi4initEjh>
    1cb0:	08 95       	ret

00001cb2 <_GLOBAL__I_pololu_3pi_init>:
    1cb2:	08 95       	ret

00001cb4 <_GLOBAL__D_pololu_3pi_init>:
    1cb4:	85 e7       	ldi	r24, 0x75	; 117
    1cb6:	91 e0       	ldi	r25, 0x01	; 1
    1cb8:	0e 94 68 13 	call	0x26d0	; 0x26d0 <_ZN16PololuQTRSensorsD1Ev>
    1cbc:	08 95       	ret

00001cbe <delayMicroseconds>:
    1cbe:	6f 93       	push	r22
    1cc0:	64 e0       	ldi	r22, 0x04	; 4
    1cc2:	6a 95       	dec	r22
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <delayMicroseconds+0x4>
    1cc6:	6f 91       	pop	r22
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	c9 f7       	brne	.-14     	; 0x1cbe <delayMicroseconds>
    1ccc:	08 95       	ret

00001cce <_ZN16PololuQTRSensors4initEhhh>:
    1cce:	a7 e0       	ldi	r26, 0x07	; 7
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	ed e6       	ldi	r30, 0x6D	; 109
    1cd4:	fe e0       	ldi	r31, 0x0E	; 14
    1cd6:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__prologue_saves__+0x1c>
    1cda:	8c 01       	movw	r16, r24
    1cdc:	fc 01       	movw	r30, r24
    1cde:	11 82       	std	Z+1, r1	; 0x01
    1ce0:	10 82       	st	Z, r1
    1ce2:	13 82       	std	Z+3, r1	; 0x03
    1ce4:	12 82       	std	Z+2, r1	; 0x02
    1ce6:	15 82       	std	Z+5, r1	; 0x05
    1ce8:	14 82       	std	Z+4, r1	; 0x04
    1cea:	17 82       	std	Z+7, r1	; 0x07
    1cec:	16 82       	std	Z+6, r1	; 0x06
    1cee:	61 31       	cpi	r22, 0x11	; 17
    1cf0:	18 f0       	brcs	.+6      	; 0x1cf8 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1cf2:	80 e1       	ldi	r24, 0x10	; 16
    1cf4:	80 87       	std	Z+8, r24	; 0x08
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	60 87       	std	Z+8, r22	; 0x08
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	20 8b       	std	Z+16, r18	; 0x10
    1d00:	ce 01       	movw	r24, r28
    1d02:	01 96       	adiw	r24, 0x01	; 1
    1d04:	64 2f       	mov	r22, r20
    1d06:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1d0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d0c:	f8 01       	movw	r30, r16
    1d0e:	81 87       	std	Z+9, r24	; 0x09
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	9c 81       	ldd	r25, Y+4	; 0x04
    1d14:	93 87       	std	Z+11, r25	; 0x0b
    1d16:	82 87       	std	Z+10, r24	; 0x0a
    1d18:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1c:	95 87       	std	Z+13, r25	; 0x0d
    1d1e:	84 87       	std	Z+12, r24	; 0x0c
    1d20:	27 96       	adiw	r28, 0x07	; 7
    1d22:	e4 e0       	ldi	r30, 0x04	; 4
    1d24:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__+0x1c>

00001d28 <_ZN16PololuQTRSensors11emittersOffEv>:
    1d28:	fc 01       	movw	r30, r24
    1d2a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d2c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d2e:	10 97       	sbiw	r26, 0x00	; 0
    1d30:	79 f0       	breq	.+30     	; 0x1d50 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    1d32:	8c 91       	ld	r24, X
    1d34:	91 85       	ldd	r25, Z+9	; 0x09
    1d36:	89 2b       	or	r24, r25
    1d38:	8c 93       	st	X, r24
    1d3a:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d3c:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d3e:	9c 91       	ld	r25, X
    1d40:	81 85       	ldd	r24, Z+9	; 0x09
    1d42:	80 95       	com	r24
    1d44:	89 23       	and	r24, r25
    1d46:	8c 93       	st	X, r24
    1d48:	88 ec       	ldi	r24, 0xC8	; 200
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <delayMicroseconds>
    1d50:	08 95       	ret

00001d52 <_ZN16PololuQTRSensors10emittersOnEv>:
    1d52:	fc 01       	movw	r30, r24
    1d54:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d56:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d58:	10 97       	sbiw	r26, 0x00	; 0
    1d5a:	71 f0       	breq	.+28     	; 0x1d78 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    1d5c:	8c 91       	ld	r24, X
    1d5e:	91 85       	ldd	r25, Z+9	; 0x09
    1d60:	89 2b       	or	r24, r25
    1d62:	8c 93       	st	X, r24
    1d64:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d66:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d68:	8c 91       	ld	r24, X
    1d6a:	91 85       	ldd	r25, Z+9	; 0x09
    1d6c:	89 2b       	or	r24, r25
    1d6e:	8c 93       	st	X, r24
    1d70:	88 ec       	ldi	r24, 0xC8	; 200
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <delayMicroseconds>
    1d78:	08 95       	ret

00001d7a <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    1d7a:	a7 e0       	ldi	r26, 0x07	; 7
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e3 ec       	ldi	r30, 0xC3	; 195
    1d80:	fe e0       	ldi	r31, 0x0E	; 14
    1d82:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__>
    1d86:	7c 01       	movw	r14, r24
    1d88:	1b 01       	movw	r2, r22
    1d8a:	64 2f       	mov	r22, r20
    1d8c:	39 01       	movw	r6, r18
    1d8e:	40 2f       	mov	r20, r16
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN16PololuQTRSensors4initEhhh>
    1d96:	97 01       	movw	r18, r14
    1d98:	2f 5b       	subi	r18, 0xBF	; 191
    1d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9c:	f9 01       	movw	r30, r18
    1d9e:	10 82       	st	Z, r1
    1da0:	d7 01       	movw	r26, r14
    1da2:	ae 5b       	subi	r26, 0xBE	; 190
    1da4:	bf 4f       	sbci	r27, 0xFF	; 255
    1da6:	1c 92       	st	X, r1
    1da8:	c7 01       	movw	r24, r14
    1daa:	8d 5b       	subi	r24, 0xBD	; 189
    1dac:	9f 4f       	sbci	r25, 0xFF	; 255
    1dae:	fc 01       	movw	r30, r24
    1db0:	10 82       	st	Z, r1
    1db2:	f7 01       	movw	r30, r14
    1db4:	77 86       	std	Z+15, r7	; 0x0f
    1db6:	66 86       	std	Z+14, r6	; 0x0e
    1db8:	66 24       	eor	r6, r6
    1dba:	2e 01       	movw	r4, r28
    1dbc:	08 94       	sec
    1dbe:	41 1c       	adc	r4, r1
    1dc0:	51 1c       	adc	r5, r1
    1dc2:	6c 01       	movw	r12, r24
    1dc4:	5d 01       	movw	r10, r26
    1dc6:	49 01       	movw	r8, r18
    1dc8:	29 c0       	rjmp	.+82     	; 0x1e1c <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1dca:	06 2d       	mov	r16, r6
    1dcc:	10 e0       	ldi	r17, 0x00	; 0
    1dce:	f1 01       	movw	r30, r2
    1dd0:	e0 0f       	add	r30, r16
    1dd2:	f1 1f       	adc	r31, r17
    1dd4:	c2 01       	movw	r24, r4
    1dd6:	60 81       	ld	r22, Z
    1dd8:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1ddc:	2f 81       	ldd	r18, Y+7	; 0x07
    1dde:	f7 01       	movw	r30, r14
    1de0:	e0 0f       	add	r30, r16
    1de2:	f1 1f       	adc	r31, r17
    1de4:	21 8b       	std	Z+17, r18	; 0x11
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	f8 01       	movw	r30, r16
    1dec:	ee 0f       	add	r30, r30
    1dee:	ff 1f       	adc	r31, r31
    1df0:	ee 0d       	add	r30, r14
    1df2:	ff 1d       	adc	r31, r15
    1df4:	92 a3       	std	Z+34, r25	; 0x22
    1df6:	81 a3       	std	Z+33, r24	; 0x21
    1df8:	83 32       	cpi	r24, 0x23	; 35
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	11 f4       	brne	.+4      	; 0x1e02 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1dfe:	f4 01       	movw	r30, r8
    1e00:	09 c0       	rjmp	.+18     	; 0x1e14 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1e02:	86 32       	cpi	r24, 0x26	; 38
    1e04:	91 05       	cpc	r25, r1
    1e06:	11 f4       	brne	.+4      	; 0x1e0c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1e08:	f5 01       	movw	r30, r10
    1e0a:	04 c0       	rjmp	.+8      	; 0x1e14 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9a>
    1e0c:	89 32       	cpi	r24, 0x29	; 41
    1e0e:	91 05       	cpc	r25, r1
    1e10:	21 f4       	brne	.+8      	; 0x1e1a <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa0>
    1e12:	f6 01       	movw	r30, r12
    1e14:	80 81       	ld	r24, Z
    1e16:	82 2b       	or	r24, r18
    1e18:	80 83       	st	Z, r24
    1e1a:	63 94       	inc	r6
    1e1c:	f7 01       	movw	r30, r14
    1e1e:	80 85       	ldd	r24, Z+8	; 0x08
    1e20:	68 16       	cp	r6, r24
    1e22:	98 f2       	brcs	.-90     	; 0x1dca <_ZN18PololuQTRSensorsRC4initEPhhjh+0x50>
    1e24:	27 96       	adiw	r28, 0x07	; 7
    1e26:	e2 e1       	ldi	r30, 0x12	; 18
    1e28:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__>

00001e2c <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1e2c:	a0 e0       	ldi	r26, 0x00	; 0
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	ec e1       	ldi	r30, 0x1C	; 28
    1e32:	ff e0       	ldi	r31, 0x0F	; 15
    1e34:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__prologue_saves__+0xa>
    1e38:	ec 01       	movw	r28, r24
    1e3a:	5b 01       	movw	r10, r22
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	ef 5b       	subi	r30, 0xBF	; 191
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	90 80       	ld	r9, Z
    1e44:	fc 01       	movw	r30, r24
    1e46:	ee 5b       	subi	r30, 0xBE	; 190
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 80       	ld	r8, Z
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	ed 5b       	subi	r30, 0xBD	; 189
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	70 80       	ld	r7, Z
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	09 c0       	rjmp	.+18     	; 0x1e6a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x3e>
    1e58:	e8 2f       	mov	r30, r24
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	ee 0f       	add	r30, r30
    1e5e:	ff 1f       	adc	r31, r31
    1e60:	ea 0d       	add	r30, r10
    1e62:	fb 1d       	adc	r31, r11
    1e64:	11 82       	std	Z+1, r1	; 0x01
    1e66:	10 82       	st	Z, r1
    1e68:	8f 5f       	subi	r24, 0xFF	; 255
    1e6a:	98 85       	ldd	r25, Y+8	; 0x08
    1e6c:	89 17       	cp	r24, r25
    1e6e:	a0 f3       	brcs	.-24     	; 0x1e58 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x2c>
    1e70:	84 b1       	in	r24, 0x04	; 4
    1e72:	21 e4       	ldi	r18, 0x41	; 65
    1e74:	e2 2e       	mov	r14, r18
    1e76:	f1 2c       	mov	r15, r1
    1e78:	ec 0e       	add	r14, r28
    1e7a:	fd 1e       	adc	r15, r29
    1e7c:	d7 01       	movw	r26, r14
    1e7e:	9c 91       	ld	r25, X
    1e80:	89 2b       	or	r24, r25
    1e82:	84 b9       	out	0x04, r24	; 4
    1e84:	87 b1       	in	r24, 0x07	; 7
    1e86:	8e 01       	movw	r16, r28
    1e88:	0e 5b       	subi	r16, 0xBE	; 190
    1e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8c:	f8 01       	movw	r30, r16
    1e8e:	90 81       	ld	r25, Z
    1e90:	89 2b       	or	r24, r25
    1e92:	87 b9       	out	0x07, r24	; 7
    1e94:	8a b1       	in	r24, 0x0a	; 10
    1e96:	93 e4       	ldi	r25, 0x43	; 67
    1e98:	c9 2e       	mov	r12, r25
    1e9a:	d1 2c       	mov	r13, r1
    1e9c:	cc 0e       	add	r12, r28
    1e9e:	dd 1e       	adc	r13, r29
    1ea0:	d6 01       	movw	r26, r12
    1ea2:	9c 91       	ld	r25, X
    1ea4:	89 2b       	or	r24, r25
    1ea6:	8a b9       	out	0x0a, r24	; 10
    1ea8:	85 b1       	in	r24, 0x05	; 5
    1eaa:	f7 01       	movw	r30, r14
    1eac:	90 81       	ld	r25, Z
    1eae:	89 2b       	or	r24, r25
    1eb0:	85 b9       	out	0x05, r24	; 5
    1eb2:	88 b1       	in	r24, 0x08	; 8
    1eb4:	d8 01       	movw	r26, r16
    1eb6:	9c 91       	ld	r25, X
    1eb8:	89 2b       	or	r24, r25
    1eba:	88 b9       	out	0x08, r24	; 8
    1ebc:	8b b1       	in	r24, 0x0b	; 11
    1ebe:	f6 01       	movw	r30, r12
    1ec0:	90 81       	ld	r25, Z
    1ec2:	89 2b       	or	r24, r25
    1ec4:	8b b9       	out	0x0b, r24	; 11
    1ec6:	8a e0       	ldi	r24, 0x0A	; 10
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <delayMicroseconds>
    1ece:	94 b1       	in	r25, 0x04	; 4
    1ed0:	d7 01       	movw	r26, r14
    1ed2:	8c 91       	ld	r24, X
    1ed4:	80 95       	com	r24
    1ed6:	89 23       	and	r24, r25
    1ed8:	84 b9       	out	0x04, r24	; 4
    1eda:	97 b1       	in	r25, 0x07	; 7
    1edc:	f8 01       	movw	r30, r16
    1ede:	80 81       	ld	r24, Z
    1ee0:	80 95       	com	r24
    1ee2:	89 23       	and	r24, r25
    1ee4:	87 b9       	out	0x07, r24	; 7
    1ee6:	9a b1       	in	r25, 0x0a	; 10
    1ee8:	d6 01       	movw	r26, r12
    1eea:	8c 91       	ld	r24, X
    1eec:	80 95       	com	r24
    1eee:	89 23       	and	r24, r25
    1ef0:	8a b9       	out	0x0a, r24	; 10
    1ef2:	95 b1       	in	r25, 0x05	; 5
    1ef4:	f7 01       	movw	r30, r14
    1ef6:	80 81       	ld	r24, Z
    1ef8:	80 95       	com	r24
    1efa:	89 23       	and	r24, r25
    1efc:	85 b9       	out	0x05, r24	; 5
    1efe:	98 b1       	in	r25, 0x08	; 8
    1f00:	d8 01       	movw	r26, r16
    1f02:	8c 91       	ld	r24, X
    1f04:	80 95       	com	r24
    1f06:	89 23       	and	r24, r25
    1f08:	88 b9       	out	0x08, r24	; 8
    1f0a:	9b b1       	in	r25, 0x0b	; 11
    1f0c:	f6 01       	movw	r30, r12
    1f0e:	80 81       	ld	r24, Z
    1f10:	80 95       	com	r24
    1f12:	89 23       	and	r24, r25
    1f14:	8b b9       	out	0x0b, r24	; 11
    1f16:	c0 90 b0 00 	lds	r12, 0x00B0
    1f1a:	e0 90 b1 00 	lds	r14, 0x00B1
    1f1e:	80 91 b0 00 	lds	r24, 0x00B0
    1f22:	83 60       	ori	r24, 0x03	; 3
    1f24:	80 93 b0 00 	sts	0x00B0, r24
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	80 93 b1 00 	sts	0x00B1, r24
    1f2e:	00 91 b2 00 	lds	r16, 0x00B2
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	39 c0       	rjmp	.+114    	; 0x1faa <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17e>
    1f38:	20 91 b2 00 	lds	r18, 0x00B2
    1f3c:	20 1b       	sub	r18, r16
    1f3e:	82 0f       	add	r24, r18
    1f40:	91 1d       	adc	r25, r1
    1f42:	02 0f       	add	r16, r18
    1f44:	f3 b0       	in	r15, 0x03	; 3
    1f46:	f9 14       	cp	r15, r9
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x120>
    1f4a:	4d c0       	rjmp	.+154    	; 0x1fe6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f4c:	96 b0       	in	r9, 0x06	; 6
    1f4e:	98 14       	cp	r9, r8
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x128>
    1f52:	49 c0       	rjmp	.+146    	; 0x1fe6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f54:	29 b1       	in	r18, 0x09	; 9
    1f56:	27 15       	cp	r18, r7
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x130>
    1f5a:	45 c0       	rjmp	.+138    	; 0x1fe6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1ba>
    1f5c:	24 c0       	rjmp	.+72     	; 0x1fa6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x17a>
    1f5e:	21 2f       	mov	r18, r17
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	a9 01       	movw	r20, r18
    1f64:	44 0f       	add	r20, r20
    1f66:	55 1f       	adc	r21, r21
    1f68:	f5 01       	movw	r30, r10
    1f6a:	e4 0f       	add	r30, r20
    1f6c:	f5 1f       	adc	r31, r21
    1f6e:	60 81       	ld	r22, Z
    1f70:	71 81       	ldd	r23, Z+1	; 0x01
    1f72:	61 15       	cp	r22, r1
    1f74:	71 05       	cpc	r23, r1
    1f76:	99 f4       	brne	.+38     	; 0x1f9e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    1f78:	4c 0f       	add	r20, r28
    1f7a:	5d 1f       	adc	r21, r29
    1f7c:	da 01       	movw	r26, r20
    1f7e:	91 96       	adiw	r26, 0x21	; 33
    1f80:	4d 91       	ld	r20, X+
    1f82:	5c 91       	ld	r21, X
    1f84:	92 97       	sbiw	r26, 0x22	; 34
    1f86:	da 01       	movw	r26, r20
    1f88:	4c 91       	ld	r20, X
    1f8a:	2c 0f       	add	r18, r28
    1f8c:	3d 1f       	adc	r19, r29
    1f8e:	d9 01       	movw	r26, r18
    1f90:	51 96       	adiw	r26, 0x11	; 17
    1f92:	2c 91       	ld	r18, X
    1f94:	51 97       	sbiw	r26, 0x11	; 17
    1f96:	42 23       	and	r20, r18
    1f98:	11 f4       	brne	.+4      	; 0x1f9e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x172>
    1f9a:	91 83       	std	Z+1, r25	; 0x01
    1f9c:	80 83       	st	Z, r24
    1f9e:	1f 5f       	subi	r17, 0xFF	; 255
    1fa0:	28 85       	ldd	r18, Y+8	; 0x08
    1fa2:	12 17       	cp	r17, r18
    1fa4:	e0 f2       	brcs	.-72     	; 0x1f5e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x132>
    1fa6:	89 2c       	mov	r8, r9
    1fa8:	9f 2c       	mov	r9, r15
    1faa:	2e 85       	ldd	r18, Y+14	; 0x0e
    1fac:	3f 85       	ldd	r19, Y+15	; 0x0f
    1fae:	82 17       	cp	r24, r18
    1fb0:	93 07       	cpc	r25, r19
    1fb2:	10 f2       	brcs	.-124    	; 0x1f38 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x10c>
    1fb4:	c0 92 b0 00 	sts	0x00B0, r12
    1fb8:	e0 92 b1 00 	sts	0x00B1, r14
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	0f c0       	rjmp	.+30     	; 0x1fde <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b2>
    1fc0:	e2 2f       	mov	r30, r18
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	ea 0d       	add	r30, r10
    1fca:	fb 1d       	adc	r31, r11
    1fcc:	80 81       	ld	r24, Z
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	21 f4       	brne	.+8      	; 0x1fdc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1b0>
    1fd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	80 83       	st	Z, r24
    1fdc:	2f 5f       	subi	r18, 0xFF	; 255
    1fde:	88 85       	ldd	r24, Y+8	; 0x08
    1fe0:	28 17       	cp	r18, r24
    1fe2:	70 f3       	brcs	.-36     	; 0x1fc0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x194>
    1fe4:	05 c0       	rjmp	.+10     	; 0x1ff0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1c4>
    1fe6:	f3 b0       	in	r15, 0x03	; 3
    1fe8:	96 b0       	in	r9, 0x06	; 6
    1fea:	79 b0       	in	r7, 0x09	; 9
    1fec:	10 e0       	ldi	r17, 0x00	; 0
    1fee:	d8 cf       	rjmp	.-80     	; 0x1fa0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	ed e0       	ldi	r30, 0x0D	; 13
    1ff6:	0c 94 37 14 	jmp	0x286e	; 0x286e <__epilogue_restores__+0xa>

00001ffa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1ffa:	ef 92       	push	r14
    1ffc:	ff 92       	push	r15
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	fc 01       	movw	r30, r24
    2008:	9b 01       	movw	r18, r22
    200a:	00 91 7c 00 	lds	r16, 0x007C
    200e:	10 91 7a 00 	lds	r17, 0x007A
    2012:	e7 b0       	in	r14, 0x07	; 7
    2014:	f8 b0       	in	r15, 0x08	; 8
    2016:	80 91 7a 00 	lds	r24, 0x007A
    201a:	86 fd       	sbrc	r24, 6
    201c:	fc cf       	rjmp	.-8      	; 0x2016 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	0a c0       	rjmp	.+20     	; 0x2036 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3c>
    2022:	a8 2f       	mov	r26, r24
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	aa 0f       	add	r26, r26
    2028:	bb 1f       	adc	r27, r27
    202a:	a2 0f       	add	r26, r18
    202c:	b3 1f       	adc	r27, r19
    202e:	11 96       	adiw	r26, 0x01	; 1
    2030:	1c 92       	st	X, r1
    2032:	1e 92       	st	-X, r1
    2034:	8f 5f       	subi	r24, 0xFF	; 255
    2036:	90 85       	ldd	r25, Z+8	; 0x08
    2038:	89 17       	cp	r24, r25
    203a:	98 f3       	brcs	.-26     	; 0x2022 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x28>
    203c:	97 b1       	in	r25, 0x07	; 7
    203e:	82 a1       	ldd	r24, Z+34	; 0x22
    2040:	80 95       	com	r24
    2042:	89 23       	and	r24, r25
    2044:	87 b9       	out	0x07, r24	; 7
    2046:	98 b1       	in	r25, 0x08	; 8
    2048:	82 a1       	ldd	r24, Z+34	; 0x22
    204a:	80 95       	com	r24
    204c:	89 23       	and	r24, r25
    204e:	88 b9       	out	0x08, r24	; 8
    2050:	87 e8       	ldi	r24, 0x87	; 135
    2052:	80 93 7a 00 	sts	0x007A, r24
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	29 c0       	rjmp	.+82     	; 0x20ac <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    205a:	df 01       	movw	r26, r30
    205c:	a6 0f       	add	r26, r22
    205e:	b1 1d       	adc	r27, r1
    2060:	51 96       	adiw	r26, 0x11	; 17
    2062:	8c 91       	ld	r24, X
    2064:	51 97       	sbiw	r26, 0x11	; 17
    2066:	80 64       	ori	r24, 0x40	; 64
    2068:	80 93 7c 00 	sts	0x007C, r24
    206c:	80 91 7a 00 	lds	r24, 0x007A
    2070:	80 64       	ori	r24, 0x40	; 64
    2072:	80 93 7a 00 	sts	0x007A, r24
    2076:	80 91 7a 00 	lds	r24, 0x007A
    207a:	86 fd       	sbrc	r24, 6
    207c:	fc cf       	rjmp	.-8      	; 0x2076 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x7c>
    207e:	a6 2f       	mov	r26, r22
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	aa 0f       	add	r26, r26
    2084:	bb 1f       	adc	r27, r27
    2086:	a2 0f       	add	r26, r18
    2088:	b3 1f       	adc	r27, r19
    208a:	40 91 78 00 	lds	r20, 0x0078
    208e:	50 91 79 00 	lds	r21, 0x0079
    2092:	8d 91       	ld	r24, X+
    2094:	9c 91       	ld	r25, X
    2096:	11 97       	sbiw	r26, 0x01	; 1
    2098:	84 0f       	add	r24, r20
    209a:	95 1f       	adc	r25, r21
    209c:	11 96       	adiw	r26, 0x01	; 1
    209e:	9c 93       	st	X, r25
    20a0:	8e 93       	st	-X, r24
    20a2:	6f 5f       	subi	r22, 0xFF	; 255
    20a4:	80 85       	ldd	r24, Z+8	; 0x08
    20a6:	68 17       	cp	r22, r24
    20a8:	c0 f2       	brcs	.-80     	; 0x205a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x60>
    20aa:	7f 5f       	subi	r23, 0xFF	; 255
    20ac:	81 a1       	ldd	r24, Z+33	; 0x21
    20ae:	78 17       	cp	r23, r24
    20b0:	10 f4       	brcc	.+4      	; 0x20b6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xbc>
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	f7 cf       	rjmp	.-18     	; 0x20a4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xaa>
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	14 c0       	rjmp	.+40     	; 0x20e2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe8>
    20ba:	c4 2f       	mov	r28, r20
    20bc:	d0 e0       	ldi	r29, 0x00	; 0
    20be:	cc 0f       	add	r28, r28
    20c0:	dd 1f       	adc	r29, r29
    20c2:	c2 0f       	add	r28, r18
    20c4:	d3 1f       	adc	r29, r19
    20c6:	61 a1       	ldd	r22, Z+33	; 0x21
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	cb 01       	movw	r24, r22
    20cc:	95 95       	asr	r25
    20ce:	87 95       	ror	r24
    20d0:	a8 81       	ld	r26, Y
    20d2:	b9 81       	ldd	r27, Y+1	; 0x01
    20d4:	8a 0f       	add	r24, r26
    20d6:	9b 1f       	adc	r25, r27
    20d8:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodhi4>
    20dc:	79 83       	std	Y+1, r23	; 0x01
    20de:	68 83       	st	Y, r22
    20e0:	4f 5f       	subi	r20, 0xFF	; 255
    20e2:	80 85       	ldd	r24, Z+8	; 0x08
    20e4:	48 17       	cp	r20, r24
    20e6:	48 f3       	brcs	.-46     	; 0x20ba <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xc0>
    20e8:	00 93 7c 00 	sts	0x007C, r16
    20ec:	10 93 7a 00 	sts	0x007A, r17
    20f0:	f8 b8       	out	0x08, r15	; 8
    20f2:	e7 b8       	out	0x07, r14	; 7
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	e6 e0       	ldi	r30, 0x06	; 6
    20fa:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__epilogue_restores__+0x18>

000020fe <_ZN16PololuQTRSensors4readEPjh>:
    20fe:	a0 e2       	ldi	r26, 0x20	; 32
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e5 e8       	ldi	r30, 0x85	; 133
    2104:	f0 e1       	ldi	r31, 0x10	; 16
    2106:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__prologue_saves__+0x16>
    210a:	8c 01       	movw	r16, r24
    210c:	7b 01       	movw	r14, r22
    210e:	d4 2e       	mov	r13, r20
    2110:	84 2f       	mov	r24, r20
    2112:	81 50       	subi	r24, 0x01	; 1
    2114:	82 30       	cpi	r24, 0x02	; 2
    2116:	18 f4       	brcc	.+6      	; 0x211e <_ZN16PololuQTRSensors4readEPjh+0x20>
    2118:	c8 01       	movw	r24, r16
    211a:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_ZN16PololuQTRSensors10emittersOnEv>
    211e:	d8 01       	movw	r26, r16
    2120:	50 96       	adiw	r26, 0x10	; 16
    2122:	8c 91       	ld	r24, X
    2124:	50 97       	sbiw	r26, 0x10	; 16
    2126:	88 23       	and	r24, r24
    2128:	89 f4       	brne	.+34     	; 0x214c <_ZN16PololuQTRSensors4readEPjh+0x4e>
    212a:	c8 01       	movw	r24, r16
    212c:	b7 01       	movw	r22, r14
    212e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2132:	c8 01       	movw	r24, r16
    2134:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <_ZN16PololuQTRSensors11emittersOffEv>
    2138:	bd 2d       	mov	r27, r13
    213a:	b2 30       	cpi	r27, 0x02	; 2
    213c:	d9 f5       	brne	.+118    	; 0x21b4 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    213e:	c8 01       	movw	r24, r16
    2140:	be 01       	movw	r22, r28
    2142:	6f 5f       	subi	r22, 0xFF	; 255
    2144:	7f 4f       	sbci	r23, 0xFF	; 255
    2146:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    214a:	10 c0       	rjmp	.+32     	; 0x216c <_ZN16PololuQTRSensors4readEPjh+0x6e>
    214c:	c8 01       	movw	r24, r16
    214e:	b7 01       	movw	r22, r14
    2150:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2154:	c8 01       	movw	r24, r16
    2156:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <_ZN16PololuQTRSensors11emittersOffEv>
    215a:	ed 2d       	mov	r30, r13
    215c:	e2 30       	cpi	r30, 0x02	; 2
    215e:	51 f5       	brne	.+84     	; 0x21b4 <_ZN16PololuQTRSensors4readEPjh+0xb6>
    2160:	c8 01       	movw	r24, r16
    2162:	be 01       	movw	r22, r28
    2164:	6f 5f       	subi	r22, 0xFF	; 255
    2166:	7f 4f       	sbci	r23, 0xFF	; 255
    2168:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	ae 01       	movw	r20, r28
    2170:	4f 5f       	subi	r20, 0xFF	; 255
    2172:	5f 4f       	sbci	r21, 0xFF	; 255
    2174:	1b c0       	rjmp	.+54     	; 0x21ac <_ZN16PololuQTRSensors4readEPjh+0xae>
    2176:	86 2f       	mov	r24, r22
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	f7 01       	movw	r30, r14
    2180:	e8 0f       	add	r30, r24
    2182:	f9 1f       	adc	r31, r25
    2184:	84 0f       	add	r24, r20
    2186:	95 1f       	adc	r25, r21
    2188:	d8 01       	movw	r26, r16
    218a:	1e 96       	adiw	r26, 0x0e	; 14
    218c:	2d 91       	ld	r18, X+
    218e:	3c 91       	ld	r19, X
    2190:	1f 97       	sbiw	r26, 0x0f	; 15
    2192:	dc 01       	movw	r26, r24
    2194:	8d 91       	ld	r24, X+
    2196:	9c 91       	ld	r25, X
    2198:	11 97       	sbiw	r26, 0x01	; 1
    219a:	28 1b       	sub	r18, r24
    219c:	39 0b       	sbc	r19, r25
    219e:	80 81       	ld	r24, Z
    21a0:	91 81       	ldd	r25, Z+1	; 0x01
    21a2:	82 0f       	add	r24, r18
    21a4:	93 1f       	adc	r25, r19
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	80 83       	st	Z, r24
    21aa:	6f 5f       	subi	r22, 0xFF	; 255
    21ac:	f8 01       	movw	r30, r16
    21ae:	80 85       	ldd	r24, Z+8	; 0x08
    21b0:	68 17       	cp	r22, r24
    21b2:	08 f3       	brcs	.-62     	; 0x2176 <_ZN16PololuQTRSensors4readEPjh+0x78>
    21b4:	a0 96       	adiw	r28, 0x20	; 32
    21b6:	e7 e0       	ldi	r30, 0x07	; 7
    21b8:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__epilogue_restores__+0x16>

000021bc <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    21bc:	8f 92       	push	r8
    21be:	9f 92       	push	r9
    21c0:	af 92       	push	r10
    21c2:	bf 92       	push	r11
    21c4:	cf 92       	push	r12
    21c6:	df 92       	push	r13
    21c8:	ff 92       	push	r15
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	ec 01       	movw	r28, r24
    21d4:	c6 2e       	mov	r12, r22
    21d6:	07 2f       	mov	r16, r23
    21d8:	f4 2e       	mov	r15, r20
    21da:	42 30       	cpi	r20, 0x02	; 2
    21dc:	11 f0       	breq	.+4      	; 0x21e2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x26>
    21de:	ff 20       	and	r15, r15
    21e0:	51 f4       	brne	.+20     	; 0x21f6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    21e2:	8c 81       	ldd	r24, Y+4	; 0x04
    21e4:	9d 81       	ldd	r25, Y+5	; 0x05
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	09 f4       	brne	.+2      	; 0x21ec <_ZN16PololuQTRSensors14readCalibratedEPjh+0x30>
    21ea:	a0 c0       	rjmp	.+320    	; 0x232c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21ec:	8e 81       	ldd	r24, Y+6	; 0x06
    21ee:	9f 81       	ldd	r25, Y+7	; 0x07
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	09 f4       	brne	.+2      	; 0x21f6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3a>
    21f4:	9b c0       	rjmp	.+310    	; 0x232c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    21f6:	8f 2d       	mov	r24, r15
    21f8:	81 50       	subi	r24, 0x01	; 1
    21fa:	82 30       	cpi	r24, 0x02	; 2
    21fc:	50 f4       	brcc	.+20     	; 0x2212 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    21fe:	88 81       	ld	r24, Y
    2200:	99 81       	ldd	r25, Y+1	; 0x01
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	09 f4       	brne	.+2      	; 0x2208 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x4c>
    2206:	92 c0       	rjmp	.+292    	; 0x232c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	9b 81       	ldd	r25, Y+3	; 0x03
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	09 f4       	brne	.+2      	; 0x2212 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x56>
    2210:	8d c0       	rjmp	.+282    	; 0x232c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    2212:	ce 01       	movw	r24, r28
    2214:	6c 2d       	mov	r22, r12
    2216:	70 2f       	mov	r23, r16
    2218:	4f 2d       	mov	r20, r15
    221a:	0e 94 7f 10 	call	0x20fe	; 0x20fe <_ZN16PololuQTRSensors4readEPjh>
    221e:	ac 2c       	mov	r10, r12
    2220:	b0 2e       	mov	r11, r16
    2222:	00 e0       	ldi	r16, 0x00	; 0
    2224:	10 e0       	ldi	r17, 0x00	; 0
    2226:	88 24       	eor	r8, r8
    2228:	99 24       	eor	r9, r9
    222a:	7a c0       	rjmp	.+244    	; 0x2320 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x164>
    222c:	8f 2d       	mov	r24, r15
    222e:	81 30       	cpi	r24, 0x01	; 1
    2230:	59 f4       	brne	.+22     	; 0x2248 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x8c>
    2232:	ea 81       	ldd	r30, Y+2	; 0x02
    2234:	fb 81       	ldd	r31, Y+3	; 0x03
    2236:	e0 0f       	add	r30, r16
    2238:	f1 1f       	adc	r31, r17
    223a:	c0 80       	ld	r12, Z
    223c:	d1 80       	ldd	r13, Z+1	; 0x01
    223e:	e8 81       	ld	r30, Y
    2240:	f9 81       	ldd	r31, Y+1	; 0x01
    2242:	e0 0f       	add	r30, r16
    2244:	f1 1f       	adc	r31, r17
    2246:	0d c0       	rjmp	.+26     	; 0x2262 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    2248:	8c 81       	ldd	r24, Y+4	; 0x04
    224a:	9d 81       	ldd	r25, Y+5	; 0x05
    224c:	ff 20       	and	r15, r15
    224e:	61 f4       	brne	.+24     	; 0x2268 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xac>
    2250:	ee 81       	ldd	r30, Y+6	; 0x06
    2252:	ff 81       	ldd	r31, Y+7	; 0x07
    2254:	e0 0f       	add	r30, r16
    2256:	f1 1f       	adc	r31, r17
    2258:	c0 80       	ld	r12, Z
    225a:	d1 80       	ldd	r13, Z+1	; 0x01
    225c:	80 0f       	add	r24, r16
    225e:	91 1f       	adc	r25, r17
    2260:	fc 01       	movw	r30, r24
    2262:	40 81       	ld	r20, Z
    2264:	51 81       	ldd	r21, Z+1	; 0x01
    2266:	2b c0       	rjmp	.+86     	; 0x22be <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    2268:	80 0f       	add	r24, r16
    226a:	91 1f       	adc	r25, r17
    226c:	fc 01       	movw	r30, r24
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	e8 81       	ld	r30, Y
    2274:	f9 81       	ldd	r31, Y+1	; 0x01
    2276:	e0 0f       	add	r30, r16
    2278:	f1 1f       	adc	r31, r17
    227a:	40 81       	ld	r20, Z
    227c:	51 81       	ldd	r21, Z+1	; 0x01
    227e:	ce 84       	ldd	r12, Y+14	; 0x0e
    2280:	df 84       	ldd	r13, Y+15	; 0x0f
    2282:	84 17       	cp	r24, r20
    2284:	95 07       	cpc	r25, r21
    2286:	10 f4       	brcc	.+4      	; 0x228c <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd0>
    2288:	a6 01       	movw	r20, r12
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd8>
    228c:	4c 0d       	add	r20, r12
    228e:	5d 1d       	adc	r21, r13
    2290:	48 1b       	sub	r20, r24
    2292:	59 0b       	sbc	r21, r25
    2294:	ee 81       	ldd	r30, Y+6	; 0x06
    2296:	ff 81       	ldd	r31, Y+7	; 0x07
    2298:	e0 0f       	add	r30, r16
    229a:	f1 1f       	adc	r31, r17
    229c:	80 81       	ld	r24, Z
    229e:	91 81       	ldd	r25, Z+1	; 0x01
    22a0:	ea 81       	ldd	r30, Y+2	; 0x02
    22a2:	fb 81       	ldd	r31, Y+3	; 0x03
    22a4:	e0 0f       	add	r30, r16
    22a6:	f1 1f       	adc	r31, r17
    22a8:	20 81       	ld	r18, Z
    22aa:	31 81       	ldd	r19, Z+1	; 0x01
    22ac:	ce 84       	ldd	r12, Y+14	; 0x0e
    22ae:	df 84       	ldd	r13, Y+15	; 0x0f
    22b0:	82 17       	cp	r24, r18
    22b2:	93 07       	cpc	r25, r19
    22b4:	20 f0       	brcs	.+8      	; 0x22be <_ZN16PololuQTRSensors14readCalibratedEPjh+0x102>
    22b6:	c2 0e       	add	r12, r18
    22b8:	d3 1e       	adc	r13, r19
    22ba:	c8 1a       	sub	r12, r24
    22bc:	d9 0a       	sbc	r13, r25
    22be:	c4 1a       	sub	r12, r20
    22c0:	d5 0a       	sbc	r13, r21
    22c2:	d1 f0       	breq	.+52     	; 0x22f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    22c4:	f5 01       	movw	r30, r10
    22c6:	60 81       	ld	r22, Z
    22c8:	71 81       	ldd	r23, Z+1	; 0x01
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9a 01       	movw	r18, r20
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	62 1b       	sub	r22, r18
    22d6:	73 0b       	sbc	r23, r19
    22d8:	84 0b       	sbc	r24, r20
    22da:	95 0b       	sbc	r25, r21
    22dc:	28 ee       	ldi	r18, 0xE8	; 232
    22de:	33 e0       	ldi	r19, 0x03	; 3
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	50 e0       	ldi	r21, 0x00	; 0
    22e4:	0e 94 86 13 	call	0x270c	; 0x270c <__mulsi3>
    22e8:	96 01       	movw	r18, r12
    22ea:	40 e0       	ldi	r20, 0x00	; 0
    22ec:	50 e0       	ldi	r21, 0x00	; 0
    22ee:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__divmodsi4>
    22f2:	37 fd       	sbrc	r19, 7
    22f4:	0a c0       	rjmp	.+20     	; 0x230a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x14e>
    22f6:	02 c0       	rjmp	.+4      	; 0x22fc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x140>
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	f3 e0       	ldi	r31, 0x03	; 3
    22fe:	29 3e       	cpi	r18, 0xE9	; 233
    2300:	3f 07       	cpc	r19, r31
    2302:	2c f0       	brlt	.+10     	; 0x230e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    2304:	28 ee       	ldi	r18, 0xE8	; 232
    2306:	33 e0       	ldi	r19, 0x03	; 3
    2308:	02 c0       	rjmp	.+4      	; 0x230e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x152>
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	f5 01       	movw	r30, r10
    2310:	21 93       	st	Z+, r18
    2312:	31 93       	st	Z+, r19
    2314:	5f 01       	movw	r10, r30
    2316:	08 94       	sec
    2318:	81 1c       	adc	r8, r1
    231a:	91 1c       	adc	r9, r1
    231c:	0e 5f       	subi	r16, 0xFE	; 254
    231e:	1f 4f       	sbci	r17, 0xFF	; 255
    2320:	88 85       	ldd	r24, Y+8	; 0x08
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	88 16       	cp	r8, r24
    2326:	99 06       	cpc	r9, r25
    2328:	0c f4       	brge	.+2      	; 0x232c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x170>
    232a:	80 cf       	rjmp	.-256    	; 0x222c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x70>
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	ff 90       	pop	r15
    2336:	df 90       	pop	r13
    2338:	cf 90       	pop	r12
    233a:	bf 90       	pop	r11
    233c:	af 90       	pop	r10
    233e:	9f 90       	pop	r9
    2340:	8f 90       	pop	r8
    2342:	08 95       	ret

00002344 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2344:	a5 e0       	ldi	r26, 0x05	; 5
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e8 ea       	ldi	r30, 0xA8	; 168
    234a:	f1 e1       	ldi	r31, 0x11	; 17
    234c:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__>
    2350:	4c 01       	movw	r8, r24
    2352:	c6 2e       	mov	r12, r22
    2354:	e7 2e       	mov	r14, r23
    2356:	2d 83       	std	Y+5, r18	; 0x05
    2358:	0e 94 de 10 	call	0x21bc	; 0x21bc <_ZN16PololuQTRSensors14readCalibratedEPjh>
    235c:	d4 01       	movw	r26, r8
    235e:	18 96       	adiw	r26, 0x08	; 8
    2360:	4c 90       	ld	r4, X
    2362:	18 97       	sbiw	r26, 0x08	; 8
    2364:	de 2c       	mov	r13, r14
    2366:	64 2d       	mov	r22, r4
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	28 ee       	ldi	r18, 0xE8	; 232
    2370:	33 e0       	ldi	r19, 0x03	; 3
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	0e 94 86 13 	call	0x270c	; 0x270c <__mulsi3>
    237a:	69 83       	std	Y+1, r22	; 0x01
    237c:	7a 83       	std	Y+2, r23	; 0x02
    237e:	8b 83       	std	Y+3, r24	; 0x03
    2380:	9c 83       	std	Y+4, r25	; 0x04
    2382:	ee 24       	eor	r14, r14
    2384:	ff 24       	eor	r15, r15
    2386:	87 01       	movw	r16, r14
    2388:	66 24       	eor	r6, r6
    238a:	77 24       	eor	r7, r7
    238c:	88 24       	eor	r8, r8
    238e:	99 24       	eor	r9, r9
    2390:	54 01       	movw	r10, r8
    2392:	55 24       	eor	r5, r5
    2394:	36 c0       	rjmp	.+108    	; 0x2402 <_ZN16PololuQTRSensors8readLineEPjhh+0xbe>
    2396:	f6 01       	movw	r30, r12
    2398:	30 81       	ld	r19, Z
    239a:	21 81       	ldd	r18, Z+1	; 0x01
    239c:	42 e0       	ldi	r20, 0x02	; 2
    239e:	24 2e       	mov	r2, r20
    23a0:	31 2c       	mov	r3, r1
    23a2:	c2 0c       	add	r12, r2
    23a4:	d3 1c       	adc	r13, r3
    23a6:	c9 01       	movw	r24, r18
    23a8:	49 2f       	mov	r20, r25
    23aa:	58 2f       	mov	r21, r24
    23ac:	1a 01       	movw	r2, r20
    23ae:	2d 81       	ldd	r18, Y+5	; 0x05
    23b0:	22 23       	and	r18, r18
    23b2:	29 f0       	breq	.+10     	; 0x23be <_ZN16PololuQTRSensors8readLineEPjhh+0x7a>
    23b4:	88 ee       	ldi	r24, 0xE8	; 232
    23b6:	93 e0       	ldi	r25, 0x03	; 3
    23b8:	82 19       	sub	r24, r2
    23ba:	93 09       	sbc	r25, r3
    23bc:	1c 01       	movw	r2, r24
    23be:	99 ec       	ldi	r25, 0xC9	; 201
    23c0:	29 16       	cp	r2, r25
    23c2:	31 04       	cpc	r3, r1
    23c4:	2c f4       	brge	.+10     	; 0x23d0 <_ZN16PololuQTRSensors8readLineEPjhh+0x8c>
    23c6:	a3 e3       	ldi	r26, 0x33	; 51
    23c8:	2a 16       	cp	r2, r26
    23ca:	31 04       	cpc	r3, r1
    23cc:	94 f0       	brlt	.+36     	; 0x23f2 <_ZN16PololuQTRSensors8readLineEPjhh+0xae>
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <_ZN16PololuQTRSensors8readLineEPjhh+0x90>
    23d0:	55 24       	eor	r5, r5
    23d2:	53 94       	inc	r5
    23d4:	b1 01       	movw	r22, r2
    23d6:	88 27       	eor	r24, r24
    23d8:	77 fd       	sbrc	r23, 7
    23da:	80 95       	com	r24
    23dc:	98 2f       	mov	r25, r24
    23de:	a8 01       	movw	r20, r16
    23e0:	97 01       	movw	r18, r14
    23e2:	0e 94 86 13 	call	0x270c	; 0x270c <__mulsi3>
    23e6:	86 0e       	add	r8, r22
    23e8:	97 1e       	adc	r9, r23
    23ea:	a8 1e       	adc	r10, r24
    23ec:	b9 1e       	adc	r11, r25
    23ee:	62 0c       	add	r6, r2
    23f0:	73 1c       	adc	r7, r3
    23f2:	88 ee       	ldi	r24, 0xE8	; 232
    23f4:	93 e0       	ldi	r25, 0x03	; 3
    23f6:	a0 e0       	ldi	r26, 0x00	; 0
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e8 0e       	add	r14, r24
    23fc:	f9 1e       	adc	r15, r25
    23fe:	0a 1f       	adc	r16, r26
    2400:	1b 1f       	adc	r17, r27
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	9a 81       	ldd	r25, Y+2	; 0x02
    2406:	ab 81       	ldd	r26, Y+3	; 0x03
    2408:	bc 81       	ldd	r27, Y+4	; 0x04
    240a:	e8 16       	cp	r14, r24
    240c:	f9 06       	cpc	r15, r25
    240e:	0a 07       	cpc	r16, r26
    2410:	1b 07       	cpc	r17, r27
    2412:	09 f6       	brne	.-126    	; 0x2396 <_ZN16PololuQTRSensors8readLineEPjhh+0x52>
    2414:	55 20       	and	r5, r5
    2416:	f1 f4       	brne	.+60     	; 0x2454 <_ZN16PololuQTRSensors8readLineEPjhh+0x110>
    2418:	55 24       	eor	r5, r5
    241a:	08 94       	sec
    241c:	41 08       	sbc	r4, r1
    241e:	51 08       	sbc	r5, r1
    2420:	24 ef       	ldi	r18, 0xF4	; 244
    2422:	31 e0       	ldi	r19, 0x01	; 1
    2424:	42 9e       	mul	r4, r18
    2426:	c0 01       	movw	r24, r0
    2428:	43 9e       	mul	r4, r19
    242a:	90 0d       	add	r25, r0
    242c:	52 9e       	mul	r5, r18
    242e:	90 0d       	add	r25, r0
    2430:	11 24       	eor	r1, r1
    2432:	20 91 b9 01 	lds	r18, 0x01B9
    2436:	30 91 ba 01 	lds	r19, 0x01BA
    243a:	28 17       	cp	r18, r24
    243c:	39 07       	cpc	r19, r25
    243e:	b4 f0       	brlt	.+44     	; 0x246c <_ZN16PololuQTRSensors8readLineEPjhh+0x128>
    2440:	88 ee       	ldi	r24, 0xE8	; 232
    2442:	93 e0       	ldi	r25, 0x03	; 3
    2444:	48 9e       	mul	r4, r24
    2446:	90 01       	movw	r18, r0
    2448:	49 9e       	mul	r4, r25
    244a:	30 0d       	add	r19, r0
    244c:	58 9e       	mul	r5, r24
    244e:	30 0d       	add	r19, r0
    2450:	11 24       	eor	r1, r1
    2452:	0e c0       	rjmp	.+28     	; 0x2470 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    2454:	93 01       	movw	r18, r6
    2456:	40 e0       	ldi	r20, 0x00	; 0
    2458:	50 e0       	ldi	r21, 0x00	; 0
    245a:	c5 01       	movw	r24, r10
    245c:	b4 01       	movw	r22, r8
    245e:	0e 94 ca 13 	call	0x2794	; 0x2794 <__udivmodsi4>
    2462:	20 93 b9 01 	sts	0x01B9, r18
    2466:	30 93 ba 01 	sts	0x01BA, r19
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <_ZN16PololuQTRSensors8readLineEPjhh+0x12c>
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	c9 01       	movw	r24, r18
    2472:	25 96       	adiw	r28, 0x05	; 5
    2474:	e2 e1       	ldi	r30, 0x12	; 18
    2476:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__>

0000247a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    247a:	a7 e6       	ldi	r26, 0x67	; 103
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e3 e4       	ldi	r30, 0x43	; 67
    2480:	f2 e1       	ldi	r31, 0x12	; 18
    2482:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__>
    2486:	8c 01       	movw	r16, r24
    2488:	4b 01       	movw	r8, r22
    248a:	6a 01       	movw	r12, r20
    248c:	a6 96       	adiw	r28, 0x26	; 38
    248e:	2f af       	std	Y+63, r18	; 0x3f
    2490:	a6 97       	sbiw	r28, 0x26	; 38
    2492:	da 01       	movw	r26, r20
    2494:	8d 91       	ld	r24, X+
    2496:	9c 91       	ld	r25, X
    2498:	11 97       	sbiw	r26, 0x01	; 1
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	e9 f4       	brne	.+58     	; 0x24d8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x5e>
    249e:	f8 01       	movw	r30, r16
    24a0:	80 85       	ldd	r24, Z+8	; 0x08
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	0e 94 62 14 	call	0x28c4	; 0x28c4 <malloc>
    24ac:	d6 01       	movw	r26, r12
    24ae:	11 96       	adiw	r26, 0x01	; 1
    24b0:	9c 93       	st	X, r25
    24b2:	8e 93       	st	-X, r24
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	09 f4       	brne	.+2      	; 0x24ba <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x40>
    24b8:	e2 c0       	rjmp	.+452    	; 0x267e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    24ba:	fc 01       	movw	r30, r24
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	03 c0       	rjmp	.+6      	; 0x24c8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x4e>
    24c2:	11 92       	st	Z+, r1
    24c4:	11 92       	st	Z+, r1
    24c6:	01 96       	adiw	r24, 0x01	; 1
    24c8:	d8 01       	movw	r26, r16
    24ca:	18 96       	adiw	r26, 0x08	; 8
    24cc:	2c 91       	ld	r18, X
    24ce:	18 97       	sbiw	r26, 0x08	; 8
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	82 17       	cp	r24, r18
    24d4:	93 07       	cpc	r25, r19
    24d6:	ac f3       	brlt	.-22     	; 0x24c2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x48>
    24d8:	f4 01       	movw	r30, r8
    24da:	80 81       	ld	r24, Z
    24dc:	91 81       	ldd	r25, Z+1	; 0x01
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	89 f0       	breq	.+34     	; 0x2504 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8a>
    24e2:	ee 24       	eor	r14, r14
    24e4:	ff 24       	eor	r15, r15
    24e6:	5e 01       	movw	r10, r28
    24e8:	08 94       	sec
    24ea:	a1 1c       	adc	r10, r1
    24ec:	b1 1c       	adc	r11, r1
    24ee:	b1 e4       	ldi	r27, 0x41	; 65
    24f0:	6b 2e       	mov	r6, r27
    24f2:	71 2c       	mov	r7, r1
    24f4:	6c 0e       	add	r6, r28
    24f6:	7d 1e       	adc	r7, r29
    24f8:	a1 e2       	ldi	r26, 0x21	; 33
    24fa:	4a 2e       	mov	r4, r26
    24fc:	51 2c       	mov	r5, r1
    24fe:	4c 0e       	add	r4, r28
    2500:	5d 1e       	adc	r5, r29
    2502:	23 c0       	rjmp	.+70     	; 0x254a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    2504:	d8 01       	movw	r26, r16
    2506:	18 96       	adiw	r26, 0x08	; 8
    2508:	8c 91       	ld	r24, X
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	0e 94 62 14 	call	0x28c4	; 0x28c4 <malloc>
    2514:	f4 01       	movw	r30, r8
    2516:	91 83       	std	Z+1, r25	; 0x01
    2518:	80 83       	st	Z, r24
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	09 f4       	brne	.+2      	; 0x2520 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xa6>
    251e:	af c0       	rjmp	.+350    	; 0x267e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x204>
    2520:	fc 01       	movw	r30, r24
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	d8 01       	movw	r26, r16
    2528:	07 c0       	rjmp	.+14     	; 0x2538 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xbe>
    252a:	1e 96       	adiw	r26, 0x0e	; 14
    252c:	2d 91       	ld	r18, X+
    252e:	3c 91       	ld	r19, X
    2530:	1f 97       	sbiw	r26, 0x0f	; 15
    2532:	21 93       	st	Z+, r18
    2534:	31 93       	st	Z+, r19
    2536:	01 96       	adiw	r24, 0x01	; 1
    2538:	18 96       	adiw	r26, 0x08	; 8
    253a:	2c 91       	ld	r18, X
    253c:	18 97       	sbiw	r26, 0x08	; 8
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	82 17       	cp	r24, r18
    2542:	93 07       	cpc	r25, r19
    2544:	94 f3       	brlt	.-28     	; 0x252a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb0>
    2546:	8d 01       	movw	r16, r26
    2548:	cc cf       	rjmp	.-104    	; 0x24e2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x68>
    254a:	c8 01       	movw	r24, r16
    254c:	b5 01       	movw	r22, r10
    254e:	a6 96       	adiw	r28, 0x26	; 38
    2550:	4f ad       	ldd	r20, Y+63	; 0x3f
    2552:	a6 97       	sbiw	r28, 0x26	; 38
    2554:	0e 94 7f 10 	call	0x20fe	; 0x20fe <_ZN16PololuQTRSensors4readEPjh>
    2558:	d8 01       	movw	r26, r16
    255a:	18 96       	adiw	r26, 0x08	; 8
    255c:	8c 91       	ld	r24, X
    255e:	18 97       	sbiw	r26, 0x08	; 8
    2560:	e8 2f       	mov	r30, r24
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	a5 96       	adiw	r28, 0x25	; 37
    2566:	ff af       	std	Y+63, r31	; 0x3f
    2568:	ee af       	std	Y+62, r30	; 0x3e
    256a:	a5 97       	sbiw	r28, 0x25	; 37
    256c:	13 01       	movw	r2, r6
    256e:	f5 01       	movw	r30, r10
    2570:	a3 96       	adiw	r28, 0x23	; 35
    2572:	5f ae       	std	Y+63, r5	; 0x3f
    2574:	4e ae       	std	Y+62, r4	; 0x3e
    2576:	a3 97       	sbiw	r28, 0x23	; 35
    2578:	93 01       	movw	r18, r6
    257a:	40 e0       	ldi	r20, 0x00	; 0
    257c:	50 e0       	ldi	r21, 0x00	; 0
    257e:	a8 96       	adiw	r28, 0x28	; 40
    2580:	5f ae       	std	Y+63, r5	; 0x3f
    2582:	4e ae       	std	Y+62, r4	; 0x3e
    2584:	a8 97       	sbiw	r28, 0x28	; 40
    2586:	37 c0       	rjmp	.+110    	; 0x25f6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17c>
    2588:	e1 14       	cp	r14, r1
    258a:	f1 04       	cpc	r15, r1
    258c:	61 f0       	breq	.+24     	; 0x25a6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x12c>
    258e:	a8 96       	adiw	r28, 0x28	; 40
    2590:	ae ad       	ldd	r26, Y+62	; 0x3e
    2592:	bf ad       	ldd	r27, Y+63	; 0x3f
    2594:	a8 97       	sbiw	r28, 0x28	; 40
    2596:	6d 91       	ld	r22, X+
    2598:	7c 91       	ld	r23, X
    259a:	11 97       	sbiw	r26, 0x01	; 1
    259c:	80 81       	ld	r24, Z
    259e:	91 81       	ldd	r25, Z+1	; 0x01
    25a0:	68 17       	cp	r22, r24
    25a2:	79 07       	cpc	r23, r25
    25a4:	60 f4       	brcc	.+24     	; 0x25be <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x144>
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	a8 96       	adiw	r28, 0x28	; 40
    25ac:	ae ad       	ldd	r26, Y+62	; 0x3e
    25ae:	bf ad       	ldd	r27, Y+63	; 0x3f
    25b0:	a8 97       	sbiw	r28, 0x28	; 40
    25b2:	11 96       	adiw	r26, 0x01	; 1
    25b4:	9c 93       	st	X, r25
    25b6:	8e 93       	st	-X, r24
    25b8:	e1 14       	cp	r14, r1
    25ba:	f1 04       	cpc	r15, r1
    25bc:	49 f0       	breq	.+18     	; 0x25d0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x156>
    25be:	d9 01       	movw	r26, r18
    25c0:	6d 91       	ld	r22, X+
    25c2:	7c 91       	ld	r23, X
    25c4:	11 97       	sbiw	r26, 0x01	; 1
    25c6:	80 81       	ld	r24, Z
    25c8:	91 81       	ldd	r25, Z+1	; 0x01
    25ca:	86 17       	cp	r24, r22
    25cc:	97 07       	cpc	r25, r23
    25ce:	28 f4       	brcc	.+10     	; 0x25da <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x160>
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	d9 01       	movw	r26, r18
    25d6:	8d 93       	st	X+, r24
    25d8:	9c 93       	st	X, r25
    25da:	4f 5f       	subi	r20, 0xFF	; 255
    25dc:	5f 4f       	sbci	r21, 0xFF	; 255
    25de:	2e 5f       	subi	r18, 0xFE	; 254
    25e0:	3f 4f       	sbci	r19, 0xFF	; 255
    25e2:	32 96       	adiw	r30, 0x02	; 2
    25e4:	a8 96       	adiw	r28, 0x28	; 40
    25e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    25e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    25ea:	a8 97       	sbiw	r28, 0x28	; 40
    25ec:	02 96       	adiw	r24, 0x02	; 2
    25ee:	a8 96       	adiw	r28, 0x28	; 40
    25f0:	9f af       	std	Y+63, r25	; 0x3f
    25f2:	8e af       	std	Y+62, r24	; 0x3e
    25f4:	a8 97       	sbiw	r28, 0x28	; 40
    25f6:	a5 96       	adiw	r28, 0x25	; 37
    25f8:	ae ad       	ldd	r26, Y+62	; 0x3e
    25fa:	bf ad       	ldd	r27, Y+63	; 0x3f
    25fc:	a5 97       	sbiw	r28, 0x25	; 37
    25fe:	4a 17       	cp	r20, r26
    2600:	5b 07       	cpc	r21, r27
    2602:	14 f2       	brlt	.-124    	; 0x2588 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x10e>
    2604:	08 94       	sec
    2606:	e1 1c       	adc	r14, r1
    2608:	f1 1c       	adc	r15, r1
    260a:	ba e0       	ldi	r27, 0x0A	; 10
    260c:	eb 16       	cp	r14, r27
    260e:	f1 04       	cpc	r15, r1
    2610:	09 f0       	breq	.+2      	; 0x2614 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x19a>
    2612:	9b cf       	rjmp	.-202    	; 0x254a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xd0>
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	2c c0       	rjmp	.+88     	; 0x2672 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f8>
    261a:	f1 01       	movw	r30, r2
    261c:	41 91       	ld	r20, Z+
    261e:	51 91       	ld	r21, Z+
    2620:	1f 01       	movw	r2, r30
    2622:	bc 01       	movw	r22, r24
    2624:	66 0f       	add	r22, r22
    2626:	77 1f       	adc	r23, r23
    2628:	d6 01       	movw	r26, r12
    262a:	ed 91       	ld	r30, X+
    262c:	fc 91       	ld	r31, X
    262e:	11 97       	sbiw	r26, 0x01	; 1
    2630:	e6 0f       	add	r30, r22
    2632:	f7 1f       	adc	r31, r23
    2634:	20 81       	ld	r18, Z
    2636:	31 81       	ldd	r19, Z+1	; 0x01
    2638:	24 17       	cp	r18, r20
    263a:	35 07       	cpc	r19, r21
    263c:	10 f4       	brcc	.+4      	; 0x2642 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1c8>
    263e:	51 83       	std	Z+1, r21	; 0x01
    2640:	40 83       	st	Z, r20
    2642:	a3 96       	adiw	r28, 0x23	; 35
    2644:	ee ad       	ldd	r30, Y+62	; 0x3e
    2646:	ff ad       	ldd	r31, Y+63	; 0x3f
    2648:	a3 97       	sbiw	r28, 0x23	; 35
    264a:	41 91       	ld	r20, Z+
    264c:	51 91       	ld	r21, Z+
    264e:	a3 96       	adiw	r28, 0x23	; 35
    2650:	ff af       	std	Y+63, r31	; 0x3f
    2652:	ee af       	std	Y+62, r30	; 0x3e
    2654:	a3 97       	sbiw	r28, 0x23	; 35
    2656:	d4 01       	movw	r26, r8
    2658:	ed 91       	ld	r30, X+
    265a:	fc 91       	ld	r31, X
    265c:	11 97       	sbiw	r26, 0x01	; 1
    265e:	e6 0f       	add	r30, r22
    2660:	f7 1f       	adc	r31, r23
    2662:	20 81       	ld	r18, Z
    2664:	31 81       	ldd	r19, Z+1	; 0x01
    2666:	42 17       	cp	r20, r18
    2668:	53 07       	cpc	r21, r19
    266a:	10 f4       	brcc	.+4      	; 0x2670 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1f6>
    266c:	51 83       	std	Z+1, r21	; 0x01
    266e:	40 83       	st	Z, r20
    2670:	01 96       	adiw	r24, 0x01	; 1
    2672:	f8 01       	movw	r30, r16
    2674:	20 85       	ldd	r18, Z+8	; 0x08
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	82 17       	cp	r24, r18
    267a:	93 07       	cpc	r25, r19
    267c:	74 f2       	brlt	.-100    	; 0x261a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1a0>
    267e:	c9 59       	subi	r28, 0x99	; 153
    2680:	df 4f       	sbci	r29, 0xFF	; 255
    2682:	e2 e1       	ldi	r30, 0x12	; 18
    2684:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__>

00002688 <_ZN16PololuQTRSensors9calibrateEh>:
    2688:	1f 93       	push	r17
    268a:	cf 93       	push	r28
    268c:	df 93       	push	r29
    268e:	ec 01       	movw	r28, r24
    2690:	16 2f       	mov	r17, r22
    2692:	86 2f       	mov	r24, r22
    2694:	81 50       	subi	r24, 0x01	; 1
    2696:	82 30       	cpi	r24, 0x02	; 2
    2698:	58 f4       	brcc	.+22     	; 0x26b0 <_ZN16PololuQTRSensors9calibrateEh+0x28>
    269a:	ae 01       	movw	r20, r28
    269c:	4e 5f       	subi	r20, 0xFE	; 254
    269e:	5f 4f       	sbci	r21, 0xFF	; 255
    26a0:	ce 01       	movw	r24, r28
    26a2:	be 01       	movw	r22, r28
    26a4:	21 e0       	ldi	r18, 0x01	; 1
    26a6:	0e 94 3d 12 	call	0x247a	; 0x247a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    26aa:	12 30       	cpi	r17, 0x02	; 2
    26ac:	19 f0       	breq	.+6      	; 0x26b4 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    26ae:	0c c0       	rjmp	.+24     	; 0x26c8 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    26b0:	66 23       	and	r22, r22
    26b2:	51 f4       	brne	.+20     	; 0x26c8 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    26b4:	be 01       	movw	r22, r28
    26b6:	6c 5f       	subi	r22, 0xFC	; 252
    26b8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ba:	ae 01       	movw	r20, r28
    26bc:	4a 5f       	subi	r20, 0xFA	; 250
    26be:	5f 4f       	sbci	r21, 0xFF	; 255
    26c0:	ce 01       	movw	r24, r28
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	0e 94 3d 12 	call	0x247a	; 0x247a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
    26ce:	08 95       	ret

000026d0 <_ZN16PololuQTRSensorsD1Ev>:
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	ec 01       	movw	r28, r24
    26d6:	8a 81       	ldd	r24, Y+2	; 0x02
    26d8:	9b 81       	ldd	r25, Y+3	; 0x03
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	11 f0       	breq	.+4      	; 0x26e2 <_ZN16PololuQTRSensorsD1Ev+0x12>
    26de:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <free>
    26e2:	8e 81       	ldd	r24, Y+6	; 0x06
    26e4:	9f 81       	ldd	r25, Y+7	; 0x07
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	11 f0       	breq	.+4      	; 0x26ee <_ZN16PololuQTRSensorsD1Ev+0x1e>
    26ea:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <free>
    26ee:	88 81       	ld	r24, Y
    26f0:	99 81       	ldd	r25, Y+1	; 0x01
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	11 f0       	breq	.+4      	; 0x26fa <_ZN16PololuQTRSensorsD1Ev+0x2a>
    26f6:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <free>
    26fa:	8c 81       	ldd	r24, Y+4	; 0x04
    26fc:	9d 81       	ldd	r25, Y+5	; 0x05
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	11 f0       	breq	.+4      	; 0x2706 <_ZN16PololuQTRSensorsD1Ev+0x36>
    2702:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <free>
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	08 95       	ret

0000270c <__mulsi3>:
    270c:	db 01       	movw	r26, r22
    270e:	8f 93       	push	r24
    2710:	9f 93       	push	r25
    2712:	0e 94 0b 14 	call	0x2816	; 0x2816 <__muluhisi3>
    2716:	bf 91       	pop	r27
    2718:	af 91       	pop	r26
    271a:	a2 9f       	mul	r26, r18
    271c:	80 0d       	add	r24, r0
    271e:	91 1d       	adc	r25, r1
    2720:	a3 9f       	mul	r26, r19
    2722:	90 0d       	add	r25, r0
    2724:	b2 9f       	mul	r27, r18
    2726:	90 0d       	add	r25, r0
    2728:	11 24       	eor	r1, r1
    272a:	08 95       	ret

0000272c <__udivmodqi4>:
    272c:	99 1b       	sub	r25, r25
    272e:	79 e0       	ldi	r23, 0x09	; 9
    2730:	04 c0       	rjmp	.+8      	; 0x273a <__udivmodqi4_ep>

00002732 <__udivmodqi4_loop>:
    2732:	99 1f       	adc	r25, r25
    2734:	96 17       	cp	r25, r22
    2736:	08 f0       	brcs	.+2      	; 0x273a <__udivmodqi4_ep>
    2738:	96 1b       	sub	r25, r22

0000273a <__udivmodqi4_ep>:
    273a:	88 1f       	adc	r24, r24
    273c:	7a 95       	dec	r23
    273e:	c9 f7       	brne	.-14     	; 0x2732 <__udivmodqi4_loop>
    2740:	80 95       	com	r24
    2742:	08 95       	ret

00002744 <__udivmodhi4>:
    2744:	aa 1b       	sub	r26, r26
    2746:	bb 1b       	sub	r27, r27
    2748:	51 e1       	ldi	r21, 0x11	; 17
    274a:	07 c0       	rjmp	.+14     	; 0x275a <__udivmodhi4_ep>

0000274c <__udivmodhi4_loop>:
    274c:	aa 1f       	adc	r26, r26
    274e:	bb 1f       	adc	r27, r27
    2750:	a6 17       	cp	r26, r22
    2752:	b7 07       	cpc	r27, r23
    2754:	10 f0       	brcs	.+4      	; 0x275a <__udivmodhi4_ep>
    2756:	a6 1b       	sub	r26, r22
    2758:	b7 0b       	sbc	r27, r23

0000275a <__udivmodhi4_ep>:
    275a:	88 1f       	adc	r24, r24
    275c:	99 1f       	adc	r25, r25
    275e:	5a 95       	dec	r21
    2760:	a9 f7       	brne	.-22     	; 0x274c <__udivmodhi4_loop>
    2762:	80 95       	com	r24
    2764:	90 95       	com	r25
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	08 95       	ret

0000276c <__divmodhi4>:
    276c:	97 fb       	bst	r25, 7
    276e:	07 2e       	mov	r0, r23
    2770:	16 f4       	brtc	.+4      	; 0x2776 <__divmodhi4+0xa>
    2772:	00 94       	com	r0
    2774:	07 d0       	rcall	.+14     	; 0x2784 <__divmodhi4_neg1>
    2776:	77 fd       	sbrc	r23, 7
    2778:	09 d0       	rcall	.+18     	; 0x278c <__divmodhi4_neg2>
    277a:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodhi4>
    277e:	07 fc       	sbrc	r0, 7
    2780:	05 d0       	rcall	.+10     	; 0x278c <__divmodhi4_neg2>
    2782:	3e f4       	brtc	.+14     	; 0x2792 <__divmodhi4_exit>

00002784 <__divmodhi4_neg1>:
    2784:	90 95       	com	r25
    2786:	81 95       	neg	r24
    2788:	9f 4f       	sbci	r25, 0xFF	; 255
    278a:	08 95       	ret

0000278c <__divmodhi4_neg2>:
    278c:	70 95       	com	r23
    278e:	61 95       	neg	r22
    2790:	7f 4f       	sbci	r23, 0xFF	; 255

00002792 <__divmodhi4_exit>:
    2792:	08 95       	ret

00002794 <__udivmodsi4>:
    2794:	a1 e2       	ldi	r26, 0x21	; 33
    2796:	1a 2e       	mov	r1, r26
    2798:	aa 1b       	sub	r26, r26
    279a:	bb 1b       	sub	r27, r27
    279c:	fd 01       	movw	r30, r26
    279e:	0d c0       	rjmp	.+26     	; 0x27ba <__udivmodsi4_ep>

000027a0 <__udivmodsi4_loop>:
    27a0:	aa 1f       	adc	r26, r26
    27a2:	bb 1f       	adc	r27, r27
    27a4:	ee 1f       	adc	r30, r30
    27a6:	ff 1f       	adc	r31, r31
    27a8:	a2 17       	cp	r26, r18
    27aa:	b3 07       	cpc	r27, r19
    27ac:	e4 07       	cpc	r30, r20
    27ae:	f5 07       	cpc	r31, r21
    27b0:	20 f0       	brcs	.+8      	; 0x27ba <__udivmodsi4_ep>
    27b2:	a2 1b       	sub	r26, r18
    27b4:	b3 0b       	sbc	r27, r19
    27b6:	e4 0b       	sbc	r30, r20
    27b8:	f5 0b       	sbc	r31, r21

000027ba <__udivmodsi4_ep>:
    27ba:	66 1f       	adc	r22, r22
    27bc:	77 1f       	adc	r23, r23
    27be:	88 1f       	adc	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	1a 94       	dec	r1
    27c4:	69 f7       	brne	.-38     	; 0x27a0 <__udivmodsi4_loop>
    27c6:	60 95       	com	r22
    27c8:	70 95       	com	r23
    27ca:	80 95       	com	r24
    27cc:	90 95       	com	r25
    27ce:	9b 01       	movw	r18, r22
    27d0:	ac 01       	movw	r20, r24
    27d2:	bd 01       	movw	r22, r26
    27d4:	cf 01       	movw	r24, r30
    27d6:	08 95       	ret

000027d8 <__divmodsi4>:
    27d8:	05 2e       	mov	r0, r21
    27da:	97 fb       	bst	r25, 7
    27dc:	1e f4       	brtc	.+6      	; 0x27e4 <__divmodsi4+0xc>
    27de:	00 94       	com	r0
    27e0:	0e 94 03 14 	call	0x2806	; 0x2806 <__negsi2>
    27e4:	57 fd       	sbrc	r21, 7
    27e6:	07 d0       	rcall	.+14     	; 0x27f6 <__divmodsi4_neg2>
    27e8:	0e 94 ca 13 	call	0x2794	; 0x2794 <__udivmodsi4>
    27ec:	07 fc       	sbrc	r0, 7
    27ee:	03 d0       	rcall	.+6      	; 0x27f6 <__divmodsi4_neg2>
    27f0:	4e f4       	brtc	.+18     	; 0x2804 <__divmodsi4_exit>
    27f2:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__negsi2>

000027f6 <__divmodsi4_neg2>:
    27f6:	50 95       	com	r21
    27f8:	40 95       	com	r20
    27fa:	30 95       	com	r19
    27fc:	21 95       	neg	r18
    27fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2800:	4f 4f       	sbci	r20, 0xFF	; 255
    2802:	5f 4f       	sbci	r21, 0xFF	; 255

00002804 <__divmodsi4_exit>:
    2804:	08 95       	ret

00002806 <__negsi2>:
    2806:	90 95       	com	r25
    2808:	80 95       	com	r24
    280a:	70 95       	com	r23
    280c:	61 95       	neg	r22
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	8f 4f       	sbci	r24, 0xFF	; 255
    2812:	9f 4f       	sbci	r25, 0xFF	; 255
    2814:	08 95       	ret

00002816 <__muluhisi3>:
    2816:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__umulhisi3>
    281a:	a5 9f       	mul	r26, r21
    281c:	90 0d       	add	r25, r0
    281e:	b4 9f       	mul	r27, r20
    2820:	90 0d       	add	r25, r0
    2822:	a4 9f       	mul	r26, r20
    2824:	80 0d       	add	r24, r0
    2826:	91 1d       	adc	r25, r1
    2828:	11 24       	eor	r1, r1
    282a:	08 95       	ret

0000282c <__prologue_saves__>:
    282c:	2f 92       	push	r2
    282e:	3f 92       	push	r3
    2830:	4f 92       	push	r4
    2832:	5f 92       	push	r5
    2834:	6f 92       	push	r6
    2836:	7f 92       	push	r7
    2838:	8f 92       	push	r8
    283a:	9f 92       	push	r9
    283c:	af 92       	push	r10
    283e:	bf 92       	push	r11
    2840:	cf 92       	push	r12
    2842:	df 92       	push	r13
    2844:	ef 92       	push	r14
    2846:	ff 92       	push	r15
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	ca 1b       	sub	r28, r26
    2856:	db 0b       	sbc	r29, r27
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	09 94       	ijmp

00002864 <__epilogue_restores__>:
    2864:	2a 88       	ldd	r2, Y+18	; 0x12
    2866:	39 88       	ldd	r3, Y+17	; 0x11
    2868:	48 88       	ldd	r4, Y+16	; 0x10
    286a:	5f 84       	ldd	r5, Y+15	; 0x0f
    286c:	6e 84       	ldd	r6, Y+14	; 0x0e
    286e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2870:	8c 84       	ldd	r8, Y+12	; 0x0c
    2872:	9b 84       	ldd	r9, Y+11	; 0x0b
    2874:	aa 84       	ldd	r10, Y+10	; 0x0a
    2876:	b9 84       	ldd	r11, Y+9	; 0x09
    2878:	c8 84       	ldd	r12, Y+8	; 0x08
    287a:	df 80       	ldd	r13, Y+7	; 0x07
    287c:	ee 80       	ldd	r14, Y+6	; 0x06
    287e:	fd 80       	ldd	r15, Y+5	; 0x05
    2880:	0c 81       	ldd	r16, Y+4	; 0x04
    2882:	1b 81       	ldd	r17, Y+3	; 0x03
    2884:	aa 81       	ldd	r26, Y+2	; 0x02
    2886:	b9 81       	ldd	r27, Y+1	; 0x01
    2888:	ce 0f       	add	r28, r30
    288a:	d1 1d       	adc	r29, r1
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	de bf       	out	0x3e, r29	; 62
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	cd bf       	out	0x3d, r28	; 61
    2896:	ed 01       	movw	r28, r26
    2898:	08 95       	ret

0000289a <__tablejump2__>:
    289a:	ee 0f       	add	r30, r30
    289c:	ff 1f       	adc	r31, r31

0000289e <__tablejump__>:
    289e:	05 90       	lpm	r0, Z+
    28a0:	f4 91       	lpm	r31, Z
    28a2:	e0 2d       	mov	r30, r0
    28a4:	09 94       	ijmp

000028a6 <__umulhisi3>:
    28a6:	a2 9f       	mul	r26, r18
    28a8:	b0 01       	movw	r22, r0
    28aa:	b3 9f       	mul	r27, r19
    28ac:	c0 01       	movw	r24, r0
    28ae:	a3 9f       	mul	r26, r19
    28b0:	70 0d       	add	r23, r0
    28b2:	81 1d       	adc	r24, r1
    28b4:	11 24       	eor	r1, r1
    28b6:	91 1d       	adc	r25, r1
    28b8:	b2 9f       	mul	r27, r18
    28ba:	70 0d       	add	r23, r0
    28bc:	81 1d       	adc	r24, r1
    28be:	11 24       	eor	r1, r1
    28c0:	91 1d       	adc	r25, r1
    28c2:	08 95       	ret

000028c4 <malloc>:
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
    28c8:	82 30       	cpi	r24, 0x02	; 2
    28ca:	91 05       	cpc	r25, r1
    28cc:	10 f4       	brcc	.+4      	; 0x28d2 <malloc+0xe>
    28ce:	82 e0       	ldi	r24, 0x02	; 2
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	e0 91 b5 03 	lds	r30, 0x03B5
    28d6:	f0 91 b6 03 	lds	r31, 0x03B6
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	a0 e0       	ldi	r26, 0x00	; 0
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	30 97       	sbiw	r30, 0x00	; 0
    28e4:	39 f1       	breq	.+78     	; 0x2934 <malloc+0x70>
    28e6:	40 81       	ld	r20, Z
    28e8:	51 81       	ldd	r21, Z+1	; 0x01
    28ea:	48 17       	cp	r20, r24
    28ec:	59 07       	cpc	r21, r25
    28ee:	b8 f0       	brcs	.+46     	; 0x291e <malloc+0x5a>
    28f0:	48 17       	cp	r20, r24
    28f2:	59 07       	cpc	r21, r25
    28f4:	71 f4       	brne	.+28     	; 0x2912 <malloc+0x4e>
    28f6:	82 81       	ldd	r24, Z+2	; 0x02
    28f8:	93 81       	ldd	r25, Z+3	; 0x03
    28fa:	10 97       	sbiw	r26, 0x00	; 0
    28fc:	29 f0       	breq	.+10     	; 0x2908 <malloc+0x44>
    28fe:	13 96       	adiw	r26, 0x03	; 3
    2900:	9c 93       	st	X, r25
    2902:	8e 93       	st	-X, r24
    2904:	12 97       	sbiw	r26, 0x02	; 2
    2906:	2c c0       	rjmp	.+88     	; 0x2960 <malloc+0x9c>
    2908:	90 93 b6 03 	sts	0x03B6, r25
    290c:	80 93 b5 03 	sts	0x03B5, r24
    2910:	27 c0       	rjmp	.+78     	; 0x2960 <malloc+0x9c>
    2912:	21 15       	cp	r18, r1
    2914:	31 05       	cpc	r19, r1
    2916:	31 f0       	breq	.+12     	; 0x2924 <malloc+0x60>
    2918:	42 17       	cp	r20, r18
    291a:	53 07       	cpc	r21, r19
    291c:	18 f0       	brcs	.+6      	; 0x2924 <malloc+0x60>
    291e:	a9 01       	movw	r20, r18
    2920:	db 01       	movw	r26, r22
    2922:	01 c0       	rjmp	.+2      	; 0x2926 <malloc+0x62>
    2924:	ef 01       	movw	r28, r30
    2926:	9a 01       	movw	r18, r20
    2928:	bd 01       	movw	r22, r26
    292a:	df 01       	movw	r26, r30
    292c:	02 80       	ldd	r0, Z+2	; 0x02
    292e:	f3 81       	ldd	r31, Z+3	; 0x03
    2930:	e0 2d       	mov	r30, r0
    2932:	d7 cf       	rjmp	.-82     	; 0x28e2 <malloc+0x1e>
    2934:	21 15       	cp	r18, r1
    2936:	31 05       	cpc	r19, r1
    2938:	f9 f0       	breq	.+62     	; 0x2978 <malloc+0xb4>
    293a:	28 1b       	sub	r18, r24
    293c:	39 0b       	sbc	r19, r25
    293e:	24 30       	cpi	r18, 0x04	; 4
    2940:	31 05       	cpc	r19, r1
    2942:	80 f4       	brcc	.+32     	; 0x2964 <malloc+0xa0>
    2944:	8a 81       	ldd	r24, Y+2	; 0x02
    2946:	9b 81       	ldd	r25, Y+3	; 0x03
    2948:	61 15       	cp	r22, r1
    294a:	71 05       	cpc	r23, r1
    294c:	21 f0       	breq	.+8      	; 0x2956 <malloc+0x92>
    294e:	fb 01       	movw	r30, r22
    2950:	93 83       	std	Z+3, r25	; 0x03
    2952:	82 83       	std	Z+2, r24	; 0x02
    2954:	04 c0       	rjmp	.+8      	; 0x295e <malloc+0x9a>
    2956:	90 93 b6 03 	sts	0x03B6, r25
    295a:	80 93 b5 03 	sts	0x03B5, r24
    295e:	fe 01       	movw	r30, r28
    2960:	32 96       	adiw	r30, 0x02	; 2
    2962:	44 c0       	rjmp	.+136    	; 0x29ec <malloc+0x128>
    2964:	fe 01       	movw	r30, r28
    2966:	e2 0f       	add	r30, r18
    2968:	f3 1f       	adc	r31, r19
    296a:	81 93       	st	Z+, r24
    296c:	91 93       	st	Z+, r25
    296e:	22 50       	subi	r18, 0x02	; 2
    2970:	31 09       	sbc	r19, r1
    2972:	39 83       	std	Y+1, r19	; 0x01
    2974:	28 83       	st	Y, r18
    2976:	3a c0       	rjmp	.+116    	; 0x29ec <malloc+0x128>
    2978:	20 91 b3 03 	lds	r18, 0x03B3
    297c:	30 91 b4 03 	lds	r19, 0x03B4
    2980:	23 2b       	or	r18, r19
    2982:	41 f4       	brne	.+16     	; 0x2994 <malloc+0xd0>
    2984:	20 91 2d 01 	lds	r18, 0x012D
    2988:	30 91 2e 01 	lds	r19, 0x012E
    298c:	30 93 b4 03 	sts	0x03B4, r19
    2990:	20 93 b3 03 	sts	0x03B3, r18
    2994:	20 91 2b 01 	lds	r18, 0x012B
    2998:	30 91 2c 01 	lds	r19, 0x012C
    299c:	21 15       	cp	r18, r1
    299e:	31 05       	cpc	r19, r1
    29a0:	41 f4       	brne	.+16     	; 0x29b2 <malloc+0xee>
    29a2:	2d b7       	in	r18, 0x3d	; 61
    29a4:	3e b7       	in	r19, 0x3e	; 62
    29a6:	40 91 2f 01 	lds	r20, 0x012F
    29aa:	50 91 30 01 	lds	r21, 0x0130
    29ae:	24 1b       	sub	r18, r20
    29b0:	35 0b       	sbc	r19, r21
    29b2:	e0 91 b3 03 	lds	r30, 0x03B3
    29b6:	f0 91 b4 03 	lds	r31, 0x03B4
    29ba:	e2 17       	cp	r30, r18
    29bc:	f3 07       	cpc	r31, r19
    29be:	a0 f4       	brcc	.+40     	; 0x29e8 <malloc+0x124>
    29c0:	2e 1b       	sub	r18, r30
    29c2:	3f 0b       	sbc	r19, r31
    29c4:	28 17       	cp	r18, r24
    29c6:	39 07       	cpc	r19, r25
    29c8:	78 f0       	brcs	.+30     	; 0x29e8 <malloc+0x124>
    29ca:	ac 01       	movw	r20, r24
    29cc:	4e 5f       	subi	r20, 0xFE	; 254
    29ce:	5f 4f       	sbci	r21, 0xFF	; 255
    29d0:	24 17       	cp	r18, r20
    29d2:	35 07       	cpc	r19, r21
    29d4:	48 f0       	brcs	.+18     	; 0x29e8 <malloc+0x124>
    29d6:	4e 0f       	add	r20, r30
    29d8:	5f 1f       	adc	r21, r31
    29da:	50 93 b4 03 	sts	0x03B4, r21
    29de:	40 93 b3 03 	sts	0x03B3, r20
    29e2:	81 93       	st	Z+, r24
    29e4:	91 93       	st	Z+, r25
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <malloc+0x128>
    29e8:	e0 e0       	ldi	r30, 0x00	; 0
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	cf 01       	movw	r24, r30
    29ee:	df 91       	pop	r29
    29f0:	cf 91       	pop	r28
    29f2:	08 95       	ret

000029f4 <free>:
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	09 f4       	brne	.+2      	; 0x29fe <free+0xa>
    29fc:	87 c0       	rjmp	.+270    	; 0x2b0c <free+0x118>
    29fe:	fc 01       	movw	r30, r24
    2a00:	32 97       	sbiw	r30, 0x02	; 2
    2a02:	13 82       	std	Z+3, r1	; 0x03
    2a04:	12 82       	std	Z+2, r1	; 0x02
    2a06:	c0 91 b5 03 	lds	r28, 0x03B5
    2a0a:	d0 91 b6 03 	lds	r29, 0x03B6
    2a0e:	20 97       	sbiw	r28, 0x00	; 0
    2a10:	81 f4       	brne	.+32     	; 0x2a32 <free+0x3e>
    2a12:	20 81       	ld	r18, Z
    2a14:	31 81       	ldd	r19, Z+1	; 0x01
    2a16:	28 0f       	add	r18, r24
    2a18:	39 1f       	adc	r19, r25
    2a1a:	80 91 b3 03 	lds	r24, 0x03B3
    2a1e:	90 91 b4 03 	lds	r25, 0x03B4
    2a22:	82 17       	cp	r24, r18
    2a24:	93 07       	cpc	r25, r19
    2a26:	79 f5       	brne	.+94     	; 0x2a86 <free+0x92>
    2a28:	f0 93 b4 03 	sts	0x03B4, r31
    2a2c:	e0 93 b3 03 	sts	0x03B3, r30
    2a30:	6d c0       	rjmp	.+218    	; 0x2b0c <free+0x118>
    2a32:	de 01       	movw	r26, r28
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	ae 17       	cp	r26, r30
    2a3a:	bf 07       	cpc	r27, r31
    2a3c:	50 f4       	brcc	.+20     	; 0x2a52 <free+0x5e>
    2a3e:	12 96       	adiw	r26, 0x02	; 2
    2a40:	4d 91       	ld	r20, X+
    2a42:	5c 91       	ld	r21, X
    2a44:	13 97       	sbiw	r26, 0x03	; 3
    2a46:	9d 01       	movw	r18, r26
    2a48:	41 15       	cp	r20, r1
    2a4a:	51 05       	cpc	r21, r1
    2a4c:	09 f1       	breq	.+66     	; 0x2a90 <free+0x9c>
    2a4e:	da 01       	movw	r26, r20
    2a50:	f3 cf       	rjmp	.-26     	; 0x2a38 <free+0x44>
    2a52:	b3 83       	std	Z+3, r27	; 0x03
    2a54:	a2 83       	std	Z+2, r26	; 0x02
    2a56:	40 81       	ld	r20, Z
    2a58:	51 81       	ldd	r21, Z+1	; 0x01
    2a5a:	84 0f       	add	r24, r20
    2a5c:	95 1f       	adc	r25, r21
    2a5e:	8a 17       	cp	r24, r26
    2a60:	9b 07       	cpc	r25, r27
    2a62:	71 f4       	brne	.+28     	; 0x2a80 <free+0x8c>
    2a64:	8d 91       	ld	r24, X+
    2a66:	9c 91       	ld	r25, X
    2a68:	11 97       	sbiw	r26, 0x01	; 1
    2a6a:	84 0f       	add	r24, r20
    2a6c:	95 1f       	adc	r25, r21
    2a6e:	02 96       	adiw	r24, 0x02	; 2
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	80 83       	st	Z, r24
    2a74:	12 96       	adiw	r26, 0x02	; 2
    2a76:	8d 91       	ld	r24, X+
    2a78:	9c 91       	ld	r25, X
    2a7a:	13 97       	sbiw	r26, 0x03	; 3
    2a7c:	93 83       	std	Z+3, r25	; 0x03
    2a7e:	82 83       	std	Z+2, r24	; 0x02
    2a80:	21 15       	cp	r18, r1
    2a82:	31 05       	cpc	r19, r1
    2a84:	29 f4       	brne	.+10     	; 0x2a90 <free+0x9c>
    2a86:	f0 93 b6 03 	sts	0x03B6, r31
    2a8a:	e0 93 b5 03 	sts	0x03B5, r30
    2a8e:	3e c0       	rjmp	.+124    	; 0x2b0c <free+0x118>
    2a90:	d9 01       	movw	r26, r18
    2a92:	13 96       	adiw	r26, 0x03	; 3
    2a94:	fc 93       	st	X, r31
    2a96:	ee 93       	st	-X, r30
    2a98:	12 97       	sbiw	r26, 0x02	; 2
    2a9a:	4d 91       	ld	r20, X+
    2a9c:	5d 91       	ld	r21, X+
    2a9e:	a4 0f       	add	r26, r20
    2aa0:	b5 1f       	adc	r27, r21
    2aa2:	ea 17       	cp	r30, r26
    2aa4:	fb 07       	cpc	r31, r27
    2aa6:	79 f4       	brne	.+30     	; 0x2ac6 <free+0xd2>
    2aa8:	80 81       	ld	r24, Z
    2aaa:	91 81       	ldd	r25, Z+1	; 0x01
    2aac:	84 0f       	add	r24, r20
    2aae:	95 1f       	adc	r25, r21
    2ab0:	02 96       	adiw	r24, 0x02	; 2
    2ab2:	d9 01       	movw	r26, r18
    2ab4:	11 96       	adiw	r26, 0x01	; 1
    2ab6:	9c 93       	st	X, r25
    2ab8:	8e 93       	st	-X, r24
    2aba:	82 81       	ldd	r24, Z+2	; 0x02
    2abc:	93 81       	ldd	r25, Z+3	; 0x03
    2abe:	13 96       	adiw	r26, 0x03	; 3
    2ac0:	9c 93       	st	X, r25
    2ac2:	8e 93       	st	-X, r24
    2ac4:	12 97       	sbiw	r26, 0x02	; 2
    2ac6:	e0 e0       	ldi	r30, 0x00	; 0
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ace:	00 97       	sbiw	r24, 0x00	; 0
    2ad0:	19 f0       	breq	.+6      	; 0x2ad8 <free+0xe4>
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ec 01       	movw	r28, r24
    2ad6:	f9 cf       	rjmp	.-14     	; 0x2aca <free+0xd6>
    2ad8:	ce 01       	movw	r24, r28
    2ada:	02 96       	adiw	r24, 0x02	; 2
    2adc:	28 81       	ld	r18, Y
    2ade:	39 81       	ldd	r19, Y+1	; 0x01
    2ae0:	82 0f       	add	r24, r18
    2ae2:	93 1f       	adc	r25, r19
    2ae4:	20 91 b3 03 	lds	r18, 0x03B3
    2ae8:	30 91 b4 03 	lds	r19, 0x03B4
    2aec:	28 17       	cp	r18, r24
    2aee:	39 07       	cpc	r19, r25
    2af0:	69 f4       	brne	.+26     	; 0x2b0c <free+0x118>
    2af2:	30 97       	sbiw	r30, 0x00	; 0
    2af4:	29 f4       	brne	.+10     	; 0x2b00 <free+0x10c>
    2af6:	10 92 b6 03 	sts	0x03B6, r1
    2afa:	10 92 b5 03 	sts	0x03B5, r1
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <free+0x110>
    2b00:	13 82       	std	Z+3, r1	; 0x03
    2b02:	12 82       	std	Z+2, r1	; 0x02
    2b04:	d0 93 b4 03 	sts	0x03B4, r29
    2b08:	c0 93 b3 03 	sts	0x03B3, r28
    2b0c:	df 91       	pop	r29
    2b0e:	cf 91       	pop	r28
    2b10:	08 95       	ret

00002b12 <strrev>:
    2b12:	dc 01       	movw	r26, r24
    2b14:	fc 01       	movw	r30, r24
    2b16:	67 2f       	mov	r22, r23
    2b18:	71 91       	ld	r23, Z+
    2b1a:	77 23       	and	r23, r23
    2b1c:	e1 f7       	brne	.-8      	; 0x2b16 <strrev+0x4>
    2b1e:	32 97       	sbiw	r30, 0x02	; 2
    2b20:	04 c0       	rjmp	.+8      	; 0x2b2a <strrev+0x18>
    2b22:	7c 91       	ld	r23, X
    2b24:	6d 93       	st	X+, r22
    2b26:	70 83       	st	Z, r23
    2b28:	62 91       	ld	r22, -Z
    2b2a:	ae 17       	cp	r26, r30
    2b2c:	bf 07       	cpc	r27, r31
    2b2e:	c8 f3       	brcs	.-14     	; 0x2b22 <strrev+0x10>
    2b30:	08 95       	ret

00002b32 <__do_global_dtors>:
    2b32:	10 e0       	ldi	r17, 0x00	; 0
    2b34:	c0 eb       	ldi	r28, 0xB0	; 176
    2b36:	d0 e0       	ldi	r29, 0x00	; 0
    2b38:	04 c0       	rjmp	.+8      	; 0x2b42 <__do_global_dtors+0x10>
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	0e 94 4f 14 	call	0x289e	; 0x289e <__tablejump__>
    2b40:	22 96       	adiw	r28, 0x02	; 2
    2b42:	c2 3b       	cpi	r28, 0xB2	; 178
    2b44:	d1 07       	cpc	r29, r17
    2b46:	c9 f7       	brne	.-14     	; 0x2b3a <__do_global_dtors+0x8>
    2b48:	f8 94       	cli

00002b4a <__stop_program>:
    2b4a:	ff cf       	rjmp	.-2      	; 0x2b4a <__stop_program>
