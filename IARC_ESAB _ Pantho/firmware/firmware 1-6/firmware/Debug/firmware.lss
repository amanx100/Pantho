
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000902  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000902  00000996  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ca  00800066  00800066  0000099c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001539  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000254  00000000  00000000  00001fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000061b  00000000  00000000  00002229  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00002844  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036c  00000000  00000000  00002a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016ac  00000000  00000000  00002d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 33       	cpi	r26, 0x30	; 48
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e6 01 	call	0x3cc	; 0x3cc <main>
  8a:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <go_forward>:
#ifndef M_DIR_H_
#define M_DIR_H_

void go_forward(void)
{
	PORTB = 0x05;
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  96:	8e b5       	in	r24, 0x2e	; 46
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	8e bd       	out	0x2e, r24	; 46
  9c:	08 95       	ret

0000009e <right_rotate>:
	TCCR1B |= (1<<1);
}

void right_rotate(void)
{
	PORTB = 0x09;
  9e:	89 e0       	ldi	r24, 0x09	; 9
  a0:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  a2:	8e b5       	in	r24, 0x2e	; 46
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	8e bd       	out	0x2e, r24	; 46
  a8:	08 95       	ret

000000aa <left_rotate>:
}

void left_rotate(void)
{
	PORTB = 0x06;
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  ae:	8e b5       	in	r24, 0x2e	; 46
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	8e bd       	out	0x2e, r24	; 46
  b4:	08 95       	ret

000000b6 <stay_stop>:
}

void stay_stop(void)
{
	PORTB = 0x00;
  b6:	18 ba       	out	0x18, r1	; 24
	TCCR1B &= ~(1<<1);
  b8:	8e b5       	in	r24, 0x2e	; 46
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	8e bd       	out	0x2e, r24	; 46
  be:	08 95       	ret

000000c0 <sensor_data>:
}

uint8_t sensor_data(void)
{
sn_dt:
	if ((PIND & (1<<PD2)) && (PIND & (1<<PD3)))
  c0:	82 9b       	sbis	0x10, 2	; 16
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <sensor_data>
  c4:	83 9b       	sbis	0x10, 3	; 16
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <sensor_data>
	{
		return PINC;
  c8:	83 b3       	in	r24, 0x13	; 19
	}
	else goto sn_dt;
}
  ca:	08 95       	ret

000000cc <turn_U>:

void turn_U(uint16_t speed)
{
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	81 ee       	ldi	r24, 0xE1	; 225
  da:	94 e0       	ldi	r25, 0x04	; 4
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <turn_U+0x10>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <turn_U+0x1a>
  e6:	00 00       	nop
	_delay_ms(200);
	left_rotate();
  e8:	0e 94 55 00 	call	0xaa	; 0xaa <left_rotate>
	set_speed_L(speed + 300); //70
  ec:	8e 01       	movw	r16, r28
  ee:	04 5d       	subi	r16, 0xD4	; 212
  f0:	1e 4f       	sbci	r17, 0xFE	; 254
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
  f2:	1b bd       	out	0x2b, r17	; 43
  f4:	0a bd       	out	0x2a, r16	; 42
  f6:	2f e7       	ldi	r18, 0x7F	; 127
  f8:	88 e3       	ldi	r24, 0x38	; 56
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <turn_U+0x30>
 104:	00 c0       	rjmp	.+0      	; 0x106 <turn_U+0x3a>
 106:	00 00       	nop
{
	_delay_ms(200);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
 108:	ce 01       	movw	r24, r28
 10a:	c2 97       	sbiw	r24, 0x32	; 50
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 10c:	99 bd       	out	0x29, r25	; 41
 10e:	88 bd       	out	0x28, r24	; 40
	_delay_ms(200);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
 110:	80 5b       	subi	r24, 0xB0	; 176
 112:	9f 4f       	sbci	r25, 0xFF	; 255
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 114:	9b bd       	out	0x2b, r25	; 43
 116:	8a bd       	out	0x2a, r24	; 42
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
	//_delay_ms(100);
	while((sensor_data() & (3<<5)) != (3<<5));
 118:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
 11c:	80 76       	andi	r24, 0x60	; 96
 11e:	80 36       	cpi	r24, 0x60	; 96
 120:	d9 f7       	brne	.-10     	; 0x118 <turn_U+0x4c>
	while((sensor_data() & (3<<4)) != (3<<4));
 122:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
 126:	80 73       	andi	r24, 0x30	; 48
 128:	80 33       	cpi	r24, 0x30	; 48
 12a:	d9 f7       	brne	.-10     	; 0x122 <turn_U+0x56>
	while((sensor_data() & (3<<3)) != (3<<3));
 12c:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
 130:	88 71       	andi	r24, 0x18	; 24
 132:	88 31       	cpi	r24, 0x18	; 24
 134:	d9 f7       	brne	.-10     	; 0x12c <turn_U+0x60>
	//while(sensor_data() != (3<<3));
	go_forward();
 136:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 13a:	d9 bd       	out	0x29, r29	; 41
 13c:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 13e:	1b bd       	out	0x2b, r17	; 43
 140:	0a bd       	out	0x2a, r16	; 42
 142:	2f e7       	ldi	r18, 0x7F	; 127
 144:	88 e3       	ldi	r24, 0x38	; 56
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <turn_U+0x7c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <turn_U+0x86>
 152:	00 00       	nop
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 154:	d9 bd       	out	0x29, r29	; 41
 156:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 158:	db bd       	out	0x2b, r29	; 43
 15a:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_R(speed);
	set_speed_L(speed +300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	08 95       	ret

00000166 <turn_left>:
{
	stay_stop();
}

void turn_left(uint16_t speed)
{
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ec 01       	movw	r28, r24
	left_rotate();
 170:	0e 94 55 00 	call	0xaa	; 0xaa <left_rotate>
	set_speed_L(speed + 300); //70
 174:	8e 01       	movw	r16, r28
 176:	04 5d       	subi	r16, 0xD4	; 212
 178:	1e 4f       	sbci	r17, 0xFE	; 254
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 17a:	1b bd       	out	0x2b, r17	; 43
 17c:	0a bd       	out	0x2a, r16	; 42
 17e:	2f e7       	ldi	r18, 0x7F	; 127
 180:	88 e3       	ldi	r24, 0x38	; 56
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <turn_left+0x1e>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <turn_left+0x28>
 18e:	00 00       	nop
void turn_left(uint16_t speed)
{
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
 190:	ce 01       	movw	r24, r28
 192:	c2 97       	sbiw	r24, 0x32	; 50
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 194:	99 bd       	out	0x29, r25	; 41
 196:	88 bd       	out	0x28, r24	; 40
{
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
 198:	80 5b       	subi	r24, 0xB0	; 176
 19a:	9f 4f       	sbci	r25, 0xFF	; 255
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 19c:	9b bd       	out	0x2b, r25	; 43
 19e:	8a bd       	out	0x2a, r24	; 42
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
	//_delay_ms(100);
	while((sensor_data() & (3<<5)) != (3<<5));
 1a0:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
 1a4:	80 76       	andi	r24, 0x60	; 96
 1a6:	80 36       	cpi	r24, 0x60	; 96
 1a8:	d9 f7       	brne	.-10     	; 0x1a0 <turn_left+0x3a>
	while((sensor_data() & (3<<4)) != (3<<4));
 1aa:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
 1ae:	80 73       	andi	r24, 0x30	; 48
 1b0:	80 33       	cpi	r24, 0x30	; 48
 1b2:	d9 f7       	brne	.-10     	; 0x1aa <turn_left+0x44>
	//while((sensor_data() & (3<<3)) != (3<<3));
	//while(sensor_data() != (3<<3));
	go_forward();
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 1b8:	d9 bd       	out	0x29, r29	; 41
 1ba:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 1bc:	1b bd       	out	0x2b, r17	; 43
 1be:	0a bd       	out	0x2a, r16	; 42
 1c0:	2f e7       	ldi	r18, 0x7F	; 127
 1c2:	88 e3       	ldi	r24, 0x38	; 56
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <turn_left+0x60>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <turn_left+0x6a>
 1d0:	00 00       	nop
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 1d2:	d9 bd       	out	0x29, r29	; 41
 1d4:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 1d6:	db bd       	out	0x2b, r29	; 43
 1d8:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_R(speed);
	set_speed_L(speed +300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <turn_right>:

void turn_right(uint16_t speed)
{
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	ec 01       	movw	r28, r24
	right_rotate();
 1ee:	0e 94 4f 00 	call	0x9e	; 0x9e <right_rotate>
	set_speed_R(speed + 300); //40
 1f2:	8e 01       	movw	r16, r28
 1f4:	04 5d       	subi	r16, 0xD4	; 212
 1f6:	1e 4f       	sbci	r17, 0xFE	; 254
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 1f8:	19 bd       	out	0x29, r17	; 41
 1fa:	08 bd       	out	0x28, r16	; 40
 1fc:	2f e7       	ldi	r18, 0x7F	; 127
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <turn_right+0x1e>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <turn_right+0x28>
 20c:	00 00       	nop
void turn_right(uint16_t speed)
{
	right_rotate();
	set_speed_R(speed + 300); //40
	_delay_ms(50);
	set_speed_L(speed-50); //-50
 20e:	ce 01       	movw	r24, r28
 210:	c2 97       	sbiw	r24, 0x32	; 50
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 212:	9b bd       	out	0x2b, r25	; 43
 214:	8a bd       	out	0x2a, r24	; 42
{
	right_rotate();
	set_speed_R(speed + 300); //40
	_delay_ms(50);
	set_speed_L(speed-50); //-50
	set_speed_R(speed+30);
 216:	80 5b       	subi	r24, 0xB0	; 176
 218:	9f 4f       	sbci	r25, 0xFF	; 255
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 21a:	99 bd       	out	0x29, r25	; 41
 21c:	88 bd       	out	0x28, r24	; 40
	set_speed_R(speed + 300); //40
	_delay_ms(50);
	set_speed_L(speed-50); //-50
	set_speed_R(speed+30);
	//_delay_ms(100);
	while((sensor_data() & (3<<1)) != (3<<1));
 21e:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
 222:	86 70       	andi	r24, 0x06	; 6
 224:	86 30       	cpi	r24, 0x06	; 6
 226:	d9 f7       	brne	.-10     	; 0x21e <turn_right+0x3a>
	while((sensor_data() & (3<<2)) != (3<<2));
 228:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
 22c:	8c 70       	andi	r24, 0x0C	; 12
 22e:	8c 30       	cpi	r24, 0x0C	; 12
 230:	d9 f7       	brne	.-10     	; 0x228 <turn_right+0x44>
	//while((sensor_data() & (3<<3)) != (3<<3));
	//while(sensor_data() != (3<<3));
	go_forward();
 232:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 236:	db bd       	out	0x2b, r29	; 43
 238:	ca bd       	out	0x2a, r28	; 42
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 23a:	19 bd       	out	0x29, r17	; 41
 23c:	08 bd       	out	0x28, r16	; 40
 23e:	2f e7       	ldi	r18, 0x7F	; 127
 240:	88 e3       	ldi	r24, 0x38	; 56
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	21 50       	subi	r18, 0x01	; 1
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <turn_right+0x60>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <turn_right+0x6a>
 24e:	00 00       	nop
 250:	d9 bd       	out	0x29, r29	; 41
 252:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 254:	db bd       	out	0x2b, r29	; 43
 256:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_L(speed);
	set_speed_R(speed + 300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	08 95       	ret

00000262 <left_operation>:

void left_operation(uint16_t speed)
{
	turn_left(speed);
 262:	0e 94 b3 00 	call	0x166	; 0x166 <turn_left>
	directions_entry[node_number] = 'l';
 266:	80 91 64 00 	lds	r24, 0x0064
 26a:	90 91 65 00 	lds	r25, 0x0065
 26e:	fc 01       	movw	r30, r24
 270:	e8 59       	subi	r30, 0x98	; 152
 272:	ff 4f       	sbci	r31, 0xFF	; 255
 274:	2c e6       	ldi	r18, 0x6C	; 108
 276:	20 83       	st	Z, r18
	node_number = node_number + 1;
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	90 93 65 00 	sts	0x0065, r25
 27e:	80 93 64 00 	sts	0x0064, r24
 282:	08 95       	ret

00000284 <right_operation>:
}

void right_operation(uint16_t speed)
{
	turn_right(speed);
 284:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <turn_right>
	directions_entry[node_number] = 'r';
 288:	80 91 64 00 	lds	r24, 0x0064
 28c:	90 91 65 00 	lds	r25, 0x0065
 290:	fc 01       	movw	r30, r24
 292:	e8 59       	subi	r30, 0x98	; 152
 294:	ff 4f       	sbci	r31, 0xFF	; 255
 296:	22 e7       	ldi	r18, 0x72	; 114
 298:	20 83       	st	Z, r18
	node_number = node_number + 1;
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	90 93 65 00 	sts	0x0065, r25
 2a0:	80 93 64 00 	sts	0x0064, r24
 2a4:	08 95       	ret

000002a6 <left_forward_operation>:
}

void left_forward_operation(uint16_t speed)
{
	turn_left(speed);
 2a6:	0e 94 b3 00 	call	0x166	; 0x166 <turn_left>
	directions_entry[node_number] = 'l';
 2aa:	80 91 64 00 	lds	r24, 0x0064
 2ae:	90 91 65 00 	lds	r25, 0x0065
 2b2:	fc 01       	movw	r30, r24
 2b4:	e8 59       	subi	r30, 0x98	; 152
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	2c e6       	ldi	r18, 0x6C	; 108
 2ba:	20 83       	st	Z, r18
	node_number = node_number + 1;
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	90 93 65 00 	sts	0x0065, r25
 2c2:	80 93 64 00 	sts	0x0064, r24
 2c6:	08 95       	ret

000002c8 <right_forward_operation>:
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 2c8:	99 bd       	out	0x29, r25	; 41
 2ca:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 2cc:	9b bd       	out	0x2b, r25	; 43
 2ce:	8a bd       	out	0x2a, r24	; 42
}

void right_forward_operation(uint16_t speed)
{
	set_speed_RL(speed);
	go_forward();
 2d0:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
	directions_entry[node_number] = 's';
 2d4:	80 91 64 00 	lds	r24, 0x0064
 2d8:	90 91 65 00 	lds	r25, 0x0065
 2dc:	fc 01       	movw	r30, r24
 2de:	e8 59       	subi	r30, 0x98	; 152
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	23 e7       	ldi	r18, 0x73	; 115
 2e4:	20 83       	st	Z, r18
	node_number = node_number + 1;
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	90 93 65 00 	sts	0x0065, r25
 2ec:	80 93 64 00 	sts	0x0064, r24
 2f0:	08 95       	ret

000002f2 <left_right_operation>:
}

void left_right_operation(uint16_t speed)
{
	turn_left(speed);
 2f2:	0e 94 b3 00 	call	0x166	; 0x166 <turn_left>
	directions_entry[node_number] = 'l';
 2f6:	80 91 64 00 	lds	r24, 0x0064
 2fa:	90 91 65 00 	lds	r25, 0x0065
 2fe:	fc 01       	movw	r30, r24
 300:	e8 59       	subi	r30, 0x98	; 152
 302:	ff 4f       	sbci	r31, 0xFF	; 255
 304:	2c e6       	ldi	r18, 0x6C	; 108
 306:	20 83       	st	Z, r18
	node_number = node_number + 1;
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	90 93 65 00 	sts	0x0065, r25
 30e:	80 93 64 00 	sts	0x0064, r24
 312:	08 95       	ret

00000314 <left_right_forward_operation>:
}

void left_right_forward_operation(uint16_t speed)
{
	turn_left(speed);
 314:	0e 94 b3 00 	call	0x166	; 0x166 <turn_left>
	directions_entry[node_number] = 'l';
 318:	80 91 64 00 	lds	r24, 0x0064
 31c:	90 91 65 00 	lds	r25, 0x0065
 320:	fc 01       	movw	r30, r24
 322:	e8 59       	subi	r30, 0x98	; 152
 324:	ff 4f       	sbci	r31, 0xFF	; 255
 326:	2c e6       	ldi	r18, 0x6C	; 108
 328:	20 83       	st	Z, r18
	node_number = node_number + 1;
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	90 93 65 00 	sts	0x0065, r25
 330:	80 93 64 00 	sts	0x0064, r24
 334:	08 95       	ret

00000336 <reverse_operation>:
}

void reverse_operation(uint16_t speed)
{
	turn_U(speed);
 336:	0e 94 66 00 	call	0xcc	; 0xcc <turn_U>
	directions_entry[node_number] = 'u';
 33a:	80 91 64 00 	lds	r24, 0x0064
 33e:	90 91 65 00 	lds	r25, 0x0065
 342:	fc 01       	movw	r30, r24
 344:	e8 59       	subi	r30, 0x98	; 152
 346:	ff 4f       	sbci	r31, 0xFF	; 255
 348:	25 e7       	ldi	r18, 0x75	; 117
 34a:	20 83       	st	Z, r18
	node_number = node_number + 1;
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	90 93 65 00 	sts	0x0065, r25
 352:	80 93 64 00 	sts	0x0064, r24
 356:	08 95       	ret

00000358 <destination_operation>:
}

void destination_operation(uint16_t speed)
{
	//stay_stop();
	directions_entry[node_number] = 'e';
 358:	80 91 64 00 	lds	r24, 0x0064
 35c:	90 91 65 00 	lds	r25, 0x0065
 360:	fc 01       	movw	r30, r24
 362:	e8 59       	subi	r30, 0x98	; 152
 364:	ff 4f       	sbci	r31, 0xFF	; 255
 366:	25 e6       	ldi	r18, 0x65	; 101
 368:	20 83       	st	Z, r18
	node_number = node_number + 1;
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	90 93 65 00 	sts	0x0065, r25
 370:	80 93 64 00 	sts	0x0064, r24
	set_speed_RL(speed);
}

void turn_U_destination(uint16_t speed)
{
	stay_stop();
 374:	0e 94 5b 00 	call	0xb6	; 0xb6 <stay_stop>
 378:	08 95       	ret

0000037a <evaluate_direction>:


void evaluate_direction(char dir,uint16_t speed)
{
	char evaluation = 0;
	evaluation = directions_solved[node_number_solved];
 37a:	20 91 62 00 	lds	r18, 0x0062
 37e:	30 91 63 00 	lds	r19, 0x0063
 382:	f9 01       	movw	r30, r18
 384:	e4 53       	subi	r30, 0x34	; 52
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	80 81       	ld	r24, Z
	node_number_solved = node_number_solved + 1;
 38a:	2f 5f       	subi	r18, 0xFF	; 255
 38c:	3f 4f       	sbci	r19, 0xFF	; 255
 38e:	30 93 63 00 	sts	0x0063, r19
 392:	20 93 62 00 	sts	0x0062, r18
	
	if (evaluation == 's')
 396:	83 37       	cpi	r24, 0x73	; 115
 398:	39 f4       	brne	.+14     	; 0x3a8 <evaluate_direction+0x2e>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 39a:	79 bd       	out	0x29, r23	; 41
 39c:	68 bd       	out	0x28, r22	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 39e:	7b bd       	out	0x2b, r23	; 43
 3a0:	6a bd       	out	0x2a, r22	; 42
	node_number_solved = node_number_solved + 1;
	
	if (evaluation == 's')
	{
		set_speed_RL(speed);
		go_forward();
 3a2:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
 3a6:	08 95       	ret
	}
	else if (evaluation == 'u')
 3a8:	85 37       	cpi	r24, 0x75	; 117
 3aa:	21 f4       	brne	.+8      	; 0x3b4 <evaluate_direction+0x3a>
	{
		turn_U(speed);
 3ac:	cb 01       	movw	r24, r22
 3ae:	0e 94 66 00 	call	0xcc	; 0xcc <turn_U>
 3b2:	08 95       	ret
	}
	else if (evaluation == 'r')
 3b4:	82 37       	cpi	r24, 0x72	; 114
 3b6:	21 f4       	brne	.+8      	; 0x3c0 <evaluate_direction+0x46>
	{
		turn_left(speed);
 3b8:	cb 01       	movw	r24, r22
 3ba:	0e 94 b3 00 	call	0x166	; 0x166 <turn_left>
 3be:	08 95       	ret
	}
	else if (evaluation == 'l')
 3c0:	8c 36       	cpi	r24, 0x6C	; 108
 3c2:	19 f4       	brne	.+6      	; 0x3ca <evaluate_direction+0x50>
	{
		turn_right(speed);
 3c4:	cb 01       	movw	r24, r22
 3c6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <turn_right>
 3ca:	08 95       	ret

000003cc <main>:
{
	uint16_t speed=300, destination=0;
	uint8_t sensor_data_hold=0, Right_trigged=0, Left_trigged=0, Forward_trigged=0;//, speed_grad_count=0;
	
	//port pin initialization
	PORTA = 03;
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	8b bb       	out	0x1b, r24	; 27
	DDRA = 00;
 3d0:	1a ba       	out	0x1a, r1	; 26
	PORTB=0x00;
 3d2:	18 ba       	out	0x18, r1	; 24
	DDRB=0x0F;
 3d4:	9f e0       	ldi	r25, 0x0F	; 15
 3d6:	97 bb       	out	0x17, r25	; 23
	PORTC=0xFF;
 3d8:	9f ef       	ldi	r25, 0xFF	; 255
 3da:	95 bb       	out	0x15, r25	; 21
	DDRC=0x00;
 3dc:	14 ba       	out	0x14, r1	; 20
	PORTD=0x00;
 3de:	12 ba       	out	0x12, r1	; 18
	DDRD=0x30;
 3e0:	90 e3       	ldi	r25, 0x30	; 48
 3e2:	91 bb       	out	0x11, r25	; 17
	
	//Timer Counter1 Initialization
	TCCR1A=0xA2;
 3e4:	92 ea       	ldi	r25, 0xA2	; 162
 3e6:	9f bd       	out	0x2f, r25	; 47
	TCCR1B=0x18;
 3e8:	98 e1       	ldi	r25, 0x18	; 24
 3ea:	9e bd       	out	0x2e, r25	; 46
	TCNT1=0x0000;
 3ec:	1d bc       	out	0x2d, r1	; 45
 3ee:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x03;
 3f0:	87 bd       	out	0x27, r24	; 39
	ICR1L=0xE8; //03E8=1000 in decimal
 3f2:	88 ee       	ldi	r24, 0xE8	; 232
 3f4:	86 bd       	out	0x26, r24	; 38
	OCR1A=speed;
 3f6:	8c e2       	ldi	r24, 0x2C	; 44
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	9b bd       	out	0x2b, r25	; 43
 3fc:	8a bd       	out	0x2a, r24	; 42
	OCR1B=speed;
 3fe:	99 bd       	out	0x29, r25	; 41
 400:	88 bd       	out	0x28, r24	; 40
	
	//usart_init(9600); //USART Initialization
	
	//start_tour:
	while (PINA & (1<<PA0));
 402:	c8 99       	sbic	0x19, 0	; 25
 404:	fe cf       	rjmp	.-4      	; 0x402 <main+0x36>
 406:	2f ef       	ldi	r18, 0xFF	; 255
 408:	89 e6       	ldi	r24, 0x69	; 105
 40a:	98 e1       	ldi	r25, 0x18	; 24
 40c:	21 50       	subi	r18, 0x01	; 1
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	90 40       	sbci	r25, 0x00	; 0
 412:	e1 f7       	brne	.-8      	; 0x40c <main+0x40>
 414:	00 c0       	rjmp	.+0      	; 0x416 <main+0x4a>
 416:	00 00       	nop
	_delay_ms(1000);
	go_forward();
 418:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 41c:	84 ef       	ldi	r24, 0xF4	; 244
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	99 bd       	out	0x29, r25	; 41
 422:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 424:	9b bd       	out	0x2b, r25	; 43
 426:	8a bd       	out	0x2a, r24	; 42
 428:	2f ef       	ldi	r18, 0xFF	; 255
 42a:	86 e7       	ldi	r24, 0x76	; 118
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	21 50       	subi	r18, 0x01	; 1
 430:	80 40       	sbci	r24, 0x00	; 0
 432:	90 40       	sbci	r25, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <main+0x62>
 436:	00 c0       	rjmp	.+0      	; 0x438 <main+0x6c>
 438:	00 00       	nop
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 43a:	8c e2       	ldi	r24, 0x2C	; 44
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	99 bd       	out	0x29, r25	; 41
 440:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 442:	9b bd       	out	0x2b, r25	; 43
 444:	8a bd       	out	0x2a, r24	; 42
	_delay_ms(1000);
	go_forward();
	set_speed_RL(speed+200);
	_delay_ms(60);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
 446:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
 44a:	82 74       	andi	r24, 0x42	; 66
	while ((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 44c:	21 f0       	breq	.+8      	; 0x456 <main+0x8a>
	{
		sensor_data_hold = sensor_data();
 44e:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
 452:	82 74       	andi	r24, 0x42	; 66
	go_forward();
	set_speed_RL(speed+200);
	_delay_ms(60);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
	while ((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 454:	e1 f7       	brne	.-8      	; 0x44e <main+0x82>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 456:	a1 2c       	mov	r10, r1
 458:	b1 2c       	mov	r11, r1
 45a:	c1 2c       	mov	r12, r1
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 45c:	0f 2e       	mov	r0, r31
 45e:	f6 e9       	ldi	r31, 0x96	; 150
 460:	ef 2e       	mov	r14, r31
 462:	f1 2c       	mov	r15, r1
 464:	f0 2d       	mov	r31, r0
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 466:	cc e2       	ldi	r28, 0x2C	; 44
 468:	d1 e0       	ldi	r29, 0x01	; 1
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 46a:	61 2c       	mov	r6, r1
 46c:	71 2c       	mov	r7, r1
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 46e:	99 24       	eor	r9, r9
 470:	93 94       	inc	r9
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 472:	d1 2c       	mov	r13, r1
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 474:	89 2c       	mov	r8, r9
 476:	03 c0       	rjmp	.+6      	; 0x47e <main+0xb2>
 478:	c1 2e       	mov	r12, r17
 47a:	01 c0       	rjmp	.+2      	; 0x47e <main+0xb2>
 47c:	b1 2e       	mov	r11, r17
	//************************************************************************************************************************	
    while(1)  //while loop 1
    {
//start_over_while_1:

		sensor_data_hold = sensor_data();  //normally read
 47e:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
		
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
 482:	98 2f       	mov	r25, r24
 484:	98 71       	andi	r25, 0x18	; 24
 486:	98 31       	cpi	r25, 0x18	; 24
 488:	29 f4       	brne	.+10     	; 0x494 <main+0xc8>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 48a:	d9 bd       	out	0x29, r29	; 41
 48c:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 48e:	db bd       	out	0x2b, r29	; 43
 490:	ca bd       	out	0x2a, r28	; 42
 492:	09 c0       	rjmp	.+18     	; 0x4a6 <main+0xda>
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
		{
			set_speed_RL(speed);
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
 494:	83 ff       	sbrs	r24, 3
 496:	03 c0       	rjmp	.+6      	; 0x49e <main+0xd2>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 498:	f9 bc       	out	0x29, r15	; 41
 49a:	e8 bc       	out	0x28, r14	; 40
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <main+0xda>
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
		{
			set_speed_R(speed - 150);  //previously 150
		}
		else if ((sensor_data_hold & (1<<4)) == (1<<4))
 49e:	84 ff       	sbrs	r24, 4
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <main+0xda>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 4a2:	fb bc       	out	0x2b, r15	; 43
 4a4:	ea bc       	out	0x2a, r14	; 42
			set_speed_L(speed - 150);  //previously 150
		}
		// end line follow
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
 4a6:	98 2f       	mov	r25, r24
 4a8:	90 7f       	andi	r25, 0xF0	; 240
 4aa:	90 3f       	cpi	r25, 0xF0	; 240
 4ac:	09 f0       	breq	.+2      	; 0x4b0 <main+0xe4>
 4ae:	55 c0       	rjmp	.+170    	; 0x55a <main+0x18e>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 4b0:	d9 bd       	out	0x29, r29	; 41
 4b2:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 4b4:	db bd       	out	0x2b, r29	; 43
 4b6:	ca bd       	out	0x2a, r28	; 42
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
 4b8:	06 2d       	mov	r16, r6
 4ba:	17 2d       	mov	r17, r7
 4bc:	19 c0       	rjmp	.+50     	; 0x4f0 <main+0x124>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4be:	25 e8       	ldi	r18, 0x85	; 133
 4c0:	2a 95       	dec	r18
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <main+0xf4>
 4c4:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 4c6:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
				if (sensor_data_hold & (1<<1))
 4ca:	81 fd       	sbrc	r24, 1
				{
					Right_trigged=1;
 4cc:	c8 2c       	mov	r12, r8
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 4ce:	98 2f       	mov	r25, r24
 4d0:	9e 77       	andi	r25, 0x7E	; 126
 4d2:	9e 37       	cpi	r25, 0x7E	; 126
 4d4:	69 f4       	brne	.+26     	; 0x4f0 <main+0x124>
				{
					destination = destination + 1;
 4d6:	0f 5f       	subi	r16, 0xFF	; 255
 4d8:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 7000)   // destination triggering
 4da:	09 35       	cpi	r16, 0x59	; 89
 4dc:	9b e1       	ldi	r25, 0x1B	; 27
 4de:	19 07       	cpc	r17, r25
 4e0:	38 f0       	brcs	.+14     	; 0x4f0 <main+0x124>
					{
						destination = 0x00;
						destination_operation(speed);
 4e2:	8c e2       	ldi	r24, 0x2C	; 44
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	0e 94 ac 01 	call	0x358	; 0x358 <destination_operation>
						while (PINA & (1<<PA0));
 4ea:	c8 99       	sbic	0x19, 0	; 25
 4ec:	fe cf       	rjmp	.-4      	; 0x4ea <main+0x11e>
 4ee:	59 c0       	rjmp	.+178    	; 0x5a2 <main+0x1d6>
 4f0:	82 74       	andi	r24, 0x42	; 66
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 4f2:	29 f7       	brne	.-54     	; 0x4be <main+0xf2>
 4f4:	1c 2d       	mov	r17, r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f6:	2f ef       	ldi	r18, 0xFF	; 255
 4f8:	80 e7       	ldi	r24, 0x70	; 112
 4fa:	92 e0       	ldi	r25, 0x02	; 2
 4fc:	21 50       	subi	r18, 0x01	; 1
 4fe:	80 40       	sbci	r24, 0x00	; 0
 500:	90 40       	sbci	r25, 0x00	; 0
 502:	e1 f7       	brne	.-8      	; 0x4fc <main+0x130>
 504:	00 c0       	rjmp	.+0      	; 0x506 <main+0x13a>
 506:	00 00       	nop
					}
				}
				
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 508:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 50c:	8e 77       	andi	r24, 0x7E	; 126
 50e:	09 f0       	breq	.+2      	; 0x512 <main+0x146>
 510:	d2 c1       	rjmp	.+932    	; 0x8b6 <__stack+0x57>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
 512:	c1 10       	cpse	r12, r1
 514:	0f c0       	rjmp	.+30     	; 0x534 <main+0x168>
 516:	a1 10       	cpse	r10, r1
 518:	04 c0       	rjmp	.+8      	; 0x522 <main+0x156>
			{
				left_operation(speed);
 51a:	ce 01       	movw	r24, r28
 51c:	0e 94 31 01 	call	0x262	; 0x262 <left_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
 520:	ae cf       	rjmp	.-164    	; 0x47e <main+0xb2>
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 522:	21 e0       	ldi	r18, 0x01	; 1
 524:	a2 12       	cpse	r10, r18
 526:	ab cf       	rjmp	.-170    	; 0x47e <main+0xb2>
			{
				left_forward_operation(speed);
 528:	ce 01       	movw	r24, r28
 52a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <left_forward_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
 52e:	ad 2c       	mov	r10, r13
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
			{
				left_forward_operation(speed);
				Right_trigged = 0;
 530:	cd 2c       	mov	r12, r13
				Forward_trigged = 0;
 532:	a5 cf       	rjmp	.-182    	; 0x47e <main+0xb2>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 534:	11 30       	cpi	r17, 0x01	; 1
 536:	09 f0       	breq	.+2      	; 0x53a <main+0x16e>
 538:	a2 cf       	rjmp	.-188    	; 0x47e <main+0xb2>
 53a:	a1 10       	cpse	r10, r1
 53c:	05 c0       	rjmp	.+10     	; 0x548 <main+0x17c>
			{
				left_right_operation(speed);
 53e:	ce 01       	movw	r24, r28
 540:	0e 94 79 01 	call	0x2f2	; 0x2f2 <left_right_operation>
				Right_trigged = 0;
 544:	cd 2c       	mov	r12, r13
				Forward_trigged = 0;
 546:	9b cf       	rjmp	.-202    	; 0x47e <main+0xb2>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	a8 12       	cpse	r10, r24
 54c:	95 cf       	rjmp	.-214    	; 0x478 <main+0xac>
			{
				left_right_forward_operation(speed);
 54e:	ce 01       	movw	r24, r28
 550:	0e 94 8a 01 	call	0x314	; 0x314 <left_right_forward_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
 554:	ad 2c       	mov	r10, r13
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Right_trigged = 0;
 556:	cd 2c       	mov	r12, r13
 558:	92 cf       	rjmp	.-220    	; 0x47e <main+0xb2>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
 55a:	98 2f       	mov	r25, r24
 55c:	9f 70       	andi	r25, 0x0F	; 15
 55e:	9f 30       	cpi	r25, 0x0F	; 15
 560:	09 f0       	breq	.+2      	; 0x564 <main+0x198>
 562:	6e c0       	rjmp	.+220    	; 0x640 <main+0x274>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 564:	d9 bd       	out	0x29, r29	; 41
 566:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 568:	db bd       	out	0x2b, r29	; 43
 56a:	ca bd       	out	0x2a, r28	; 42
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 56c:	06 2d       	mov	r16, r6
 56e:	17 2d       	mov	r17, r7
 570:	32 c0       	rjmp	.+100    	; 0x5d6 <main+0x20a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 572:	95 e8       	ldi	r25, 0x85	; 133
 574:	9a 95       	dec	r25
 576:	f1 f7       	brne	.-4      	; 0x574 <main+0x1a8>
 578:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 57a:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
				if (sensor_data_hold & (1<<6))  // must change for 8 system
 57e:	86 fd       	sbrc	r24, 6
				{
					Left_trigged=1;
 580:	b8 2c       	mov	r11, r8
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 582:	98 2f       	mov	r25, r24
 584:	9e 77       	andi	r25, 0x7E	; 126
 586:	9e 37       	cpi	r25, 0x7E	; 126
 588:	31 f5       	brne	.+76     	; 0x5d6 <main+0x20a>
				{
					destination = destination + 1;
 58a:	0f 5f       	subi	r16, 0xFF	; 255
 58c:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 7000)   // destination triggering
 58e:	09 35       	cpi	r16, 0x59	; 89
 590:	2b e1       	ldi	r18, 0x1B	; 27
 592:	12 07       	cpc	r17, r18
 594:	00 f1       	brcs	.+64     	; 0x5d6 <main+0x20a>
					{
						destination = 0x00;
						destination_operation(speed);
 596:	8c e2       	ldi	r24, 0x2C	; 44
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	0e 94 ac 01 	call	0x358	; 0x358 <destination_operation>
						while (PINA & (1<<PA0));
 59e:	c8 99       	sbic	0x19, 0	; 25
 5a0:	fe cf       	rjmp	.-4      	; 0x59e <main+0x1d2>
 5a2:	0f 2e       	mov	r0, r31
 5a4:	f9 e6       	ldi	r31, 0x69	; 105
 5a6:	ef 2e       	mov	r14, r31
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	ff 2e       	mov	r15, r31
 5ac:	f0 2d       	mov	r31, r0
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 5ae:	0f 2e       	mov	r0, r31
 5b0:	f4 ef       	ldi	r31, 0xF4	; 244
 5b2:	4f 2e       	mov	r4, r31
 5b4:	55 24       	eor	r5, r5
 5b6:	53 94       	inc	r5
 5b8:	f0 2d       	mov	r31, r0
 5ba:	0c e2       	ldi	r16, 0x2C	; 44
 5bc:	11 e0       	ldi	r17, 0x01	; 1
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 5be:	0f 2e       	mov	r0, r31
 5c0:	f6 e9       	ldi	r31, 0x96	; 150
 5c2:	2f 2e       	mov	r2, r31
 5c4:	31 2c       	mov	r3, r1
 5c6:	f0 2d       	mov	r31, r0
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 5c8:	60 2e       	mov	r6, r16
 5ca:	71 2e       	mov	r7, r17
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 5cc:	81 2c       	mov	r8, r1
 5ce:	91 2c       	mov	r9, r1
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 5d0:	dd 24       	eor	r13, r13
 5d2:	d3 94       	inc	r13
 5d4:	3c c0       	rjmp	.+120    	; 0x64e <main+0x282>
 5d6:	82 74       	andi	r24, 0x42	; 66
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 5d8:	61 f6       	brne	.-104    	; 0x572 <main+0x1a6>
 5da:	1b 2d       	mov	r17, r11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5dc:	8f ef       	ldi	r24, 0xFF	; 255
 5de:	90 e7       	ldi	r25, 0x70	; 112
 5e0:	22 e0       	ldi	r18, 0x02	; 2
 5e2:	81 50       	subi	r24, 0x01	; 1
 5e4:	90 40       	sbci	r25, 0x00	; 0
 5e6:	20 40       	sbci	r18, 0x00	; 0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <main+0x216>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <main+0x220>
 5ec:	00 00       	nop
						//goto start_test_operation;
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 5ee:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 5f2:	8e 77       	andi	r24, 0x7E	; 126
 5f4:	09 f0       	breq	.+2      	; 0x5f8 <main+0x22c>
 5f6:	63 c1       	rjmp	.+710    	; 0x8be <__stack+0x5f>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
 5f8:	b1 10       	cpse	r11, r1
 5fa:	0f c0       	rjmp	.+30     	; 0x61a <main+0x24e>
 5fc:	a1 10       	cpse	r10, r1
 5fe:	04 c0       	rjmp	.+8      	; 0x608 <main+0x23c>
			{
				right_operation(speed);
 600:	ce 01       	movw	r24, r28
 602:	0e 94 42 01 	call	0x284	; 0x284 <right_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
 606:	3b cf       	rjmp	.-394    	; 0x47e <main+0xb2>
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	a8 12       	cpse	r10, r24
 60c:	38 cf       	rjmp	.-400    	; 0x47e <main+0xb2>
			{
				right_forward_operation(speed);
 60e:	ce 01       	movw	r24, r28
 610:	0e 94 64 01 	call	0x2c8	; 0x2c8 <right_forward_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
 614:	ad 2c       	mov	r10, r13
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
			{
				right_forward_operation(speed);
				Left_trigged = 0;
 616:	bd 2c       	mov	r11, r13
				Forward_trigged = 0;
 618:	32 cf       	rjmp	.-412    	; 0x47e <main+0xb2>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 61a:	11 30       	cpi	r17, 0x01	; 1
 61c:	09 f0       	breq	.+2      	; 0x620 <main+0x254>
 61e:	2f cf       	rjmp	.-418    	; 0x47e <main+0xb2>
 620:	a1 10       	cpse	r10, r1
 622:	05 c0       	rjmp	.+10     	; 0x62e <main+0x262>
			{
				left_right_operation(speed);
 624:	ce 01       	movw	r24, r28
 626:	0e 94 79 01 	call	0x2f2	; 0x2f2 <left_right_operation>
				Left_trigged = 0;
 62a:	bd 2c       	mov	r11, r13
				Forward_trigged = 0;
 62c:	28 cf       	rjmp	.-432    	; 0x47e <main+0xb2>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	a9 12       	cpse	r10, r25
 632:	24 cf       	rjmp	.-440    	; 0x47c <main+0xb0>
			{
				left_right_forward_operation(speed);
 634:	ce 01       	movw	r24, r28
 636:	0e 94 8a 01 	call	0x314	; 0x314 <left_right_forward_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
 63a:	ad 2c       	mov	r10, r13
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Left_trigged = 0;
 63c:	bd 2c       	mov	r11, r13
 63e:	1f cf       	rjmp	.-450    	; 0x47e <main+0xb2>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
 640:	8e 77       	andi	r24, 0x7E	; 126
 642:	09 f0       	breq	.+2      	; 0x646 <main+0x27a>
 644:	1c cf       	rjmp	.-456    	; 0x47e <main+0xb2>
		{
			reverse_operation(speed);
 646:	ce 01       	movw	r24, r28
 648:	0e 94 9b 01 	call	0x336	; 0x336 <reverse_operation>
 64c:	18 cf       	rjmp	.-464    	; 0x47e <main+0xb2>
		}
    }

solv_maze:

	inr=1;
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	90 93 61 00 	sts	0x0061, r25
 656:	80 93 60 00 	sts	0x0060, r24
	
	for (length_node=node_number-1;length_node>=1;length_node=length_node-1)
 65a:	80 91 64 00 	lds	r24, 0x0064
 65e:	90 91 65 00 	lds	r25, 0x0065
 662:	9c 01       	movw	r18, r24
 664:	21 50       	subi	r18, 0x01	; 1
 666:	31 09       	sbc	r19, r1
 668:	30 93 67 00 	sts	0x0067, r19
 66c:	20 93 66 00 	sts	0x0066, r18
 670:	23 2b       	or	r18, r19
 672:	c1 f0       	breq	.+48     	; 0x6a4 <main+0x2d8>
 674:	21 e0       	ldi	r18, 0x01	; 1
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	fc 01       	movw	r30, r24
 67a:	e8 59       	subi	r30, 0x98	; 152
 67c:	ff 4f       	sbci	r31, 0xFF	; 255
 67e:	d9 01       	movw	r26, r18
 680:	a4 53       	subi	r26, 0x34	; 52
 682:	bf 4f       	sbci	r27, 0xFF	; 255
	{
		directions_solved[inr]=directions_entry[length_node];
 684:	42 91       	ld	r20, -Z
 686:	4d 93       	st	X+, r20

solv_maze:

	inr=1;
	
	for (length_node=node_number-1;length_node>=1;length_node=length_node-1)
 688:	ee 15       	cp	r30, r14
 68a:	ff 05       	cpc	r31, r15
 68c:	d9 f7       	brne	.-10     	; 0x684 <main+0x2b8>
 68e:	82 0f       	add	r24, r18
 690:	93 1f       	adc	r25, r19
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	90 93 61 00 	sts	0x0061, r25
 698:	80 93 60 00 	sts	0x0060, r24
 69c:	10 92 66 00 	sts	0x0066, r1
 6a0:	10 92 67 00 	sts	0x0067, r1
	{
		directions_solved[inr]=directions_entry[length_node];
		inr = inr + 1;
	}
	
	node_number = 1;
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	90 93 65 00 	sts	0x0065, r25
 6ac:	80 93 64 00 	sts	0x0064, r24
	node_number_solved = 2;
 6b0:	82 e0       	ldi	r24, 0x02	; 2
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	90 93 63 00 	sts	0x0063, r25
 6b8:	80 93 62 00 	sts	0x0062, r24
 6bc:	9f ef       	ldi	r25, 0xFF	; 255
 6be:	29 e6       	ldi	r18, 0x69	; 105
 6c0:	88 e1       	ldi	r24, 0x18	; 24
 6c2:	91 50       	subi	r25, 0x01	; 1
 6c4:	20 40       	sbci	r18, 0x00	; 0
 6c6:	80 40       	sbci	r24, 0x00	; 0
 6c8:	e1 f7       	brne	.-8      	; 0x6c2 <main+0x2f6>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <main+0x300>
 6cc:	00 00       	nop
	
	_delay_ms(1000);
	go_forward();
 6ce:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 6d2:	59 bc       	out	0x29, r5	; 41
 6d4:	48 bc       	out	0x28, r4	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 6d6:	5b bc       	out	0x2b, r5	; 43
 6d8:	4a bc       	out	0x2a, r4	; 42
 6da:	9f ef       	ldi	r25, 0xFF	; 255
 6dc:	26 e7       	ldi	r18, 0x76	; 118
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	91 50       	subi	r25, 0x01	; 1
 6e2:	20 40       	sbci	r18, 0x00	; 0
 6e4:	80 40       	sbci	r24, 0x00	; 0
 6e6:	e1 f7       	brne	.-8      	; 0x6e0 <main+0x314>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <main+0x31e>
 6ea:	00 00       	nop
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 6ec:	19 bd       	out	0x29, r17	; 41
 6ee:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 6f0:	1b bd       	out	0x2b, r17	; 43
 6f2:	0a bd       	out	0x2a, r16	; 42
 6f4:	03 c0       	rjmp	.+6      	; 0x6fc <main+0x330>
 6f6:	cc 2e       	mov	r12, r28
 6f8:	01 c0       	rjmp	.+2      	; 0x6fc <main+0x330>
 6fa:	bc 2e       	mov	r11, r28
	_delay_ms(60);
	set_speed_RL(speed);
	
	while(1)
	{
		sensor_data_hold = sensor_data();  //normally read
 6fc:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
		
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
 700:	98 2f       	mov	r25, r24
 702:	98 71       	andi	r25, 0x18	; 24
 704:	98 31       	cpi	r25, 0x18	; 24
 706:	29 f4       	brne	.+10     	; 0x712 <main+0x346>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 708:	19 bd       	out	0x29, r17	; 41
 70a:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 70c:	1b bd       	out	0x2b, r17	; 43
 70e:	0a bd       	out	0x2a, r16	; 42
 710:	09 c0       	rjmp	.+18     	; 0x724 <main+0x358>
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
		{
			set_speed_RL(speed);
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
 712:	83 ff       	sbrs	r24, 3
 714:	03 c0       	rjmp	.+6      	; 0x71c <main+0x350>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 716:	39 bc       	out	0x29, r3	; 41
 718:	28 bc       	out	0x28, r2	; 40
 71a:	04 c0       	rjmp	.+8      	; 0x724 <main+0x358>
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
		{
			set_speed_R(speed - 150);  //previously 150
		}
		else if ((sensor_data_hold & (1<<4)) == (1<<4))
 71c:	84 ff       	sbrs	r24, 4
 71e:	02 c0       	rjmp	.+4      	; 0x724 <main+0x358>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 720:	3b bc       	out	0x2b, r3	; 43
 722:	2a bc       	out	0x2a, r2	; 42
			set_speed_L(speed - 150);  //previously 150
		}
		// end line follow
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
 724:	98 2f       	mov	r25, r24
 726:	90 7f       	andi	r25, 0xF0	; 240
 728:	90 3f       	cpi	r25, 0xF0	; 240
 72a:	09 f0       	breq	.+2      	; 0x72e <main+0x362>
 72c:	5b c0       	rjmp	.+182    	; 0x7e4 <main+0x418>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 72e:	19 bd       	out	0x29, r17	; 41
 730:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 732:	1b bd       	out	0x2b, r17	; 43
 734:	0a bd       	out	0x2a, r16	; 42
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
 736:	c8 2d       	mov	r28, r8
 738:	d9 2d       	mov	r29, r9
 73a:	17 c0       	rjmp	.+46     	; 0x76a <main+0x39e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 73c:	85 e8       	ldi	r24, 0x85	; 133
 73e:	8a 95       	dec	r24
 740:	f1 f7       	brne	.-4      	; 0x73e <main+0x372>
 742:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 744:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
				if (sensor_data_hold & (1<<1))
 748:	81 fd       	sbrc	r24, 1
				{
					Right_trigged=1;
 74a:	cd 2c       	mov	r12, r13
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 74c:	98 2f       	mov	r25, r24
 74e:	9e 77       	andi	r25, 0x7E	; 126
 750:	9e 37       	cpi	r25, 0x7E	; 126
 752:	59 f4       	brne	.+22     	; 0x76a <main+0x39e>
				{
					destination = destination + 1;
 754:	21 96       	adiw	r28, 0x01	; 1
					if (destination > 7000)   // destination triggering
 756:	c9 35       	cpi	r28, 0x59	; 89
 758:	9b e1       	ldi	r25, 0x1B	; 27
 75a:	d9 07       	cpc	r29, r25
 75c:	30 f0       	brcs	.+12     	; 0x76a <main+0x39e>
					{
						destination = 0x00;
						destination_operation(speed);
 75e:	c8 01       	movw	r24, r16
 760:	0e 94 ac 01 	call	0x358	; 0x358 <destination_operation>
						while (PINA & (1<<PA0));
 764:	c8 99       	sbic	0x19, 0	; 25
 766:	fe cf       	rjmp	.-4      	; 0x764 <main+0x398>
 768:	72 cf       	rjmp	.-284    	; 0x64e <main+0x282>
 76a:	82 74       	andi	r24, 0x42	; 66
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 76c:	39 f7       	brne	.-50     	; 0x73c <main+0x370>
 76e:	cc 2d       	mov	r28, r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 770:	2f ef       	ldi	r18, 0xFF	; 255
 772:	80 e7       	ldi	r24, 0x70	; 112
 774:	92 e0       	ldi	r25, 0x02	; 2
 776:	21 50       	subi	r18, 0x01	; 1
 778:	80 40       	sbci	r24, 0x00	; 0
 77a:	90 40       	sbci	r25, 0x00	; 0
 77c:	e1 f7       	brne	.-8      	; 0x776 <main+0x3aa>
 77e:	00 c0       	rjmp	.+0      	; 0x780 <main+0x3b4>
 780:	00 00       	nop
					}
				}
				
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 782:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 786:	8e 77       	andi	r24, 0x7E	; 126
 788:	09 f0       	breq	.+2      	; 0x78c <main+0x3c0>
 78a:	9d c0       	rjmp	.+314    	; 0x8c6 <__stack+0x67>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
 78c:	c1 10       	cpse	r12, r1
 78e:	13 c0       	rjmp	.+38     	; 0x7b6 <main+0x3ea>
 790:	a1 10       	cpse	r10, r1
 792:	06 c0       	rjmp	.+12     	; 0x7a0 <main+0x3d4>
			{
				evaluate_direction(1,speed);
 794:	66 2d       	mov	r22, r6
 796:	77 2d       	mov	r23, r7
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	0e 94 bd 01 	call	0x37a	; 0x37a <evaluate_direction>
				//left_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
 79e:	ae cf       	rjmp	.-164    	; 0x6fc <main+0x330>
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 7a0:	21 e0       	ldi	r18, 0x01	; 1
 7a2:	a2 12       	cpse	r10, r18
 7a4:	ab cf       	rjmp	.-170    	; 0x6fc <main+0x330>
			{
				evaluate_direction(4,speed);
 7a6:	66 2d       	mov	r22, r6
 7a8:	77 2d       	mov	r23, r7
 7aa:	84 e0       	ldi	r24, 0x04	; 4
 7ac:	0e 94 bd 01 	call	0x37a	; 0x37a <evaluate_direction>
				//left_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
 7b0:	a1 2c       	mov	r10, r1
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
			{
				evaluate_direction(4,speed);
				//left_forward_operation(speed);
				Right_trigged = 0;
 7b2:	c1 2c       	mov	r12, r1
				Forward_trigged = 0;
 7b4:	a3 cf       	rjmp	.-186    	; 0x6fc <main+0x330>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 7b6:	c1 30       	cpi	r28, 0x01	; 1
 7b8:	09 f0       	breq	.+2      	; 0x7bc <main+0x3f0>
 7ba:	a0 cf       	rjmp	.-192    	; 0x6fc <main+0x330>
 7bc:	a1 10       	cpse	r10, r1
 7be:	07 c0       	rjmp	.+14     	; 0x7ce <main+0x402>
			{
				evaluate_direction(3,speed);
 7c0:	66 2d       	mov	r22, r6
 7c2:	77 2d       	mov	r23, r7
 7c4:	83 e0       	ldi	r24, 0x03	; 3
 7c6:	0e 94 bd 01 	call	0x37a	; 0x37a <evaluate_direction>
				//left_right_operation(speed);
				Right_trigged = 0;
 7ca:	c1 2c       	mov	r12, r1
				Forward_trigged = 0;
 7cc:	97 cf       	rjmp	.-210    	; 0x6fc <main+0x330>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	a8 12       	cpse	r10, r24
 7d2:	91 cf       	rjmp	.-222    	; 0x6f6 <main+0x32a>
			{
				evaluate_direction(6,speed);
 7d4:	66 2d       	mov	r22, r6
 7d6:	77 2d       	mov	r23, r7
 7d8:	86 e0       	ldi	r24, 0x06	; 6
 7da:	0e 94 bd 01 	call	0x37a	; 0x37a <evaluate_direction>
				//left_right_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
 7de:	a1 2c       	mov	r10, r1
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
			{
				evaluate_direction(6,speed);
				//left_right_forward_operation(speed);
				Right_trigged = 0;
 7e0:	c1 2c       	mov	r12, r1
 7e2:	8c cf       	rjmp	.-232    	; 0x6fc <main+0x330>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
 7e4:	98 2f       	mov	r25, r24
 7e6:	9f 70       	andi	r25, 0x0F	; 15
 7e8:	9f 30       	cpi	r25, 0x0F	; 15
 7ea:	09 f0       	breq	.+2      	; 0x7ee <main+0x422>
 7ec:	5b c0       	rjmp	.+182    	; 0x8a4 <__stack+0x45>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 7ee:	19 bd       	out	0x29, r17	; 41
 7f0:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 7f2:	1b bd       	out	0x2b, r17	; 43
 7f4:	0a bd       	out	0x2a, r16	; 42
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 7f6:	c8 2d       	mov	r28, r8
 7f8:	d9 2d       	mov	r29, r9
 7fa:	17 c0       	rjmp	.+46     	; 0x82a <main+0x45e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7fc:	85 e8       	ldi	r24, 0x85	; 133
 7fe:	8a 95       	dec	r24
 800:	f1 f7       	brne	.-4      	; 0x7fe <main+0x432>
 802:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 804:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
				if (sensor_data_hold & (1<<6))  // must change for 8 system
 808:	86 fd       	sbrc	r24, 6
				{
					Left_trigged=1;
 80a:	bd 2c       	mov	r11, r13
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 80c:	98 2f       	mov	r25, r24
 80e:	9e 77       	andi	r25, 0x7E	; 126
 810:	9e 37       	cpi	r25, 0x7E	; 126
 812:	59 f4       	brne	.+22     	; 0x82a <main+0x45e>
				{
					destination = destination + 1;
 814:	21 96       	adiw	r28, 0x01	; 1
					if (destination > 7000)   // destination triggering
 816:	c9 35       	cpi	r28, 0x59	; 89
 818:	9b e1       	ldi	r25, 0x1B	; 27
 81a:	d9 07       	cpc	r29, r25
 81c:	30 f0       	brcs	.+12     	; 0x82a <main+0x45e>
					{
						destination = 0x00;
						destination_operation(speed);
 81e:	c8 01       	movw	r24, r16
 820:	0e 94 ac 01 	call	0x358	; 0x358 <destination_operation>
						while (PINA & (1<<PA0));
 824:	c8 99       	sbic	0x19, 0	; 25
 826:	fe cf       	rjmp	.-4      	; 0x824 <main+0x458>
 828:	12 cf       	rjmp	.-476    	; 0x64e <main+0x282>
 82a:	82 74       	andi	r24, 0x42	; 66
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 82c:	39 f7       	brne	.-50     	; 0x7fc <main+0x430>
 82e:	cb 2d       	mov	r28, r11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 830:	2f ef       	ldi	r18, 0xFF	; 255
 832:	80 e7       	ldi	r24, 0x70	; 112
 834:	92 e0       	ldi	r25, 0x02	; 2
 836:	21 50       	subi	r18, 0x01	; 1
 838:	80 40       	sbci	r24, 0x00	; 0
 83a:	90 40       	sbci	r25, 0x00	; 0
 83c:	e1 f7       	brne	.-8      	; 0x836 <main+0x46a>
 83e:	00 c0       	rjmp	.+0      	; 0x840 <main+0x474>
 840:	00 00       	nop
						//goto start_test_operation;
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 842:	0e 94 60 00 	call	0xc0	; 0xc0 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 846:	8e 77       	andi	r24, 0x7E	; 126
 848:	09 f0       	breq	.+2      	; 0x84c <main+0x480>
 84a:	41 c0       	rjmp	.+130    	; 0x8ce <__stack+0x6f>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
 84c:	b1 10       	cpse	r11, r1
 84e:	13 c0       	rjmp	.+38     	; 0x876 <__stack+0x17>
 850:	a1 10       	cpse	r10, r1
 852:	06 c0       	rjmp	.+12     	; 0x860 <__stack+0x1>
			{
				evaluate_direction(2,speed);
 854:	66 2d       	mov	r22, r6
 856:	77 2d       	mov	r23, r7
 858:	82 e0       	ldi	r24, 0x02	; 2
 85a:	0e 94 bd 01 	call	0x37a	; 0x37a <evaluate_direction>
				//right_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 85e:	4e cf       	rjmp	.-356    	; 0x6fc <main+0x330>
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))  // this logic is fixed
 860:	21 e0       	ldi	r18, 0x01	; 1
 862:	a2 12       	cpse	r10, r18
 864:	4b cf       	rjmp	.-362    	; 0x6fc <main+0x330>
			{
				evaluate_direction(5,speed);
 866:	66 2d       	mov	r22, r6
 868:	77 2d       	mov	r23, r7
 86a:	85 e0       	ldi	r24, 0x05	; 5
 86c:	0e 94 bd 01 	call	0x37a	; 0x37a <evaluate_direction>
				//right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 870:	a1 2c       	mov	r10, r1
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))  // this logic is fixed
			{
				evaluate_direction(5,speed);
				//right_forward_operation(speed);
				Left_trigged = 0;
 872:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
 874:	43 cf       	rjmp	.-378    	; 0x6fc <main+0x330>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 876:	c1 30       	cpi	r28, 0x01	; 1
 878:	09 f0       	breq	.+2      	; 0x87c <__stack+0x1d>
 87a:	40 cf       	rjmp	.-384    	; 0x6fc <main+0x330>
 87c:	a1 10       	cpse	r10, r1
 87e:	07 c0       	rjmp	.+14     	; 0x88e <__stack+0x2f>
			{
				evaluate_direction(3,speed);
 880:	66 2d       	mov	r22, r6
 882:	77 2d       	mov	r23, r7
 884:	83 e0       	ldi	r24, 0x03	; 3
 886:	0e 94 bd 01 	call	0x37a	; 0x37a <evaluate_direction>
				//left_right_operation(speed);
				Left_trigged = 0;
 88a:	b1 2c       	mov	r11, r1
				Forward_trigged = 0;
 88c:	37 cf       	rjmp	.-402    	; 0x6fc <main+0x330>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	a8 12       	cpse	r10, r24
 892:	33 cf       	rjmp	.-410    	; 0x6fa <main+0x32e>
			{
				evaluate_direction(6,speed);
 894:	66 2d       	mov	r22, r6
 896:	77 2d       	mov	r23, r7
 898:	86 e0       	ldi	r24, 0x06	; 6
 89a:	0e 94 bd 01 	call	0x37a	; 0x37a <evaluate_direction>
				//left_right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 89e:	a1 2c       	mov	r10, r1
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				evaluate_direction(6,speed);
				//left_right_forward_operation(speed);
				Left_trigged = 0;
 8a0:	b1 2c       	mov	r11, r1
 8a2:	2c cf       	rjmp	.-424    	; 0x6fc <main+0x330>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
 8a4:	8e 77       	andi	r24, 0x7E	; 126
 8a6:	09 f0       	breq	.+2      	; 0x8aa <__stack+0x4b>
 8a8:	29 cf       	rjmp	.-430    	; 0x6fc <main+0x330>
		{
			evaluate_direction(7,speed);
 8aa:	66 2d       	mov	r22, r6
 8ac:	77 2d       	mov	r23, r7
 8ae:	87 e0       	ldi	r24, 0x07	; 7
 8b0:	0e 94 bd 01 	call	0x37a	; 0x37a <evaluate_direction>
 8b4:	23 cf       	rjmp	.-442    	; 0x6fc <main+0x330>
			{
				left_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 8b6:	cc 20       	and	r12, r12
 8b8:	09 f4       	brne	.+2      	; 0x8bc <__stack+0x5d>
 8ba:	36 ce       	rjmp	.-916    	; 0x528 <main+0x15c>
 8bc:	0b c0       	rjmp	.+22     	; 0x8d4 <__stack+0x75>
			{
				right_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
 8be:	bb 20       	and	r11, r11
 8c0:	09 f4       	brne	.+2      	; 0x8c4 <__stack+0x65>
 8c2:	a5 ce       	rjmp	.-694    	; 0x60e <main+0x242>
 8c4:	0c c0       	rjmp	.+24     	; 0x8de <__stack+0x7f>
				evaluate_direction(1,speed);
				//left_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 8c6:	cc 20       	and	r12, r12
 8c8:	09 f4       	brne	.+2      	; 0x8cc <__stack+0x6d>
 8ca:	6d cf       	rjmp	.-294    	; 0x7a6 <main+0x3da>
 8cc:	0d c0       	rjmp	.+26     	; 0x8e8 <__stack+0x89>
				evaluate_direction(2,speed);
				//right_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))  // this logic is fixed
 8ce:	bb 20       	and	r11, r11
 8d0:	51 f2       	breq	.-108    	; 0x866 <__stack+0x7>
 8d2:	10 c0       	rjmp	.+32     	; 0x8f4 <__stack+0x95>
			{
				left_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 8d4:	11 30       	cpi	r17, 0x01	; 1
 8d6:	09 f4       	brne	.+2      	; 0x8da <__stack+0x7b>
 8d8:	3a ce       	rjmp	.-908    	; 0x54e <main+0x182>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 8da:	a9 2c       	mov	r10, r9
 8dc:	d0 cd       	rjmp	.-1120   	; 0x47e <main+0xb2>
			{
				right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 8de:	11 30       	cpi	r17, 0x01	; 1
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <__stack+0x85>
 8e2:	a8 ce       	rjmp	.-688    	; 0x634 <main+0x268>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 8e4:	a9 2c       	mov	r10, r9
 8e6:	cb cd       	rjmp	.-1130   	; 0x47e <main+0xb2>
				evaluate_direction(4,speed);
				//left_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 8e8:	c1 30       	cpi	r28, 0x01	; 1
 8ea:	09 f4       	brne	.+2      	; 0x8ee <__stack+0x8f>
 8ec:	73 cf       	rjmp	.-282    	; 0x7d4 <main+0x408>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 8ee:	aa 24       	eor	r10, r10
 8f0:	a3 94       	inc	r10
 8f2:	04 cf       	rjmp	.-504    	; 0x6fc <main+0x330>
				evaluate_direction(5,speed);
				//right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 8f4:	c1 30       	cpi	r28, 0x01	; 1
 8f6:	71 f2       	breq	.-100    	; 0x894 <__stack+0x35>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 8f8:	aa 24       	eor	r10, r10
 8fa:	a3 94       	inc	r10
 8fc:	ff ce       	rjmp	.-514    	; 0x6fc <main+0x330>

000008fe <_exit>:
 8fe:	f8 94       	cli

00000900 <__stop_program>:
 900:	ff cf       	rjmp	.-2      	; 0x900 <__stop_program>
