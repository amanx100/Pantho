
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  00000cf8  00000d8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001f8  00800114  00800114  00000e40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a8c  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000389  00000000  00000000  00002a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000076a  00000000  00000000  00002d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a4  00000000  00000000  00003500  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ef  00000000  00000000  000037a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000164e  00000000  00000000  00003b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000190  00000000  00000000  000051e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 31       	cpi	r26, 0x14	; 20
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a4 e1       	ldi	r26, 0x14	; 20
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 30       	cpi	r26, 0x0C	; 12
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ce 03 	call	0x79c	; 0x79c <main>
  8a:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <go_forward>:
#ifndef M_DIR_H_
#define M_DIR_H_

void go_forward(void)
{
	PORTB = 0x05;
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  96:	8e b5       	in	r24, 0x2e	; 46
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	8e bd       	out	0x2e, r24	; 46
  9c:	08 95       	ret

0000009e <go_backward>:
}

void go_backward(void)
{
	PORTB = 0x0A;
  9e:	8a e0       	ldi	r24, 0x0A	; 10
  a0:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  a2:	8e b5       	in	r24, 0x2e	; 46
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	8e bd       	out	0x2e, r24	; 46
  a8:	08 95       	ret

000000aa <right_rotate>:
}

void right_rotate(void)
{
	PORTB = 0x09;
  aa:	89 e0       	ldi	r24, 0x09	; 9
  ac:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  ae:	8e b5       	in	r24, 0x2e	; 46
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	8e bd       	out	0x2e, r24	; 46
  b4:	08 95       	ret

000000b6 <left_rotate>:
}

void left_rotate(void)
{
	PORTB = 0x06;
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  ba:	8e b5       	in	r24, 0x2e	; 46
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	8e bd       	out	0x2e, r24	; 46
  c0:	08 95       	ret

000000c2 <stay_stop>:
}

void stay_stop(void)
{
	PORTB = 0x00;
  c2:	18 ba       	out	0x18, r1	; 24
	TCCR1B &= ~(1<<1);
  c4:	8e b5       	in	r24, 0x2e	; 46
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	8e bd       	out	0x2e, r24	; 46
  ca:	08 95       	ret

000000cc <usart_init>:
#include <string.h>

void usart_init(uint32_t baud)
{
	// Calculation for baud rate value into ubrr value
	uint16_t ubrr = lrint(( F_CPU / (16L * baud) ) - 1);
  cc:	dc 01       	movw	r26, r24
  ce:	cb 01       	movw	r24, r22
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	aa 1f       	adc	r26, r26
  d6:	bb 1f       	adc	r27, r27
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	aa 1f       	adc	r26, r26
  de:	bb 1f       	adc	r27, r27
  e0:	9c 01       	movw	r18, r24
  e2:	ad 01       	movw	r20, r26
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	44 1f       	adc	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	44 1f       	adc	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	72 e1       	ldi	r23, 0x12	; 18
  f8:	8a e7       	ldi	r24, 0x7A	; 122
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 48 06 	call	0xc90	; 0xc90 <__udivmodsi4>
 100:	ca 01       	movw	r24, r20
 102:	b9 01       	movw	r22, r18
 104:	61 50       	subi	r22, 0x01	; 1
 106:	71 09       	sbc	r23, r1
 108:	81 09       	sbc	r24, r1
 10a:	91 09       	sbc	r25, r1
 10c:	0e 94 a8 05 	call	0xb50	; 0xb50 <__floatunsisf>
 110:	0e 94 e5 05 	call	0xbca	; 0xbca <lrint>
	// Set baud rate
	UBRRH = (uint8_t)(ubrr>>8);
 114:	27 2f       	mov	r18, r23
 116:	33 27       	eor	r19, r19
 118:	20 bd       	out	0x20, r18	; 32
	UBRRL = (uint8_t)ubrr;
 11a:	69 b9       	out	0x09, r22	; 9
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
 11c:	88 e1       	ldi	r24, 0x18	; 24
 11e:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 1stop bit
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
 120:	86 e8       	ldi	r24, 0x86	; 134
 122:	80 bd       	out	0x20, r24	; 32
 124:	08 95       	ret

00000126 <usart_putchar>:
}

void usart_putchar(char data)
{
	// Wait for empty transmit buffer
	while ( !(UCSRA & (_BV(UDRE))) );
 126:	5d 9b       	sbis	0x0b, 5	; 11
 128:	fe cf       	rjmp	.-4      	; 0x126 <usart_putchar>
	// Start transmission
	UDR = data;
 12a:	8c b9       	out	0x0c, r24	; 12
 12c:	08 95       	ret

0000012e <usart_putstr>:
	// Return the data
	return UDR;
}

void usart_putstr(char *s)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
	// loop through entire string
	while (*s != '\0') {
 134:	88 81       	ld	r24, Y
 136:	88 23       	and	r24, r24
 138:	31 f0       	breq	.+12     	; 0x146 <usart_putstr+0x18>
 13a:	21 96       	adiw	r28, 0x01	; 1
		usart_putchar(*s);
 13c:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
}

void usart_putstr(char *s)
{
	// loop through entire string
	while (*s != '\0') {
 140:	89 91       	ld	r24, Y+
 142:	81 11       	cpse	r24, r1
 144:	fb cf       	rjmp	.-10     	; 0x13c <usart_putstr+0xe>
		usart_putchar(*s);
		s++;
	}
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <__vector_11>:
//**********************************************************************************************************
//  Interrupt Sub rutine  **********************************************************************************
//**********************************************************************************************************

ISR(TIMER0_OVF_vect)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
	if (Time_x2ms < 500)
 15c:	80 91 14 01 	lds	r24, 0x0114
 160:	90 91 15 01 	lds	r25, 0x0115
 164:	84 3f       	cpi	r24, 0xF4	; 244
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	92 07       	cpc	r25, r18
 16a:	28 f4       	brcc	.+10     	; 0x176 <__vector_11+0x2a>
	{
		Time_x2ms = Time_x2ms + 1;
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	90 93 15 01 	sts	0x0115, r25
 172:	80 93 14 01 	sts	0x0114, r24
	}
}
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <sensor_data>:

uint8_t sensor_data(void)
{
	char sensor_data_check;
sn_dt:
	if ((PIND & (1<<PD2)) && (PIND & (1<<PD3)))
 186:	82 9b       	sbis	0x10, 2	; 16
 188:	fe cf       	rjmp	.-4      	; 0x186 <sensor_data>
 18a:	83 9b       	sbis	0x10, 3	; 16
 18c:	fc cf       	rjmp	.-8      	; 0x186 <sensor_data>
	{
		sensor_data_check = PINC;
 18e:	83 b3       	in	r24, 0x13	; 19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	95 e8       	ldi	r25, 0x85	; 133
 192:	9a 95       	dec	r25
 194:	f1 f7       	brne	.-4      	; 0x192 <sensor_data+0xc>
 196:	00 00       	nop
		_delay_us(50);
		if (sensor_data_check == PINC)
 198:	93 b3       	in	r25, 0x13	; 19
 19a:	98 13       	cpse	r25, r24
 19c:	f4 cf       	rjmp	.-24     	; 0x186 <sensor_data>
		{
			return PINC;
 19e:	83 b3       	in	r24, 0x13	; 19
		}
		else goto sn_dt;
	}
	else goto sn_dt;
}
 1a0:	08 95       	ret

000001a2 <process_array>:

void process_array(void)
{
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
	int i;
	strrev(directions_solved);
 1a6:	88 e1       	ldi	r24, 0x18	; 24
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <strrev>
	
	for (i=0;directions_solved[i];i++)
 1ae:	80 91 18 01 	lds	r24, 0x0118
 1b2:	88 23       	and	r24, r24
 1b4:	89 f0       	breq	.+34     	; 0x1d8 <process_array+0x36>
 1b6:	a9 e1       	ldi	r26, 0x19	; 25
 1b8:	b1 e0       	ldi	r27, 0x01	; 1
 1ba:	e8 e1       	ldi	r30, 0x18	; 24
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
		{
			directions_solved[i] = 'r';
		}
		else if (directions_solved[i] == 'r')
		{
			directions_solved[i] = 'l';
 1be:	2c e6       	ldi	r18, 0x6C	; 108
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'l')
		{
			directions_solved[i] = 'r';
 1c0:	92 e7       	ldi	r25, 0x72	; 114
	int i;
	strrev(directions_solved);
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'l')
 1c2:	8c 36       	cpi	r24, 0x6C	; 108
 1c4:	11 f4       	brne	.+4      	; 0x1ca <process_array+0x28>
		{
			directions_solved[i] = 'r';
 1c6:	90 83       	st	Z, r25
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <process_array+0x2e>
		}
		else if (directions_solved[i] == 'r')
 1ca:	82 37       	cpi	r24, 0x72	; 114
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <process_array+0x2e>
		{
			directions_solved[i] = 'l';
 1ce:	20 83       	st	Z, r18
void process_array(void)
{
	int i;
	strrev(directions_solved);
	
	for (i=0;directions_solved[i];i++)
 1d0:	8d 91       	ld	r24, X+
 1d2:	31 96       	adiw	r30, 0x01	; 1
 1d4:	81 11       	cpse	r24, r1
 1d6:	f5 cf       	rjmp	.-22     	; 0x1c2 <process_array+0x20>
		{
			directions_solved[i] = 'l';
		}
	}
	
	usart_putstr("\r\rReversed Data: ");
 1d8:	80 e6       	ldi	r24, 0x60	; 96
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	usart_putstr(directions_solved);
 1e0:	88 e1       	ldi	r24, 0x18	; 24
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	
	for (i=0;directions_solved[i];i++)
 1e8:	20 91 18 01 	lds	r18, 0x0118
 1ec:	22 23       	and	r18, r18
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <process_array+0x50>
 1f0:	96 c0       	rjmp	.+300    	; 0x31e <process_array+0x17c>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
			{
				directions_solved[i-1] = 's';
 1f6:	d3 e7       	ldi	r29, 0x73	; 115
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'r';
 1f8:	c2 e7       	ldi	r28, 0x72	; 114
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'u';
 1fa:	65 e7       	ldi	r22, 0x75	; 117
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
			{
				directions_solved[i-1] = 'l';
 1fc:	7c e6       	ldi	r23, 0x6C	; 108
			{
				directions_solved[i] = directions_solved[i+2];
				i++;
			}
			directions_solved[i] = '\0';
			i=0;
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	40 e0       	ldi	r20, 0x00	; 0
	usart_putstr("\r\rReversed Data: ");
	usart_putstr(directions_solved);
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'u')
 202:	25 37       	cpi	r18, 0x75	; 117
 204:	09 f0       	breq	.+2      	; 0x208 <process_array+0x66>
 206:	84 c0       	rjmp	.+264    	; 0x310 <process_array+0x16e>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
 208:	9c 01       	movw	r18, r24
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	31 09       	sbc	r19, r1
 20e:	f9 01       	movw	r30, r18
 210:	e8 5e       	subi	r30, 0xE8	; 232
 212:	fe 4f       	sbci	r31, 0xFE	; 254
 214:	a0 81       	ld	r26, Z
 216:	a2 37       	cpi	r26, 0x72	; 114
 218:	89 f4       	brne	.+34     	; 0x23c <process_array+0x9a>
 21a:	fc 01       	movw	r30, r24
 21c:	e8 5e       	subi	r30, 0xE8	; 232
 21e:	fe 4f       	sbci	r31, 0xFE	; 254
 220:	e1 81       	ldd	r30, Z+1	; 0x01
 222:	e3 37       	cpi	r30, 0x73	; 115
 224:	29 f5       	brne	.+74     	; 0x270 <process_array+0xce>
			{
				directions_solved[i-1] = 'l';
 226:	f9 01       	movw	r30, r18
 228:	e8 5e       	subi	r30, 0xE8	; 232
 22a:	fe 4f       	sbci	r31, 0xFE	; 254
 22c:	70 83       	st	Z, r23
			{
				directions_solved[i-1] = 'u';
			}

			
			while (directions_solved[i+2])
 22e:	fc 01       	movw	r30, r24
 230:	e8 5e       	subi	r30, 0xE8	; 232
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	22 81       	ldd	r18, Z+2	; 0x02
 236:	21 11       	cpse	r18, r1
 238:	5a c0       	rjmp	.+180    	; 0x2ee <process_array+0x14c>
 23a:	64 c0       	rjmp	.+200    	; 0x304 <process_array+0x162>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
 23c:	a3 37       	cpi	r26, 0x73	; 115
 23e:	59 f4       	brne	.+22     	; 0x256 <process_array+0xb4>
 240:	fc 01       	movw	r30, r24
 242:	e8 5e       	subi	r30, 0xE8	; 232
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	e1 81       	ldd	r30, Z+1	; 0x01
 248:	e2 37       	cpi	r30, 0x72	; 114
 24a:	31 f5       	brne	.+76     	; 0x298 <process_array+0xf6>
			{
				directions_solved[i-1] = 'l';
 24c:	f9 01       	movw	r30, r18
 24e:	e8 5e       	subi	r30, 0xE8	; 232
 250:	fe 4f       	sbci	r31, 0xFE	; 254
 252:	70 83       	st	Z, r23
 254:	ec cf       	rjmp	.-40     	; 0x22e <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'r')
 256:	ac 36       	cpi	r26, 0x6C	; 108
 258:	59 f4       	brne	.+22     	; 0x270 <process_array+0xce>
 25a:	fc 01       	movw	r30, r24
 25c:	e8 5e       	subi	r30, 0xE8	; 232
 25e:	fe 4f       	sbci	r31, 0xFE	; 254
 260:	e1 81       	ldd	r30, Z+1	; 0x01
 262:	e2 37       	cpi	r30, 0x72	; 114
 264:	d9 f4       	brne	.+54     	; 0x29c <process_array+0xfa>
			{
				directions_solved[i-1] = 'u';
 266:	f9 01       	movw	r30, r18
 268:	e8 5e       	subi	r30, 0xE8	; 232
 26a:	fe 4f       	sbci	r31, 0xFE	; 254
 26c:	60 83       	st	Z, r22
 26e:	df cf       	rjmp	.-66     	; 0x22e <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'r')
 270:	a2 37       	cpi	r26, 0x72	; 114
 272:	91 f4       	brne	.+36     	; 0x298 <process_array+0xf6>
 274:	fc 01       	movw	r30, r24
 276:	e8 5e       	subi	r30, 0xE8	; 232
 278:	fe 4f       	sbci	r31, 0xFE	; 254
 27a:	e1 81       	ldd	r30, Z+1	; 0x01
 27c:	e2 37       	cpi	r30, 0x72	; 114
 27e:	29 f4       	brne	.+10     	; 0x28a <process_array+0xe8>
			{
				directions_solved[i-1] = 's';
 280:	f9 01       	movw	r30, r18
 282:	e8 5e       	subi	r30, 0xE8	; 232
 284:	fe 4f       	sbci	r31, 0xFE	; 254
 286:	d0 83       	st	Z, r29
 288:	d2 cf       	rjmp	.-92     	; 0x22e <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'l')
 28a:	ec 36       	cpi	r30, 0x6C	; 108
 28c:	81 f6       	brne	.-96     	; 0x22e <process_array+0x8c>
			{
				directions_solved[i-1] = 'u';
 28e:	f9 01       	movw	r30, r18
 290:	e8 5e       	subi	r30, 0xE8	; 232
 292:	fe 4f       	sbci	r31, 0xFE	; 254
 294:	60 83       	st	Z, r22
 296:	cb cf       	rjmp	.-106    	; 0x22e <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
 298:	ac 36       	cpi	r26, 0x6C	; 108
 29a:	99 f4       	brne	.+38     	; 0x2c2 <process_array+0x120>
 29c:	fc 01       	movw	r30, r24
 29e:	e8 5e       	subi	r30, 0xE8	; 232
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	e1 81       	ldd	r30, Z+1	; 0x01
 2a4:	e3 37       	cpi	r30, 0x73	; 115
 2a6:	29 f4       	brne	.+10     	; 0x2b2 <process_array+0x110>
			{
				directions_solved[i-1] = 'r';
 2a8:	f9 01       	movw	r30, r18
 2aa:	e8 5e       	subi	r30, 0xE8	; 232
 2ac:	fe 4f       	sbci	r31, 0xFE	; 254
 2ae:	c0 83       	st	Z, r28
 2b0:	be cf       	rjmp	.-132    	; 0x22e <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
 2b2:	ec 36       	cpi	r30, 0x6C	; 108
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <process_array+0x116>
 2b6:	bb cf       	rjmp	.-138    	; 0x22e <process_array+0x8c>
			{
				directions_solved[i-1] = 's';
 2b8:	f9 01       	movw	r30, r18
 2ba:	e8 5e       	subi	r30, 0xE8	; 232
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	d0 83       	st	Z, r29
 2c0:	b6 cf       	rjmp	.-148    	; 0x22e <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'l')
 2c2:	a3 37       	cpi	r26, 0x73	; 115
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <process_array+0x126>
 2c6:	b3 cf       	rjmp	.-154    	; 0x22e <process_array+0x8c>
 2c8:	fc 01       	movw	r30, r24
 2ca:	e8 5e       	subi	r30, 0xE8	; 232
 2cc:	fe 4f       	sbci	r31, 0xFE	; 254
 2ce:	e1 81       	ldd	r30, Z+1	; 0x01
 2d0:	ec 36       	cpi	r30, 0x6C	; 108
 2d2:	29 f4       	brne	.+10     	; 0x2de <process_array+0x13c>
			{
				directions_solved[i-1] = 'r';
 2d4:	f9 01       	movw	r30, r18
 2d6:	e8 5e       	subi	r30, 0xE8	; 232
 2d8:	fe 4f       	sbci	r31, 0xFE	; 254
 2da:	c0 83       	st	Z, r28
 2dc:	a8 cf       	rjmp	.-176    	; 0x22e <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
 2de:	e3 37       	cpi	r30, 0x73	; 115
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <process_array+0x142>
 2e2:	a5 cf       	rjmp	.-182    	; 0x22e <process_array+0x8c>
			{
				directions_solved[i-1] = 'u';
 2e4:	f9 01       	movw	r30, r18
 2e6:	e8 5e       	subi	r30, 0xE8	; 232
 2e8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ea:	60 83       	st	Z, r22
 2ec:	a0 cf       	rjmp	.-192    	; 0x22e <process_array+0x8c>
 2ee:	dc 01       	movw	r26, r24
 2f0:	a8 5e       	subi	r26, 0xE8	; 232
 2f2:	be 4f       	sbci	r27, 0xFE	; 254
 2f4:	fc 01       	movw	r30, r24
 2f6:	e5 5e       	subi	r30, 0xE5	; 229
 2f8:	fe 4f       	sbci	r31, 0xFE	; 254
			}

			
			while (directions_solved[i+2])
			{
				directions_solved[i] = directions_solved[i+2];
 2fa:	2d 93       	st	X+, r18
				i++;
 2fc:	01 96       	adiw	r24, 0x01	; 1
			{
				directions_solved[i-1] = 'u';
			}

			
			while (directions_solved[i+2])
 2fe:	21 91       	ld	r18, Z+
 300:	21 11       	cpse	r18, r1
 302:	fb cf       	rjmp	.-10     	; 0x2fa <process_array+0x158>
			{
				directions_solved[i] = directions_solved[i+2];
				i++;
			}
			directions_solved[i] = '\0';
 304:	fc 01       	movw	r30, r24
 306:	e8 5e       	subi	r30, 0xE8	; 232
 308:	fe 4f       	sbci	r31, 0xFE	; 254
 30a:	10 82       	st	Z, r1
			i=0;
 30c:	85 2f       	mov	r24, r21
 30e:	94 2f       	mov	r25, r20
	}
	
	usart_putstr("\r\rReversed Data: ");
	usart_putstr(directions_solved);
	
	for (i=0;directions_solved[i];i++)
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	fc 01       	movw	r30, r24
 314:	e8 5e       	subi	r30, 0xE8	; 232
 316:	fe 4f       	sbci	r31, 0xFE	; 254
 318:	20 81       	ld	r18, Z
 31a:	21 11       	cpse	r18, r1
 31c:	72 cf       	rjmp	.-284    	; 0x202 <process_array+0x60>
			directions_solved[i] = '\0';
			i=0;
		}
	}
	
	usart_putstr("\r\rSolved Data: ");
 31e:	82 e7       	ldi	r24, 0x72	; 114
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	usart_putstr(directions_solved);
 326:	88 e1       	ldi	r24, 0x18	; 24
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	usart_putstr("\r\rSolved Data Practical: ");
 32e:	82 e8       	ldi	r24, 0x82	; 130
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <turn_U>:

void turn_U(uint16_t speed)
{
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	82 e5       	ldi	r24, 0x52	; 82
 34a:	97 e0       	ldi	r25, 0x07	; 7
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <turn_U+0x10>
 354:	00 c0       	rjmp	.+0      	; 0x356 <turn_U+0x1a>
 356:	00 00       	nop
	_delay_ms(300);
	left_rotate();
 358:	0e 94 5b 00 	call	0xb6	; 0xb6 <left_rotate>
	set_speed_L(speed + 300); //70
 35c:	8e 01       	movw	r16, r28
 35e:	04 5d       	subi	r16, 0xD4	; 212
 360:	1e 4f       	sbci	r17, 0xFE	; 254
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 362:	1b bd       	out	0x2b, r17	; 43
 364:	0a bd       	out	0x2a, r16	; 42
 366:	2f e7       	ldi	r18, 0x7F	; 127
 368:	88 e3       	ldi	r24, 0x38	; 56
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	21 50       	subi	r18, 0x01	; 1
 36e:	80 40       	sbci	r24, 0x00	; 0
 370:	90 40       	sbci	r25, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <turn_U+0x30>
 374:	00 c0       	rjmp	.+0      	; 0x376 <turn_U+0x3a>
 376:	00 00       	nop
{
	_delay_ms(300);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
 378:	ce 01       	movw	r24, r28
 37a:	c2 97       	sbiw	r24, 0x32	; 50
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 37c:	99 bd       	out	0x29, r25	; 41
 37e:	88 bd       	out	0x28, r24	; 40
	_delay_ms(300);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
 380:	80 5b       	subi	r24, 0xB0	; 176
 382:	9f 4f       	sbci	r25, 0xFF	; 255
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 384:	9b bd       	out	0x2b, r25	; 43
 386:	8a bd       	out	0x2a, r24	; 42
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
	//_delay_ms(100);
	while((sensor_data() & (3<<5)) != (3<<5));
 388:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 38c:	80 76       	andi	r24, 0x60	; 96
 38e:	80 36       	cpi	r24, 0x60	; 96
 390:	d9 f7       	brne	.-10     	; 0x388 <turn_U+0x4c>
	while((sensor_data() & (3<<4)) != (3<<4));
 392:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 396:	80 73       	andi	r24, 0x30	; 48
 398:	80 33       	cpi	r24, 0x30	; 48
 39a:	d9 f7       	brne	.-10     	; 0x392 <turn_U+0x56>
	while((sensor_data() & (3<<3)) != (3<<3));
 39c:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 3a0:	88 71       	andi	r24, 0x18	; 24
 3a2:	88 31       	cpi	r24, 0x18	; 24
 3a4:	d9 f7       	brne	.-10     	; 0x39c <turn_U+0x60>
	//while(sensor_data() != (3<<3));
	go_forward();
 3a6:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 3aa:	d9 bd       	out	0x29, r29	; 41
 3ac:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 3ae:	1b bd       	out	0x2b, r17	; 43
 3b0:	0a bd       	out	0x2a, r16	; 42
 3b2:	2f e7       	ldi	r18, 0x7F	; 127
 3b4:	88 e3       	ldi	r24, 0x38	; 56
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	21 50       	subi	r18, 0x01	; 1
 3ba:	80 40       	sbci	r24, 0x00	; 0
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <turn_U+0x7c>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <turn_U+0x86>
 3c2:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 3c4:	d9 bd       	out	0x29, r29	; 41
 3c6:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 3c8:	db bd       	out	0x2b, r29	; 43
 3ca:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_R(speed);
	set_speed_L(speed +300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	08 95       	ret

000003d6 <turn_U_destination>:

void turn_U_destination(uint16_t speed)
{
 3d6:	0f 93       	push	r16
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	ec 01       	movw	r28, r24
	uint16_t sensor_data_hold;
	stay_stop();
 3e0:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
	process_array();
 3e4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <process_array>
 3e8:	2f ef       	ldi	r18, 0xFF	; 255
 3ea:	89 e6       	ldi	r24, 0x69	; 105
 3ec:	98 e1       	ldi	r25, 0x18	; 24
 3ee:	21 50       	subi	r18, 0x01	; 1
 3f0:	80 40       	sbci	r24, 0x00	; 0
 3f2:	90 40       	sbci	r25, 0x00	; 0
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <turn_U_destination+0x18>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <turn_U_destination+0x22>
 3f8:	00 00       	nop
	_delay_ms(1000);
	go_backward();
 3fa:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
	set_speed_RL(speed + 200);
 3fe:	8e 01       	movw	r16, r28
 400:	08 53       	subi	r16, 0x38	; 56
 402:	1f 4f       	sbci	r17, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 404:	19 bd       	out	0x29, r17	; 41
 406:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 408:	1b bd       	out	0x2b, r17	; 43
 40a:	0a bd       	out	0x2a, r16	; 42
 40c:	2f e7       	ldi	r18, 0x7F	; 127
 40e:	88 e3       	ldi	r24, 0x38	; 56
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	21 50       	subi	r18, 0x01	; 1
 414:	80 40       	sbci	r24, 0x00	; 0
 416:	90 40       	sbci	r25, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <turn_U_destination+0x3c>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <turn_U_destination+0x46>
 41c:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 41e:	d9 bd       	out	0x29, r29	; 41
 420:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 422:	db bd       	out	0x2b, r29	; 43
 424:	ca bd       	out	0x2a, r28	; 42
	_delay_ms(1000);
	go_backward();
	set_speed_RL(speed + 200);
	_delay_ms(50);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
 426:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 42a:	82 74       	andi	r24, 0x42	; 66
	while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 42c:	21 f0       	breq	.+8      	; 0x436 <turn_U_destination+0x60>
	{
		sensor_data_hold = sensor_data();
 42e:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 432:	82 74       	andi	r24, 0x42	; 66
	go_backward();
	set_speed_RL(speed + 200);
	_delay_ms(50);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
	while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 434:	e1 f7       	brne	.-8      	; 0x42e <turn_U_destination+0x58>
	{
		sensor_data_hold = sensor_data();
	}
	stay_stop();
 436:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
 43a:	2f ef       	ldi	r18, 0xFF	; 255
 43c:	80 e7       	ldi	r24, 0x70	; 112
 43e:	92 e0       	ldi	r25, 0x02	; 2
 440:	21 50       	subi	r18, 0x01	; 1
 442:	80 40       	sbci	r24, 0x00	; 0
 444:	90 40       	sbci	r25, 0x00	; 0
 446:	e1 f7       	brne	.-8      	; 0x440 <turn_U_destination+0x6a>
 448:	00 c0       	rjmp	.+0      	; 0x44a <turn_U_destination+0x74>
 44a:	00 00       	nop
	_delay_ms(100);
	go_forward();
 44c:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 450:	19 bd       	out	0x29, r17	; 41
 452:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 454:	1b bd       	out	0x2b, r17	; 43
 456:	0a bd       	out	0x2a, r16	; 42
 458:	2f e7       	ldi	r18, 0x7F	; 127
 45a:	88 e3       	ldi	r24, 0x38	; 56
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	21 50       	subi	r18, 0x01	; 1
 460:	80 40       	sbci	r24, 0x00	; 0
 462:	90 40       	sbci	r25, 0x00	; 0
 464:	e1 f7       	brne	.-8      	; 0x45e <turn_U_destination+0x88>
 466:	00 c0       	rjmp	.+0      	; 0x468 <turn_U_destination+0x92>
 468:	00 00       	nop
	_delay_ms(100);
	go_forward();
	set_speed_RL(speed + 200);
	_delay_ms(50);
	//set_speed_RL(speed);
	set_speed_RL(speed+20);
 46a:	ce 01       	movw	r24, r28
 46c:	44 96       	adiw	r24, 0x14	; 20
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 46e:	99 bd       	out	0x29, r25	; 41
 470:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 472:	9b bd       	out	0x2b, r25	; 43
 474:	8a bd       	out	0x2a, r24	; 42
 476:	2f ef       	ldi	r18, 0xFF	; 255
 478:	83 ec       	ldi	r24, 0xC3	; 195
 47a:	99 e0       	ldi	r25, 0x09	; 9
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	80 40       	sbci	r24, 0x00	; 0
 480:	90 40       	sbci	r25, 0x00	; 0
 482:	e1 f7       	brne	.-8      	; 0x47c <turn_U_destination+0xa6>
 484:	00 c0       	rjmp	.+0      	; 0x486 <turn_U_destination+0xb0>
 486:	00 00       	nop
	set_speed_RL(speed + 200);
	_delay_ms(50);
	//set_speed_RL(speed);
	set_speed_RL(speed+20);
	_delay_ms(400);
	left_rotate();
 488:	0e 94 5b 00 	call	0xb6	; 0xb6 <left_rotate>
	set_speed_L(speed + 300); //70
 48c:	8e 01       	movw	r16, r28
 48e:	04 5d       	subi	r16, 0xD4	; 212
 490:	1e 4f       	sbci	r17, 0xFE	; 254
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 492:	1b bd       	out	0x2b, r17	; 43
 494:	0a bd       	out	0x2a, r16	; 42
 496:	2f e7       	ldi	r18, 0x7F	; 127
 498:	88 e3       	ldi	r24, 0x38	; 56
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	21 50       	subi	r18, 0x01	; 1
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <turn_U_destination+0xc6>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <turn_U_destination+0xd0>
 4a6:	00 00       	nop
	set_speed_RL(speed+20);
	_delay_ms(400);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
 4a8:	ce 01       	movw	r24, r28
 4aa:	c2 97       	sbiw	r24, 0x32	; 50
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 4ac:	99 bd       	out	0x29, r25	; 41
 4ae:	88 bd       	out	0x28, r24	; 40
	_delay_ms(400);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
 4b0:	80 5b       	subi	r24, 0xB0	; 176
 4b2:	9f 4f       	sbci	r25, 0xFF	; 255
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 4b4:	9b bd       	out	0x2b, r25	; 43
 4b6:	8a bd       	out	0x2a, r24	; 42
 4b8:	2f ef       	ldi	r18, 0xFF	; 255
 4ba:	80 e7       	ldi	r24, 0x70	; 112
 4bc:	92 e0       	ldi	r25, 0x02	; 2
 4be:	21 50       	subi	r18, 0x01	; 1
 4c0:	80 40       	sbci	r24, 0x00	; 0
 4c2:	90 40       	sbci	r25, 0x00	; 0
 4c4:	e1 f7       	brne	.-8      	; 0x4be <turn_U_destination+0xe8>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <turn_U_destination+0xf2>
 4c8:	00 00       	nop
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
	_delay_ms(100);
	while((sensor_data() & (3<<5)) != 0x00);
 4ca:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 4ce:	80 76       	andi	r24, 0x60	; 96
 4d0:	e1 f7       	brne	.-8      	; 0x4ca <turn_U_destination+0xf4>
	while((sensor_data() & (3<<5)) != (3<<5));
 4d2:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 4d6:	80 76       	andi	r24, 0x60	; 96
 4d8:	80 36       	cpi	r24, 0x60	; 96
 4da:	d9 f7       	brne	.-10     	; 0x4d2 <turn_U_destination+0xfc>
	while((sensor_data() & (3<<4)) != (3<<4));
 4dc:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 4e0:	80 73       	andi	r24, 0x30	; 48
 4e2:	80 33       	cpi	r24, 0x30	; 48
 4e4:	d9 f7       	brne	.-10     	; 0x4dc <turn_U_destination+0x106>
	while((sensor_data() & (3<<3)) != (3<<3));
 4e6:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 4ea:	88 71       	andi	r24, 0x18	; 24
 4ec:	88 31       	cpi	r24, 0x18	; 24
 4ee:	d9 f7       	brne	.-10     	; 0x4e6 <turn_U_destination+0x110>
	//while(sensor_data() != (3<<3));
	go_forward();
 4f0:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 4f4:	d9 bd       	out	0x29, r29	; 41
 4f6:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 4f8:	1b bd       	out	0x2b, r17	; 43
 4fa:	0a bd       	out	0x2a, r16	; 42
 4fc:	2f e7       	ldi	r18, 0x7F	; 127
 4fe:	88 e3       	ldi	r24, 0x38	; 56
 500:	91 e0       	ldi	r25, 0x01	; 1
 502:	21 50       	subi	r18, 0x01	; 1
 504:	80 40       	sbci	r24, 0x00	; 0
 506:	90 40       	sbci	r25, 0x00	; 0
 508:	e1 f7       	brne	.-8      	; 0x502 <turn_U_destination+0x12c>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <turn_U_destination+0x136>
 50c:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 50e:	d9 bd       	out	0x29, r29	; 41
 510:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 512:	db bd       	out	0x2b, r29	; 43
 514:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_R(speed);
	set_speed_L(speed +300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	08 95       	ret

00000520 <turn_left>:

void turn_left(uint16_t speed)
{
 520:	0f 93       	push	r16
 522:	1f 93       	push	r17
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	ec 01       	movw	r28, r24
	left_rotate();
 52a:	0e 94 5b 00 	call	0xb6	; 0xb6 <left_rotate>
	set_speed_L(speed + 300); //70
 52e:	8e 01       	movw	r16, r28
 530:	04 5d       	subi	r16, 0xD4	; 212
 532:	1e 4f       	sbci	r17, 0xFE	; 254
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 534:	1b bd       	out	0x2b, r17	; 43
 536:	0a bd       	out	0x2a, r16	; 42
 538:	2f e7       	ldi	r18, 0x7F	; 127
 53a:	88 e3       	ldi	r24, 0x38	; 56
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	21 50       	subi	r18, 0x01	; 1
 540:	80 40       	sbci	r24, 0x00	; 0
 542:	90 40       	sbci	r25, 0x00	; 0
 544:	e1 f7       	brne	.-8      	; 0x53e <turn_left+0x1e>
 546:	00 c0       	rjmp	.+0      	; 0x548 <turn_left+0x28>
 548:	00 00       	nop
void turn_left(uint16_t speed)
{
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
 54a:	ce 01       	movw	r24, r28
 54c:	c2 97       	sbiw	r24, 0x32	; 50
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 54e:	99 bd       	out	0x29, r25	; 41
 550:	88 bd       	out	0x28, r24	; 40
{
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
 552:	80 5b       	subi	r24, 0xB0	; 176
 554:	9f 4f       	sbci	r25, 0xFF	; 255
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 556:	9b bd       	out	0x2b, r25	; 43
 558:	8a bd       	out	0x2a, r24	; 42
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
	//_delay_ms(100);
	while((sensor_data() & (3<<5)) != (3<<5));
 55a:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 55e:	80 76       	andi	r24, 0x60	; 96
 560:	80 36       	cpi	r24, 0x60	; 96
 562:	d9 f7       	brne	.-10     	; 0x55a <turn_left+0x3a>
	while((sensor_data() & (3<<4)) != (3<<4));
 564:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 568:	80 73       	andi	r24, 0x30	; 48
 56a:	80 33       	cpi	r24, 0x30	; 48
 56c:	d9 f7       	brne	.-10     	; 0x564 <turn_left+0x44>
	//while((sensor_data() & (3<<3)) != (3<<3));
	//while(sensor_data() != (3<<3));
	go_forward();
 56e:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 572:	d9 bd       	out	0x29, r29	; 41
 574:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 576:	1b bd       	out	0x2b, r17	; 43
 578:	0a bd       	out	0x2a, r16	; 42
 57a:	2f e7       	ldi	r18, 0x7F	; 127
 57c:	88 e3       	ldi	r24, 0x38	; 56
 57e:	91 e0       	ldi	r25, 0x01	; 1
 580:	21 50       	subi	r18, 0x01	; 1
 582:	80 40       	sbci	r24, 0x00	; 0
 584:	90 40       	sbci	r25, 0x00	; 0
 586:	e1 f7       	brne	.-8      	; 0x580 <turn_left+0x60>
 588:	00 c0       	rjmp	.+0      	; 0x58a <turn_left+0x6a>
 58a:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 58c:	d9 bd       	out	0x29, r29	; 41
 58e:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 590:	db bd       	out	0x2b, r29	; 43
 592:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_R(speed);
	set_speed_L(speed + 300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	1f 91       	pop	r17
 59a:	0f 91       	pop	r16
 59c:	08 95       	ret

0000059e <turn_right>:

void turn_right(uint16_t speed)
{
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	ec 01       	movw	r28, r24
	right_rotate();
 5a8:	0e 94 55 00 	call	0xaa	; 0xaa <right_rotate>
	set_speed_R(speed + 300); //40
 5ac:	8e 01       	movw	r16, r28
 5ae:	04 5d       	subi	r16, 0xD4	; 212
 5b0:	1e 4f       	sbci	r17, 0xFE	; 254
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 5b2:	19 bd       	out	0x29, r17	; 41
 5b4:	08 bd       	out	0x28, r16	; 40
 5b6:	2f e7       	ldi	r18, 0x7F	; 127
 5b8:	88 e3       	ldi	r24, 0x38	; 56
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	21 50       	subi	r18, 0x01	; 1
 5be:	80 40       	sbci	r24, 0x00	; 0
 5c0:	90 40       	sbci	r25, 0x00	; 0
 5c2:	e1 f7       	brne	.-8      	; 0x5bc <turn_right+0x1e>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <turn_right+0x28>
 5c6:	00 00       	nop
void turn_right(uint16_t speed)
{
	right_rotate();
	set_speed_R(speed + 300); //40
	_delay_ms(50);
	set_speed_L(speed-50); //-50
 5c8:	ce 01       	movw	r24, r28
 5ca:	c2 97       	sbiw	r24, 0x32	; 50
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 5cc:	9b bd       	out	0x2b, r25	; 43
 5ce:	8a bd       	out	0x2a, r24	; 42
{
	right_rotate();
	set_speed_R(speed + 300); //40
	_delay_ms(50);
	set_speed_L(speed-50); //-50
	set_speed_R(speed+30);
 5d0:	80 5b       	subi	r24, 0xB0	; 176
 5d2:	9f 4f       	sbci	r25, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 5d4:	99 bd       	out	0x29, r25	; 41
 5d6:	88 bd       	out	0x28, r24	; 40
	set_speed_R(speed + 300); //40
	_delay_ms(50);
	set_speed_L(speed-50); //-50
	set_speed_R(speed+30);
	//_delay_ms(100);
	while((sensor_data() & (3<<1)) != (3<<1));
 5d8:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 5dc:	86 70       	andi	r24, 0x06	; 6
 5de:	86 30       	cpi	r24, 0x06	; 6
 5e0:	d9 f7       	brne	.-10     	; 0x5d8 <turn_right+0x3a>
	while((sensor_data() & (3<<2)) != (3<<2));
 5e2:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 5e6:	8c 70       	andi	r24, 0x0C	; 12
 5e8:	8c 30       	cpi	r24, 0x0C	; 12
 5ea:	d9 f7       	brne	.-10     	; 0x5e2 <turn_right+0x44>
	//while((sensor_data() & (3<<3)) != (3<<3));
	//while(sensor_data() != (3<<3));
	go_forward();
 5ec:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 5f0:	db bd       	out	0x2b, r29	; 43
 5f2:	ca bd       	out	0x2a, r28	; 42
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 5f4:	19 bd       	out	0x29, r17	; 41
 5f6:	08 bd       	out	0x28, r16	; 40
 5f8:	2f e7       	ldi	r18, 0x7F	; 127
 5fa:	88 e3       	ldi	r24, 0x38	; 56
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	21 50       	subi	r18, 0x01	; 1
 600:	80 40       	sbci	r24, 0x00	; 0
 602:	90 40       	sbci	r25, 0x00	; 0
 604:	e1 f7       	brne	.-8      	; 0x5fe <turn_right+0x60>
 606:	00 c0       	rjmp	.+0      	; 0x608 <turn_right+0x6a>
 608:	00 00       	nop
 60a:	d9 bd       	out	0x29, r29	; 41
 60c:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 60e:	db bd       	out	0x2b, r29	; 43
 610:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_L(speed);
	set_speed_R(speed + 300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	1f 91       	pop	r17
 618:	0f 91       	pop	r16
 61a:	08 95       	ret

0000061c <left_operation>:

void left_operation(uint16_t speed)
{

	turn_left(speed);
 61c:	0e 94 90 02 	call	0x520	; 0x520 <turn_left>
	directions_solved[node_number] = 'l';
 620:	80 91 16 01 	lds	r24, 0x0116
 624:	90 91 17 01 	lds	r25, 0x0117
 628:	fc 01       	movw	r30, r24
 62a:	e8 5e       	subi	r30, 0xE8	; 232
 62c:	fe 4f       	sbci	r31, 0xFE	; 254
 62e:	2c e6       	ldi	r18, 0x6C	; 108
 630:	20 83       	st	Z, r18
	node_number = node_number + 1;
 632:	01 96       	adiw	r24, 0x01	; 1
 634:	90 93 17 01 	sts	0x0117, r25
 638:	80 93 16 01 	sts	0x0116, r24
 63c:	08 95       	ret

0000063e <right_operation>:
	//usart_putchar('l');
}

void right_operation(uint16_t speed)
{
	turn_right(speed);
 63e:	0e 94 cf 02 	call	0x59e	; 0x59e <turn_right>
	directions_solved[node_number] = 'r';
 642:	80 91 16 01 	lds	r24, 0x0116
 646:	90 91 17 01 	lds	r25, 0x0117
 64a:	fc 01       	movw	r30, r24
 64c:	e8 5e       	subi	r30, 0xE8	; 232
 64e:	fe 4f       	sbci	r31, 0xFE	; 254
 650:	22 e7       	ldi	r18, 0x72	; 114
 652:	20 83       	st	Z, r18
	node_number = node_number + 1;
 654:	01 96       	adiw	r24, 0x01	; 1
 656:	90 93 17 01 	sts	0x0117, r25
 65a:	80 93 16 01 	sts	0x0116, r24
 65e:	08 95       	ret

00000660 <left_forward_operation>:
	//usart_putchar('r');
}

void left_forward_operation(uint16_t speed)
{
	turn_left(speed);
 660:	0e 94 90 02 	call	0x520	; 0x520 <turn_left>
	directions_solved[node_number] = 'l';
 664:	80 91 16 01 	lds	r24, 0x0116
 668:	90 91 17 01 	lds	r25, 0x0117
 66c:	fc 01       	movw	r30, r24
 66e:	e8 5e       	subi	r30, 0xE8	; 232
 670:	fe 4f       	sbci	r31, 0xFE	; 254
 672:	2c e6       	ldi	r18, 0x6C	; 108
 674:	20 83       	st	Z, r18
	node_number = node_number + 1;
 676:	01 96       	adiw	r24, 0x01	; 1
 678:	90 93 17 01 	sts	0x0117, r25
 67c:	80 93 16 01 	sts	0x0116, r24
 680:	08 95       	ret

00000682 <right_forward_operation>:
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 682:	99 bd       	out	0x29, r25	; 41
 684:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 686:	9b bd       	out	0x2b, r25	; 43
 688:	8a bd       	out	0x2a, r24	; 42
}

void right_forward_operation(uint16_t speed)
{
	set_speed_RL(speed);
	go_forward();
 68a:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
	directions_solved[node_number] = 's';
 68e:	80 91 16 01 	lds	r24, 0x0116
 692:	90 91 17 01 	lds	r25, 0x0117
 696:	fc 01       	movw	r30, r24
 698:	e8 5e       	subi	r30, 0xE8	; 232
 69a:	fe 4f       	sbci	r31, 0xFE	; 254
 69c:	23 e7       	ldi	r18, 0x73	; 115
 69e:	20 83       	st	Z, r18
	node_number = node_number + 1;
 6a0:	01 96       	adiw	r24, 0x01	; 1
 6a2:	90 93 17 01 	sts	0x0117, r25
 6a6:	80 93 16 01 	sts	0x0116, r24
 6aa:	08 95       	ret

000006ac <left_right_operation>:
	//usart_putchar('s');
}

void left_right_operation(uint16_t speed)
{
	turn_left(speed);
 6ac:	0e 94 90 02 	call	0x520	; 0x520 <turn_left>
	directions_solved[node_number] = 'l';
 6b0:	80 91 16 01 	lds	r24, 0x0116
 6b4:	90 91 17 01 	lds	r25, 0x0117
 6b8:	fc 01       	movw	r30, r24
 6ba:	e8 5e       	subi	r30, 0xE8	; 232
 6bc:	fe 4f       	sbci	r31, 0xFE	; 254
 6be:	2c e6       	ldi	r18, 0x6C	; 108
 6c0:	20 83       	st	Z, r18
	node_number = node_number + 1;
 6c2:	01 96       	adiw	r24, 0x01	; 1
 6c4:	90 93 17 01 	sts	0x0117, r25
 6c8:	80 93 16 01 	sts	0x0116, r24
 6cc:	08 95       	ret

000006ce <left_right_forward_operation>:
	//usart_putchar('l');
}

void left_right_forward_operation(uint16_t speed)
{
	turn_left(speed);
 6ce:	0e 94 90 02 	call	0x520	; 0x520 <turn_left>
	directions_solved[node_number] = 'l';
 6d2:	80 91 16 01 	lds	r24, 0x0116
 6d6:	90 91 17 01 	lds	r25, 0x0117
 6da:	fc 01       	movw	r30, r24
 6dc:	e8 5e       	subi	r30, 0xE8	; 232
 6de:	fe 4f       	sbci	r31, 0xFE	; 254
 6e0:	2c e6       	ldi	r18, 0x6C	; 108
 6e2:	20 83       	st	Z, r18
	node_number = node_number + 1;
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	90 93 17 01 	sts	0x0117, r25
 6ea:	80 93 16 01 	sts	0x0116, r24
 6ee:	08 95       	ret

000006f0 <reverse_operation>:
	//usart_putchar('l');
}

void reverse_operation(uint16_t speed)
{
	turn_U(speed);
 6f0:	0e 94 9e 01 	call	0x33c	; 0x33c <turn_U>
	directions_solved[node_number] = 'u';
 6f4:	80 91 16 01 	lds	r24, 0x0116
 6f8:	90 91 17 01 	lds	r25, 0x0117
 6fc:	fc 01       	movw	r30, r24
 6fe:	e8 5e       	subi	r30, 0xE8	; 232
 700:	fe 4f       	sbci	r31, 0xFE	; 254
 702:	25 e7       	ldi	r18, 0x75	; 117
 704:	20 83       	st	Z, r18
	node_number = node_number + 1;
 706:	01 96       	adiw	r24, 0x01	; 1
 708:	90 93 17 01 	sts	0x0117, r25
 70c:	80 93 16 01 	sts	0x0116, r24
 710:	08 95       	ret

00000712 <destination_operation>:
	//usart_putchar('u');
}

void destination_operation(uint16_t speed)
{
	directions_solved[node_number] = '\0';
 712:	e0 91 16 01 	lds	r30, 0x0116
 716:	f0 91 17 01 	lds	r31, 0x0117
 71a:	e8 5e       	subi	r30, 0xE8	; 232
 71c:	fe 4f       	sbci	r31, 0xFE	; 254
 71e:	10 82       	st	Z, r1
	turn_U_destination(speed);
 720:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <turn_U_destination>
 724:	08 95       	ret

00000726 <evaluate_direction>:
	//usart_putchar('e');
}


void evaluate_direction(char dir,uint16_t speed)
{
 726:	1f 93       	push	r17
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	eb 01       	movw	r28, r22
	//if (Time_x2ms >= min_up_time)
	//{
		char evaluation = 0;
		evaluation = directions_solved[node_number];
 72e:	20 91 16 01 	lds	r18, 0x0116
 732:	30 91 17 01 	lds	r19, 0x0117
 736:	f9 01       	movw	r30, r18
 738:	e8 5e       	subi	r30, 0xE8	; 232
 73a:	fe 4f       	sbci	r31, 0xFE	; 254
 73c:	10 81       	ld	r17, Z
		node_number = node_number + 1;
 73e:	2f 5f       	subi	r18, 0xFF	; 255
 740:	3f 4f       	sbci	r19, 0xFF	; 255
 742:	30 93 17 01 	sts	0x0117, r19
 746:	20 93 16 01 	sts	0x0116, r18
		
		usart_putchar(evaluation);
 74a:	81 2f       	mov	r24, r17
 74c:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
		
		if (evaluation == 's')
 750:	13 37       	cpi	r17, 0x73	; 115
 752:	39 f4       	brne	.+14     	; 0x762 <evaluate_direction+0x3c>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 754:	d9 bd       	out	0x29, r29	; 41
 756:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 758:	db bd       	out	0x2b, r29	; 43
 75a:	ca bd       	out	0x2a, r28	; 42
		usart_putchar(evaluation);
		
		if (evaluation == 's')
		{
			set_speed_RL(speed);
			go_forward();
 75c:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
 760:	19 c0       	rjmp	.+50     	; 0x794 <evaluate_direction+0x6e>
		}
		else if (evaluation == 'u')
 762:	15 37       	cpi	r17, 0x75	; 117
 764:	21 f4       	brne	.+8      	; 0x76e <evaluate_direction+0x48>
		{
			turn_U(speed);
 766:	ce 01       	movw	r24, r28
 768:	0e 94 9e 01 	call	0x33c	; 0x33c <turn_U>
 76c:	13 c0       	rjmp	.+38     	; 0x794 <evaluate_direction+0x6e>
		}
		else if (evaluation == 'l')
 76e:	1c 36       	cpi	r17, 0x6C	; 108
 770:	21 f4       	brne	.+8      	; 0x77a <evaluate_direction+0x54>
		{
			turn_left(speed);
 772:	ce 01       	movw	r24, r28
 774:	0e 94 90 02 	call	0x520	; 0x520 <turn_left>
 778:	0d c0       	rjmp	.+26     	; 0x794 <evaluate_direction+0x6e>
		}
		else if (evaluation == 'r')
 77a:	12 37       	cpi	r17, 0x72	; 114
 77c:	21 f4       	brne	.+8      	; 0x786 <evaluate_direction+0x60>
		{
			turn_right(speed);
 77e:	ce 01       	movw	r24, r28
 780:	0e 94 cf 02 	call	0x59e	; 0x59e <turn_right>
 784:	07 c0       	rjmp	.+14     	; 0x794 <evaluate_direction+0x6e>
		}
		else
		{
			stay_stop();
 786:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
			usart_putstr("\r\rEnd Stuck!!!\r\r\r-------------------------------------------------------\r\r\r\r");
 78a:	8c e9       	ldi	r24, 0x9C	; 156
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
 792:	ff cf       	rjmp	.-2      	; 0x792 <evaluate_direction+0x6c>
			while(1);
		}
		
		//Time_x2ms = 0x00;
	//}
}
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	1f 91       	pop	r17
 79a:	08 95       	ret

0000079c <main>:
{
	uint16_t speed=300, destination=0;
	uint8_t sensor_data_hold=0, Right_trigged=0, Left_trigged=0, Forward_trigged=0;//, speed_grad_count=0;
	
	//port pin initialization
	PORTA = 03;
 79c:	83 e0       	ldi	r24, 0x03	; 3
 79e:	8b bb       	out	0x1b, r24	; 27
	DDRA = 00;
 7a0:	1a ba       	out	0x1a, r1	; 26
	PORTB=0x00;
 7a2:	18 ba       	out	0x18, r1	; 24
	DDRB=0x0F;
 7a4:	9f e0       	ldi	r25, 0x0F	; 15
 7a6:	97 bb       	out	0x17, r25	; 23
	PORTC=0xFF;
 7a8:	9f ef       	ldi	r25, 0xFF	; 255
 7aa:	95 bb       	out	0x15, r25	; 21
	DDRC=0x00;
 7ac:	14 ba       	out	0x14, r1	; 20
	PORTD=0x00;
 7ae:	12 ba       	out	0x12, r1	; 18
	DDRD=0x30;
 7b0:	90 e3       	ldi	r25, 0x30	; 48
 7b2:	91 bb       	out	0x11, r25	; 17
	
	//Timer Counter0 initialization
	TCCR0=0x03; // 125k Hz at normal top 0xFF
 7b4:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
 7b6:	12 be       	out	0x32, r1	; 50
	OCR0=0x00;
 7b8:	1c be       	out	0x3c, r1	; 60
	
	//Timer Counter1 Initialization
	TCCR1A=0xA2;
 7ba:	92 ea       	ldi	r25, 0xA2	; 162
 7bc:	9f bd       	out	0x2f, r25	; 47
	TCCR1B=0x18;
 7be:	98 e1       	ldi	r25, 0x18	; 24
 7c0:	9e bd       	out	0x2e, r25	; 46
	TCNT1=0x0000;
 7c2:	1d bc       	out	0x2d, r1	; 45
 7c4:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x03;
 7c6:	87 bd       	out	0x27, r24	; 39
	ICR1L=0xE8; //03E8=1000 in decimal
 7c8:	88 ee       	ldi	r24, 0xE8	; 232
 7ca:	86 bd       	out	0x26, r24	; 38
	OCR1A=speed;
 7cc:	8c e2       	ldi	r24, 0x2C	; 44
 7ce:	91 e0       	ldi	r25, 0x01	; 1
 7d0:	9b bd       	out	0x2b, r25	; 43
 7d2:	8a bd       	out	0x2a, r24	; 42
	OCR1B=speed;
 7d4:	99 bd       	out	0x29, r25	; 41
 7d6:	88 bd       	out	0x28, r24	; 40
	
	
	//USART Initialization
	usart_init(9600); 
 7d8:	60 e8       	ldi	r22, 0x80	; 128
 7da:	75 e2       	ldi	r23, 0x25	; 37
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 66 00 	call	0xcc	; 0xcc <usart_init>
	usart_putstr("\rI am ready!!\r");
 7e4:	89 ee       	ldi	r24, 0xE9	; 233
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	
	
	// Timer Interrupt Mask register settings
	TIMSK=0x01;
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	89 bf       	out	0x39, r24	; 57
	sei();//global interrupt enable
 7f0:	78 94       	sei
	
	
	//start_tour:
	while (PINA & (1<<PA0));
 7f2:	c8 99       	sbic	0x19, 0	; 25
 7f4:	fe cf       	rjmp	.-4      	; 0x7f2 <main+0x56>
	usart_putstr("start tour :)\r\rStuck Data: ");
 7f6:	88 ef       	ldi	r24, 0xF8	; 248
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
 7fe:	2f ef       	ldi	r18, 0xFF	; 255
 800:	84 e3       	ldi	r24, 0x34	; 52
 802:	9c e0       	ldi	r25, 0x0C	; 12
 804:	21 50       	subi	r18, 0x01	; 1
 806:	80 40       	sbci	r24, 0x00	; 0
 808:	90 40       	sbci	r25, 0x00	; 0
 80a:	e1 f7       	brne	.-8      	; 0x804 <main+0x68>
 80c:	00 c0       	rjmp	.+0      	; 0x80e <main+0x72>
 80e:	00 00       	nop
	_delay_ms(500);
	go_forward();
 810:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 814:	84 ef       	ldi	r24, 0xF4	; 244
 816:	91 e0       	ldi	r25, 0x01	; 1
 818:	99 bd       	out	0x29, r25	; 41
 81a:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 81c:	9b bd       	out	0x2b, r25	; 43
 81e:	8a bd       	out	0x2a, r24	; 42
 820:	2f ef       	ldi	r18, 0xFF	; 255
 822:	86 e7       	ldi	r24, 0x76	; 118
 824:	91 e0       	ldi	r25, 0x01	; 1
 826:	21 50       	subi	r18, 0x01	; 1
 828:	80 40       	sbci	r24, 0x00	; 0
 82a:	90 40       	sbci	r25, 0x00	; 0
 82c:	e1 f7       	brne	.-8      	; 0x826 <main+0x8a>
 82e:	00 c0       	rjmp	.+0      	; 0x830 <main+0x94>
 830:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 832:	8c e2       	ldi	r24, 0x2C	; 44
 834:	91 e0       	ldi	r25, 0x01	; 1
 836:	99 bd       	out	0x29, r25	; 41
 838:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 83a:	9b bd       	out	0x2b, r25	; 43
 83c:	8a bd       	out	0x2a, r24	; 42
	_delay_ms(500);
	go_forward();
	set_speed_RL(speed+200);
	_delay_ms(60);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
 83e:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 842:	82 74       	andi	r24, 0x42	; 66
	while ((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 844:	21 f0       	breq	.+8      	; 0x84e <main+0xb2>
	{
		sensor_data_hold = sensor_data();
 846:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 84a:	82 74       	andi	r24, 0x42	; 66
	go_forward();
	set_speed_RL(speed+200);
	_delay_ms(60);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
	while ((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 84c:	e1 f7       	brne	.-8      	; 0x846 <main+0xaa>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 84e:	d1 2c       	mov	r13, r1
 850:	a1 2c       	mov	r10, r1
 852:	b1 2c       	mov	r11, r1
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 854:	0f 2e       	mov	r0, r31
 856:	f6 e9       	ldi	r31, 0x96	; 150
 858:	ef 2e       	mov	r14, r31
 85a:	f1 2c       	mov	r15, r1
 85c:	f0 2d       	mov	r31, r0
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 85e:	cc e2       	ldi	r28, 0x2C	; 44
 860:	d1 e0       	ldi	r29, 0x01	; 1
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 862:	61 2c       	mov	r6, r1
 864:	71 2c       	mov	r7, r1
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 866:	88 24       	eor	r8, r8
 868:	83 94       	inc	r8
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 86a:	c1 2c       	mov	r12, r1
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 86c:	98 2c       	mov	r9, r8
 86e:	03 c0       	rjmp	.+6      	; 0x876 <__stack+0x17>
 870:	b1 2e       	mov	r11, r17
 872:	01 c0       	rjmp	.+2      	; 0x876 <__stack+0x17>
 874:	a1 2e       	mov	r10, r17
	// main while loop is started from here **********************************************************************************
	//************************************************************************************************************************	
    while(1)  //while loop 1
    {

		sensor_data_hold = sensor_data();  //normally read
 876:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
		
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
 87a:	98 2f       	mov	r25, r24
 87c:	98 71       	andi	r25, 0x18	; 24
 87e:	98 31       	cpi	r25, 0x18	; 24
 880:	29 f4       	brne	.+10     	; 0x88c <__stack+0x2d>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 882:	d9 bd       	out	0x29, r29	; 41
 884:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 886:	db bd       	out	0x2b, r29	; 43
 888:	ca bd       	out	0x2a, r28	; 42
 88a:	09 c0       	rjmp	.+18     	; 0x89e <__stack+0x3f>
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
		{
			set_speed_RL(speed);
		}
		else if (sensor_data_hold & 0b00001000)
 88c:	83 ff       	sbrs	r24, 3
 88e:	03 c0       	rjmp	.+6      	; 0x896 <__stack+0x37>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 890:	f9 bc       	out	0x29, r15	; 41
 892:	e8 bc       	out	0x28, r14	; 40
 894:	04 c0       	rjmp	.+8      	; 0x89e <__stack+0x3f>
		}
		else if (sensor_data_hold & 0b00001000)
		{
			set_speed_R(speed - 150);  //previously 150
		}
		else if (sensor_data_hold & 0b00010000)
 896:	84 ff       	sbrs	r24, 4
 898:	02 c0       	rjmp	.+4      	; 0x89e <__stack+0x3f>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 89a:	fb bc       	out	0x2b, r15	; 43
 89c:	ea bc       	out	0x2a, r14	; 42
			set_speed_L(speed - 150);  //previously 150
		}
		// end line follow
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
 89e:	98 2f       	mov	r25, r24
 8a0:	90 7f       	andi	r25, 0xF0	; 240
 8a2:	90 3f       	cpi	r25, 0xF0	; 240
 8a4:	09 f0       	breq	.+2      	; 0x8a8 <__stack+0x49>
 8a6:	4f c0       	rjmp	.+158    	; 0x946 <__stack+0xe7>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 8a8:	d9 bd       	out	0x29, r29	; 41
 8aa:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 8ac:	db bd       	out	0x2b, r29	; 43
 8ae:	ca bd       	out	0x2a, r28	; 42
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
 8b0:	06 2d       	mov	r16, r6
 8b2:	17 2d       	mov	r17, r7
 8b4:	13 c0       	rjmp	.+38     	; 0x8dc <__stack+0x7d>
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
 8b6:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
				if (sensor_data_hold & (1<<1))
 8ba:	81 fd       	sbrc	r24, 1
				{
					Right_trigged=1;
 8bc:	b9 2c       	mov	r11, r9
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 8be:	98 2f       	mov	r25, r24
 8c0:	9e 77       	andi	r25, 0x7E	; 126
 8c2:	9e 37       	cpi	r25, 0x7E	; 126
 8c4:	59 f4       	brne	.+22     	; 0x8dc <__stack+0x7d>
				{
					destination = destination + 1;
 8c6:	0f 5f       	subi	r16, 0xFF	; 255
 8c8:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 7000)   // destination triggering
 8ca:	09 35       	cpi	r16, 0x59	; 89
 8cc:	2b e1       	ldi	r18, 0x1B	; 27
 8ce:	12 07       	cpc	r17, r18
 8d0:	28 f0       	brcs	.+10     	; 0x8dc <__stack+0x7d>
					{
						destination = 0x00;
						destination_operation(speed);
 8d2:	8c e2       	ldi	r24, 0x2C	; 44
 8d4:	91 e0       	ldi	r25, 0x01	; 1
 8d6:	0e 94 89 03 	call	0x712	; 0x712 <destination_operation>
						//while (PINA & (1<<PA0));
						goto solv_maze;
 8da:	90 c0       	rjmp	.+288    	; 0x9fc <__stack+0x19d>
 8dc:	82 74       	andi	r24, 0x42	; 66
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 8de:	59 f7       	brne	.-42     	; 0x8b6 <__stack+0x57>
 8e0:	1b 2d       	mov	r17, r11
 8e2:	8f ef       	ldi	r24, 0xFF	; 255
 8e4:	90 e7       	ldi	r25, 0x70	; 112
 8e6:	22 e0       	ldi	r18, 0x02	; 2
 8e8:	81 50       	subi	r24, 0x01	; 1
 8ea:	90 40       	sbci	r25, 0x00	; 0
 8ec:	20 40       	sbci	r18, 0x00	; 0
 8ee:	e1 f7       	brne	.-8      	; 0x8e8 <__stack+0x89>
 8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <__stack+0x93>
 8f2:	00 00       	nop
					}
				}
				
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 8f4:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 8f8:	8e 77       	andi	r24, 0x7E	; 126
 8fa:	09 f0       	breq	.+2      	; 0x8fe <__stack+0x9f>
 8fc:	17 c1       	rjmp	.+558    	; 0xb2c <__stack+0x2cd>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
 8fe:	b1 10       	cpse	r11, r1
 900:	0f c0       	rjmp	.+30     	; 0x920 <__stack+0xc1>
 902:	d1 10       	cpse	r13, r1
 904:	04 c0       	rjmp	.+8      	; 0x90e <__stack+0xaf>
			{
				left_operation(speed);
 906:	ce 01       	movw	r24, r28
 908:	0e 94 0e 03 	call	0x61c	; 0x61c <left_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
 90c:	b4 cf       	rjmp	.-152    	; 0x876 <__stack+0x17>
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	d8 12       	cpse	r13, r24
 912:	b1 cf       	rjmp	.-158    	; 0x876 <__stack+0x17>
			{
				left_forward_operation(speed);
 914:	ce 01       	movw	r24, r28
 916:	0e 94 30 03 	call	0x660	; 0x660 <left_forward_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
 91a:	dc 2c       	mov	r13, r12
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
			{
				left_forward_operation(speed);
				Right_trigged = 0;
 91c:	bc 2c       	mov	r11, r12
				Forward_trigged = 0;
 91e:	ab cf       	rjmp	.-170    	; 0x876 <__stack+0x17>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 920:	11 30       	cpi	r17, 0x01	; 1
 922:	09 f0       	breq	.+2      	; 0x926 <__stack+0xc7>
 924:	a8 cf       	rjmp	.-176    	; 0x876 <__stack+0x17>
 926:	d1 10       	cpse	r13, r1
 928:	05 c0       	rjmp	.+10     	; 0x934 <__stack+0xd5>
			{
				left_right_operation(speed);
 92a:	ce 01       	movw	r24, r28
 92c:	0e 94 56 03 	call	0x6ac	; 0x6ac <left_right_operation>
				Right_trigged = 0;
 930:	bc 2c       	mov	r11, r12
				Forward_trigged = 0;
 932:	a1 cf       	rjmp	.-190    	; 0x876 <__stack+0x17>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
 934:	91 e0       	ldi	r25, 0x01	; 1
 936:	d9 12       	cpse	r13, r25
 938:	9b cf       	rjmp	.-202    	; 0x870 <__stack+0x11>
			{
				left_right_forward_operation(speed);
 93a:	ce 01       	movw	r24, r28
 93c:	0e 94 67 03 	call	0x6ce	; 0x6ce <left_right_forward_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
 940:	dc 2c       	mov	r13, r12
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Right_trigged = 0;
 942:	bc 2c       	mov	r11, r12
 944:	98 cf       	rjmp	.-208    	; 0x876 <__stack+0x17>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
 946:	98 2f       	mov	r25, r24
 948:	9f 70       	andi	r25, 0x0F	; 15
 94a:	9f 30       	cpi	r25, 0x0F	; 15
 94c:	09 f0       	breq	.+2      	; 0x950 <__stack+0xf1>
 94e:	4f c0       	rjmp	.+158    	; 0x9ee <__stack+0x18f>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 950:	d9 bd       	out	0x29, r29	; 41
 952:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 954:	db bd       	out	0x2b, r29	; 43
 956:	ca bd       	out	0x2a, r28	; 42
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 958:	06 2d       	mov	r16, r6
 95a:	17 2d       	mov	r17, r7
 95c:	13 c0       	rjmp	.+38     	; 0x984 <__stack+0x125>
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
 95e:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
				if (sensor_data_hold & (1<<6))  // must change for 8 system
 962:	86 fd       	sbrc	r24, 6
				{
					Left_trigged=1;
 964:	a9 2c       	mov	r10, r9
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 966:	98 2f       	mov	r25, r24
 968:	9e 77       	andi	r25, 0x7E	; 126
 96a:	9e 37       	cpi	r25, 0x7E	; 126
 96c:	59 f4       	brne	.+22     	; 0x984 <__stack+0x125>
				{
					destination = destination + 1;
 96e:	0f 5f       	subi	r16, 0xFF	; 255
 970:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 7000)   // destination triggering
 972:	09 35       	cpi	r16, 0x59	; 89
 974:	2b e1       	ldi	r18, 0x1B	; 27
 976:	12 07       	cpc	r17, r18
 978:	28 f0       	brcs	.+10     	; 0x984 <__stack+0x125>
					{
						destination = 0x00;
						destination_operation(speed);
 97a:	8c e2       	ldi	r24, 0x2C	; 44
 97c:	91 e0       	ldi	r25, 0x01	; 1
 97e:	0e 94 89 03 	call	0x712	; 0x712 <destination_operation>
						//while (PINA & (1<<PA0));
						goto solv_maze;
 982:	3c c0       	rjmp	.+120    	; 0x9fc <__stack+0x19d>
 984:	82 74       	andi	r24, 0x42	; 66
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 986:	59 f7       	brne	.-42     	; 0x95e <__stack+0xff>
 988:	1a 2d       	mov	r17, r10
 98a:	8f ef       	ldi	r24, 0xFF	; 255
 98c:	90 e7       	ldi	r25, 0x70	; 112
 98e:	22 e0       	ldi	r18, 0x02	; 2
 990:	81 50       	subi	r24, 0x01	; 1
 992:	90 40       	sbci	r25, 0x00	; 0
 994:	20 40       	sbci	r18, 0x00	; 0
 996:	e1 f7       	brne	.-8      	; 0x990 <__stack+0x131>
 998:	00 c0       	rjmp	.+0      	; 0x99a <__stack+0x13b>
 99a:	00 00       	nop
						//goto start_test_operation;
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 99c:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 9a0:	8e 77       	andi	r24, 0x7E	; 126
 9a2:	09 f0       	breq	.+2      	; 0x9a6 <__stack+0x147>
 9a4:	c7 c0       	rjmp	.+398    	; 0xb34 <__stack+0x2d5>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
 9a6:	a1 10       	cpse	r10, r1
 9a8:	0f c0       	rjmp	.+30     	; 0x9c8 <__stack+0x169>
 9aa:	d1 10       	cpse	r13, r1
 9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <__stack+0x157>
			{
				right_operation(speed);
 9ae:	ce 01       	movw	r24, r28
 9b0:	0e 94 1f 03 	call	0x63e	; 0x63e <right_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
 9b4:	60 cf       	rjmp	.-320    	; 0x876 <__stack+0x17>
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	d8 12       	cpse	r13, r24
 9ba:	5d cf       	rjmp	.-326    	; 0x876 <__stack+0x17>
			{
				right_forward_operation(speed);
 9bc:	ce 01       	movw	r24, r28
 9be:	0e 94 41 03 	call	0x682	; 0x682 <right_forward_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
 9c2:	dc 2c       	mov	r13, r12
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
			{
				right_forward_operation(speed);
				Left_trigged = 0;
 9c4:	ac 2c       	mov	r10, r12
				Forward_trigged = 0;
 9c6:	57 cf       	rjmp	.-338    	; 0x876 <__stack+0x17>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 9c8:	11 30       	cpi	r17, 0x01	; 1
 9ca:	09 f0       	breq	.+2      	; 0x9ce <__stack+0x16f>
 9cc:	54 cf       	rjmp	.-344    	; 0x876 <__stack+0x17>
 9ce:	d1 10       	cpse	r13, r1
 9d0:	05 c0       	rjmp	.+10     	; 0x9dc <__stack+0x17d>
			{
				left_right_operation(speed);
 9d2:	ce 01       	movw	r24, r28
 9d4:	0e 94 56 03 	call	0x6ac	; 0x6ac <left_right_operation>
				Left_trigged = 0;
 9d8:	ac 2c       	mov	r10, r12
				Forward_trigged = 0;
 9da:	4d cf       	rjmp	.-358    	; 0x876 <__stack+0x17>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
 9dc:	91 e0       	ldi	r25, 0x01	; 1
 9de:	d9 12       	cpse	r13, r25
 9e0:	49 cf       	rjmp	.-366    	; 0x874 <__stack+0x15>
			{
				left_right_forward_operation(speed);
 9e2:	ce 01       	movw	r24, r28
 9e4:	0e 94 67 03 	call	0x6ce	; 0x6ce <left_right_forward_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
 9e8:	dc 2c       	mov	r13, r12
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Left_trigged = 0;
 9ea:	ac 2c       	mov	r10, r12
 9ec:	44 cf       	rjmp	.-376    	; 0x876 <__stack+0x17>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
 9ee:	8e 77       	andi	r24, 0x7E	; 126
 9f0:	09 f0       	breq	.+2      	; 0x9f4 <__stack+0x195>
 9f2:	41 cf       	rjmp	.-382    	; 0x876 <__stack+0x17>
		{
			reverse_operation(speed);
 9f4:	ce 01       	movw	r24, r28
 9f6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <reverse_operation>
 9fa:	3d cf       	rjmp	.-390    	; 0x876 <__stack+0x17>
//********* Solving the maze from here *********************************************************************
//**********************************************************************************************************

solv_maze:

	node_number = 0x00;
 9fc:	10 92 17 01 	sts	0x0117, r1
 a00:	10 92 16 01 	sts	0x0116, r1

	sensor_data_hold = sensor_data();  //normally read
 a04:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>

	// start line follow
	if ((sensor_data_hold & (3<<3)) == (3<<3))
 a08:	98 2f       	mov	r25, r24
 a0a:	98 71       	andi	r25, 0x18	; 24
 a0c:	98 31       	cpi	r25, 0x18	; 24
 a0e:	39 f4       	brne	.+14     	; 0xa1e <__stack+0x1bf>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 a10:	8c e2       	ldi	r24, 0x2C	; 44
 a12:	91 e0       	ldi	r25, 0x01	; 1
 a14:	99 bd       	out	0x29, r25	; 41
 a16:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 a18:	9b bd       	out	0x2b, r25	; 43
 a1a:	8a bd       	out	0x2a, r24	; 42
 a1c:	0e c0       	rjmp	.+28     	; 0xa3a <__stack+0x1db>
	// start line follow
	if ((sensor_data_hold & (3<<3)) == (3<<3))
	{
		set_speed_RL(speed);
	}
	else if (sensor_data_hold & 0b00001111)
 a1e:	98 2f       	mov	r25, r24
 a20:	9f 70       	andi	r25, 0x0F	; 15
 a22:	29 f0       	breq	.+10     	; 0xa2e <__stack+0x1cf>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 a24:	84 e6       	ldi	r24, 0x64	; 100
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	99 bd       	out	0x29, r25	; 41
 a2a:	88 bd       	out	0x28, r24	; 40
 a2c:	06 c0       	rjmp	.+12     	; 0xa3a <__stack+0x1db>
	}
	else if (sensor_data_hold & 0b00001111)
	{
		set_speed_R(speed - 200);  //previously 150
	}
	else if (sensor_data_hold & 0b11110000)
 a2e:	80 7f       	andi	r24, 0xF0	; 240
 a30:	21 f0       	breq	.+8      	; 0xa3a <__stack+0x1db>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 a32:	84 e6       	ldi	r24, 0x64	; 100
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	9b bd       	out	0x2b, r25	; 43
 a38:	8a bd       	out	0x2a, r24	; 42
 a3a:	0f 2e       	mov	r0, r31
 a3c:	f6 e9       	ldi	r31, 0x96	; 150
 a3e:	ef 2e       	mov	r14, r31
 a40:	f1 2c       	mov	r15, r1
 a42:	f0 2d       	mov	r31, r0
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 a44:	cc e2       	ldi	r28, 0x2C	; 44
 a46:	d1 e0       	ldi	r29, 0x01	; 1
			evaluate_direction(1,speed);
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 a48:	c1 2c       	mov	r12, r1
 a4a:	d1 2c       	mov	r13, r1
	}
	// end line follow
	
	while(1)
	{
		sensor_data_hold = sensor_data();  //normally read
 a4c:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
		
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
 a50:	98 2f       	mov	r25, r24
 a52:	98 71       	andi	r25, 0x18	; 24
 a54:	98 31       	cpi	r25, 0x18	; 24
 a56:	29 f4       	brne	.+10     	; 0xa62 <__stack+0x203>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 a58:	d9 bd       	out	0x29, r29	; 41
 a5a:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 a5c:	db bd       	out	0x2b, r29	; 43
 a5e:	ca bd       	out	0x2a, r28	; 42
 a60:	09 c0       	rjmp	.+18     	; 0xa74 <__stack+0x215>
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
		{
			set_speed_RL(speed);
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
 a62:	83 ff       	sbrs	r24, 3
 a64:	03 c0       	rjmp	.+6      	; 0xa6c <__stack+0x20d>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 a66:	f9 bc       	out	0x29, r15	; 41
 a68:	e8 bc       	out	0x28, r14	; 40
 a6a:	04 c0       	rjmp	.+8      	; 0xa74 <__stack+0x215>
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
		{
			set_speed_R(speed - 150);  //previously 150
		}
		else if ((sensor_data_hold & (1<<4)) == (1<<4))
 a6c:	84 ff       	sbrs	r24, 4
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <__stack+0x215>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 a70:	fb bc       	out	0x2b, r15	; 43
 a72:	ea bc       	out	0x2a, r14	; 42
		{
			set_speed_L(speed - 150);  //previously 150
		}
		// end line follow
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
 a74:	98 2f       	mov	r25, r24
 a76:	90 7f       	andi	r25, 0xF0	; 240
 a78:	90 3f       	cpi	r25, 0xF0	; 240
 a7a:	31 f5       	brne	.+76     	; 0xac8 <__stack+0x269>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 a7c:	d9 bd       	out	0x29, r29	; 41
 a7e:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 a80:	db bd       	out	0x2b, r29	; 43
 a82:	ca bd       	out	0x2a, r28	; 42
		// end line follow
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
 a84:	0c 2d       	mov	r16, r12
 a86:	1d 2d       	mov	r17, r13
 a88:	0f c0       	rjmp	.+30     	; 0xaa8 <__stack+0x249>
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
 a8a:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 a8e:	98 2f       	mov	r25, r24
 a90:	9e 77       	andi	r25, 0x7E	; 126
 a92:	9e 37       	cpi	r25, 0x7E	; 126
 a94:	49 f4       	brne	.+18     	; 0xaa8 <__stack+0x249>
				{
					destination = destination + 1;
 a96:	0f 5f       	subi	r16, 0xFF	; 255
 a98:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 7000)   // destination triggering
 a9a:	09 35       	cpi	r16, 0x59	; 89
 a9c:	2b e1       	ldi	r18, 0x1B	; 27
 a9e:	12 07       	cpc	r17, r18
 aa0:	18 f0       	brcs	.+6      	; 0xaa8 <__stack+0x249>
					{
						destination = 0x00;
						stay_stop();
 aa2:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
 aa6:	ff cf       	rjmp	.-2      	; 0xaa6 <__stack+0x247>
 aa8:	82 74       	andi	r24, 0x42	; 66
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 aaa:	79 f7       	brne	.-34     	; 0xa8a <__stack+0x22b>
 aac:	8f ef       	ldi	r24, 0xFF	; 255
 aae:	90 e7       	ldi	r25, 0x70	; 112
 ab0:	22 e0       	ldi	r18, 0x02	; 2
 ab2:	81 50       	subi	r24, 0x01	; 1
 ab4:	90 40       	sbci	r25, 0x00	; 0
 ab6:	20 40       	sbci	r18, 0x00	; 0
 ab8:	e1 f7       	brne	.-8      	; 0xab2 <__stack+0x253>
 aba:	00 c0       	rjmp	.+0      	; 0xabc <__stack+0x25d>
 abc:	00 00       	nop
					}
				}
				
			}
			_delay_ms(100);  //delay can be changed
			evaluate_direction(1,speed);
 abe:	be 01       	movw	r22, r28
 ac0:	81 e0       	ldi	r24, 0x01	; 1
 ac2:	0e 94 93 03 	call	0x726	; 0x726 <evaluate_direction>
 ac6:	c2 cf       	rjmp	.-124    	; 0xa4c <__stack+0x1ed>
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
 ac8:	98 2f       	mov	r25, r24
 aca:	9f 70       	andi	r25, 0x0F	; 15
 acc:	9f 30       	cpi	r25, 0x0F	; 15
 ace:	31 f5       	brne	.+76     	; 0xb1c <__stack+0x2bd>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 ad0:	d9 bd       	out	0x29, r29	; 41
 ad2:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 ad4:	db bd       	out	0x2b, r29	; 43
 ad6:	ca bd       	out	0x2a, r28	; 42
			evaluate_direction(1,speed);
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 ad8:	0c 2d       	mov	r16, r12
 ada:	1d 2d       	mov	r17, r13
 adc:	0f c0       	rjmp	.+30     	; 0xafc <__stack+0x29d>
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
 ade:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 ae2:	98 2f       	mov	r25, r24
 ae4:	9e 77       	andi	r25, 0x7E	; 126
 ae6:	9e 37       	cpi	r25, 0x7E	; 126
 ae8:	49 f4       	brne	.+18     	; 0xafc <__stack+0x29d>
				{
					destination = destination + 1;
 aea:	0f 5f       	subi	r16, 0xFF	; 255
 aec:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 7000)   // destination triggering
 aee:	09 35       	cpi	r16, 0x59	; 89
 af0:	9b e1       	ldi	r25, 0x1B	; 27
 af2:	19 07       	cpc	r17, r25
 af4:	18 f0       	brcs	.+6      	; 0xafc <__stack+0x29d>
					{
						destination = 0x00;
						stay_stop();
 af6:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
 afa:	ff cf       	rjmp	.-2      	; 0xafa <__stack+0x29b>
 afc:	82 74       	andi	r24, 0x42	; 66
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 afe:	79 f7       	brne	.-34     	; 0xade <__stack+0x27f>
 b00:	2f ef       	ldi	r18, 0xFF	; 255
 b02:	80 e7       	ldi	r24, 0x70	; 112
 b04:	92 e0       	ldi	r25, 0x02	; 2
 b06:	21 50       	subi	r18, 0x01	; 1
 b08:	80 40       	sbci	r24, 0x00	; 0
 b0a:	90 40       	sbci	r25, 0x00	; 0
 b0c:	e1 f7       	brne	.-8      	; 0xb06 <__stack+0x2a7>
 b0e:	00 c0       	rjmp	.+0      	; 0xb10 <__stack+0x2b1>
 b10:	00 00       	nop
						while(1);
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			evaluate_direction(2,speed);
 b12:	be 01       	movw	r22, r28
 b14:	82 e0       	ldi	r24, 0x02	; 2
 b16:	0e 94 93 03 	call	0x726	; 0x726 <evaluate_direction>
 b1a:	98 cf       	rjmp	.-208    	; 0xa4c <__stack+0x1ed>
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
 b1c:	8e 77       	andi	r24, 0x7E	; 126
 b1e:	09 f0       	breq	.+2      	; 0xb22 <__stack+0x2c3>
 b20:	95 cf       	rjmp	.-214    	; 0xa4c <__stack+0x1ed>
		{
			evaluate_direction(7,speed);
 b22:	be 01       	movw	r22, r28
 b24:	87 e0       	ldi	r24, 0x07	; 7
 b26:	0e 94 93 03 	call	0x726	; 0x726 <evaluate_direction>
 b2a:	90 cf       	rjmp	.-224    	; 0xa4c <__stack+0x1ed>
			{
				left_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 b2c:	bb 20       	and	r11, r11
 b2e:	09 f4       	brne	.+2      	; 0xb32 <__stack+0x2d3>
 b30:	f1 ce       	rjmp	.-542    	; 0x914 <__stack+0xb5>
 b32:	04 c0       	rjmp	.+8      	; 0xb3c <__stack+0x2dd>
			{
				right_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
 b34:	aa 20       	and	r10, r10
 b36:	09 f4       	brne	.+2      	; 0xb3a <__stack+0x2db>
 b38:	41 cf       	rjmp	.-382    	; 0x9bc <__stack+0x15d>
 b3a:	05 c0       	rjmp	.+10     	; 0xb46 <__stack+0x2e7>
			{
				left_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 b3c:	11 30       	cpi	r17, 0x01	; 1
 b3e:	09 f4       	brne	.+2      	; 0xb42 <__stack+0x2e3>
 b40:	fc ce       	rjmp	.-520    	; 0x93a <__stack+0xdb>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 b42:	d8 2c       	mov	r13, r8
 b44:	98 ce       	rjmp	.-720    	; 0x876 <__stack+0x17>
			{
				right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 b46:	11 30       	cpi	r17, 0x01	; 1
 b48:	09 f4       	brne	.+2      	; 0xb4c <__stack+0x2ed>
 b4a:	4b cf       	rjmp	.-362    	; 0x9e2 <__stack+0x183>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 b4c:	d8 2c       	mov	r13, r8
 b4e:	93 ce       	rjmp	.-730    	; 0x876 <__stack+0x17>

00000b50 <__floatunsisf>:
 b50:	e8 94       	clt
 b52:	09 c0       	rjmp	.+18     	; 0xb66 <__floatsisf+0x12>

00000b54 <__floatsisf>:
 b54:	97 fb       	bst	r25, 7
 b56:	3e f4       	brtc	.+14     	; 0xb66 <__floatsisf+0x12>
 b58:	90 95       	com	r25
 b5a:	80 95       	com	r24
 b5c:	70 95       	com	r23
 b5e:	61 95       	neg	r22
 b60:	7f 4f       	sbci	r23, 0xFF	; 255
 b62:	8f 4f       	sbci	r24, 0xFF	; 255
 b64:	9f 4f       	sbci	r25, 0xFF	; 255
 b66:	99 23       	and	r25, r25
 b68:	a9 f0       	breq	.+42     	; 0xb94 <__floatsisf+0x40>
 b6a:	f9 2f       	mov	r31, r25
 b6c:	96 e9       	ldi	r25, 0x96	; 150
 b6e:	bb 27       	eor	r27, r27
 b70:	93 95       	inc	r25
 b72:	f6 95       	lsr	r31
 b74:	87 95       	ror	r24
 b76:	77 95       	ror	r23
 b78:	67 95       	ror	r22
 b7a:	b7 95       	ror	r27
 b7c:	f1 11       	cpse	r31, r1
 b7e:	f8 cf       	rjmp	.-16     	; 0xb70 <__floatsisf+0x1c>
 b80:	fa f4       	brpl	.+62     	; 0xbc0 <__floatsisf+0x6c>
 b82:	bb 0f       	add	r27, r27
 b84:	11 f4       	brne	.+4      	; 0xb8a <__floatsisf+0x36>
 b86:	60 ff       	sbrs	r22, 0
 b88:	1b c0       	rjmp	.+54     	; 0xbc0 <__floatsisf+0x6c>
 b8a:	6f 5f       	subi	r22, 0xFF	; 255
 b8c:	7f 4f       	sbci	r23, 0xFF	; 255
 b8e:	8f 4f       	sbci	r24, 0xFF	; 255
 b90:	9f 4f       	sbci	r25, 0xFF	; 255
 b92:	16 c0       	rjmp	.+44     	; 0xbc0 <__floatsisf+0x6c>
 b94:	88 23       	and	r24, r24
 b96:	11 f0       	breq	.+4      	; 0xb9c <__floatsisf+0x48>
 b98:	96 e9       	ldi	r25, 0x96	; 150
 b9a:	11 c0       	rjmp	.+34     	; 0xbbe <__floatsisf+0x6a>
 b9c:	77 23       	and	r23, r23
 b9e:	21 f0       	breq	.+8      	; 0xba8 <__floatsisf+0x54>
 ba0:	9e e8       	ldi	r25, 0x8E	; 142
 ba2:	87 2f       	mov	r24, r23
 ba4:	76 2f       	mov	r23, r22
 ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <__floatsisf+0x5e>
 ba8:	66 23       	and	r22, r22
 baa:	71 f0       	breq	.+28     	; 0xbc8 <__floatsisf+0x74>
 bac:	96 e8       	ldi	r25, 0x86	; 134
 bae:	86 2f       	mov	r24, r22
 bb0:	70 e0       	ldi	r23, 0x00	; 0
 bb2:	60 e0       	ldi	r22, 0x00	; 0
 bb4:	2a f0       	brmi	.+10     	; 0xbc0 <__floatsisf+0x6c>
 bb6:	9a 95       	dec	r25
 bb8:	66 0f       	add	r22, r22
 bba:	77 1f       	adc	r23, r23
 bbc:	88 1f       	adc	r24, r24
 bbe:	da f7       	brpl	.-10     	; 0xbb6 <__floatsisf+0x62>
 bc0:	88 0f       	add	r24, r24
 bc2:	96 95       	lsr	r25
 bc4:	87 95       	ror	r24
 bc6:	97 f9       	bld	r25, 7
 bc8:	08 95       	ret

00000bca <lrint>:
 bca:	41 d0       	rcall	.+130    	; 0xc4e <__fp_splitA>
 bcc:	a8 f1       	brcs	.+106    	; 0xc38 <lrint+0x6e>
 bce:	9e 57       	subi	r25, 0x7E	; 126
 bd0:	a8 f1       	brcs	.+106    	; 0xc3c <lrint+0x72>
 bd2:	98 51       	subi	r25, 0x18	; 24
 bd4:	60 f0       	brcs	.+24     	; 0xbee <lrint+0x24>
 bd6:	39 f1       	breq	.+78     	; 0xc26 <lrint+0x5c>
 bd8:	98 30       	cpi	r25, 0x08	; 8
 bda:	70 f5       	brcc	.+92     	; 0xc38 <lrint+0x6e>
 bdc:	09 2e       	mov	r0, r25
 bde:	99 27       	eor	r25, r25
 be0:	66 0f       	add	r22, r22
 be2:	77 1f       	adc	r23, r23
 be4:	88 1f       	adc	r24, r24
 be6:	99 1f       	adc	r25, r25
 be8:	0a 94       	dec	r0
 bea:	d1 f7       	brne	.-12     	; 0xbe0 <lrint+0x16>
 bec:	1c c0       	rjmp	.+56     	; 0xc26 <lrint+0x5c>
 bee:	bb 27       	eor	r27, r27
 bf0:	99 3f       	cpi	r25, 0xF9	; 249
 bf2:	4c f4       	brge	.+18     	; 0xc06 <lrint+0x3c>
 bf4:	b1 11       	cpse	r27, r1
 bf6:	b1 e0       	ldi	r27, 0x01	; 1
 bf8:	b6 2b       	or	r27, r22
 bfa:	67 2f       	mov	r22, r23
 bfc:	78 2f       	mov	r23, r24
 bfe:	88 27       	eor	r24, r24
 c00:	98 5f       	subi	r25, 0xF8	; 248
 c02:	b1 f7       	brne	.-20     	; 0xbf0 <lrint+0x26>
 c04:	08 c0       	rjmp	.+16     	; 0xc16 <lrint+0x4c>
 c06:	86 95       	lsr	r24
 c08:	77 95       	ror	r23
 c0a:	67 95       	ror	r22
 c0c:	b7 95       	ror	r27
 c0e:	08 f4       	brcc	.+2      	; 0xc12 <lrint+0x48>
 c10:	b1 60       	ori	r27, 0x01	; 1
 c12:	93 95       	inc	r25
 c14:	c1 f7       	brne	.-16     	; 0xc06 <lrint+0x3c>
 c16:	bb 0f       	add	r27, r27
 c18:	30 f4       	brcc	.+12     	; 0xc26 <lrint+0x5c>
 c1a:	11 f4       	brne	.+4      	; 0xc20 <lrint+0x56>
 c1c:	60 ff       	sbrs	r22, 0
 c1e:	03 c0       	rjmp	.+6      	; 0xc26 <lrint+0x5c>
 c20:	6f 5f       	subi	r22, 0xFF	; 255
 c22:	7f 4f       	sbci	r23, 0xFF	; 255
 c24:	8f 4f       	sbci	r24, 0xFF	; 255
 c26:	3e f4       	brtc	.+14     	; 0xc36 <lrint+0x6c>
 c28:	90 95       	com	r25
 c2a:	80 95       	com	r24
 c2c:	70 95       	com	r23
 c2e:	61 95       	neg	r22
 c30:	7f 4f       	sbci	r23, 0xFF	; 255
 c32:	8f 4f       	sbci	r24, 0xFF	; 255
 c34:	9f 4f       	sbci	r25, 0xFF	; 255
 c36:	08 95       	ret
 c38:	68 94       	set
 c3a:	24 c0       	rjmp	.+72     	; 0xc84 <__fp_szero>
 c3c:	22 c0       	rjmp	.+68     	; 0xc82 <__fp_zero>

00000c3e <__fp_split3>:
 c3e:	57 fd       	sbrc	r21, 7
 c40:	90 58       	subi	r25, 0x80	; 128
 c42:	44 0f       	add	r20, r20
 c44:	55 1f       	adc	r21, r21
 c46:	59 f0       	breq	.+22     	; 0xc5e <__fp_splitA+0x10>
 c48:	5f 3f       	cpi	r21, 0xFF	; 255
 c4a:	71 f0       	breq	.+28     	; 0xc68 <__fp_splitA+0x1a>
 c4c:	47 95       	ror	r20

00000c4e <__fp_splitA>:
 c4e:	88 0f       	add	r24, r24
 c50:	97 fb       	bst	r25, 7
 c52:	99 1f       	adc	r25, r25
 c54:	61 f0       	breq	.+24     	; 0xc6e <__fp_splitA+0x20>
 c56:	9f 3f       	cpi	r25, 0xFF	; 255
 c58:	79 f0       	breq	.+30     	; 0xc78 <__fp_splitA+0x2a>
 c5a:	87 95       	ror	r24
 c5c:	08 95       	ret
 c5e:	12 16       	cp	r1, r18
 c60:	13 06       	cpc	r1, r19
 c62:	14 06       	cpc	r1, r20
 c64:	55 1f       	adc	r21, r21
 c66:	f2 cf       	rjmp	.-28     	; 0xc4c <__fp_split3+0xe>
 c68:	46 95       	lsr	r20
 c6a:	f1 df       	rcall	.-30     	; 0xc4e <__fp_splitA>
 c6c:	08 c0       	rjmp	.+16     	; 0xc7e <__fp_splitA+0x30>
 c6e:	16 16       	cp	r1, r22
 c70:	17 06       	cpc	r1, r23
 c72:	18 06       	cpc	r1, r24
 c74:	99 1f       	adc	r25, r25
 c76:	f1 cf       	rjmp	.-30     	; 0xc5a <__fp_splitA+0xc>
 c78:	86 95       	lsr	r24
 c7a:	71 05       	cpc	r23, r1
 c7c:	61 05       	cpc	r22, r1
 c7e:	08 94       	sec
 c80:	08 95       	ret

00000c82 <__fp_zero>:
 c82:	e8 94       	clt

00000c84 <__fp_szero>:
 c84:	bb 27       	eor	r27, r27
 c86:	66 27       	eor	r22, r22
 c88:	77 27       	eor	r23, r23
 c8a:	cb 01       	movw	r24, r22
 c8c:	97 f9       	bld	r25, 7
 c8e:	08 95       	ret

00000c90 <__udivmodsi4>:
 c90:	a1 e2       	ldi	r26, 0x21	; 33
 c92:	1a 2e       	mov	r1, r26
 c94:	aa 1b       	sub	r26, r26
 c96:	bb 1b       	sub	r27, r27
 c98:	fd 01       	movw	r30, r26
 c9a:	0d c0       	rjmp	.+26     	; 0xcb6 <__udivmodsi4_ep>

00000c9c <__udivmodsi4_loop>:
 c9c:	aa 1f       	adc	r26, r26
 c9e:	bb 1f       	adc	r27, r27
 ca0:	ee 1f       	adc	r30, r30
 ca2:	ff 1f       	adc	r31, r31
 ca4:	a2 17       	cp	r26, r18
 ca6:	b3 07       	cpc	r27, r19
 ca8:	e4 07       	cpc	r30, r20
 caa:	f5 07       	cpc	r31, r21
 cac:	20 f0       	brcs	.+8      	; 0xcb6 <__udivmodsi4_ep>
 cae:	a2 1b       	sub	r26, r18
 cb0:	b3 0b       	sbc	r27, r19
 cb2:	e4 0b       	sbc	r30, r20
 cb4:	f5 0b       	sbc	r31, r21

00000cb6 <__udivmodsi4_ep>:
 cb6:	66 1f       	adc	r22, r22
 cb8:	77 1f       	adc	r23, r23
 cba:	88 1f       	adc	r24, r24
 cbc:	99 1f       	adc	r25, r25
 cbe:	1a 94       	dec	r1
 cc0:	69 f7       	brne	.-38     	; 0xc9c <__udivmodsi4_loop>
 cc2:	60 95       	com	r22
 cc4:	70 95       	com	r23
 cc6:	80 95       	com	r24
 cc8:	90 95       	com	r25
 cca:	9b 01       	movw	r18, r22
 ccc:	ac 01       	movw	r20, r24
 cce:	bd 01       	movw	r22, r26
 cd0:	cf 01       	movw	r24, r30
 cd2:	08 95       	ret

00000cd4 <strrev>:
 cd4:	dc 01       	movw	r26, r24
 cd6:	fc 01       	movw	r30, r24
 cd8:	67 2f       	mov	r22, r23
 cda:	71 91       	ld	r23, Z+
 cdc:	77 23       	and	r23, r23
 cde:	e1 f7       	brne	.-8      	; 0xcd8 <strrev+0x4>
 ce0:	32 97       	sbiw	r30, 0x02	; 2
 ce2:	04 c0       	rjmp	.+8      	; 0xcec <strrev+0x18>
 ce4:	7c 91       	ld	r23, X
 ce6:	6d 93       	st	X+, r22
 ce8:	70 83       	st	Z, r23
 cea:	62 91       	ld	r22, -Z
 cec:	ae 17       	cp	r26, r30
 cee:	bf 07       	cpc	r27, r31
 cf0:	c8 f3       	brcs	.-14     	; 0xce4 <strrev+0x10>
 cf2:	08 95       	ret

00000cf4 <_exit>:
 cf4:	f8 94       	cli

00000cf6 <__stop_program>:
 cf6:	ff cf       	rjmp	.-2      	; 0xcf6 <__stop_program>
