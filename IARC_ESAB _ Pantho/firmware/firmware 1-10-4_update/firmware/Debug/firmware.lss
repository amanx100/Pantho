
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000103e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  0000103e  000010d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001f8  00800114  00800114  00001186  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001186  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002883  00000000  00000000  000012de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000389  00000000  00000000  00003b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000930  00000000  00000000  00003eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000314  00000000  00000000  0000481c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000427  00000000  00000000  00004b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001c6d  00000000  00000000  00004f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  00006bc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	a4 e1       	ldi	r26, 0x14	; 20
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 30       	cpi	r26, 0x0C	; 12
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 60 05 	call	0xac0	; 0xac0 <main>
      8a:	0c 94 1d 08 	jmp	0x103a	; 0x103a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <go_forward>:
#ifndef M_DIR_H_
#define M_DIR_H_

void go_forward(void)
{
	PORTB = 0x05;
      92:	85 e0       	ldi	r24, 0x05	; 5
      94:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
      96:	8e b5       	in	r24, 0x2e	; 46
      98:	82 60       	ori	r24, 0x02	; 2
      9a:	8e bd       	out	0x2e, r24	; 46
      9c:	08 95       	ret

0000009e <go_backward>:
}

void go_backward(void)
{
	PORTB = 0x0A;
      9e:	8a e0       	ldi	r24, 0x0A	; 10
      a0:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
      a2:	8e b5       	in	r24, 0x2e	; 46
      a4:	82 60       	ori	r24, 0x02	; 2
      a6:	8e bd       	out	0x2e, r24	; 46
      a8:	08 95       	ret

000000aa <right_rotate>:
}

void right_rotate(void)
{
	PORTB = 0x09;
      aa:	89 e0       	ldi	r24, 0x09	; 9
      ac:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
      ae:	8e b5       	in	r24, 0x2e	; 46
      b0:	82 60       	ori	r24, 0x02	; 2
      b2:	8e bd       	out	0x2e, r24	; 46
      b4:	08 95       	ret

000000b6 <left_rotate>:
}

void left_rotate(void)
{
	PORTB = 0x06;
      b6:	86 e0       	ldi	r24, 0x06	; 6
      b8:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
      ba:	8e b5       	in	r24, 0x2e	; 46
      bc:	82 60       	ori	r24, 0x02	; 2
      be:	8e bd       	out	0x2e, r24	; 46
      c0:	08 95       	ret

000000c2 <stay_stop>:
}

void stay_stop(void)
{
	PORTB = 0x00;
      c2:	18 ba       	out	0x18, r1	; 24
	TCCR1B &= ~(1<<1);
      c4:	8e b5       	in	r24, 0x2e	; 46
      c6:	8d 7f       	andi	r24, 0xFD	; 253
      c8:	8e bd       	out	0x2e, r24	; 46
      ca:	08 95       	ret

000000cc <usart_init>:
#include <string.h>

void usart_init(uint32_t baud)
{
	// Calculation for baud rate value into ubrr value
	uint16_t ubrr = lrint(( F_CPU / (16L * baud) ) - 1);
      cc:	dc 01       	movw	r26, r24
      ce:	cb 01       	movw	r24, r22
      d0:	88 0f       	add	r24, r24
      d2:	99 1f       	adc	r25, r25
      d4:	aa 1f       	adc	r26, r26
      d6:	bb 1f       	adc	r27, r27
      d8:	88 0f       	add	r24, r24
      da:	99 1f       	adc	r25, r25
      dc:	aa 1f       	adc	r26, r26
      de:	bb 1f       	adc	r27, r27
      e0:	9c 01       	movw	r18, r24
      e2:	ad 01       	movw	r20, r26
      e4:	22 0f       	add	r18, r18
      e6:	33 1f       	adc	r19, r19
      e8:	44 1f       	adc	r20, r20
      ea:	55 1f       	adc	r21, r21
      ec:	22 0f       	add	r18, r18
      ee:	33 1f       	adc	r19, r19
      f0:	44 1f       	adc	r20, r20
      f2:	55 1f       	adc	r21, r21
      f4:	60 e0       	ldi	r22, 0x00	; 0
      f6:	72 e1       	ldi	r23, 0x12	; 18
      f8:	8a e7       	ldi	r24, 0x7A	; 122
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__udivmodsi4>
     100:	ca 01       	movw	r24, r20
     102:	b9 01       	movw	r22, r18
     104:	61 50       	subi	r22, 0x01	; 1
     106:	71 09       	sbc	r23, r1
     108:	81 09       	sbc	r24, r1
     10a:	91 09       	sbc	r25, r1
     10c:	0e 94 4b 07 	call	0xe96	; 0xe96 <__floatunsisf>
     110:	0e 94 88 07 	call	0xf10	; 0xf10 <lrint>
	// Set baud rate
	UBRRH = (uint8_t)(ubrr>>8);
     114:	27 2f       	mov	r18, r23
     116:	33 27       	eor	r19, r19
     118:	20 bd       	out	0x20, r18	; 32
	UBRRL = (uint8_t)ubrr;
     11a:	69 b9       	out	0x09, r22	; 9
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
     11c:	88 e1       	ldi	r24, 0x18	; 24
     11e:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 1stop bit
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
     120:	86 e8       	ldi	r24, 0x86	; 134
     122:	80 bd       	out	0x20, r24	; 32
     124:	08 95       	ret

00000126 <usart_putchar>:
}

void usart_putchar(char data)
{
	// Wait for empty transmit buffer
	while ( !(UCSRA & (_BV(UDRE))) );
     126:	5d 9b       	sbis	0x0b, 5	; 11
     128:	fe cf       	rjmp	.-4      	; 0x126 <usart_putchar>
	// Start transmission
	UDR = data;
     12a:	8c b9       	out	0x0c, r24	; 12
     12c:	08 95       	ret

0000012e <usart_putstr>:
	// Return the data
	return UDR;
}

void usart_putstr(char *s)
{
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	ec 01       	movw	r28, r24
	// loop through entire string
	while (*s != '\0') {
     134:	88 81       	ld	r24, Y
     136:	88 23       	and	r24, r24
     138:	31 f0       	breq	.+12     	; 0x146 <usart_putstr+0x18>
     13a:	21 96       	adiw	r28, 0x01	; 1
		usart_putchar(*s);
     13c:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
}

void usart_putstr(char *s)
{
	// loop through entire string
	while (*s != '\0') {
     140:	89 91       	ld	r24, Y+
     142:	81 11       	cpse	r24, r1
     144:	fb cf       	rjmp	.-10     	; 0x13c <usart_putstr+0xe>
		usart_putchar(*s);
		s++;
	}
}
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <__vector_11>:
//**********************************************************************************************************
//  Interrupt Sub rutine  **********************************************************************************
//**********************************************************************************************************

ISR(TIMER0_OVF_vect)
{
     14c:	1f 92       	push	r1
     14e:	0f 92       	push	r0
     150:	0f b6       	in	r0, 0x3f	; 63
     152:	0f 92       	push	r0
     154:	11 24       	eor	r1, r1
     156:	2f 93       	push	r18
     158:	8f 93       	push	r24
     15a:	9f 93       	push	r25
	if (Time_x2ms < 500)
     15c:	80 91 14 01 	lds	r24, 0x0114
     160:	90 91 15 01 	lds	r25, 0x0115
     164:	84 3f       	cpi	r24, 0xF4	; 244
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	92 07       	cpc	r25, r18
     16a:	28 f4       	brcc	.+10     	; 0x176 <__vector_11+0x2a>
	{
		Time_x2ms = Time_x2ms + 1;
     16c:	01 96       	adiw	r24, 0x01	; 1
     16e:	90 93 15 01 	sts	0x0115, r25
     172:	80 93 14 01 	sts	0x0114, r24
	}
}
     176:	9f 91       	pop	r25
     178:	8f 91       	pop	r24
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0f be       	out	0x3f, r0	; 63
     180:	0f 90       	pop	r0
     182:	1f 90       	pop	r1
     184:	18 95       	reti

00000186 <sensor_data>:

uint8_t sensor_data(void)
{
	char sensor_data_check;
sn_dt:
	if ((PIND & (1<<PD2)) && (PIND & (1<<PD3)))
     186:	82 9b       	sbis	0x10, 2	; 16
     188:	fe cf       	rjmp	.-4      	; 0x186 <sensor_data>
     18a:	83 9b       	sbis	0x10, 3	; 16
     18c:	fc cf       	rjmp	.-8      	; 0x186 <sensor_data>
	{
		sensor_data_check = PINC;
     18e:	83 b3       	in	r24, 0x13	; 19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     190:	90 e8       	ldi	r25, 0x80	; 128
     192:	9a 95       	dec	r25
     194:	f1 f7       	brne	.-4      	; 0x192 <sensor_data+0xc>
		_delay_us(48);
		if (sensor_data_check == PINC)
     196:	93 b3       	in	r25, 0x13	; 19
     198:	98 13       	cpse	r25, r24
     19a:	f5 cf       	rjmp	.-22     	; 0x186 <sensor_data>
		{
			if (PINA & (1<<PA1))
     19c:	c9 9b       	sbis	0x19, 1	; 25
     19e:	03 c0       	rjmp	.+6      	; 0x1a6 <sensor_data+0x20>
			{
				return (~PINC);
     1a0:	83 b3       	in	r24, 0x13	; 19
     1a2:	80 95       	com	r24
     1a4:	08 95       	ret
			}
			else
			{
				return (PINC);
     1a6:	83 b3       	in	r24, 0x13	; 19
			}
		}
		else goto sn_dt;
	}
	else goto sn_dt;
}
     1a8:	08 95       	ret

000001aa <follow_line>:


void follow_line(uint8_t sensor_data_hold, uint16_t speed)
{
	if ((sensor_data_hold & 0b00011000) == 0b00011000)
     1aa:	98 2f       	mov	r25, r24
     1ac:	98 71       	andi	r25, 0x18	; 24
     1ae:	98 31       	cpi	r25, 0x18	; 24
     1b0:	29 f4       	brne	.+10     	; 0x1bc <follow_line+0x12>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     1b2:	79 bd       	out	0x29, r23	; 41
     1b4:	68 bd       	out	0x28, r22	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     1b6:	7b bd       	out	0x2b, r23	; 43
     1b8:	6a bd       	out	0x2a, r22	; 42
     1ba:	08 95       	ret
{
	if ((sensor_data_hold & 0b00011000) == 0b00011000)
	{
		set_speed_RL(speed);
	}
	else if (sensor_data_hold & 0b00000010)
     1bc:	81 ff       	sbrs	r24, 1
     1be:	05 c0       	rjmp	.+10     	; 0x1ca <follow_line+0x20>
	{
		set_speed_R(speed - 300);  //previously 200
     1c0:	6c 52       	subi	r22, 0x2C	; 44
     1c2:	71 40       	sbci	r23, 0x01	; 1
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     1c4:	79 bd       	out	0x29, r23	; 41
     1c6:	68 bd       	out	0x28, r22	; 40
     1c8:	08 95       	ret
	}
	else if (sensor_data_hold & 0b00000010)
	{
		set_speed_R(speed - 300);  //previously 200
	}
	else if (sensor_data_hold & 0b01000000)
     1ca:	86 ff       	sbrs	r24, 6
     1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <follow_line+0x2e>
	{
		set_speed_L(speed - 300);  //previously 200
     1ce:	6c 52       	subi	r22, 0x2C	; 44
     1d0:	71 40       	sbci	r23, 0x01	; 1
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     1d2:	7b bd       	out	0x2b, r23	; 43
     1d4:	6a bd       	out	0x2a, r22	; 42
     1d6:	08 95       	ret
	}
	else if (sensor_data_hold & 0b01000000)
	{
		set_speed_L(speed - 300);  //previously 200
	}
	else if (sensor_data_hold & 0b00000100)
     1d8:	82 ff       	sbrs	r24, 2
     1da:	05 c0       	rjmp	.+10     	; 0x1e6 <follow_line+0x3c>
	{
		set_speed_R(speed - 250);  //previously 150
     1dc:	6a 5f       	subi	r22, 0xFA	; 250
     1de:	71 09       	sbc	r23, r1
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     1e0:	79 bd       	out	0x29, r23	; 41
     1e2:	68 bd       	out	0x28, r22	; 40
     1e4:	08 95       	ret
	}
	else if (sensor_data_hold & 0b00000100)
	{
		set_speed_R(speed - 250);  //previously 150
	}
	else if (sensor_data_hold & 0b00100000)
     1e6:	85 ff       	sbrs	r24, 5
     1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <follow_line+0x4a>
	{
		set_speed_L(speed - 250);  //previously 150
     1ea:	6a 5f       	subi	r22, 0xFA	; 250
     1ec:	71 09       	sbc	r23, r1
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     1ee:	7b bd       	out	0x2b, r23	; 43
     1f0:	6a bd       	out	0x2a, r22	; 42
     1f2:	08 95       	ret
	}
	else if (sensor_data_hold & 0b00100000)
	{
		set_speed_L(speed - 250);  //previously 150
	}
	else if (sensor_data_hold & 0b00001000)
     1f4:	83 ff       	sbrs	r24, 3
     1f6:	05 c0       	rjmp	.+10     	; 0x202 <follow_line+0x58>
	{
		set_speed_R(speed - 200);  //previously 100
     1f8:	68 5c       	subi	r22, 0xC8	; 200
     1fa:	71 09       	sbc	r23, r1
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     1fc:	79 bd       	out	0x29, r23	; 41
     1fe:	68 bd       	out	0x28, r22	; 40
     200:	08 95       	ret
	}
	else if (sensor_data_hold & 0b00001000)
	{
		set_speed_R(speed - 200);  //previously 100
	}
	else if (sensor_data_hold & 0b00010000)
     202:	84 ff       	sbrs	r24, 4
     204:	04 c0       	rjmp	.+8      	; 0x20e <follow_line+0x64>
	{
		set_speed_L(speed - 200);  //previously 100
     206:	68 5c       	subi	r22, 0xC8	; 200
     208:	71 09       	sbc	r23, r1
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     20a:	7b bd       	out	0x2b, r23	; 43
     20c:	6a bd       	out	0x2a, r22	; 42
     20e:	08 95       	ret

00000210 <process_u>:
		set_speed_L(speed - 200);  //previously 100
	}
}

void process_u(void)
{
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
	int i;
	for (i=0;directions_solved[i];i++)
     214:	20 91 18 01 	lds	r18, 0x0118
     218:	22 23       	and	r18, r18
     21a:	09 f4       	brne	.+2      	; 0x21e <process_u+0xe>
     21c:	96 c0       	rjmp	.+300    	; 0x34a <process_u+0x13a>
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	90 e0       	ldi	r25, 0x00	; 0
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
			{
				directions_solved[i-1] = 's';
     222:	d3 e7       	ldi	r29, 0x73	; 115
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'r';
     224:	c2 e7       	ldi	r28, 0x72	; 114
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'u';
     226:	65 e7       	ldi	r22, 0x75	; 117
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
			{
				directions_solved[i-1] = 'l';
     228:	7c e6       	ldi	r23, 0x6C	; 108
			{
				directions_solved[i] = directions_solved[i+2];
				i++;
			}
			directions_solved[i] = '\0';
			i=0;
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	40 e0       	ldi	r20, 0x00	; 0
void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'u')
     22e:	25 37       	cpi	r18, 0x75	; 117
     230:	09 f0       	breq	.+2      	; 0x234 <process_u+0x24>
     232:	84 c0       	rjmp	.+264    	; 0x33c <process_u+0x12c>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
     234:	9c 01       	movw	r18, r24
     236:	21 50       	subi	r18, 0x01	; 1
     238:	31 09       	sbc	r19, r1
     23a:	f9 01       	movw	r30, r18
     23c:	e8 5e       	subi	r30, 0xE8	; 232
     23e:	fe 4f       	sbci	r31, 0xFE	; 254
     240:	a0 81       	ld	r26, Z
     242:	a2 37       	cpi	r26, 0x72	; 114
     244:	89 f4       	brne	.+34     	; 0x268 <process_u+0x58>
     246:	fc 01       	movw	r30, r24
     248:	e8 5e       	subi	r30, 0xE8	; 232
     24a:	fe 4f       	sbci	r31, 0xFE	; 254
     24c:	e1 81       	ldd	r30, Z+1	; 0x01
     24e:	e3 37       	cpi	r30, 0x73	; 115
     250:	29 f5       	brne	.+74     	; 0x29c <process_u+0x8c>
			{
				directions_solved[i-1] = 'l';
     252:	f9 01       	movw	r30, r18
     254:	e8 5e       	subi	r30, 0xE8	; 232
     256:	fe 4f       	sbci	r31, 0xFE	; 254
     258:	70 83       	st	Z, r23
			{
				directions_solved[i-1] = 'u';
			}

			
			while (directions_solved[i+2])
     25a:	fc 01       	movw	r30, r24
     25c:	e8 5e       	subi	r30, 0xE8	; 232
     25e:	fe 4f       	sbci	r31, 0xFE	; 254
     260:	22 81       	ldd	r18, Z+2	; 0x02
     262:	21 11       	cpse	r18, r1
     264:	5a c0       	rjmp	.+180    	; 0x31a <process_u+0x10a>
     266:	64 c0       	rjmp	.+200    	; 0x330 <process_u+0x120>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
     268:	a3 37       	cpi	r26, 0x73	; 115
     26a:	59 f4       	brne	.+22     	; 0x282 <process_u+0x72>
     26c:	fc 01       	movw	r30, r24
     26e:	e8 5e       	subi	r30, 0xE8	; 232
     270:	fe 4f       	sbci	r31, 0xFE	; 254
     272:	e1 81       	ldd	r30, Z+1	; 0x01
     274:	e2 37       	cpi	r30, 0x72	; 114
     276:	31 f5       	brne	.+76     	; 0x2c4 <process_u+0xb4>
			{
				directions_solved[i-1] = 'l';
     278:	f9 01       	movw	r30, r18
     27a:	e8 5e       	subi	r30, 0xE8	; 232
     27c:	fe 4f       	sbci	r31, 0xFE	; 254
     27e:	70 83       	st	Z, r23
     280:	ec cf       	rjmp	.-40     	; 0x25a <process_u+0x4a>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'r')
     282:	ac 36       	cpi	r26, 0x6C	; 108
     284:	59 f4       	brne	.+22     	; 0x29c <process_u+0x8c>
     286:	fc 01       	movw	r30, r24
     288:	e8 5e       	subi	r30, 0xE8	; 232
     28a:	fe 4f       	sbci	r31, 0xFE	; 254
     28c:	e1 81       	ldd	r30, Z+1	; 0x01
     28e:	e2 37       	cpi	r30, 0x72	; 114
     290:	d9 f4       	brne	.+54     	; 0x2c8 <process_u+0xb8>
			{
				directions_solved[i-1] = 'u';
     292:	f9 01       	movw	r30, r18
     294:	e8 5e       	subi	r30, 0xE8	; 232
     296:	fe 4f       	sbci	r31, 0xFE	; 254
     298:	60 83       	st	Z, r22
     29a:	df cf       	rjmp	.-66     	; 0x25a <process_u+0x4a>
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'r')
     29c:	a2 37       	cpi	r26, 0x72	; 114
     29e:	91 f4       	brne	.+36     	; 0x2c4 <process_u+0xb4>
     2a0:	fc 01       	movw	r30, r24
     2a2:	e8 5e       	subi	r30, 0xE8	; 232
     2a4:	fe 4f       	sbci	r31, 0xFE	; 254
     2a6:	e1 81       	ldd	r30, Z+1	; 0x01
     2a8:	e2 37       	cpi	r30, 0x72	; 114
     2aa:	29 f4       	brne	.+10     	; 0x2b6 <process_u+0xa6>
			{
				directions_solved[i-1] = 's';
     2ac:	f9 01       	movw	r30, r18
     2ae:	e8 5e       	subi	r30, 0xE8	; 232
     2b0:	fe 4f       	sbci	r31, 0xFE	; 254
     2b2:	d0 83       	st	Z, r29
     2b4:	d2 cf       	rjmp	.-92     	; 0x25a <process_u+0x4a>
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'l')
     2b6:	ec 36       	cpi	r30, 0x6C	; 108
     2b8:	81 f6       	brne	.-96     	; 0x25a <process_u+0x4a>
			{
				directions_solved[i-1] = 'u';
     2ba:	f9 01       	movw	r30, r18
     2bc:	e8 5e       	subi	r30, 0xE8	; 232
     2be:	fe 4f       	sbci	r31, 0xFE	; 254
     2c0:	60 83       	st	Z, r22
     2c2:	cb cf       	rjmp	.-106    	; 0x25a <process_u+0x4a>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
     2c4:	ac 36       	cpi	r26, 0x6C	; 108
     2c6:	99 f4       	brne	.+38     	; 0x2ee <process_u+0xde>
     2c8:	fc 01       	movw	r30, r24
     2ca:	e8 5e       	subi	r30, 0xE8	; 232
     2cc:	fe 4f       	sbci	r31, 0xFE	; 254
     2ce:	e1 81       	ldd	r30, Z+1	; 0x01
     2d0:	e3 37       	cpi	r30, 0x73	; 115
     2d2:	29 f4       	brne	.+10     	; 0x2de <process_u+0xce>
			{
				directions_solved[i-1] = 'r';
     2d4:	f9 01       	movw	r30, r18
     2d6:	e8 5e       	subi	r30, 0xE8	; 232
     2d8:	fe 4f       	sbci	r31, 0xFE	; 254
     2da:	c0 83       	st	Z, r28
     2dc:	be cf       	rjmp	.-132    	; 0x25a <process_u+0x4a>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
     2de:	ec 36       	cpi	r30, 0x6C	; 108
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <process_u+0xd4>
     2e2:	bb cf       	rjmp	.-138    	; 0x25a <process_u+0x4a>
			{
				directions_solved[i-1] = 's';
     2e4:	f9 01       	movw	r30, r18
     2e6:	e8 5e       	subi	r30, 0xE8	; 232
     2e8:	fe 4f       	sbci	r31, 0xFE	; 254
     2ea:	d0 83       	st	Z, r29
     2ec:	b6 cf       	rjmp	.-148    	; 0x25a <process_u+0x4a>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'l')
     2ee:	a3 37       	cpi	r26, 0x73	; 115
     2f0:	09 f0       	breq	.+2      	; 0x2f4 <process_u+0xe4>
     2f2:	b3 cf       	rjmp	.-154    	; 0x25a <process_u+0x4a>
     2f4:	fc 01       	movw	r30, r24
     2f6:	e8 5e       	subi	r30, 0xE8	; 232
     2f8:	fe 4f       	sbci	r31, 0xFE	; 254
     2fa:	e1 81       	ldd	r30, Z+1	; 0x01
     2fc:	ec 36       	cpi	r30, 0x6C	; 108
     2fe:	29 f4       	brne	.+10     	; 0x30a <process_u+0xfa>
			{
				directions_solved[i-1] = 'r';
     300:	f9 01       	movw	r30, r18
     302:	e8 5e       	subi	r30, 0xE8	; 232
     304:	fe 4f       	sbci	r31, 0xFE	; 254
     306:	c0 83       	st	Z, r28
     308:	a8 cf       	rjmp	.-176    	; 0x25a <process_u+0x4a>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
     30a:	e3 37       	cpi	r30, 0x73	; 115
     30c:	09 f0       	breq	.+2      	; 0x310 <process_u+0x100>
     30e:	a5 cf       	rjmp	.-182    	; 0x25a <process_u+0x4a>
			{
				directions_solved[i-1] = 'u';
     310:	f9 01       	movw	r30, r18
     312:	e8 5e       	subi	r30, 0xE8	; 232
     314:	fe 4f       	sbci	r31, 0xFE	; 254
     316:	60 83       	st	Z, r22
     318:	a0 cf       	rjmp	.-192    	; 0x25a <process_u+0x4a>
     31a:	dc 01       	movw	r26, r24
     31c:	a8 5e       	subi	r26, 0xE8	; 232
     31e:	be 4f       	sbci	r27, 0xFE	; 254
     320:	fc 01       	movw	r30, r24
     322:	e5 5e       	subi	r30, 0xE5	; 229
     324:	fe 4f       	sbci	r31, 0xFE	; 254
			}

			
			while (directions_solved[i+2])
			{
				directions_solved[i] = directions_solved[i+2];
     326:	2d 93       	st	X+, r18
				i++;
     328:	01 96       	adiw	r24, 0x01	; 1
			{
				directions_solved[i-1] = 'u';
			}

			
			while (directions_solved[i+2])
     32a:	21 91       	ld	r18, Z+
     32c:	21 11       	cpse	r18, r1
     32e:	fb cf       	rjmp	.-10     	; 0x326 <process_u+0x116>
			{
				directions_solved[i] = directions_solved[i+2];
				i++;
			}
			directions_solved[i] = '\0';
     330:	fc 01       	movw	r30, r24
     332:	e8 5e       	subi	r30, 0xE8	; 232
     334:	fe 4f       	sbci	r31, 0xFE	; 254
     336:	10 82       	st	Z, r1
			i=0;
     338:	85 2f       	mov	r24, r21
     33a:	94 2f       	mov	r25, r20
}

void process_u(void)
{
	int i;
	for (i=0;directions_solved[i];i++)
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	fc 01       	movw	r30, r24
     340:	e8 5e       	subi	r30, 0xE8	; 232
     342:	fe 4f       	sbci	r31, 0xFE	; 254
     344:	20 81       	ld	r18, Z
     346:	21 11       	cpse	r18, r1
     348:	72 cf       	rjmp	.-284    	; 0x22e <process_u+0x1e>
			}
			directions_solved[i] = '\0';
			i=0;
		}
	}
}
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	08 95       	ret

00000350 <process_array>:
		}
	}
}

void process_array(void)
{
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
     358:	88 e1       	ldi	r24, 0x18	; 24
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	0e 94 0d 08 	call	0x101a	; 0x101a <strrev>
	
	for (i=0;directions_solved[i];i++)
     360:	80 91 18 01 	lds	r24, 0x0118
     364:	88 23       	and	r24, r24
     366:	89 f0       	breq	.+34     	; 0x38a <process_array+0x3a>
     368:	a9 e1       	ldi	r26, 0x19	; 25
     36a:	b1 e0       	ldi	r27, 0x01	; 1
     36c:	e8 e1       	ldi	r30, 0x18	; 24
     36e:	f1 e0       	ldi	r31, 0x01	; 1
		{
			directions_solved[i] = 'r';
		}
		else if (directions_solved[i] == 'r')
		{
			directions_solved[i] = 'l';
     370:	2c e6       	ldi	r18, 0x6C	; 108
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'l')
		{
			directions_solved[i] = 'r';
     372:	92 e7       	ldi	r25, 0x72	; 114
	
	strrev(directions_solved);
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'l')
     374:	8c 36       	cpi	r24, 0x6C	; 108
     376:	11 f4       	brne	.+4      	; 0x37c <process_array+0x2c>
		{
			directions_solved[i] = 'r';
     378:	90 83       	st	Z, r25
     37a:	03 c0       	rjmp	.+6      	; 0x382 <process_array+0x32>
		}
		else if (directions_solved[i] == 'r')
     37c:	82 37       	cpi	r24, 0x72	; 114
     37e:	09 f4       	brne	.+2      	; 0x382 <process_array+0x32>
		{
			directions_solved[i] = 'l';
     380:	20 83       	st	Z, r18
	int i;
	uint16_t length_sln_prev=0;
	
	strrev(directions_solved);
	
	for (i=0;directions_solved[i];i++)
     382:	8d 91       	ld	r24, X+
     384:	31 96       	adiw	r30, 0x01	; 1
     386:	81 11       	cpse	r24, r1
     388:	f5 cf       	rjmp	.-22     	; 0x374 <process_array+0x24>
		{
			directions_solved[i] = 'l';
		}
	}
	
	usart_putstr("\r\rReversed Data: ");
     38a:	80 e6       	ldi	r24, 0x60	; 96
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	usart_putstr(directions_solved);
     392:	88 e1       	ldi	r24, 0x18	; 24
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	
	
	while(1)
	{
		length_sln_prev = strlen(directions_solved);
     39a:	c8 e1       	ldi	r28, 0x18	; 24
     39c:	d1 e0       	ldi	r29, 0x01	; 1
     39e:	fe 01       	movw	r30, r28
     3a0:	01 90       	ld	r0, Z+
     3a2:	00 20       	and	r0, r0
     3a4:	e9 f7       	brne	.-6      	; 0x3a0 <process_array+0x50>
     3a6:	31 97       	sbiw	r30, 0x01	; 1
     3a8:	8f 01       	movw	r16, r30
     3aa:	08 51       	subi	r16, 0x18	; 24
     3ac:	11 40       	sbci	r17, 0x01	; 1
		
		process_u();
     3ae:	0e 94 08 01 	call	0x210	; 0x210 <process_u>
		
		//process_loop();
		
		if (length_sln_prev == strlen(directions_solved))
     3b2:	fe 01       	movw	r30, r28
     3b4:	01 90       	ld	r0, Z+
     3b6:	00 20       	and	r0, r0
     3b8:	e9 f7       	brne	.-6      	; 0x3b4 <process_array+0x64>
     3ba:	31 97       	sbiw	r30, 0x01	; 1
     3bc:	e8 51       	subi	r30, 0x18	; 24
     3be:	f1 40       	sbci	r31, 0x01	; 1
     3c0:	e0 17       	cp	r30, r16
     3c2:	f1 07       	cpc	r31, r17
     3c4:	61 f7       	brne	.-40     	; 0x39e <process_array+0x4e>
		{
			break;
		}
	}
	
	usart_putstr("\r\rSolved Data: ");
     3c6:	82 e7       	ldi	r24, 0x72	; 114
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	usart_putstr(directions_solved);
     3ce:	88 e1       	ldi	r24, 0x18	; 24
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	usart_putstr("\r\rSolved Data Practical: ");
     3d6:	82 e8       	ldi	r24, 0x82	; 130
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	08 95       	ret

000003e8 <turn_U>:

void turn_U(uint16_t speed)
{
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f6:	2f ef       	ldi	r18, 0xFF	; 255
     3f8:	82 e5       	ldi	r24, 0x52	; 82
     3fa:	97 e0       	ldi	r25, 0x07	; 7
     3fc:	21 50       	subi	r18, 0x01	; 1
     3fe:	80 40       	sbci	r24, 0x00	; 0
     400:	90 40       	sbci	r25, 0x00	; 0
     402:	e1 f7       	brne	.-8      	; 0x3fc <turn_U+0x14>
     404:	00 c0       	rjmp	.+0      	; 0x406 <turn_U+0x1e>
     406:	00 00       	nop
	_delay_ms(300);
	go_backward();
     408:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
	set_speed_RL(speed+300);
     40c:	7e 01       	movw	r14, r28
     40e:	24 ed       	ldi	r18, 0xD4	; 212
     410:	e2 1a       	sub	r14, r18
     412:	2e ef       	ldi	r18, 0xFE	; 254
     414:	f2 0a       	sbc	r15, r18
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     416:	f9 bc       	out	0x29, r15	; 41
     418:	e8 bc       	out	0x28, r14	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     41a:	fb bc       	out	0x2b, r15	; 43
     41c:	ea bc       	out	0x2a, r14	; 42
     41e:	8f e7       	ldi	r24, 0x7F	; 127
     420:	98 e3       	ldi	r25, 0x38	; 56
     422:	21 e0       	ldi	r18, 0x01	; 1
     424:	81 50       	subi	r24, 0x01	; 1
     426:	90 40       	sbci	r25, 0x00	; 0
     428:	20 40       	sbci	r18, 0x00	; 0
     42a:	e1 f7       	brne	.-8      	; 0x424 <turn_U+0x3c>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <turn_U+0x46>
     42e:	00 00       	nop
{
	_delay_ms(300);
	go_backward();
	set_speed_RL(speed+300);
	_delay_ms(50);
	stay_stop();
     430:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     434:	8f e7       	ldi	r24, 0x7F	; 127
     436:	98 e3       	ldi	r25, 0x38	; 56
     438:	21 e0       	ldi	r18, 0x01	; 1
     43a:	81 50       	subi	r24, 0x01	; 1
     43c:	90 40       	sbci	r25, 0x00	; 0
     43e:	20 40       	sbci	r18, 0x00	; 0
     440:	e1 f7       	brne	.-8      	; 0x43a <turn_U+0x52>
     442:	00 c0       	rjmp	.+0      	; 0x444 <turn_U+0x5c>
     444:	00 00       	nop
	_delay_ms(50);
	left_rotate();
     446:	0e 94 5b 00 	call	0xb6	; 0xb6 <left_rotate>
	set_speed_RL(speed + 200);
     44a:	8e 01       	movw	r16, r28
     44c:	08 53       	subi	r16, 0x38	; 56
     44e:	1f 4f       	sbci	r17, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     450:	19 bd       	out	0x29, r17	; 41
     452:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     454:	1b bd       	out	0x2b, r17	; 43
     456:	0a bd       	out	0x2a, r16	; 42
     458:	8f ef       	ldi	r24, 0xFF	; 255
     45a:	90 e7       	ldi	r25, 0x70	; 112
     45c:	22 e0       	ldi	r18, 0x02	; 2
     45e:	81 50       	subi	r24, 0x01	; 1
     460:	90 40       	sbci	r25, 0x00	; 0
     462:	20 40       	sbci	r18, 0x00	; 0
     464:	e1 f7       	brne	.-8      	; 0x45e <turn_U+0x76>
     466:	00 c0       	rjmp	.+0      	; 0x468 <turn_U+0x80>
     468:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     46a:	d9 bd       	out	0x29, r29	; 41
     46c:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     46e:	db bd       	out	0x2b, r29	; 43
     470:	ca bd       	out	0x2a, r28	; 42
	left_rotate();
	set_speed_RL(speed + 200);
	_delay_ms(100); //50
	set_speed_RL(speed); //-50
	//_delay_ms(100);
	while((sensor_data() & (3<<5)) != (3<<5));
     472:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     476:	80 76       	andi	r24, 0x60	; 96
     478:	80 36       	cpi	r24, 0x60	; 96
     47a:	d9 f7       	brne	.-10     	; 0x472 <turn_U+0x8a>
	while((sensor_data() & (3<<4)) != (3<<4));
     47c:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     480:	80 73       	andi	r24, 0x30	; 48
     482:	80 33       	cpi	r24, 0x30	; 48
     484:	d9 f7       	brne	.-10     	; 0x47c <turn_U+0x94>
	while((sensor_data() & (3<<3)) != (3<<3));
     486:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     48a:	88 71       	andi	r24, 0x18	; 24
     48c:	88 31       	cpi	r24, 0x18	; 24
     48e:	d9 f7       	brne	.-10     	; 0x486 <turn_U+0x9e>
     490:	8f e3       	ldi	r24, 0x3F	; 63
     492:	9c e9       	ldi	r25, 0x9C	; 156
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <turn_U+0xac>
     498:	00 c0       	rjmp	.+0      	; 0x49a <turn_U+0xb2>
     49a:	00 00       	nop
	_delay_ms(20);
	right_rotate();
     49c:	0e 94 55 00 	call	0xaa	; 0xaa <right_rotate>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     4a0:	f9 bc       	out	0x29, r15	; 41
     4a2:	e8 bc       	out	0x28, r14	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     4a4:	fb bc       	out	0x2b, r15	; 43
     4a6:	ea bc       	out	0x2a, r14	; 42
     4a8:	9f e7       	ldi	r25, 0x7F	; 127
     4aa:	28 e3       	ldi	r18, 0x38	; 56
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	91 50       	subi	r25, 0x01	; 1
     4b0:	20 40       	sbci	r18, 0x00	; 0
     4b2:	80 40       	sbci	r24, 0x00	; 0
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <turn_U+0xc6>
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <turn_U+0xd0>
     4b8:	00 00       	nop
	while((sensor_data() & (3<<3)) != (3<<3));
	_delay_ms(20);
	right_rotate();
	set_speed_RL(speed+300);
	_delay_ms(50);
	stay_stop();
     4ba:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     4be:	9f e7       	ldi	r25, 0x7F	; 127
     4c0:	28 e3       	ldi	r18, 0x38	; 56
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	91 50       	subi	r25, 0x01	; 1
     4c6:	20 40       	sbci	r18, 0x00	; 0
     4c8:	80 40       	sbci	r24, 0x00	; 0
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <turn_U+0xdc>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <turn_U+0xe6>
     4ce:	00 00       	nop
	_delay_ms(50);
	//while(sensor_data() != (3<<3));
	go_forward();
     4d0:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     4d4:	19 bd       	out	0x29, r17	; 41
     4d6:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     4d8:	1b bd       	out	0x2b, r17	; 43
     4da:	0a bd       	out	0x2a, r16	; 42
     4dc:	9f e7       	ldi	r25, 0x7F	; 127
     4de:	28 e3       	ldi	r18, 0x38	; 56
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	91 50       	subi	r25, 0x01	; 1
     4e4:	20 40       	sbci	r18, 0x00	; 0
     4e6:	80 40       	sbci	r24, 0x00	; 0
     4e8:	e1 f7       	brne	.-8      	; 0x4e2 <turn_U+0xfa>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <turn_U+0x104>
     4ec:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     4ee:	d9 bd       	out	0x29, r29	; 41
     4f0:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     4f2:	db bd       	out	0x2b, r29	; 43
     4f4:	ca bd       	out	0x2a, r28	; 42
	//while(sensor_data() != (3<<3));
	go_forward();
	set_speed_RL(speed + 200);
	_delay_ms(50); //50
	set_speed_RL(speed);
}
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	1f 91       	pop	r17
     4fc:	0f 91       	pop	r16
     4fe:	ff 90       	pop	r15
     500:	ef 90       	pop	r14
     502:	08 95       	ret

00000504 <turn_U_destination>:

void turn_U_destination(uint16_t speed)
{
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	ec 01       	movw	r28, r24
	uint16_t sensor_data_hold;
	stay_stop();
     50e:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     512:	2f e7       	ldi	r18, 0x7F	; 127
     514:	88 e3       	ldi	r24, 0x38	; 56
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	21 50       	subi	r18, 0x01	; 1
     51a:	80 40       	sbci	r24, 0x00	; 0
     51c:	90 40       	sbci	r25, 0x00	; 0
     51e:	e1 f7       	brne	.-8      	; 0x518 <turn_U_destination+0x14>
     520:	00 c0       	rjmp	.+0      	; 0x522 <turn_U_destination+0x1e>
     522:	00 00       	nop
	_delay_ms(50);
	go_backward();
     524:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
	set_speed_RL(speed + 200);
     528:	8e 01       	movw	r16, r28
     52a:	08 53       	subi	r16, 0x38	; 56
     52c:	1f 4f       	sbci	r17, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     52e:	19 bd       	out	0x29, r17	; 41
     530:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     532:	1b bd       	out	0x2b, r17	; 43
     534:	0a bd       	out	0x2a, r16	; 42
     536:	2f e7       	ldi	r18, 0x7F	; 127
     538:	88 e3       	ldi	r24, 0x38	; 56
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	21 50       	subi	r18, 0x01	; 1
     53e:	80 40       	sbci	r24, 0x00	; 0
     540:	90 40       	sbci	r25, 0x00	; 0
     542:	e1 f7       	brne	.-8      	; 0x53c <turn_U_destination+0x38>
     544:	00 c0       	rjmp	.+0      	; 0x546 <turn_U_destination+0x42>
     546:	00 00       	nop
	stay_stop();
	_delay_ms(50);
	go_backward();
	set_speed_RL(speed + 200);
	_delay_ms(50);
	stay_stop();	
     548:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
	process_array();
     54c:	0e 94 a8 01 	call	0x350	; 0x350 <process_array>
     550:	2f ef       	ldi	r18, 0xFF	; 255
     552:	84 e3       	ldi	r24, 0x34	; 52
     554:	9c e0       	ldi	r25, 0x0C	; 12
     556:	21 50       	subi	r18, 0x01	; 1
     558:	80 40       	sbci	r24, 0x00	; 0
     55a:	90 40       	sbci	r25, 0x00	; 0
     55c:	e1 f7       	brne	.-8      	; 0x556 <turn_U_destination+0x52>
     55e:	00 c0       	rjmp	.+0      	; 0x560 <turn_U_destination+0x5c>
     560:	00 00       	nop
	_delay_ms(500);
	go_backward();
     562:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     566:	19 bd       	out	0x29, r17	; 41
     568:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     56a:	1b bd       	out	0x2b, r17	; 43
     56c:	0a bd       	out	0x2a, r16	; 42
     56e:	2f e7       	ldi	r18, 0x7F	; 127
     570:	88 e3       	ldi	r24, 0x38	; 56
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	21 50       	subi	r18, 0x01	; 1
     576:	80 40       	sbci	r24, 0x00	; 0
     578:	90 40       	sbci	r25, 0x00	; 0
     57a:	e1 f7       	brne	.-8      	; 0x574 <turn_U_destination+0x70>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <turn_U_destination+0x7a>
     57e:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     580:	d9 bd       	out	0x29, r29	; 41
     582:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     584:	db bd       	out	0x2b, r29	; 43
     586:	ca bd       	out	0x2a, r28	; 42
	_delay_ms(500);
	go_backward();
	set_speed_RL(speed + 200);
	_delay_ms(50);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
     588:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     58c:	82 74       	andi	r24, 0x42	; 66
	while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
     58e:	21 f0       	breq	.+8      	; 0x598 <turn_U_destination+0x94>
	{
		sensor_data_hold = sensor_data();
     590:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     594:	82 74       	andi	r24, 0x42	; 66
	go_backward();
	set_speed_RL(speed + 200);
	_delay_ms(50);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
	while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
     596:	e1 f7       	brne	.-8      	; 0x590 <turn_U_destination+0x8c>
	{
		sensor_data_hold = sensor_data();
	}
	stay_stop();
     598:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     59c:	2f e7       	ldi	r18, 0x7F	; 127
     59e:	88 e3       	ldi	r24, 0x38	; 56
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	21 50       	subi	r18, 0x01	; 1
     5a4:	80 40       	sbci	r24, 0x00	; 0
     5a6:	90 40       	sbci	r25, 0x00	; 0
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <turn_U_destination+0x9e>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <turn_U_destination+0xa8>
     5ac:	00 00       	nop
	_delay_ms(50);
	go_forward();
     5ae:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
	set_speed_RL(speed + 100);
     5b2:	ce 01       	movw	r24, r28
     5b4:	8c 59       	subi	r24, 0x9C	; 156
     5b6:	9f 4f       	sbci	r25, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     5b8:	99 bd       	out	0x29, r25	; 41
     5ba:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     5bc:	9b bd       	out	0x2b, r25	; 43
     5be:	8a bd       	out	0x2a, r24	; 42
     5c0:	2f e7       	ldi	r18, 0x7F	; 127
     5c2:	88 e3       	ldi	r24, 0x38	; 56
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	80 40       	sbci	r24, 0x00	; 0
     5ca:	90 40       	sbci	r25, 0x00	; 0
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <turn_U_destination+0xc2>
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <turn_U_destination+0xcc>
     5d0:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     5d2:	d9 bd       	out	0x29, r29	; 41
     5d4:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     5d6:	db bd       	out	0x2b, r29	; 43
     5d8:	ca bd       	out	0x2a, r28	; 42
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	83 ec       	ldi	r24, 0xC3	; 195
     5de:	99 e0       	ldi	r25, 0x09	; 9
     5e0:	21 50       	subi	r18, 0x01	; 1
     5e2:	80 40       	sbci	r24, 0x00	; 0
     5e4:	90 40       	sbci	r25, 0x00	; 0
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <turn_U_destination+0xdc>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <turn_U_destination+0xe6>
     5ea:	00 00       	nop
	set_speed_RL(speed + 100);
	_delay_ms(50);
	//set_speed_RL(speed);
	set_speed_RL(speed);
	_delay_ms(400);
	go_backward();
     5ec:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     5f0:	19 bd       	out	0x29, r17	; 41
     5f2:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     5f4:	1b bd       	out	0x2b, r17	; 43
     5f6:	0a bd       	out	0x2a, r16	; 42
     5f8:	2f e7       	ldi	r18, 0x7F	; 127
     5fa:	88 e3       	ldi	r24, 0x38	; 56
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	21 50       	subi	r18, 0x01	; 1
     600:	80 40       	sbci	r24, 0x00	; 0
     602:	90 40       	sbci	r25, 0x00	; 0
     604:	e1 f7       	brne	.-8      	; 0x5fe <turn_U_destination+0xfa>
     606:	00 c0       	rjmp	.+0      	; 0x608 <turn_U_destination+0x104>
     608:	00 00       	nop
	set_speed_RL(speed);
	_delay_ms(400);
	go_backward();
	set_speed_RL(speed+200);
	_delay_ms(50);
	stay_stop();
     60a:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     60e:	2f e7       	ldi	r18, 0x7F	; 127
     610:	88 e3       	ldi	r24, 0x38	; 56
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	21 50       	subi	r18, 0x01	; 1
     616:	80 40       	sbci	r24, 0x00	; 0
     618:	90 40       	sbci	r25, 0x00	; 0
     61a:	e1 f7       	brne	.-8      	; 0x614 <turn_U_destination+0x110>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <turn_U_destination+0x11a>
     61e:	00 00       	nop
	_delay_ms(50);
	left_rotate();
     620:	0e 94 5b 00 	call	0xb6	; 0xb6 <left_rotate>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     624:	19 bd       	out	0x29, r17	; 41
     626:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     628:	1b bd       	out	0x2b, r17	; 43
     62a:	0a bd       	out	0x2a, r16	; 42
     62c:	2f ef       	ldi	r18, 0xFF	; 255
     62e:	80 e7       	ldi	r24, 0x70	; 112
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	21 50       	subi	r18, 0x01	; 1
     634:	80 40       	sbci	r24, 0x00	; 0
     636:	90 40       	sbci	r25, 0x00	; 0
     638:	e1 f7       	brne	.-8      	; 0x632 <turn_U_destination+0x12e>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <turn_U_destination+0x138>
     63c:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     63e:	d9 bd       	out	0x29, r29	; 41
     640:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     642:	db bd       	out	0x2b, r29	; 43
     644:	ca bd       	out	0x2a, r28	; 42
     646:	2f ef       	ldi	r18, 0xFF	; 255
     648:	80 e7       	ldi	r24, 0x70	; 112
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	21 50       	subi	r18, 0x01	; 1
     64e:	80 40       	sbci	r24, 0x00	; 0
     650:	90 40       	sbci	r25, 0x00	; 0
     652:	e1 f7       	brne	.-8      	; 0x64c <turn_U_destination+0x148>
     654:	00 c0       	rjmp	.+0      	; 0x656 <turn_U_destination+0x152>
     656:	00 00       	nop
	left_rotate();
	set_speed_RL(speed + 200);
	_delay_ms(100); //50
	set_speed_RL(speed); //-50
	_delay_ms(100);
	while((sensor_data() & (3<<5)) != 0x00);
     658:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     65c:	80 76       	andi	r24, 0x60	; 96
     65e:	e1 f7       	brne	.-8      	; 0x658 <turn_U_destination+0x154>
	while((sensor_data() & (3<<5)) != (3<<5));
     660:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     664:	80 76       	andi	r24, 0x60	; 96
     666:	80 36       	cpi	r24, 0x60	; 96
     668:	d9 f7       	brne	.-10     	; 0x660 <turn_U_destination+0x15c>
	while((sensor_data() & (3<<4)) != (3<<4));
     66a:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     66e:	80 73       	andi	r24, 0x30	; 48
     670:	80 33       	cpi	r24, 0x30	; 48
     672:	d9 f7       	brne	.-10     	; 0x66a <turn_U_destination+0x166>
	while((sensor_data() & (3<<3)) != (3<<3));
     674:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     678:	88 71       	andi	r24, 0x18	; 24
     67a:	88 31       	cpi	r24, 0x18	; 24
     67c:	d9 f7       	brne	.-10     	; 0x674 <turn_U_destination+0x170>
     67e:	8f e3       	ldi	r24, 0x3F	; 63
     680:	9c e9       	ldi	r25, 0x9C	; 156
     682:	01 97       	sbiw	r24, 0x01	; 1
     684:	f1 f7       	brne	.-4      	; 0x682 <turn_U_destination+0x17e>
     686:	00 c0       	rjmp	.+0      	; 0x688 <turn_U_destination+0x184>
     688:	00 00       	nop
	_delay_ms(20);
	right_rotate();
     68a:	0e 94 55 00 	call	0xaa	; 0xaa <right_rotate>
	set_speed_RL(speed+300);
     68e:	ce 01       	movw	r24, r28
     690:	84 5d       	subi	r24, 0xD4	; 212
     692:	9e 4f       	sbci	r25, 0xFE	; 254
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     694:	99 bd       	out	0x29, r25	; 41
     696:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     698:	9b bd       	out	0x2b, r25	; 43
     69a:	8a bd       	out	0x2a, r24	; 42
     69c:	9f e7       	ldi	r25, 0x7F	; 127
     69e:	28 e3       	ldi	r18, 0x38	; 56
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	91 50       	subi	r25, 0x01	; 1
     6a4:	20 40       	sbci	r18, 0x00	; 0
     6a6:	80 40       	sbci	r24, 0x00	; 0
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <turn_U_destination+0x19e>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <turn_U_destination+0x1a8>
     6ac:	00 00       	nop
	while((sensor_data() & (3<<3)) != (3<<3));
	_delay_ms(20);
	right_rotate();
	set_speed_RL(speed+300);
	_delay_ms(50);
	stay_stop();
     6ae:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     6b2:	9f e7       	ldi	r25, 0x7F	; 127
     6b4:	28 e3       	ldi	r18, 0x38	; 56
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	91 50       	subi	r25, 0x01	; 1
     6ba:	20 40       	sbci	r18, 0x00	; 0
     6bc:	80 40       	sbci	r24, 0x00	; 0
     6be:	e1 f7       	brne	.-8      	; 0x6b8 <turn_U_destination+0x1b4>
     6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <turn_U_destination+0x1be>
     6c2:	00 00       	nop
	_delay_ms(50);
	//while(sensor_data() != (3<<3));
	go_forward();
     6c4:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     6c8:	19 bd       	out	0x29, r17	; 41
     6ca:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     6cc:	1b bd       	out	0x2b, r17	; 43
     6ce:	0a bd       	out	0x2a, r16	; 42
     6d0:	9f e7       	ldi	r25, 0x7F	; 127
     6d2:	28 e3       	ldi	r18, 0x38	; 56
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	91 50       	subi	r25, 0x01	; 1
     6d8:	20 40       	sbci	r18, 0x00	; 0
     6da:	80 40       	sbci	r24, 0x00	; 0
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <turn_U_destination+0x1d2>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <turn_U_destination+0x1dc>
     6e0:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     6e2:	d9 bd       	out	0x29, r29	; 41
     6e4:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     6e6:	db bd       	out	0x2b, r29	; 43
     6e8:	ca bd       	out	0x2a, r28	; 42
	//while(sensor_data() != (3<<3));
	go_forward();
	set_speed_RL(speed + 200);
	_delay_ms(50); //50
	set_speed_RL(speed);
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	08 95       	ret

000006f4 <turn_left>:

void turn_left(uint16_t speed)
{
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	ec 01       	movw	r28, r24
	go_backward();
     702:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
	set_speed_RL(speed + 300);
     706:	7e 01       	movw	r14, r28
     708:	24 ed       	ldi	r18, 0xD4	; 212
     70a:	e2 1a       	sub	r14, r18
     70c:	2e ef       	ldi	r18, 0xFE	; 254
     70e:	f2 0a       	sbc	r15, r18
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     710:	f9 bc       	out	0x29, r15	; 41
     712:	e8 bc       	out	0x28, r14	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     714:	fb bc       	out	0x2b, r15	; 43
     716:	ea bc       	out	0x2a, r14	; 42
     718:	8f e7       	ldi	r24, 0x7F	; 127
     71a:	98 e3       	ldi	r25, 0x38	; 56
     71c:	21 e0       	ldi	r18, 0x01	; 1
     71e:	81 50       	subi	r24, 0x01	; 1
     720:	90 40       	sbci	r25, 0x00	; 0
     722:	20 40       	sbci	r18, 0x00	; 0
     724:	e1 f7       	brne	.-8      	; 0x71e <turn_left+0x2a>
     726:	00 c0       	rjmp	.+0      	; 0x728 <turn_left+0x34>
     728:	00 00       	nop
void turn_left(uint16_t speed)
{
	go_backward();
	set_speed_RL(speed + 300);
	_delay_ms(50);
	stay_stop();
     72a:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     72e:	8f e7       	ldi	r24, 0x7F	; 127
     730:	98 e3       	ldi	r25, 0x38	; 56
     732:	21 e0       	ldi	r18, 0x01	; 1
     734:	81 50       	subi	r24, 0x01	; 1
     736:	90 40       	sbci	r25, 0x00	; 0
     738:	20 40       	sbci	r18, 0x00	; 0
     73a:	e1 f7       	brne	.-8      	; 0x734 <turn_left+0x40>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <turn_left+0x4a>
     73e:	00 00       	nop
	_delay_ms(50);
	left_rotate();
     740:	0e 94 5b 00 	call	0xb6	; 0xb6 <left_rotate>
	set_speed_RL(speed + 200); //can be deleted 100
     744:	8e 01       	movw	r16, r28
     746:	08 53       	subi	r16, 0x38	; 56
     748:	1f 4f       	sbci	r17, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     74a:	19 bd       	out	0x29, r17	; 41
     74c:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     74e:	1b bd       	out	0x2b, r17	; 43
     750:	0a bd       	out	0x2a, r16	; 42
     752:	8f ef       	ldi	r24, 0xFF	; 255
     754:	90 e7       	ldi	r25, 0x70	; 112
     756:	22 e0       	ldi	r18, 0x02	; 2
     758:	81 50       	subi	r24, 0x01	; 1
     75a:	90 40       	sbci	r25, 0x00	; 0
     75c:	20 40       	sbci	r18, 0x00	; 0
     75e:	e1 f7       	brne	.-8      	; 0x758 <turn_left+0x64>
     760:	00 c0       	rjmp	.+0      	; 0x762 <turn_left+0x6e>
     762:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     764:	d9 bd       	out	0x29, r29	; 41
     766:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     768:	db bd       	out	0x2b, r29	; 43
     76a:	ca bd       	out	0x2a, r28	; 42
	set_speed_RL(speed + 200); //can be deleted 100
	_delay_ms(100); // 50
	set_speed_RL(speed); //-30
	//_delay_ms(100);
	//while((sensor_data() & (1<<7)) != (1<<7));
	while((sensor_data() & (3<<5)) != (3<<5));
     76c:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     770:	80 76       	andi	r24, 0x60	; 96
     772:	80 36       	cpi	r24, 0x60	; 96
     774:	d9 f7       	brne	.-10     	; 0x76c <turn_left+0x78>
	while((sensor_data() & (3<<4)) != (3<<4));
     776:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     77a:	80 73       	andi	r24, 0x30	; 48
     77c:	80 33       	cpi	r24, 0x30	; 48
     77e:	d9 f7       	brne	.-10     	; 0x776 <turn_left+0x82>
	while((sensor_data() & (3<<3)) != (3<<3));
     780:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     784:	88 71       	andi	r24, 0x18	; 24
     786:	88 31       	cpi	r24, 0x18	; 24
     788:	d9 f7       	brne	.-10     	; 0x780 <turn_left+0x8c>
     78a:	8f e3       	ldi	r24, 0x3F	; 63
     78c:	9c e9       	ldi	r25, 0x9C	; 156
     78e:	01 97       	sbiw	r24, 0x01	; 1
     790:	f1 f7       	brne	.-4      	; 0x78e <turn_left+0x9a>
     792:	00 c0       	rjmp	.+0      	; 0x794 <turn_left+0xa0>
     794:	00 00       	nop
	_delay_ms(20);
	//while(sensor_data() != (3<<3));
	right_rotate();
     796:	0e 94 55 00 	call	0xaa	; 0xaa <right_rotate>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     79a:	f9 bc       	out	0x29, r15	; 41
     79c:	e8 bc       	out	0x28, r14	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     79e:	fb bc       	out	0x2b, r15	; 43
     7a0:	ea bc       	out	0x2a, r14	; 42
     7a2:	9f e7       	ldi	r25, 0x7F	; 127
     7a4:	28 e3       	ldi	r18, 0x38	; 56
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	91 50       	subi	r25, 0x01	; 1
     7aa:	20 40       	sbci	r18, 0x00	; 0
     7ac:	80 40       	sbci	r24, 0x00	; 0
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <turn_left+0xb4>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <turn_left+0xbe>
     7b2:	00 00       	nop
	_delay_ms(20);
	//while(sensor_data() != (3<<3));
	right_rotate();
	set_speed_RL(speed+300);
	_delay_ms(50);
	stay_stop();
     7b4:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     7b8:	9f e7       	ldi	r25, 0x7F	; 127
     7ba:	28 e3       	ldi	r18, 0x38	; 56
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	91 50       	subi	r25, 0x01	; 1
     7c0:	20 40       	sbci	r18, 0x00	; 0
     7c2:	80 40       	sbci	r24, 0x00	; 0
     7c4:	e1 f7       	brne	.-8      	; 0x7be <turn_left+0xca>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <turn_left+0xd4>
     7c8:	00 00       	nop
	_delay_ms(50);
	//while(sensor_data() != (3<<3));
	go_forward();
     7ca:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     7ce:	19 bd       	out	0x29, r17	; 41
     7d0:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     7d2:	1b bd       	out	0x2b, r17	; 43
     7d4:	0a bd       	out	0x2a, r16	; 42
     7d6:	9f e7       	ldi	r25, 0x7F	; 127
     7d8:	28 e3       	ldi	r18, 0x38	; 56
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	91 50       	subi	r25, 0x01	; 1
     7de:	20 40       	sbci	r18, 0x00	; 0
     7e0:	80 40       	sbci	r24, 0x00	; 0
     7e2:	e1 f7       	brne	.-8      	; 0x7dc <turn_left+0xe8>
     7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <turn_left+0xf2>
     7e6:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     7e8:	d9 bd       	out	0x29, r29	; 41
     7ea:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     7ec:	db bd       	out	0x2b, r29	; 43
     7ee:	ca bd       	out	0x2a, r28	; 42
	//while(sensor_data() != (3<<3));
	go_forward();
	set_speed_RL(speed + 200);
	_delay_ms(50); //50
	set_speed_RL(speed);
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	08 95       	ret

000007fe <turn_right>:

void turn_right(uint16_t speed)
{
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	ec 01       	movw	r28, r24
	go_backward();
     80c:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
	set_speed_RL(speed + 300);
     810:	7e 01       	movw	r14, r28
     812:	24 ed       	ldi	r18, 0xD4	; 212
     814:	e2 1a       	sub	r14, r18
     816:	2e ef       	ldi	r18, 0xFE	; 254
     818:	f2 0a       	sbc	r15, r18
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     81a:	f9 bc       	out	0x29, r15	; 41
     81c:	e8 bc       	out	0x28, r14	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     81e:	fb bc       	out	0x2b, r15	; 43
     820:	ea bc       	out	0x2a, r14	; 42
     822:	8f e7       	ldi	r24, 0x7F	; 127
     824:	98 e3       	ldi	r25, 0x38	; 56
     826:	21 e0       	ldi	r18, 0x01	; 1
     828:	81 50       	subi	r24, 0x01	; 1
     82a:	90 40       	sbci	r25, 0x00	; 0
     82c:	20 40       	sbci	r18, 0x00	; 0
     82e:	e1 f7       	brne	.-8      	; 0x828 <turn_right+0x2a>
     830:	00 c0       	rjmp	.+0      	; 0x832 <turn_right+0x34>
     832:	00 00       	nop
void turn_right(uint16_t speed)
{
	go_backward();
	set_speed_RL(speed + 300);
	_delay_ms(50);
	stay_stop();
     834:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     838:	8f e7       	ldi	r24, 0x7F	; 127
     83a:	98 e3       	ldi	r25, 0x38	; 56
     83c:	21 e0       	ldi	r18, 0x01	; 1
     83e:	81 50       	subi	r24, 0x01	; 1
     840:	90 40       	sbci	r25, 0x00	; 0
     842:	20 40       	sbci	r18, 0x00	; 0
     844:	e1 f7       	brne	.-8      	; 0x83e <turn_right+0x40>
     846:	00 c0       	rjmp	.+0      	; 0x848 <turn_right+0x4a>
     848:	00 00       	nop
	_delay_ms(50);
	right_rotate();
     84a:	0e 94 55 00 	call	0xaa	; 0xaa <right_rotate>
	set_speed_RL(speed + 200); //can be deleted 100
     84e:	8e 01       	movw	r16, r28
     850:	08 53       	subi	r16, 0x38	; 56
     852:	1f 4f       	sbci	r17, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     854:	19 bd       	out	0x29, r17	; 41
     856:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     858:	1b bd       	out	0x2b, r17	; 43
     85a:	0a bd       	out	0x2a, r16	; 42
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	90 e7       	ldi	r25, 0x70	; 112
     860:	22 e0       	ldi	r18, 0x02	; 2
     862:	81 50       	subi	r24, 0x01	; 1
     864:	90 40       	sbci	r25, 0x00	; 0
     866:	20 40       	sbci	r18, 0x00	; 0
     868:	e1 f7       	brne	.-8      	; 0x862 <__stack+0x3>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <__stack+0xd>
     86c:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     86e:	d9 bd       	out	0x29, r29	; 41
     870:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     872:	db bd       	out	0x2b, r29	; 43
     874:	ca bd       	out	0x2a, r28	; 42
	set_speed_RL(speed + 200); //can be deleted 100
	_delay_ms(100); // 50
	set_speed_RL(speed); //-30
	//_delay_ms(100);
	//while((sensor_data() & (1<<0)) != (1<<0));
	while((sensor_data() & (3<<1)) != (3<<1));
     876:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     87a:	86 70       	andi	r24, 0x06	; 6
     87c:	86 30       	cpi	r24, 0x06	; 6
     87e:	d9 f7       	brne	.-10     	; 0x876 <__stack+0x17>
	while((sensor_data() & (3<<2)) != (3<<2));
     880:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     884:	8c 70       	andi	r24, 0x0C	; 12
     886:	8c 30       	cpi	r24, 0x0C	; 12
     888:	d9 f7       	brne	.-10     	; 0x880 <__stack+0x21>
	while((sensor_data() & (3<<3)) != (3<<3));
     88a:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     88e:	88 71       	andi	r24, 0x18	; 24
     890:	88 31       	cpi	r24, 0x18	; 24
     892:	d9 f7       	brne	.-10     	; 0x88a <__stack+0x2b>
     894:	8f e3       	ldi	r24, 0x3F	; 63
     896:	9c e9       	ldi	r25, 0x9C	; 156
     898:	01 97       	sbiw	r24, 0x01	; 1
     89a:	f1 f7       	brne	.-4      	; 0x898 <__stack+0x39>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <__stack+0x3f>
     89e:	00 00       	nop
	_delay_ms(20);
	//while(sensor_data() != (3<<3));
	left_rotate();
     8a0:	0e 94 5b 00 	call	0xb6	; 0xb6 <left_rotate>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     8a4:	f9 bc       	out	0x29, r15	; 41
     8a6:	e8 bc       	out	0x28, r14	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     8a8:	fb bc       	out	0x2b, r15	; 43
     8aa:	ea bc       	out	0x2a, r14	; 42
     8ac:	9f e7       	ldi	r25, 0x7F	; 127
     8ae:	28 e3       	ldi	r18, 0x38	; 56
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	91 50       	subi	r25, 0x01	; 1
     8b4:	20 40       	sbci	r18, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <__stack+0x53>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <__stack+0x5d>
     8bc:	00 00       	nop
	_delay_ms(20);
	//while(sensor_data() != (3<<3));
	left_rotate();
	set_speed_RL(speed+300);
	_delay_ms(50);
	stay_stop();
     8be:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     8c2:	9f e7       	ldi	r25, 0x7F	; 127
     8c4:	28 e3       	ldi	r18, 0x38	; 56
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	91 50       	subi	r25, 0x01	; 1
     8ca:	20 40       	sbci	r18, 0x00	; 0
     8cc:	80 40       	sbci	r24, 0x00	; 0
     8ce:	e1 f7       	brne	.-8      	; 0x8c8 <__stack+0x69>
     8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <__stack+0x73>
     8d2:	00 00       	nop
	_delay_ms(50);
	//while(sensor_data() != (3<<3));
	go_forward();
     8d4:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     8d8:	19 bd       	out	0x29, r17	; 41
     8da:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     8dc:	1b bd       	out	0x2b, r17	; 43
     8de:	0a bd       	out	0x2a, r16	; 42
     8e0:	9f e7       	ldi	r25, 0x7F	; 127
     8e2:	28 e3       	ldi	r18, 0x38	; 56
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	91 50       	subi	r25, 0x01	; 1
     8e8:	20 40       	sbci	r18, 0x00	; 0
     8ea:	80 40       	sbci	r24, 0x00	; 0
     8ec:	e1 f7       	brne	.-8      	; 0x8e6 <__stack+0x87>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <__stack+0x91>
     8f0:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     8f2:	d9 bd       	out	0x29, r29	; 41
     8f4:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     8f6:	db bd       	out	0x2b, r29	; 43
     8f8:	ca bd       	out	0x2a, r28	; 42
	//while(sensor_data() != (3<<3));
	go_forward();
	set_speed_RL(speed + 200);
	_delay_ms(50); //50
	set_speed_RL(speed);
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	08 95       	ret

00000908 <left_operation>:

void left_operation(uint16_t speed)
{

	turn_left(speed);
     908:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <turn_left>
	directions_solved[node_number] = 'l';
     90c:	80 91 16 01 	lds	r24, 0x0116
     910:	90 91 17 01 	lds	r25, 0x0117
     914:	fc 01       	movw	r30, r24
     916:	e8 5e       	subi	r30, 0xE8	; 232
     918:	fe 4f       	sbci	r31, 0xFE	; 254
     91a:	2c e6       	ldi	r18, 0x6C	; 108
     91c:	20 83       	st	Z, r18
	node_number = node_number + 1;
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	90 93 17 01 	sts	0x0117, r25
     924:	80 93 16 01 	sts	0x0116, r24
     928:	08 95       	ret

0000092a <right_operation>:
	//usart_putchar('l');
}

void right_operation(uint16_t speed)
{
	turn_right(speed);
     92a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <turn_right>
	directions_solved[node_number] = 'r';
     92e:	80 91 16 01 	lds	r24, 0x0116
     932:	90 91 17 01 	lds	r25, 0x0117
     936:	fc 01       	movw	r30, r24
     938:	e8 5e       	subi	r30, 0xE8	; 232
     93a:	fe 4f       	sbci	r31, 0xFE	; 254
     93c:	22 e7       	ldi	r18, 0x72	; 114
     93e:	20 83       	st	Z, r18
	node_number = node_number + 1;
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	90 93 17 01 	sts	0x0117, r25
     946:	80 93 16 01 	sts	0x0116, r24
     94a:	08 95       	ret

0000094c <left_forward_operation>:
	//usart_putchar('r');
}

void left_forward_operation(uint16_t speed)
{
	turn_left(speed);
     94c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <turn_left>
	directions_solved[node_number] = 'l';
     950:	80 91 16 01 	lds	r24, 0x0116
     954:	90 91 17 01 	lds	r25, 0x0117
     958:	fc 01       	movw	r30, r24
     95a:	e8 5e       	subi	r30, 0xE8	; 232
     95c:	fe 4f       	sbci	r31, 0xFE	; 254
     95e:	2c e6       	ldi	r18, 0x6C	; 108
     960:	20 83       	st	Z, r18
	node_number = node_number + 1;
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	90 93 17 01 	sts	0x0117, r25
     968:	80 93 16 01 	sts	0x0116, r24
     96c:	08 95       	ret

0000096e <right_forward_operation>:
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     96e:	99 bd       	out	0x29, r25	; 41
     970:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     972:	9b bd       	out	0x2b, r25	; 43
     974:	8a bd       	out	0x2a, r24	; 42
}

void right_forward_operation(uint16_t speed)
{
	set_speed_RL(speed);
	go_forward();
     976:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
	directions_solved[node_number] = 's';
     97a:	80 91 16 01 	lds	r24, 0x0116
     97e:	90 91 17 01 	lds	r25, 0x0117
     982:	fc 01       	movw	r30, r24
     984:	e8 5e       	subi	r30, 0xE8	; 232
     986:	fe 4f       	sbci	r31, 0xFE	; 254
     988:	23 e7       	ldi	r18, 0x73	; 115
     98a:	20 83       	st	Z, r18
	node_number = node_number + 1;
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	90 93 17 01 	sts	0x0117, r25
     992:	80 93 16 01 	sts	0x0116, r24
     996:	08 95       	ret

00000998 <left_right_operation>:
	//usart_putchar('s');
}

void left_right_operation(uint16_t speed)
{
	turn_left(speed);
     998:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <turn_left>
	directions_solved[node_number] = 'l';
     99c:	80 91 16 01 	lds	r24, 0x0116
     9a0:	90 91 17 01 	lds	r25, 0x0117
     9a4:	fc 01       	movw	r30, r24
     9a6:	e8 5e       	subi	r30, 0xE8	; 232
     9a8:	fe 4f       	sbci	r31, 0xFE	; 254
     9aa:	2c e6       	ldi	r18, 0x6C	; 108
     9ac:	20 83       	st	Z, r18
	node_number = node_number + 1;
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	90 93 17 01 	sts	0x0117, r25
     9b4:	80 93 16 01 	sts	0x0116, r24
     9b8:	08 95       	ret

000009ba <left_right_forward_operation>:
	//usart_putchar('l');
}

void left_right_forward_operation(uint16_t speed)
{
	turn_left(speed);
     9ba:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <turn_left>
	directions_solved[node_number] = 'l';
     9be:	80 91 16 01 	lds	r24, 0x0116
     9c2:	90 91 17 01 	lds	r25, 0x0117
     9c6:	fc 01       	movw	r30, r24
     9c8:	e8 5e       	subi	r30, 0xE8	; 232
     9ca:	fe 4f       	sbci	r31, 0xFE	; 254
     9cc:	2c e6       	ldi	r18, 0x6C	; 108
     9ce:	20 83       	st	Z, r18
	node_number = node_number + 1;
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	90 93 17 01 	sts	0x0117, r25
     9d6:	80 93 16 01 	sts	0x0116, r24
     9da:	08 95       	ret

000009dc <reverse_operation>:
	//usart_putchar('l');
}

void reverse_operation(uint16_t speed)
{
	turn_U(speed);
     9dc:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <turn_U>
	directions_solved[node_number] = 'u';
     9e0:	80 91 16 01 	lds	r24, 0x0116
     9e4:	90 91 17 01 	lds	r25, 0x0117
     9e8:	fc 01       	movw	r30, r24
     9ea:	e8 5e       	subi	r30, 0xE8	; 232
     9ec:	fe 4f       	sbci	r31, 0xFE	; 254
     9ee:	25 e7       	ldi	r18, 0x75	; 117
     9f0:	20 83       	st	Z, r18
	node_number = node_number + 1;
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	90 93 17 01 	sts	0x0117, r25
     9f8:	80 93 16 01 	sts	0x0116, r24
     9fc:	08 95       	ret

000009fe <destination_operation>:
	//usart_putchar('u');
}

void destination_operation(uint16_t speed)
{
	directions_solved[node_number] = '\0';
     9fe:	e0 91 16 01 	lds	r30, 0x0116
     a02:	f0 91 17 01 	lds	r31, 0x0117
     a06:	e8 5e       	subi	r30, 0xE8	; 232
     a08:	fe 4f       	sbci	r31, 0xFE	; 254
     a0a:	10 82       	st	Z, r1
	turn_U_destination(speed);
     a0c:	0e 94 82 02 	call	0x504	; 0x504 <turn_U_destination>
     a10:	08 95       	ret

00000a12 <evaluate_direction>:
	//usart_putchar('e');
}


void evaluate_direction(char dir,uint16_t speed)
{
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	eb 01       	movw	r28, r22
	//if (Time_x2ms >= min_up_time)
	//{
		char evaluation = 0;
		evaluation = directions_solved[node_number];
     a1a:	20 91 16 01 	lds	r18, 0x0116
     a1e:	30 91 17 01 	lds	r19, 0x0117
     a22:	f9 01       	movw	r30, r18
     a24:	e8 5e       	subi	r30, 0xE8	; 232
     a26:	fe 4f       	sbci	r31, 0xFE	; 254
     a28:	10 81       	ld	r17, Z
		node_number = node_number + 1;
     a2a:	2f 5f       	subi	r18, 0xFF	; 255
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	30 93 17 01 	sts	0x0117, r19
     a32:	20 93 16 01 	sts	0x0116, r18
		
		usart_putchar(evaluation);
     a36:	81 2f       	mov	r24, r17
     a38:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
		
		if (evaluation == 's')
     a3c:	13 37       	cpi	r17, 0x73	; 115
     a3e:	39 f4       	brne	.+14     	; 0xa4e <evaluate_direction+0x3c>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     a40:	d9 bd       	out	0x29, r29	; 41
     a42:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     a44:	db bd       	out	0x2b, r29	; 43
     a46:	ca bd       	out	0x2a, r28	; 42
		usart_putchar(evaluation);
		
		if (evaluation == 's')
		{
			set_speed_RL(speed);
			go_forward();
     a48:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
     a4c:	35 c0       	rjmp	.+106    	; 0xab8 <evaluate_direction+0xa6>
		}
		else if (evaluation == 'u')
     a4e:	15 37       	cpi	r17, 0x75	; 117
     a50:	21 f4       	brne	.+8      	; 0xa5a <evaluate_direction+0x48>
		{
			turn_U(speed);
     a52:	ce 01       	movw	r24, r28
     a54:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <turn_U>
     a58:	2f c0       	rjmp	.+94     	; 0xab8 <evaluate_direction+0xa6>
		}
		else if (evaluation == 'l')
     a5a:	1c 36       	cpi	r17, 0x6C	; 108
     a5c:	21 f4       	brne	.+8      	; 0xa66 <evaluate_direction+0x54>
		{
			turn_left(speed);
     a5e:	ce 01       	movw	r24, r28
     a60:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <turn_left>
     a64:	29 c0       	rjmp	.+82     	; 0xab8 <evaluate_direction+0xa6>
		}
		else if (evaluation == 'r')
     a66:	12 37       	cpi	r17, 0x72	; 114
     a68:	21 f4       	brne	.+8      	; 0xa72 <evaluate_direction+0x60>
		{
			turn_right(speed);
     a6a:	ce 01       	movw	r24, r28
     a6c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <turn_right>
     a70:	23 c0       	rjmp	.+70     	; 0xab8 <evaluate_direction+0xa6>
		}
		else
		{
			stay_stop();
     a72:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     a76:	2f e7       	ldi	r18, 0x7F	; 127
     a78:	88 e3       	ldi	r24, 0x38	; 56
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	21 50       	subi	r18, 0x01	; 1
     a7e:	80 40       	sbci	r24, 0x00	; 0
     a80:	90 40       	sbci	r25, 0x00	; 0
     a82:	e1 f7       	brne	.-8      	; 0xa7c <evaluate_direction+0x6a>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <evaluate_direction+0x74>
     a86:	00 00       	nop
			_delay_ms(50);
			go_backward();
     a88:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
			set_speed_RL(speed+200);
     a8c:	c8 53       	subi	r28, 0x38	; 56
     a8e:	df 4f       	sbci	r29, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     a90:	d9 bd       	out	0x29, r29	; 41
     a92:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     a94:	db bd       	out	0x2b, r29	; 43
     a96:	ca bd       	out	0x2a, r28	; 42
     a98:	2f e7       	ldi	r18, 0x7F	; 127
     a9a:	88 e3       	ldi	r24, 0x38	; 56
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	21 50       	subi	r18, 0x01	; 1
     aa0:	80 40       	sbci	r24, 0x00	; 0
     aa2:	90 40       	sbci	r25, 0x00	; 0
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <evaluate_direction+0x8c>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <evaluate_direction+0x96>
     aa8:	00 00       	nop
			stay_stop();
			_delay_ms(50);
			go_backward();
			set_speed_RL(speed+200);
			_delay_ms(50);
			stay_stop();
     aaa:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
			usart_putstr("\r\rEnd Stuck!!!\r\r\r-------------------------------------------------------\r\r\r\r");
     aae:	8c e9       	ldi	r24, 0x9C	; 156
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
     ab6:	ff cf       	rjmp	.-2      	; 0xab6 <evaluate_direction+0xa4>
			while(1);
		}
		
		//Time_x2ms = 0x00;
	//}
}
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	08 95       	ret

00000ac0 <main>:
{
	uint16_t speed=310, speed_2=500, destination=0;
	uint8_t sensor_data_hold=0, Right_trigged=0, Left_trigged=0, Forward_trigged=0;//, speed_grad_count=0;
	
	//port pin initialization
	PORTA = 03;
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	8b bb       	out	0x1b, r24	; 27
	DDRA = 00;
     ac4:	1a ba       	out	0x1a, r1	; 26
	PORTB=0x00;
     ac6:	18 ba       	out	0x18, r1	; 24
	DDRB=0x0F;
     ac8:	9f e0       	ldi	r25, 0x0F	; 15
     aca:	97 bb       	out	0x17, r25	; 23
	PORTC=0xFF;
     acc:	9f ef       	ldi	r25, 0xFF	; 255
     ace:	95 bb       	out	0x15, r25	; 21
	DDRC=0x00;
     ad0:	14 ba       	out	0x14, r1	; 20
	PORTD=0x00;
     ad2:	12 ba       	out	0x12, r1	; 18
	DDRD=0x30;
     ad4:	90 e3       	ldi	r25, 0x30	; 48
     ad6:	91 bb       	out	0x11, r25	; 17
	
	//Timer Counter0 initialization
	TCCR0=0x03; // 125k Hz at normal top 0xFF
     ad8:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
     ada:	12 be       	out	0x32, r1	; 50
	OCR0=0x00;
     adc:	1c be       	out	0x3c, r1	; 60
	
	//Timer Counter1 Initialization
	TCCR1A=0xA2;
     ade:	92 ea       	ldi	r25, 0xA2	; 162
     ae0:	9f bd       	out	0x2f, r25	; 47
	TCCR1B=0x18;
     ae2:	98 e1       	ldi	r25, 0x18	; 24
     ae4:	9e bd       	out	0x2e, r25	; 46
	TCNT1=0x0000;
     ae6:	1d bc       	out	0x2d, r1	; 45
     ae8:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x03;
     aea:	87 bd       	out	0x27, r24	; 39
	ICR1L=0xE8; //03E8=1000 in decimal
     aec:	88 ee       	ldi	r24, 0xE8	; 232
     aee:	86 bd       	out	0x26, r24	; 38
	OCR1A=speed;
     af0:	86 e3       	ldi	r24, 0x36	; 54
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	9b bd       	out	0x2b, r25	; 43
     af6:	8a bd       	out	0x2a, r24	; 42
	OCR1B=speed;
     af8:	99 bd       	out	0x29, r25	; 41
     afa:	88 bd       	out	0x28, r24	; 40
	
	
	//USART Initialization
	usart_init(9600); 
     afc:	60 e8       	ldi	r22, 0x80	; 128
     afe:	75 e2       	ldi	r23, 0x25	; 37
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 66 00 	call	0xcc	; 0xcc <usart_init>
	usart_putstr("\rI am ready!!\r");
     b08:	89 ee       	ldi	r24, 0xE9	; 233
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	
	
	// Timer Interrupt Mask register settings
	TIMSK=0x01;
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	89 bf       	out	0x39, r24	; 57
	sei();//global interrupt enable
     b14:	78 94       	sei
	
	
	//start_tour:
	while (PINA & (1<<PA0));
     b16:	c8 99       	sbic	0x19, 0	; 25
     b18:	fe cf       	rjmp	.-4      	; 0xb16 <main+0x56>
	usart_putstr("start tour :)\r\rStuck Data: ");
     b1a:	88 ef       	ldi	r24, 0xF8	; 248
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
     b22:	2f ef       	ldi	r18, 0xFF	; 255
     b24:	84 e3       	ldi	r24, 0x34	; 52
     b26:	9c e0       	ldi	r25, 0x0C	; 12
     b28:	21 50       	subi	r18, 0x01	; 1
     b2a:	80 40       	sbci	r24, 0x00	; 0
     b2c:	90 40       	sbci	r25, 0x00	; 0
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <main+0x68>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <main+0x72>
     b32:	00 00       	nop
	_delay_ms(500);
	go_forward();
     b34:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     b38:	8e ef       	ldi	r24, 0xFE	; 254
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	99 bd       	out	0x29, r25	; 41
     b3e:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     b40:	9b bd       	out	0x2b, r25	; 43
     b42:	8a bd       	out	0x2a, r24	; 42
     b44:	2f ef       	ldi	r18, 0xFF	; 255
     b46:	86 e7       	ldi	r24, 0x76	; 118
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	21 50       	subi	r18, 0x01	; 1
     b4c:	80 40       	sbci	r24, 0x00	; 0
     b4e:	90 40       	sbci	r25, 0x00	; 0
     b50:	e1 f7       	brne	.-8      	; 0xb4a <main+0x8a>
     b52:	00 c0       	rjmp	.+0      	; 0xb54 <main+0x94>
     b54:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     b56:	86 e3       	ldi	r24, 0x36	; 54
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	99 bd       	out	0x29, r25	; 41
     b5c:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     b5e:	9b bd       	out	0x2b, r25	; 43
     b60:	8a bd       	out	0x2a, r24	; 42
	_delay_ms(500);
	go_forward();
	set_speed_RL(speed+200);
	_delay_ms(60);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
     b62:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     b66:	82 74       	andi	r24, 0x42	; 66
	while ((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
     b68:	21 f0       	breq	.+8      	; 0xb72 <main+0xb2>
	{
		sensor_data_hold = sensor_data();
     b6a:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     b6e:	82 74       	andi	r24, 0x42	; 66
	go_forward();
	set_speed_RL(speed+200);
	_delay_ms(60);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
	while ((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
     b70:	e1 f7       	brne	.-8      	; 0xb6a <main+0xaa>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
     b72:	e1 2c       	mov	r14, r1
     b74:	b1 2c       	mov	r11, r1
     b76:	c1 2c       	mov	r12, r1
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     b78:	c6 e3       	ldi	r28, 0x36	; 54
     b7a:	d1 e0       	ldi	r29, 0x01	; 1
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
     b7c:	71 2c       	mov	r7, r1
     b7e:	81 2c       	mov	r8, r1
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
     b80:	99 24       	eor	r9, r9
     b82:	93 94       	inc	r9
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
     b84:	d1 2c       	mov	r13, r1
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
     b86:	a9 2c       	mov	r10, r9
     b88:	03 c0       	rjmp	.+6      	; 0xb90 <main+0xd0>
     b8a:	c1 2e       	mov	r12, r17
     b8c:	01 c0       	rjmp	.+2      	; 0xb90 <main+0xd0>
     b8e:	b1 2e       	mov	r11, r17
	// main while loop is started from here **********************************************************************************
	//************************************************************************************************************************	
    while(1)  //while loop 1
    {

		sensor_data_hold = sensor_data();  //normally read
     b90:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     b94:	18 2f       	mov	r17, r24
		
		follow_line(sensor_data_hold,speed_2);
     b96:	64 ef       	ldi	r22, 0xF4	; 244
     b98:	71 e0       	ldi	r23, 0x01	; 1
     b9a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <follow_line>
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
     b9e:	81 2f       	mov	r24, r17
     ba0:	80 7f       	andi	r24, 0xF0	; 240
     ba2:	80 3f       	cpi	r24, 0xF0	; 240
     ba4:	09 f0       	breq	.+2      	; 0xba8 <main+0xe8>
     ba6:	53 c0       	rjmp	.+166    	; 0xc4e <main+0x18e>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     ba8:	d9 bd       	out	0x29, r29	; 41
     baa:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     bac:	db bd       	out	0x2b, r29	; 43
     bae:	ca bd       	out	0x2a, r28	; 42
		follow_line(sensor_data_hold,speed_2);
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
     bb0:	47 2c       	mov	r4, r7
     bb2:	58 2c       	mov	r5, r8
     bb4:	16 c0       	rjmp	.+44     	; 0xbe2 <main+0x122>
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
     bb6:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     bba:	18 2f       	mov	r17, r24
				if (sensor_data_hold & (1<<1))
     bbc:	81 fd       	sbrc	r24, 1
				{
					Right_trigged = 1;
     bbe:	ca 2c       	mov	r12, r10
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
     bc0:	81 2f       	mov	r24, r17
     bc2:	8e 77       	andi	r24, 0x7E	; 126
     bc4:	8e 37       	cpi	r24, 0x7E	; 126
     bc6:	69 f4       	brne	.+26     	; 0xbe2 <main+0x122>
				{
					destination = destination + 1;
     bc8:	2f ef       	ldi	r18, 0xFF	; 255
     bca:	42 1a       	sub	r4, r18
     bcc:	52 0a       	sbc	r5, r18
					if (destination > 7000)   // destination triggering
     bce:	89 e5       	ldi	r24, 0x59	; 89
     bd0:	48 16       	cp	r4, r24
     bd2:	8b e1       	ldi	r24, 0x1B	; 27
     bd4:	58 06       	cpc	r5, r24
     bd6:	28 f0       	brcs	.+10     	; 0xbe2 <main+0x122>
					{
						destination = 0x00;
						destination_operation(speed);
     bd8:	86 e3       	ldi	r24, 0x36	; 54
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	0e 94 ff 04 	call	0x9fe	; 0x9fe <destination_operation>
						//while (PINA & (1<<PA0));
						goto solv_maze;
     be0:	9a c0       	rjmp	.+308    	; 0xd16 <main+0x256>
     be2:	81 2f       	mov	r24, r17
     be4:	82 74       	andi	r24, 0x42	; 66
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
     be6:	39 f7       	brne	.-50     	; 0xbb6 <main+0xf6>
     be8:	1c 2d       	mov	r17, r12
     bea:	9f ef       	ldi	r25, 0xFF	; 255
     bec:	20 e7       	ldi	r18, 0x70	; 112
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	91 50       	subi	r25, 0x01	; 1
     bf2:	20 40       	sbci	r18, 0x00	; 0
     bf4:	80 40       	sbci	r24, 0x00	; 0
     bf6:	e1 f7       	brne	.-8      	; 0xbf0 <main+0x130>
     bf8:	00 c0       	rjmp	.+0      	; 0xbfa <main+0x13a>
     bfa:	00 00       	nop
					}
				}
				
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
     bfc:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
     c00:	8e 77       	andi	r24, 0x7E	; 126
     c02:	09 f0       	breq	.+2      	; 0xc06 <main+0x146>
     c04:	36 c1       	rjmp	.+620    	; 0xe72 <main+0x3b2>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     c06:	c1 10       	cpse	r12, r1
     c08:	0f c0       	rjmp	.+30     	; 0xc28 <main+0x168>
     c0a:	e1 10       	cpse	r14, r1
     c0c:	04 c0       	rjmp	.+8      	; 0xc16 <main+0x156>
			{
				left_operation(speed);
     c0e:	ce 01       	movw	r24, r28
     c10:	0e 94 84 04 	call	0x908	; 0x908 <left_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
     c14:	bd cf       	rjmp	.-134    	; 0xb90 <main+0xd0>
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	e9 12       	cpse	r14, r25
     c1a:	ba cf       	rjmp	.-140    	; 0xb90 <main+0xd0>
			{
				left_forward_operation(speed);
     c1c:	ce 01       	movw	r24, r28
     c1e:	0e 94 a6 04 	call	0x94c	; 0x94c <left_forward_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
     c22:	ed 2c       	mov	r14, r13
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
			{
				left_forward_operation(speed);
				Right_trigged = 0;
     c24:	cd 2c       	mov	r12, r13
				Forward_trigged = 0;
     c26:	b4 cf       	rjmp	.-152    	; 0xb90 <main+0xd0>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     c28:	11 30       	cpi	r17, 0x01	; 1
     c2a:	09 f0       	breq	.+2      	; 0xc2e <main+0x16e>
     c2c:	b1 cf       	rjmp	.-158    	; 0xb90 <main+0xd0>
     c2e:	e1 10       	cpse	r14, r1
     c30:	05 c0       	rjmp	.+10     	; 0xc3c <main+0x17c>
			{
				left_right_operation(speed);
     c32:	ce 01       	movw	r24, r28
     c34:	0e 94 cc 04 	call	0x998	; 0x998 <left_right_operation>
				Right_trigged = 0;
     c38:	cd 2c       	mov	r12, r13
				Forward_trigged = 0;
     c3a:	aa cf       	rjmp	.-172    	; 0xb90 <main+0xd0>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
     c3c:	21 e0       	ldi	r18, 0x01	; 1
     c3e:	e2 12       	cpse	r14, r18
     c40:	a4 cf       	rjmp	.-184    	; 0xb8a <main+0xca>
			{
				left_right_forward_operation(speed);
     c42:	ce 01       	movw	r24, r28
     c44:	0e 94 dd 04 	call	0x9ba	; 0x9ba <left_right_forward_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
     c48:	ed 2c       	mov	r14, r13
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Right_trigged = 0;
     c4a:	cd 2c       	mov	r12, r13
     c4c:	a1 cf       	rjmp	.-190    	; 0xb90 <main+0xd0>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
     c4e:	81 2f       	mov	r24, r17
     c50:	8f 70       	andi	r24, 0x0F	; 15
     c52:	8f 30       	cpi	r24, 0x0F	; 15
     c54:	09 f0       	breq	.+2      	; 0xc58 <main+0x198>
     c56:	53 c0       	rjmp	.+166    	; 0xcfe <main+0x23e>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     c58:	d9 bd       	out	0x29, r29	; 41
     c5a:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     c5c:	db bd       	out	0x2b, r29	; 43
     c5e:	ca bd       	out	0x2a, r28	; 42
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
     c60:	47 2c       	mov	r4, r7
     c62:	58 2c       	mov	r5, r8
     c64:	16 c0       	rjmp	.+44     	; 0xc92 <main+0x1d2>
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
     c66:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     c6a:	18 2f       	mov	r17, r24
				if (sensor_data_hold & (1<<6))  // must change for 8 system
     c6c:	86 fd       	sbrc	r24, 6
				{
					Left_trigged=1;
     c6e:	ba 2c       	mov	r11, r10
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
     c70:	81 2f       	mov	r24, r17
     c72:	8e 77       	andi	r24, 0x7E	; 126
     c74:	8e 37       	cpi	r24, 0x7E	; 126
     c76:	69 f4       	brne	.+26     	; 0xc92 <main+0x1d2>
				{
					destination = destination + 1;
     c78:	8f ef       	ldi	r24, 0xFF	; 255
     c7a:	48 1a       	sub	r4, r24
     c7c:	58 0a       	sbc	r5, r24
					if (destination > 7000)   // destination triggering
     c7e:	99 e5       	ldi	r25, 0x59	; 89
     c80:	49 16       	cp	r4, r25
     c82:	9b e1       	ldi	r25, 0x1B	; 27
     c84:	59 06       	cpc	r5, r25
     c86:	28 f0       	brcs	.+10     	; 0xc92 <main+0x1d2>
					{
						destination = 0x00;
						destination_operation(speed);
     c88:	86 e3       	ldi	r24, 0x36	; 54
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <destination_operation>
						//while (PINA & (1<<PA0));
						goto solv_maze;
     c90:	42 c0       	rjmp	.+132    	; 0xd16 <main+0x256>
     c92:	81 2f       	mov	r24, r17
     c94:	82 74       	andi	r24, 0x42	; 66
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
     c96:	39 f7       	brne	.-50     	; 0xc66 <main+0x1a6>
     c98:	1b 2d       	mov	r17, r11
     c9a:	2f ef       	ldi	r18, 0xFF	; 255
     c9c:	80 e7       	ldi	r24, 0x70	; 112
     c9e:	92 e0       	ldi	r25, 0x02	; 2
     ca0:	21 50       	subi	r18, 0x01	; 1
     ca2:	80 40       	sbci	r24, 0x00	; 0
     ca4:	90 40       	sbci	r25, 0x00	; 0
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <main+0x1e0>
     ca8:	00 c0       	rjmp	.+0      	; 0xcaa <main+0x1ea>
     caa:	00 00       	nop
						//goto start_test_operation;
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
     cac:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
     cb0:	8e 77       	andi	r24, 0x7E	; 126
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <main+0x1f6>
     cb4:	e2 c0       	rjmp	.+452    	; 0xe7a <main+0x3ba>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     cb6:	b1 10       	cpse	r11, r1
     cb8:	0f c0       	rjmp	.+30     	; 0xcd8 <main+0x218>
     cba:	e1 10       	cpse	r14, r1
     cbc:	04 c0       	rjmp	.+8      	; 0xcc6 <main+0x206>
			{
				right_operation(speed);
     cbe:	ce 01       	movw	r24, r28
     cc0:	0e 94 95 04 	call	0x92a	; 0x92a <right_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
     cc4:	65 cf       	rjmp	.-310    	; 0xb90 <main+0xd0>
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
     cc6:	21 e0       	ldi	r18, 0x01	; 1
     cc8:	e2 12       	cpse	r14, r18
     cca:	62 cf       	rjmp	.-316    	; 0xb90 <main+0xd0>
			{
				right_forward_operation(speed);
     ccc:	ce 01       	movw	r24, r28
     cce:	0e 94 b7 04 	call	0x96e	; 0x96e <right_forward_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
     cd2:	ed 2c       	mov	r14, r13
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
			{
				right_forward_operation(speed);
				Left_trigged = 0;
     cd4:	bd 2c       	mov	r11, r13
				Forward_trigged = 0;
     cd6:	5c cf       	rjmp	.-328    	; 0xb90 <main+0xd0>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     cd8:	11 30       	cpi	r17, 0x01	; 1
     cda:	09 f0       	breq	.+2      	; 0xcde <main+0x21e>
     cdc:	59 cf       	rjmp	.-334    	; 0xb90 <main+0xd0>
     cde:	e1 10       	cpse	r14, r1
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <main+0x22c>
			{
				left_right_operation(speed);
     ce2:	ce 01       	movw	r24, r28
     ce4:	0e 94 cc 04 	call	0x998	; 0x998 <left_right_operation>
				Left_trigged = 0;
     ce8:	bd 2c       	mov	r11, r13
				Forward_trigged = 0;
     cea:	52 cf       	rjmp	.-348    	; 0xb90 <main+0xd0>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	e8 12       	cpse	r14, r24
     cf0:	4e cf       	rjmp	.-356    	; 0xb8e <main+0xce>
			{
				left_right_forward_operation(speed);
     cf2:	ce 01       	movw	r24, r28
     cf4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <left_right_forward_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
     cf8:	ed 2c       	mov	r14, r13
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Left_trigged = 0;
     cfa:	bd 2c       	mov	r11, r13
     cfc:	49 cf       	rjmp	.-366    	; 0xb90 <main+0xd0>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
     cfe:	81 2f       	mov	r24, r17
     d00:	8e 77       	andi	r24, 0x7E	; 126
     d02:	09 f0       	breq	.+2      	; 0xd06 <main+0x246>
     d04:	45 cf       	rjmp	.-374    	; 0xb90 <main+0xd0>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     d06:	d9 bd       	out	0x29, r29	; 41
     d08:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     d0a:	db bd       	out	0x2b, r29	; 43
     d0c:	ca bd       	out	0x2a, r28	; 42
			}
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
		{
			set_speed_RL(speed);
			reverse_operation(speed);
     d0e:	ce 01       	movw	r24, r28
     d10:	0e 94 ee 04 	call	0x9dc	; 0x9dc <reverse_operation>
     d14:	3d cf       	rjmp	.-390    	; 0xb90 <main+0xd0>
//********* Solving the maze from here *********************************************************************
//**********************************************************************************************************

solv_maze:

	node_number = 0x00;
     d16:	10 92 17 01 	sts	0x0117, r1
     d1a:	10 92 16 01 	sts	0x0116, r1
			evaluate_direction(1,speed);
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
     d1e:	f1 2c       	mov	r15, r1
     d20:	00 e0       	ldi	r16, 0x00	; 0

	node_number = 0x00;
	
	while(1)
	{
		sensor_data_hold = sensor_data();  //normally read
     d22:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     d26:	18 2f       	mov	r17, r24
		
		follow_line(sensor_data_hold,speed);
     d28:	66 e3       	ldi	r22, 0x36	; 54
     d2a:	71 e0       	ldi	r23, 0x01	; 1
     d2c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <follow_line>
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
     d30:	81 2f       	mov	r24, r17
     d32:	80 7f       	andi	r24, 0xF0	; 240
     d34:	80 3f       	cpi	r24, 0xF0	; 240
     d36:	09 f0       	breq	.+2      	; 0xd3a <main+0x27a>
     d38:	44 c0       	rjmp	.+136    	; 0xdc2 <main+0x302>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     d3a:	26 e3       	ldi	r18, 0x36	; 54
     d3c:	31 e0       	ldi	r19, 0x01	; 1
     d3e:	39 bd       	out	0x29, r19	; 41
     d40:	28 bd       	out	0x28, r18	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     d42:	3b bd       	out	0x2b, r19	; 43
     d44:	2a bd       	out	0x2a, r18	; 42
		follow_line(sensor_data_hold,speed);
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
     d46:	cf 2d       	mov	r28, r15
     d48:	d0 2f       	mov	r29, r16
     d4a:	2a c0       	rjmp	.+84     	; 0xda0 <main+0x2e0>
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
     d4c:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     d50:	18 2f       	mov	r17, r24
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
     d52:	8e 77       	andi	r24, 0x7E	; 126
     d54:	8e 37       	cpi	r24, 0x7E	; 126
     d56:	21 f5       	brne	.+72     	; 0xda0 <main+0x2e0>
				{
					destination = destination + 1;
     d58:	21 96       	adiw	r28, 0x01	; 1
					if (destination > 7000)   // destination triggering
     d5a:	c9 35       	cpi	r28, 0x59	; 89
     d5c:	8b e1       	ldi	r24, 0x1B	; 27
     d5e:	d8 07       	cpc	r29, r24
     d60:	f8 f0       	brcs	.+62     	; 0xda0 <main+0x2e0>
					{
						destination = 0x00;
						stay_stop();
     d62:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     d66:	9f e7       	ldi	r25, 0x7F	; 127
     d68:	28 e3       	ldi	r18, 0x38	; 56
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	91 50       	subi	r25, 0x01	; 1
     d6e:	20 40       	sbci	r18, 0x00	; 0
     d70:	80 40       	sbci	r24, 0x00	; 0
     d72:	e1 f7       	brne	.-8      	; 0xd6c <main+0x2ac>
     d74:	00 c0       	rjmp	.+0      	; 0xd76 <main+0x2b6>
     d76:	00 00       	nop
						_delay_ms(50);
						go_backward();
     d78:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     d7c:	8e ef       	ldi	r24, 0xFE	; 254
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	99 bd       	out	0x29, r25	; 41
     d82:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     d84:	9b bd       	out	0x2b, r25	; 43
     d86:	8a bd       	out	0x2a, r24	; 42
     d88:	9f e7       	ldi	r25, 0x7F	; 127
     d8a:	28 e3       	ldi	r18, 0x38	; 56
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	91 50       	subi	r25, 0x01	; 1
     d90:	20 40       	sbci	r18, 0x00	; 0
     d92:	80 40       	sbci	r24, 0x00	; 0
     d94:	e1 f7       	brne	.-8      	; 0xd8e <main+0x2ce>
     d96:	00 c0       	rjmp	.+0      	; 0xd98 <main+0x2d8>
     d98:	00 00       	nop
						stay_stop();
						_delay_ms(50);
						go_backward();
						set_speed_RL(speed+200);
						_delay_ms(50);
						stay_stop();
     d9a:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     d9e:	ff cf       	rjmp	.-2      	; 0xd9e <main+0x2de>
     da0:	12 74       	andi	r17, 0x42	; 66
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
     da2:	a1 f6       	brne	.-88     	; 0xd4c <main+0x28c>
     da4:	9f ef       	ldi	r25, 0xFF	; 255
     da6:	20 e7       	ldi	r18, 0x70	; 112
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	91 50       	subi	r25, 0x01	; 1
     dac:	20 40       	sbci	r18, 0x00	; 0
     dae:	80 40       	sbci	r24, 0x00	; 0
     db0:	e1 f7       	brne	.-8      	; 0xdaa <main+0x2ea>
     db2:	00 c0       	rjmp	.+0      	; 0xdb4 <main+0x2f4>
     db4:	00 00       	nop
						while(1);
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			evaluate_direction(1,speed);
     db6:	66 e3       	ldi	r22, 0x36	; 54
     db8:	71 e0       	ldi	r23, 0x01	; 1
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	0e 94 09 05 	call	0xa12	; 0xa12 <evaluate_direction>
     dc0:	b0 cf       	rjmp	.-160    	; 0xd22 <main+0x262>
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
     dc2:	81 2f       	mov	r24, r17
     dc4:	8f 70       	andi	r24, 0x0F	; 15
     dc6:	8f 30       	cpi	r24, 0x0F	; 15
     dc8:	09 f0       	breq	.+2      	; 0xdcc <main+0x30c>
     dca:	44 c0       	rjmp	.+136    	; 0xe54 <main+0x394>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     dcc:	26 e3       	ldi	r18, 0x36	; 54
     dce:	31 e0       	ldi	r19, 0x01	; 1
     dd0:	39 bd       	out	0x29, r19	; 41
     dd2:	28 bd       	out	0x28, r18	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     dd4:	3b bd       	out	0x2b, r19	; 43
     dd6:	2a bd       	out	0x2a, r18	; 42
			evaluate_direction(1,speed);
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
     dd8:	cf 2d       	mov	r28, r15
     dda:	d0 2f       	mov	r29, r16
     ddc:	2a c0       	rjmp	.+84     	; 0xe32 <main+0x372>
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
     dde:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     de2:	18 2f       	mov	r17, r24
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
     de4:	8e 77       	andi	r24, 0x7E	; 126
     de6:	8e 37       	cpi	r24, 0x7E	; 126
     de8:	21 f5       	brne	.+72     	; 0xe32 <main+0x372>
				{
					destination = destination + 1;
     dea:	21 96       	adiw	r28, 0x01	; 1
					if (destination > 7000)   // destination triggering
     dec:	c9 35       	cpi	r28, 0x59	; 89
     dee:	8b e1       	ldi	r24, 0x1B	; 27
     df0:	d8 07       	cpc	r29, r24
     df2:	f8 f0       	brcs	.+62     	; 0xe32 <main+0x372>
					{
						destination = 0x00;
						stay_stop();
     df4:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     df8:	9f e7       	ldi	r25, 0x7F	; 127
     dfa:	28 e3       	ldi	r18, 0x38	; 56
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	91 50       	subi	r25, 0x01	; 1
     e00:	20 40       	sbci	r18, 0x00	; 0
     e02:	80 40       	sbci	r24, 0x00	; 0
     e04:	e1 f7       	brne	.-8      	; 0xdfe <main+0x33e>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <main+0x348>
     e08:	00 00       	nop
						_delay_ms(50);
						go_backward();
     e0a:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     e0e:	8e ef       	ldi	r24, 0xFE	; 254
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	99 bd       	out	0x29, r25	; 41
     e14:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     e16:	9b bd       	out	0x2b, r25	; 43
     e18:	8a bd       	out	0x2a, r24	; 42
     e1a:	9f e7       	ldi	r25, 0x7F	; 127
     e1c:	28 e3       	ldi	r18, 0x38	; 56
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	91 50       	subi	r25, 0x01	; 1
     e22:	20 40       	sbci	r18, 0x00	; 0
     e24:	80 40       	sbci	r24, 0x00	; 0
     e26:	e1 f7       	brne	.-8      	; 0xe20 <main+0x360>
     e28:	00 c0       	rjmp	.+0      	; 0xe2a <main+0x36a>
     e2a:	00 00       	nop
						stay_stop();
						_delay_ms(50);
						go_backward();
						set_speed_RL(speed+200);
						_delay_ms(50);
						stay_stop();
     e2c:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     e30:	ff cf       	rjmp	.-2      	; 0xe30 <main+0x370>
     e32:	12 74       	andi	r17, 0x42	; 66
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
     e34:	a1 f6       	brne	.-88     	; 0xdde <main+0x31e>
     e36:	9f ef       	ldi	r25, 0xFF	; 255
     e38:	20 e7       	ldi	r18, 0x70	; 112
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	91 50       	subi	r25, 0x01	; 1
     e3e:	20 40       	sbci	r18, 0x00	; 0
     e40:	80 40       	sbci	r24, 0x00	; 0
     e42:	e1 f7       	brne	.-8      	; 0xe3c <main+0x37c>
     e44:	00 c0       	rjmp	.+0      	; 0xe46 <main+0x386>
     e46:	00 00       	nop
						while(1);
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			evaluate_direction(2,speed);
     e48:	66 e3       	ldi	r22, 0x36	; 54
     e4a:	71 e0       	ldi	r23, 0x01	; 1
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	0e 94 09 05 	call	0xa12	; 0xa12 <evaluate_direction>
     e52:	67 cf       	rjmp	.-306    	; 0xd22 <main+0x262>
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
     e54:	1e 77       	andi	r17, 0x7E	; 126
     e56:	09 f0       	breq	.+2      	; 0xe5a <main+0x39a>
     e58:	64 cf       	rjmp	.-312    	; 0xd22 <main+0x262>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     e5a:	86 e3       	ldi	r24, 0x36	; 54
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	99 bd       	out	0x29, r25	; 41
     e60:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     e62:	9b bd       	out	0x2b, r25	; 43
     e64:	8a bd       	out	0x2a, r24	; 42
			evaluate_direction(2,speed);
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
		{
			set_speed_RL(speed);
			evaluate_direction(7,speed);
     e66:	66 e3       	ldi	r22, 0x36	; 54
     e68:	71 e0       	ldi	r23, 0x01	; 1
     e6a:	87 e0       	ldi	r24, 0x07	; 7
     e6c:	0e 94 09 05 	call	0xa12	; 0xa12 <evaluate_direction>
     e70:	58 cf       	rjmp	.-336    	; 0xd22 <main+0x262>
			{
				left_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
     e72:	cc 20       	and	r12, r12
     e74:	09 f4       	brne	.+2      	; 0xe78 <main+0x3b8>
     e76:	d2 ce       	rjmp	.-604    	; 0xc1c <main+0x15c>
     e78:	04 c0       	rjmp	.+8      	; 0xe82 <main+0x3c2>
			{
				right_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
     e7a:	bb 20       	and	r11, r11
     e7c:	09 f4       	brne	.+2      	; 0xe80 <main+0x3c0>
     e7e:	26 cf       	rjmp	.-436    	; 0xccc <main+0x20c>
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <main+0x3cc>
			{
				left_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     e82:	11 30       	cpi	r17, 0x01	; 1
     e84:	09 f4       	brne	.+2      	; 0xe88 <main+0x3c8>
     e86:	dd ce       	rjmp	.-582    	; 0xc42 <main+0x182>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
     e88:	e9 2c       	mov	r14, r9
     e8a:	82 ce       	rjmp	.-764    	; 0xb90 <main+0xd0>
			{
				right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     e8c:	11 30       	cpi	r17, 0x01	; 1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <main+0x3d2>
     e90:	30 cf       	rjmp	.-416    	; 0xcf2 <main+0x232>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
     e92:	e9 2c       	mov	r14, r9
     e94:	7d ce       	rjmp	.-774    	; 0xb90 <main+0xd0>

00000e96 <__floatunsisf>:
     e96:	e8 94       	clt
     e98:	09 c0       	rjmp	.+18     	; 0xeac <__floatsisf+0x12>

00000e9a <__floatsisf>:
     e9a:	97 fb       	bst	r25, 7
     e9c:	3e f4       	brtc	.+14     	; 0xeac <__floatsisf+0x12>
     e9e:	90 95       	com	r25
     ea0:	80 95       	com	r24
     ea2:	70 95       	com	r23
     ea4:	61 95       	neg	r22
     ea6:	7f 4f       	sbci	r23, 0xFF	; 255
     ea8:	8f 4f       	sbci	r24, 0xFF	; 255
     eaa:	9f 4f       	sbci	r25, 0xFF	; 255
     eac:	99 23       	and	r25, r25
     eae:	a9 f0       	breq	.+42     	; 0xeda <__floatsisf+0x40>
     eb0:	f9 2f       	mov	r31, r25
     eb2:	96 e9       	ldi	r25, 0x96	; 150
     eb4:	bb 27       	eor	r27, r27
     eb6:	93 95       	inc	r25
     eb8:	f6 95       	lsr	r31
     eba:	87 95       	ror	r24
     ebc:	77 95       	ror	r23
     ebe:	67 95       	ror	r22
     ec0:	b7 95       	ror	r27
     ec2:	f1 11       	cpse	r31, r1
     ec4:	f8 cf       	rjmp	.-16     	; 0xeb6 <__floatsisf+0x1c>
     ec6:	fa f4       	brpl	.+62     	; 0xf06 <__floatsisf+0x6c>
     ec8:	bb 0f       	add	r27, r27
     eca:	11 f4       	brne	.+4      	; 0xed0 <__floatsisf+0x36>
     ecc:	60 ff       	sbrs	r22, 0
     ece:	1b c0       	rjmp	.+54     	; 0xf06 <__floatsisf+0x6c>
     ed0:	6f 5f       	subi	r22, 0xFF	; 255
     ed2:	7f 4f       	sbci	r23, 0xFF	; 255
     ed4:	8f 4f       	sbci	r24, 0xFF	; 255
     ed6:	9f 4f       	sbci	r25, 0xFF	; 255
     ed8:	16 c0       	rjmp	.+44     	; 0xf06 <__floatsisf+0x6c>
     eda:	88 23       	and	r24, r24
     edc:	11 f0       	breq	.+4      	; 0xee2 <__floatsisf+0x48>
     ede:	96 e9       	ldi	r25, 0x96	; 150
     ee0:	11 c0       	rjmp	.+34     	; 0xf04 <__floatsisf+0x6a>
     ee2:	77 23       	and	r23, r23
     ee4:	21 f0       	breq	.+8      	; 0xeee <__floatsisf+0x54>
     ee6:	9e e8       	ldi	r25, 0x8E	; 142
     ee8:	87 2f       	mov	r24, r23
     eea:	76 2f       	mov	r23, r22
     eec:	05 c0       	rjmp	.+10     	; 0xef8 <__floatsisf+0x5e>
     eee:	66 23       	and	r22, r22
     ef0:	71 f0       	breq	.+28     	; 0xf0e <__floatsisf+0x74>
     ef2:	96 e8       	ldi	r25, 0x86	; 134
     ef4:	86 2f       	mov	r24, r22
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	2a f0       	brmi	.+10     	; 0xf06 <__floatsisf+0x6c>
     efc:	9a 95       	dec	r25
     efe:	66 0f       	add	r22, r22
     f00:	77 1f       	adc	r23, r23
     f02:	88 1f       	adc	r24, r24
     f04:	da f7       	brpl	.-10     	; 0xefc <__floatsisf+0x62>
     f06:	88 0f       	add	r24, r24
     f08:	96 95       	lsr	r25
     f0a:	87 95       	ror	r24
     f0c:	97 f9       	bld	r25, 7
     f0e:	08 95       	ret

00000f10 <lrint>:
     f10:	41 d0       	rcall	.+130    	; 0xf94 <__fp_splitA>
     f12:	a8 f1       	brcs	.+106    	; 0xf7e <lrint+0x6e>
     f14:	9e 57       	subi	r25, 0x7E	; 126
     f16:	a8 f1       	brcs	.+106    	; 0xf82 <lrint+0x72>
     f18:	98 51       	subi	r25, 0x18	; 24
     f1a:	60 f0       	brcs	.+24     	; 0xf34 <lrint+0x24>
     f1c:	39 f1       	breq	.+78     	; 0xf6c <lrint+0x5c>
     f1e:	98 30       	cpi	r25, 0x08	; 8
     f20:	70 f5       	brcc	.+92     	; 0xf7e <lrint+0x6e>
     f22:	09 2e       	mov	r0, r25
     f24:	99 27       	eor	r25, r25
     f26:	66 0f       	add	r22, r22
     f28:	77 1f       	adc	r23, r23
     f2a:	88 1f       	adc	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	d1 f7       	brne	.-12     	; 0xf26 <lrint+0x16>
     f32:	1c c0       	rjmp	.+56     	; 0xf6c <lrint+0x5c>
     f34:	bb 27       	eor	r27, r27
     f36:	99 3f       	cpi	r25, 0xF9	; 249
     f38:	4c f4       	brge	.+18     	; 0xf4c <lrint+0x3c>
     f3a:	b1 11       	cpse	r27, r1
     f3c:	b1 e0       	ldi	r27, 0x01	; 1
     f3e:	b6 2b       	or	r27, r22
     f40:	67 2f       	mov	r22, r23
     f42:	78 2f       	mov	r23, r24
     f44:	88 27       	eor	r24, r24
     f46:	98 5f       	subi	r25, 0xF8	; 248
     f48:	b1 f7       	brne	.-20     	; 0xf36 <lrint+0x26>
     f4a:	08 c0       	rjmp	.+16     	; 0xf5c <lrint+0x4c>
     f4c:	86 95       	lsr	r24
     f4e:	77 95       	ror	r23
     f50:	67 95       	ror	r22
     f52:	b7 95       	ror	r27
     f54:	08 f4       	brcc	.+2      	; 0xf58 <lrint+0x48>
     f56:	b1 60       	ori	r27, 0x01	; 1
     f58:	93 95       	inc	r25
     f5a:	c1 f7       	brne	.-16     	; 0xf4c <lrint+0x3c>
     f5c:	bb 0f       	add	r27, r27
     f5e:	30 f4       	brcc	.+12     	; 0xf6c <lrint+0x5c>
     f60:	11 f4       	brne	.+4      	; 0xf66 <lrint+0x56>
     f62:	60 ff       	sbrs	r22, 0
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <lrint+0x5c>
     f66:	6f 5f       	subi	r22, 0xFF	; 255
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	8f 4f       	sbci	r24, 0xFF	; 255
     f6c:	3e f4       	brtc	.+14     	; 0xf7c <lrint+0x6c>
     f6e:	90 95       	com	r25
     f70:	80 95       	com	r24
     f72:	70 95       	com	r23
     f74:	61 95       	neg	r22
     f76:	7f 4f       	sbci	r23, 0xFF	; 255
     f78:	8f 4f       	sbci	r24, 0xFF	; 255
     f7a:	9f 4f       	sbci	r25, 0xFF	; 255
     f7c:	08 95       	ret
     f7e:	68 94       	set
     f80:	24 c0       	rjmp	.+72     	; 0xfca <__fp_szero>
     f82:	22 c0       	rjmp	.+68     	; 0xfc8 <__fp_zero>

00000f84 <__fp_split3>:
     f84:	57 fd       	sbrc	r21, 7
     f86:	90 58       	subi	r25, 0x80	; 128
     f88:	44 0f       	add	r20, r20
     f8a:	55 1f       	adc	r21, r21
     f8c:	59 f0       	breq	.+22     	; 0xfa4 <__fp_splitA+0x10>
     f8e:	5f 3f       	cpi	r21, 0xFF	; 255
     f90:	71 f0       	breq	.+28     	; 0xfae <__fp_splitA+0x1a>
     f92:	47 95       	ror	r20

00000f94 <__fp_splitA>:
     f94:	88 0f       	add	r24, r24
     f96:	97 fb       	bst	r25, 7
     f98:	99 1f       	adc	r25, r25
     f9a:	61 f0       	breq	.+24     	; 0xfb4 <__fp_splitA+0x20>
     f9c:	9f 3f       	cpi	r25, 0xFF	; 255
     f9e:	79 f0       	breq	.+30     	; 0xfbe <__fp_splitA+0x2a>
     fa0:	87 95       	ror	r24
     fa2:	08 95       	ret
     fa4:	12 16       	cp	r1, r18
     fa6:	13 06       	cpc	r1, r19
     fa8:	14 06       	cpc	r1, r20
     faa:	55 1f       	adc	r21, r21
     fac:	f2 cf       	rjmp	.-28     	; 0xf92 <__fp_split3+0xe>
     fae:	46 95       	lsr	r20
     fb0:	f1 df       	rcall	.-30     	; 0xf94 <__fp_splitA>
     fb2:	08 c0       	rjmp	.+16     	; 0xfc4 <__fp_splitA+0x30>
     fb4:	16 16       	cp	r1, r22
     fb6:	17 06       	cpc	r1, r23
     fb8:	18 06       	cpc	r1, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	f1 cf       	rjmp	.-30     	; 0xfa0 <__fp_splitA+0xc>
     fbe:	86 95       	lsr	r24
     fc0:	71 05       	cpc	r23, r1
     fc2:	61 05       	cpc	r22, r1
     fc4:	08 94       	sec
     fc6:	08 95       	ret

00000fc8 <__fp_zero>:
     fc8:	e8 94       	clt

00000fca <__fp_szero>:
     fca:	bb 27       	eor	r27, r27
     fcc:	66 27       	eor	r22, r22
     fce:	77 27       	eor	r23, r23
     fd0:	cb 01       	movw	r24, r22
     fd2:	97 f9       	bld	r25, 7
     fd4:	08 95       	ret

00000fd6 <__udivmodsi4>:
     fd6:	a1 e2       	ldi	r26, 0x21	; 33
     fd8:	1a 2e       	mov	r1, r26
     fda:	aa 1b       	sub	r26, r26
     fdc:	bb 1b       	sub	r27, r27
     fde:	fd 01       	movw	r30, r26
     fe0:	0d c0       	rjmp	.+26     	; 0xffc <__udivmodsi4_ep>

00000fe2 <__udivmodsi4_loop>:
     fe2:	aa 1f       	adc	r26, r26
     fe4:	bb 1f       	adc	r27, r27
     fe6:	ee 1f       	adc	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	a2 17       	cp	r26, r18
     fec:	b3 07       	cpc	r27, r19
     fee:	e4 07       	cpc	r30, r20
     ff0:	f5 07       	cpc	r31, r21
     ff2:	20 f0       	brcs	.+8      	; 0xffc <__udivmodsi4_ep>
     ff4:	a2 1b       	sub	r26, r18
     ff6:	b3 0b       	sbc	r27, r19
     ff8:	e4 0b       	sbc	r30, r20
     ffa:	f5 0b       	sbc	r31, r21

00000ffc <__udivmodsi4_ep>:
     ffc:	66 1f       	adc	r22, r22
     ffe:	77 1f       	adc	r23, r23
    1000:	88 1f       	adc	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	1a 94       	dec	r1
    1006:	69 f7       	brne	.-38     	; 0xfe2 <__udivmodsi4_loop>
    1008:	60 95       	com	r22
    100a:	70 95       	com	r23
    100c:	80 95       	com	r24
    100e:	90 95       	com	r25
    1010:	9b 01       	movw	r18, r22
    1012:	ac 01       	movw	r20, r24
    1014:	bd 01       	movw	r22, r26
    1016:	cf 01       	movw	r24, r30
    1018:	08 95       	ret

0000101a <strrev>:
    101a:	dc 01       	movw	r26, r24
    101c:	fc 01       	movw	r30, r24
    101e:	67 2f       	mov	r22, r23
    1020:	71 91       	ld	r23, Z+
    1022:	77 23       	and	r23, r23
    1024:	e1 f7       	brne	.-8      	; 0x101e <strrev+0x4>
    1026:	32 97       	sbiw	r30, 0x02	; 2
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <strrev+0x18>
    102a:	7c 91       	ld	r23, X
    102c:	6d 93       	st	X+, r22
    102e:	70 83       	st	Z, r23
    1030:	62 91       	ld	r22, -Z
    1032:	ae 17       	cp	r26, r30
    1034:	bf 07       	cpc	r27, r31
    1036:	c8 f3       	brcs	.-14     	; 0x102a <strrev+0x10>
    1038:	08 95       	ret

0000103a <_exit>:
    103a:	f8 94       	cli

0000103c <__stop_program>:
    103c:	ff cf       	rjmp	.-2      	; 0x103c <__stop_program>
