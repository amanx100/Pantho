
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000100a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  0000100a  0000109e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001f8  00800114  00800114  00001152  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001152  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00001182  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002803  00000000  00000000  0000129a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000367  00000000  00000000  00003a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008d8  00000000  00000000  00003e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d8  00000000  00000000  000046dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  000049b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b81  00000000  00000000  00004db2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00006933  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	a4 e1       	ldi	r26, 0x14	; 20
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 30       	cpi	r26, 0x0C	; 12
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 41 05 	call	0xa82	; 0xa82 <main>
      8a:	0c 94 03 08 	jmp	0x1006	; 0x1006 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <go_forward>:
#ifndef M_DIR_H_
#define M_DIR_H_

void go_forward(void)
{
	PORTB = 0x05;
      92:	85 e0       	ldi	r24, 0x05	; 5
      94:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
      96:	8e b5       	in	r24, 0x2e	; 46
      98:	82 60       	ori	r24, 0x02	; 2
      9a:	8e bd       	out	0x2e, r24	; 46
      9c:	08 95       	ret

0000009e <go_backward>:
}

void go_backward(void)
{
	PORTB = 0x0A;
      9e:	8a e0       	ldi	r24, 0x0A	; 10
      a0:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
      a2:	8e b5       	in	r24, 0x2e	; 46
      a4:	82 60       	ori	r24, 0x02	; 2
      a6:	8e bd       	out	0x2e, r24	; 46
      a8:	08 95       	ret

000000aa <right_rotate>:
}

void right_rotate(void)
{
	PORTB = 0x09;
      aa:	89 e0       	ldi	r24, 0x09	; 9
      ac:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
      ae:	8e b5       	in	r24, 0x2e	; 46
      b0:	82 60       	ori	r24, 0x02	; 2
      b2:	8e bd       	out	0x2e, r24	; 46
      b4:	08 95       	ret

000000b6 <left_rotate>:
}

void left_rotate(void)
{
	PORTB = 0x06;
      b6:	86 e0       	ldi	r24, 0x06	; 6
      b8:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
      ba:	8e b5       	in	r24, 0x2e	; 46
      bc:	82 60       	ori	r24, 0x02	; 2
      be:	8e bd       	out	0x2e, r24	; 46
      c0:	08 95       	ret

000000c2 <stay_stop>:
}

void stay_stop(void)
{
	PORTB = 0x00;
      c2:	18 ba       	out	0x18, r1	; 24
	TCCR1B &= ~(1<<1);
      c4:	8e b5       	in	r24, 0x2e	; 46
      c6:	8d 7f       	andi	r24, 0xFD	; 253
      c8:	8e bd       	out	0x2e, r24	; 46
      ca:	08 95       	ret

000000cc <usart_init>:
#include <string.h>

void usart_init(uint32_t baud)
{
	// Calculation for baud rate value into ubrr value
	uint16_t ubrr = lrint(( F_CPU / (16L * baud) ) - 1);
      cc:	dc 01       	movw	r26, r24
      ce:	cb 01       	movw	r24, r22
      d0:	88 0f       	add	r24, r24
      d2:	99 1f       	adc	r25, r25
      d4:	aa 1f       	adc	r26, r26
      d6:	bb 1f       	adc	r27, r27
      d8:	88 0f       	add	r24, r24
      da:	99 1f       	adc	r25, r25
      dc:	aa 1f       	adc	r26, r26
      de:	bb 1f       	adc	r27, r27
      e0:	9c 01       	movw	r18, r24
      e2:	ad 01       	movw	r20, r26
      e4:	22 0f       	add	r18, r18
      e6:	33 1f       	adc	r19, r19
      e8:	44 1f       	adc	r20, r20
      ea:	55 1f       	adc	r21, r21
      ec:	22 0f       	add	r18, r18
      ee:	33 1f       	adc	r19, r19
      f0:	44 1f       	adc	r20, r20
      f2:	55 1f       	adc	r21, r21
      f4:	60 e0       	ldi	r22, 0x00	; 0
      f6:	72 e1       	ldi	r23, 0x12	; 18
      f8:	8a e7       	ldi	r24, 0x7A	; 122
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__udivmodsi4>
     100:	ca 01       	movw	r24, r20
     102:	b9 01       	movw	r22, r18
     104:	61 50       	subi	r22, 0x01	; 1
     106:	71 09       	sbc	r23, r1
     108:	81 09       	sbc	r24, r1
     10a:	91 09       	sbc	r25, r1
     10c:	0e 94 31 07 	call	0xe62	; 0xe62 <__floatunsisf>
     110:	0e 94 6e 07 	call	0xedc	; 0xedc <lrint>
	// Set baud rate
	UBRRH = (uint8_t)(ubrr>>8);
     114:	27 2f       	mov	r18, r23
     116:	33 27       	eor	r19, r19
     118:	20 bd       	out	0x20, r18	; 32
	UBRRL = (uint8_t)ubrr;
     11a:	69 b9       	out	0x09, r22	; 9
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
     11c:	88 e1       	ldi	r24, 0x18	; 24
     11e:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 1stop bit
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
     120:	86 e8       	ldi	r24, 0x86	; 134
     122:	80 bd       	out	0x20, r24	; 32
     124:	08 95       	ret

00000126 <usart_putchar>:
}

void usart_putchar(char data)
{
	// Wait for empty transmit buffer
	while ( !(UCSRA & (_BV(UDRE))) );
     126:	5d 9b       	sbis	0x0b, 5	; 11
     128:	fe cf       	rjmp	.-4      	; 0x126 <usart_putchar>
	// Start transmission
	UDR = data;
     12a:	8c b9       	out	0x0c, r24	; 12
     12c:	08 95       	ret

0000012e <usart_putstr>:
	// Return the data
	return UDR;
}

void usart_putstr(char *s)
{
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	ec 01       	movw	r28, r24
	// loop through entire string
	while (*s != '\0') {
     134:	88 81       	ld	r24, Y
     136:	88 23       	and	r24, r24
     138:	31 f0       	breq	.+12     	; 0x146 <usart_putstr+0x18>
     13a:	21 96       	adiw	r28, 0x01	; 1
		usart_putchar(*s);
     13c:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
}

void usart_putstr(char *s)
{
	// loop through entire string
	while (*s != '\0') {
     140:	89 91       	ld	r24, Y+
     142:	81 11       	cpse	r24, r1
     144:	fb cf       	rjmp	.-10     	; 0x13c <usart_putstr+0xe>
		usart_putchar(*s);
		s++;
	}
}
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <__vector_11>:
//**********************************************************************************************************
//  Interrupt Sub rutine  **********************************************************************************
//**********************************************************************************************************

ISR(TIMER0_OVF_vect)
{
     14c:	1f 92       	push	r1
     14e:	0f 92       	push	r0
     150:	0f b6       	in	r0, 0x3f	; 63
     152:	0f 92       	push	r0
     154:	11 24       	eor	r1, r1
     156:	2f 93       	push	r18
     158:	8f 93       	push	r24
     15a:	9f 93       	push	r25
	if (Time_x2ms < 500)
     15c:	80 91 14 01 	lds	r24, 0x0114
     160:	90 91 15 01 	lds	r25, 0x0115
     164:	84 3f       	cpi	r24, 0xF4	; 244
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	92 07       	cpc	r25, r18
     16a:	28 f4       	brcc	.+10     	; 0x176 <__vector_11+0x2a>
	{
		Time_x2ms = Time_x2ms + 1;
     16c:	01 96       	adiw	r24, 0x01	; 1
     16e:	90 93 15 01 	sts	0x0115, r25
     172:	80 93 14 01 	sts	0x0114, r24
	}
}
     176:	9f 91       	pop	r25
     178:	8f 91       	pop	r24
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0f be       	out	0x3f, r0	; 63
     180:	0f 90       	pop	r0
     182:	1f 90       	pop	r1
     184:	18 95       	reti

00000186 <sensor_data>:

uint8_t sensor_data(void)
{
	char sensor_data_check;
sn_dt:
	if ((PIND & (1<<PD2)) && (PIND & (1<<PD3)))
     186:	82 9b       	sbis	0x10, 2	; 16
     188:	fe cf       	rjmp	.-4      	; 0x186 <sensor_data>
     18a:	83 9b       	sbis	0x10, 3	; 16
     18c:	fc cf       	rjmp	.-8      	; 0x186 <sensor_data>
	{
		sensor_data_check = PINC;
     18e:	83 b3       	in	r24, 0x13	; 19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     190:	90 e8       	ldi	r25, 0x80	; 128
     192:	9a 95       	dec	r25
     194:	f1 f7       	brne	.-4      	; 0x192 <sensor_data+0xc>
		_delay_us(48);
		if (sensor_data_check == PINC)
     196:	93 b3       	in	r25, 0x13	; 19
     198:	98 13       	cpse	r25, r24
     19a:	f5 cf       	rjmp	.-22     	; 0x186 <sensor_data>
		{
			if (PINA & (1<<PA1))
     19c:	c9 9b       	sbis	0x19, 1	; 25
     19e:	03 c0       	rjmp	.+6      	; 0x1a6 <sensor_data+0x20>
			{
				return (~PINC);
     1a0:	83 b3       	in	r24, 0x13	; 19
     1a2:	80 95       	com	r24
     1a4:	08 95       	ret
			}
			else
			{
				return (PINC);
     1a6:	83 b3       	in	r24, 0x13	; 19
			}
		}
		else goto sn_dt;
	}
	else goto sn_dt;
}
     1a8:	08 95       	ret

000001aa <follow_line>:


void follow_line(uint8_t sensor_data_hold, uint16_t speed)
{
	if ((sensor_data_hold & 0b00011000) == 0b00011000)
     1aa:	98 2f       	mov	r25, r24
     1ac:	98 71       	andi	r25, 0x18	; 24
     1ae:	98 31       	cpi	r25, 0x18	; 24
     1b0:	29 f4       	brne	.+10     	; 0x1bc <follow_line+0x12>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     1b2:	79 bd       	out	0x29, r23	; 41
     1b4:	68 bd       	out	0x28, r22	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     1b6:	7b bd       	out	0x2b, r23	; 43
     1b8:	6a bd       	out	0x2a, r22	; 42
     1ba:	08 95       	ret
{
	if ((sensor_data_hold & 0b00011000) == 0b00011000)
	{
		set_speed_RL(speed);
	}
	else if (sensor_data_hold & 0b00000010)
     1bc:	81 ff       	sbrs	r24, 1
     1be:	05 c0       	rjmp	.+10     	; 0x1ca <follow_line+0x20>
	{
		set_speed_R(speed - 200);  //previously 200
     1c0:	68 5c       	subi	r22, 0xC8	; 200
     1c2:	71 09       	sbc	r23, r1
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     1c4:	79 bd       	out	0x29, r23	; 41
     1c6:	68 bd       	out	0x28, r22	; 40
     1c8:	08 95       	ret
	}
	else if (sensor_data_hold & 0b00000010)
	{
		set_speed_R(speed - 200);  //previously 200
	}
	else if (sensor_data_hold & 0b01000000)
     1ca:	86 ff       	sbrs	r24, 6
     1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <follow_line+0x2e>
	{
		set_speed_L(speed - 200);  //previously 200
     1ce:	68 5c       	subi	r22, 0xC8	; 200
     1d0:	71 09       	sbc	r23, r1
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     1d2:	7b bd       	out	0x2b, r23	; 43
     1d4:	6a bd       	out	0x2a, r22	; 42
     1d6:	08 95       	ret
	}
	else if (sensor_data_hold & 0b01000000)
	{
		set_speed_L(speed - 200);  //previously 200
	}
	else if (sensor_data_hold & 0b00000100)
     1d8:	82 ff       	sbrs	r24, 2
     1da:	05 c0       	rjmp	.+10     	; 0x1e6 <follow_line+0x3c>
	{
		set_speed_R(speed - 140);  //previously 150
     1dc:	6c 58       	subi	r22, 0x8C	; 140
     1de:	71 09       	sbc	r23, r1
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     1e0:	79 bd       	out	0x29, r23	; 41
     1e2:	68 bd       	out	0x28, r22	; 40
     1e4:	08 95       	ret
	}
	else if (sensor_data_hold & 0b00000100)
	{
		set_speed_R(speed - 140);  //previously 150
	}
	else if (sensor_data_hold & 0b00100000)
     1e6:	85 ff       	sbrs	r24, 5
     1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <follow_line+0x4a>
	{
		set_speed_L(speed - 140);  //previously 150
     1ea:	6c 58       	subi	r22, 0x8C	; 140
     1ec:	71 09       	sbc	r23, r1
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     1ee:	7b bd       	out	0x2b, r23	; 43
     1f0:	6a bd       	out	0x2a, r22	; 42
     1f2:	08 95       	ret
	}
	else if (sensor_data_hold & 0b00100000)
	{
		set_speed_L(speed - 140);  //previously 150
	}
	else if (sensor_data_hold & 0b00001000)
     1f4:	83 ff       	sbrs	r24, 3
     1f6:	05 c0       	rjmp	.+10     	; 0x202 <follow_line+0x58>
	{
		set_speed_R(speed - 80);  //previously 100
     1f8:	60 55       	subi	r22, 0x50	; 80
     1fa:	71 09       	sbc	r23, r1
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     1fc:	79 bd       	out	0x29, r23	; 41
     1fe:	68 bd       	out	0x28, r22	; 40
     200:	08 95       	ret
	}
	else if (sensor_data_hold & 0b00001000)
	{
		set_speed_R(speed - 80);  //previously 100
	}
	else if (sensor_data_hold & 0b00010000)
     202:	84 ff       	sbrs	r24, 4
     204:	04 c0       	rjmp	.+8      	; 0x20e <follow_line+0x64>
	{
		set_speed_L(speed - 80);  //previously 100
     206:	60 55       	subi	r22, 0x50	; 80
     208:	71 09       	sbc	r23, r1
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     20a:	7b bd       	out	0x2b, r23	; 43
     20c:	6a bd       	out	0x2a, r22	; 42
     20e:	08 95       	ret

00000210 <process_array>:
		set_speed_L(speed - 80);  //previously 100
	}
}

void process_array(void)
{
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
	int i;
	strrev(directions_solved);
     214:	88 e1       	ldi	r24, 0x18	; 24
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <strrev>
	
	for (i=0;directions_solved[i];i++)
     21c:	80 91 18 01 	lds	r24, 0x0118
     220:	88 23       	and	r24, r24
     222:	89 f0       	breq	.+34     	; 0x246 <process_array+0x36>
     224:	a9 e1       	ldi	r26, 0x19	; 25
     226:	b1 e0       	ldi	r27, 0x01	; 1
     228:	e8 e1       	ldi	r30, 0x18	; 24
     22a:	f1 e0       	ldi	r31, 0x01	; 1
		{
			directions_solved[i] = 'r';
		}
		else if (directions_solved[i] == 'r')
		{
			directions_solved[i] = 'l';
     22c:	2c e6       	ldi	r18, 0x6C	; 108
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'l')
		{
			directions_solved[i] = 'r';
     22e:	92 e7       	ldi	r25, 0x72	; 114
	int i;
	strrev(directions_solved);
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'l')
     230:	8c 36       	cpi	r24, 0x6C	; 108
     232:	11 f4       	brne	.+4      	; 0x238 <process_array+0x28>
		{
			directions_solved[i] = 'r';
     234:	90 83       	st	Z, r25
     236:	03 c0       	rjmp	.+6      	; 0x23e <process_array+0x2e>
		}
		else if (directions_solved[i] == 'r')
     238:	82 37       	cpi	r24, 0x72	; 114
     23a:	09 f4       	brne	.+2      	; 0x23e <process_array+0x2e>
		{
			directions_solved[i] = 'l';
     23c:	20 83       	st	Z, r18
void process_array(void)
{
	int i;
	strrev(directions_solved);
	
	for (i=0;directions_solved[i];i++)
     23e:	8d 91       	ld	r24, X+
     240:	31 96       	adiw	r30, 0x01	; 1
     242:	81 11       	cpse	r24, r1
     244:	f5 cf       	rjmp	.-22     	; 0x230 <process_array+0x20>
		{
			directions_solved[i] = 'l';
		}
	}
	
	usart_putstr("\r\rReversed Data: ");
     246:	80 e6       	ldi	r24, 0x60	; 96
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	usart_putstr(directions_solved);
     24e:	88 e1       	ldi	r24, 0x18	; 24
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	
	for (i=0;directions_solved[i];i++)
     256:	20 91 18 01 	lds	r18, 0x0118
     25a:	22 23       	and	r18, r18
     25c:	09 f4       	brne	.+2      	; 0x260 <process_array+0x50>
     25e:	96 c0       	rjmp	.+300    	; 0x38c <process_array+0x17c>
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	90 e0       	ldi	r25, 0x00	; 0
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
			{
				directions_solved[i-1] = 's';
     264:	d3 e7       	ldi	r29, 0x73	; 115
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'r';
     266:	c2 e7       	ldi	r28, 0x72	; 114
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'u';
     268:	65 e7       	ldi	r22, 0x75	; 117
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
			{
				directions_solved[i-1] = 'l';
     26a:	7c e6       	ldi	r23, 0x6C	; 108
			{
				directions_solved[i] = directions_solved[i+2];
				i++;
			}
			directions_solved[i] = '\0';
			i=0;
     26c:	50 e0       	ldi	r21, 0x00	; 0
     26e:	40 e0       	ldi	r20, 0x00	; 0
	usart_putstr("\r\rReversed Data: ");
	usart_putstr(directions_solved);
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'u')
     270:	25 37       	cpi	r18, 0x75	; 117
     272:	09 f0       	breq	.+2      	; 0x276 <process_array+0x66>
     274:	84 c0       	rjmp	.+264    	; 0x37e <process_array+0x16e>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
     276:	9c 01       	movw	r18, r24
     278:	21 50       	subi	r18, 0x01	; 1
     27a:	31 09       	sbc	r19, r1
     27c:	f9 01       	movw	r30, r18
     27e:	e8 5e       	subi	r30, 0xE8	; 232
     280:	fe 4f       	sbci	r31, 0xFE	; 254
     282:	a0 81       	ld	r26, Z
     284:	a2 37       	cpi	r26, 0x72	; 114
     286:	89 f4       	brne	.+34     	; 0x2aa <process_array+0x9a>
     288:	fc 01       	movw	r30, r24
     28a:	e8 5e       	subi	r30, 0xE8	; 232
     28c:	fe 4f       	sbci	r31, 0xFE	; 254
     28e:	e1 81       	ldd	r30, Z+1	; 0x01
     290:	e3 37       	cpi	r30, 0x73	; 115
     292:	29 f5       	brne	.+74     	; 0x2de <process_array+0xce>
			{
				directions_solved[i-1] = 'l';
     294:	f9 01       	movw	r30, r18
     296:	e8 5e       	subi	r30, 0xE8	; 232
     298:	fe 4f       	sbci	r31, 0xFE	; 254
     29a:	70 83       	st	Z, r23
			{
				directions_solved[i-1] = 'u';
			}

			
			while (directions_solved[i+2])
     29c:	fc 01       	movw	r30, r24
     29e:	e8 5e       	subi	r30, 0xE8	; 232
     2a0:	fe 4f       	sbci	r31, 0xFE	; 254
     2a2:	22 81       	ldd	r18, Z+2	; 0x02
     2a4:	21 11       	cpse	r18, r1
     2a6:	5a c0       	rjmp	.+180    	; 0x35c <process_array+0x14c>
     2a8:	64 c0       	rjmp	.+200    	; 0x372 <process_array+0x162>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
     2aa:	a3 37       	cpi	r26, 0x73	; 115
     2ac:	59 f4       	brne	.+22     	; 0x2c4 <process_array+0xb4>
     2ae:	fc 01       	movw	r30, r24
     2b0:	e8 5e       	subi	r30, 0xE8	; 232
     2b2:	fe 4f       	sbci	r31, 0xFE	; 254
     2b4:	e1 81       	ldd	r30, Z+1	; 0x01
     2b6:	e2 37       	cpi	r30, 0x72	; 114
     2b8:	31 f5       	brne	.+76     	; 0x306 <process_array+0xf6>
			{
				directions_solved[i-1] = 'l';
     2ba:	f9 01       	movw	r30, r18
     2bc:	e8 5e       	subi	r30, 0xE8	; 232
     2be:	fe 4f       	sbci	r31, 0xFE	; 254
     2c0:	70 83       	st	Z, r23
     2c2:	ec cf       	rjmp	.-40     	; 0x29c <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'r')
     2c4:	ac 36       	cpi	r26, 0x6C	; 108
     2c6:	59 f4       	brne	.+22     	; 0x2de <process_array+0xce>
     2c8:	fc 01       	movw	r30, r24
     2ca:	e8 5e       	subi	r30, 0xE8	; 232
     2cc:	fe 4f       	sbci	r31, 0xFE	; 254
     2ce:	e1 81       	ldd	r30, Z+1	; 0x01
     2d0:	e2 37       	cpi	r30, 0x72	; 114
     2d2:	d9 f4       	brne	.+54     	; 0x30a <process_array+0xfa>
			{
				directions_solved[i-1] = 'u';
     2d4:	f9 01       	movw	r30, r18
     2d6:	e8 5e       	subi	r30, 0xE8	; 232
     2d8:	fe 4f       	sbci	r31, 0xFE	; 254
     2da:	60 83       	st	Z, r22
     2dc:	df cf       	rjmp	.-66     	; 0x29c <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'r')
     2de:	a2 37       	cpi	r26, 0x72	; 114
     2e0:	91 f4       	brne	.+36     	; 0x306 <process_array+0xf6>
     2e2:	fc 01       	movw	r30, r24
     2e4:	e8 5e       	subi	r30, 0xE8	; 232
     2e6:	fe 4f       	sbci	r31, 0xFE	; 254
     2e8:	e1 81       	ldd	r30, Z+1	; 0x01
     2ea:	e2 37       	cpi	r30, 0x72	; 114
     2ec:	29 f4       	brne	.+10     	; 0x2f8 <process_array+0xe8>
			{
				directions_solved[i-1] = 's';
     2ee:	f9 01       	movw	r30, r18
     2f0:	e8 5e       	subi	r30, 0xE8	; 232
     2f2:	fe 4f       	sbci	r31, 0xFE	; 254
     2f4:	d0 83       	st	Z, r29
     2f6:	d2 cf       	rjmp	.-92     	; 0x29c <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'l')
     2f8:	ec 36       	cpi	r30, 0x6C	; 108
     2fa:	81 f6       	brne	.-96     	; 0x29c <process_array+0x8c>
			{
				directions_solved[i-1] = 'u';
     2fc:	f9 01       	movw	r30, r18
     2fe:	e8 5e       	subi	r30, 0xE8	; 232
     300:	fe 4f       	sbci	r31, 0xFE	; 254
     302:	60 83       	st	Z, r22
     304:	cb cf       	rjmp	.-106    	; 0x29c <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
     306:	ac 36       	cpi	r26, 0x6C	; 108
     308:	99 f4       	brne	.+38     	; 0x330 <process_array+0x120>
     30a:	fc 01       	movw	r30, r24
     30c:	e8 5e       	subi	r30, 0xE8	; 232
     30e:	fe 4f       	sbci	r31, 0xFE	; 254
     310:	e1 81       	ldd	r30, Z+1	; 0x01
     312:	e3 37       	cpi	r30, 0x73	; 115
     314:	29 f4       	brne	.+10     	; 0x320 <process_array+0x110>
			{
				directions_solved[i-1] = 'r';
     316:	f9 01       	movw	r30, r18
     318:	e8 5e       	subi	r30, 0xE8	; 232
     31a:	fe 4f       	sbci	r31, 0xFE	; 254
     31c:	c0 83       	st	Z, r28
     31e:	be cf       	rjmp	.-132    	; 0x29c <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
     320:	ec 36       	cpi	r30, 0x6C	; 108
     322:	09 f0       	breq	.+2      	; 0x326 <process_array+0x116>
     324:	bb cf       	rjmp	.-138    	; 0x29c <process_array+0x8c>
			{
				directions_solved[i-1] = 's';
     326:	f9 01       	movw	r30, r18
     328:	e8 5e       	subi	r30, 0xE8	; 232
     32a:	fe 4f       	sbci	r31, 0xFE	; 254
     32c:	d0 83       	st	Z, r29
     32e:	b6 cf       	rjmp	.-148    	; 0x29c <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'l')
     330:	a3 37       	cpi	r26, 0x73	; 115
     332:	09 f0       	breq	.+2      	; 0x336 <process_array+0x126>
     334:	b3 cf       	rjmp	.-154    	; 0x29c <process_array+0x8c>
     336:	fc 01       	movw	r30, r24
     338:	e8 5e       	subi	r30, 0xE8	; 232
     33a:	fe 4f       	sbci	r31, 0xFE	; 254
     33c:	e1 81       	ldd	r30, Z+1	; 0x01
     33e:	ec 36       	cpi	r30, 0x6C	; 108
     340:	29 f4       	brne	.+10     	; 0x34c <process_array+0x13c>
			{
				directions_solved[i-1] = 'r';
     342:	f9 01       	movw	r30, r18
     344:	e8 5e       	subi	r30, 0xE8	; 232
     346:	fe 4f       	sbci	r31, 0xFE	; 254
     348:	c0 83       	st	Z, r28
     34a:	a8 cf       	rjmp	.-176    	; 0x29c <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
     34c:	e3 37       	cpi	r30, 0x73	; 115
     34e:	09 f0       	breq	.+2      	; 0x352 <process_array+0x142>
     350:	a5 cf       	rjmp	.-182    	; 0x29c <process_array+0x8c>
			{
				directions_solved[i-1] = 'u';
     352:	f9 01       	movw	r30, r18
     354:	e8 5e       	subi	r30, 0xE8	; 232
     356:	fe 4f       	sbci	r31, 0xFE	; 254
     358:	60 83       	st	Z, r22
     35a:	a0 cf       	rjmp	.-192    	; 0x29c <process_array+0x8c>
     35c:	dc 01       	movw	r26, r24
     35e:	a8 5e       	subi	r26, 0xE8	; 232
     360:	be 4f       	sbci	r27, 0xFE	; 254
     362:	fc 01       	movw	r30, r24
     364:	e5 5e       	subi	r30, 0xE5	; 229
     366:	fe 4f       	sbci	r31, 0xFE	; 254
			}

			
			while (directions_solved[i+2])
			{
				directions_solved[i] = directions_solved[i+2];
     368:	2d 93       	st	X+, r18
				i++;
     36a:	01 96       	adiw	r24, 0x01	; 1
			{
				directions_solved[i-1] = 'u';
			}

			
			while (directions_solved[i+2])
     36c:	21 91       	ld	r18, Z+
     36e:	21 11       	cpse	r18, r1
     370:	fb cf       	rjmp	.-10     	; 0x368 <process_array+0x158>
			{
				directions_solved[i] = directions_solved[i+2];
				i++;
			}
			directions_solved[i] = '\0';
     372:	fc 01       	movw	r30, r24
     374:	e8 5e       	subi	r30, 0xE8	; 232
     376:	fe 4f       	sbci	r31, 0xFE	; 254
     378:	10 82       	st	Z, r1
			i=0;
     37a:	85 2f       	mov	r24, r21
     37c:	94 2f       	mov	r25, r20
	}
	
	usart_putstr("\r\rReversed Data: ");
	usart_putstr(directions_solved);
	
	for (i=0;directions_solved[i];i++)
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	fc 01       	movw	r30, r24
     382:	e8 5e       	subi	r30, 0xE8	; 232
     384:	fe 4f       	sbci	r31, 0xFE	; 254
     386:	20 81       	ld	r18, Z
     388:	21 11       	cpse	r18, r1
     38a:	72 cf       	rjmp	.-284    	; 0x270 <process_array+0x60>
			directions_solved[i] = '\0';
			i=0;
		}
	}
	
	usart_putstr("\r\rSolved Data: ");
     38c:	82 e7       	ldi	r24, 0x72	; 114
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	usart_putstr(directions_solved);
     394:	88 e1       	ldi	r24, 0x18	; 24
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	usart_putstr("\r\rSolved Data Practical: ");
     39c:	82 e8       	ldi	r24, 0x82	; 130
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
}
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <turn_U>:

void turn_U(uint16_t speed)
{
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b8:	2f ef       	ldi	r18, 0xFF	; 255
     3ba:	82 e5       	ldi	r24, 0x52	; 82
     3bc:	97 e0       	ldi	r25, 0x07	; 7
     3be:	21 50       	subi	r18, 0x01	; 1
     3c0:	80 40       	sbci	r24, 0x00	; 0
     3c2:	90 40       	sbci	r25, 0x00	; 0
     3c4:	e1 f7       	brne	.-8      	; 0x3be <turn_U+0x14>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <turn_U+0x1e>
     3c8:	00 00       	nop
	_delay_ms(300);
	go_backward();
     3ca:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
	set_speed_RL(speed+300);
     3ce:	7e 01       	movw	r14, r28
     3d0:	24 ed       	ldi	r18, 0xD4	; 212
     3d2:	e2 1a       	sub	r14, r18
     3d4:	2e ef       	ldi	r18, 0xFE	; 254
     3d6:	f2 0a       	sbc	r15, r18
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     3d8:	f9 bc       	out	0x29, r15	; 41
     3da:	e8 bc       	out	0x28, r14	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     3dc:	fb bc       	out	0x2b, r15	; 43
     3de:	ea bc       	out	0x2a, r14	; 42
     3e0:	8f e7       	ldi	r24, 0x7F	; 127
     3e2:	98 e3       	ldi	r25, 0x38	; 56
     3e4:	21 e0       	ldi	r18, 0x01	; 1
     3e6:	81 50       	subi	r24, 0x01	; 1
     3e8:	90 40       	sbci	r25, 0x00	; 0
     3ea:	20 40       	sbci	r18, 0x00	; 0
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <turn_U+0x3c>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <turn_U+0x46>
     3f0:	00 00       	nop
{
	_delay_ms(300);
	go_backward();
	set_speed_RL(speed+300);
	_delay_ms(50);
	stay_stop();
     3f2:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     3f6:	8f e7       	ldi	r24, 0x7F	; 127
     3f8:	98 e3       	ldi	r25, 0x38	; 56
     3fa:	21 e0       	ldi	r18, 0x01	; 1
     3fc:	81 50       	subi	r24, 0x01	; 1
     3fe:	90 40       	sbci	r25, 0x00	; 0
     400:	20 40       	sbci	r18, 0x00	; 0
     402:	e1 f7       	brne	.-8      	; 0x3fc <turn_U+0x52>
     404:	00 c0       	rjmp	.+0      	; 0x406 <turn_U+0x5c>
     406:	00 00       	nop
	_delay_ms(50);
	left_rotate();
     408:	0e 94 5b 00 	call	0xb6	; 0xb6 <left_rotate>
	set_speed_RL(speed + 200);
     40c:	8e 01       	movw	r16, r28
     40e:	08 53       	subi	r16, 0x38	; 56
     410:	1f 4f       	sbci	r17, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     412:	19 bd       	out	0x29, r17	; 41
     414:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     416:	1b bd       	out	0x2b, r17	; 43
     418:	0a bd       	out	0x2a, r16	; 42
     41a:	8f ef       	ldi	r24, 0xFF	; 255
     41c:	90 e7       	ldi	r25, 0x70	; 112
     41e:	22 e0       	ldi	r18, 0x02	; 2
     420:	81 50       	subi	r24, 0x01	; 1
     422:	90 40       	sbci	r25, 0x00	; 0
     424:	20 40       	sbci	r18, 0x00	; 0
     426:	e1 f7       	brne	.-8      	; 0x420 <turn_U+0x76>
     428:	00 c0       	rjmp	.+0      	; 0x42a <turn_U+0x80>
     42a:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     42c:	d9 bd       	out	0x29, r29	; 41
     42e:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     430:	db bd       	out	0x2b, r29	; 43
     432:	ca bd       	out	0x2a, r28	; 42
	left_rotate();
	set_speed_RL(speed + 200);
	_delay_ms(100); //50
	set_speed_RL(speed); //-50
	//_delay_ms(100);
	while((sensor_data() & (3<<5)) != (3<<5));
     434:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     438:	80 76       	andi	r24, 0x60	; 96
     43a:	80 36       	cpi	r24, 0x60	; 96
     43c:	d9 f7       	brne	.-10     	; 0x434 <turn_U+0x8a>
	while((sensor_data() & (3<<4)) != (3<<4));
     43e:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     442:	80 73       	andi	r24, 0x30	; 48
     444:	80 33       	cpi	r24, 0x30	; 48
     446:	d9 f7       	brne	.-10     	; 0x43e <turn_U+0x94>
	while((sensor_data() & (3<<3)) != (3<<3));
     448:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     44c:	88 71       	andi	r24, 0x18	; 24
     44e:	88 31       	cpi	r24, 0x18	; 24
     450:	d9 f7       	brne	.-10     	; 0x448 <turn_U+0x9e>
     452:	8f e3       	ldi	r24, 0x3F	; 63
     454:	9c e9       	ldi	r25, 0x9C	; 156
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <turn_U+0xac>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <turn_U+0xb2>
     45c:	00 00       	nop
	_delay_ms(20);
	right_rotate();
     45e:	0e 94 55 00 	call	0xaa	; 0xaa <right_rotate>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     462:	f9 bc       	out	0x29, r15	; 41
     464:	e8 bc       	out	0x28, r14	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     466:	fb bc       	out	0x2b, r15	; 43
     468:	ea bc       	out	0x2a, r14	; 42
     46a:	9f e7       	ldi	r25, 0x7F	; 127
     46c:	28 e3       	ldi	r18, 0x38	; 56
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	91 50       	subi	r25, 0x01	; 1
     472:	20 40       	sbci	r18, 0x00	; 0
     474:	80 40       	sbci	r24, 0x00	; 0
     476:	e1 f7       	brne	.-8      	; 0x470 <turn_U+0xc6>
     478:	00 c0       	rjmp	.+0      	; 0x47a <turn_U+0xd0>
     47a:	00 00       	nop
	while((sensor_data() & (3<<3)) != (3<<3));
	_delay_ms(20);
	right_rotate();
	set_speed_RL(speed+300);
	_delay_ms(50);
	stay_stop();
     47c:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     480:	9f e7       	ldi	r25, 0x7F	; 127
     482:	28 e3       	ldi	r18, 0x38	; 56
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	91 50       	subi	r25, 0x01	; 1
     488:	20 40       	sbci	r18, 0x00	; 0
     48a:	80 40       	sbci	r24, 0x00	; 0
     48c:	e1 f7       	brne	.-8      	; 0x486 <turn_U+0xdc>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <turn_U+0xe6>
     490:	00 00       	nop
	_delay_ms(50);
	//while(sensor_data() != (3<<3));
	go_forward();
     492:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     496:	19 bd       	out	0x29, r17	; 41
     498:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     49a:	1b bd       	out	0x2b, r17	; 43
     49c:	0a bd       	out	0x2a, r16	; 42
     49e:	9f e7       	ldi	r25, 0x7F	; 127
     4a0:	28 e3       	ldi	r18, 0x38	; 56
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	91 50       	subi	r25, 0x01	; 1
     4a6:	20 40       	sbci	r18, 0x00	; 0
     4a8:	80 40       	sbci	r24, 0x00	; 0
     4aa:	e1 f7       	brne	.-8      	; 0x4a4 <turn_U+0xfa>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <turn_U+0x104>
     4ae:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     4b0:	d9 bd       	out	0x29, r29	; 41
     4b2:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     4b4:	db bd       	out	0x2b, r29	; 43
     4b6:	ca bd       	out	0x2a, r28	; 42
	//while(sensor_data() != (3<<3));
	go_forward();
	set_speed_RL(speed + 200);
	_delay_ms(50); //50
	set_speed_RL(speed);
}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	08 95       	ret

000004c6 <turn_U_destination>:

void turn_U_destination(uint16_t speed)
{
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	ec 01       	movw	r28, r24
	uint16_t sensor_data_hold;
	stay_stop();
     4d0:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     4d4:	2f e7       	ldi	r18, 0x7F	; 127
     4d6:	88 e3       	ldi	r24, 0x38	; 56
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	21 50       	subi	r18, 0x01	; 1
     4dc:	80 40       	sbci	r24, 0x00	; 0
     4de:	90 40       	sbci	r25, 0x00	; 0
     4e0:	e1 f7       	brne	.-8      	; 0x4da <turn_U_destination+0x14>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <turn_U_destination+0x1e>
     4e4:	00 00       	nop
	_delay_ms(50);
	go_backward();
     4e6:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
	set_speed_RL(speed + 200);
     4ea:	8e 01       	movw	r16, r28
     4ec:	08 53       	subi	r16, 0x38	; 56
     4ee:	1f 4f       	sbci	r17, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     4f0:	19 bd       	out	0x29, r17	; 41
     4f2:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     4f4:	1b bd       	out	0x2b, r17	; 43
     4f6:	0a bd       	out	0x2a, r16	; 42
     4f8:	2f e7       	ldi	r18, 0x7F	; 127
     4fa:	88 e3       	ldi	r24, 0x38	; 56
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	21 50       	subi	r18, 0x01	; 1
     500:	80 40       	sbci	r24, 0x00	; 0
     502:	90 40       	sbci	r25, 0x00	; 0
     504:	e1 f7       	brne	.-8      	; 0x4fe <turn_U_destination+0x38>
     506:	00 c0       	rjmp	.+0      	; 0x508 <turn_U_destination+0x42>
     508:	00 00       	nop
	stay_stop();
	_delay_ms(50);
	go_backward();
	set_speed_RL(speed + 200);
	_delay_ms(50);
	stay_stop();	
     50a:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
	process_array();
     50e:	0e 94 08 01 	call	0x210	; 0x210 <process_array>
     512:	2f ef       	ldi	r18, 0xFF	; 255
     514:	84 e3       	ldi	r24, 0x34	; 52
     516:	9c e0       	ldi	r25, 0x0C	; 12
     518:	21 50       	subi	r18, 0x01	; 1
     51a:	80 40       	sbci	r24, 0x00	; 0
     51c:	90 40       	sbci	r25, 0x00	; 0
     51e:	e1 f7       	brne	.-8      	; 0x518 <turn_U_destination+0x52>
     520:	00 c0       	rjmp	.+0      	; 0x522 <turn_U_destination+0x5c>
     522:	00 00       	nop
	_delay_ms(500);
	go_backward();
     524:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     528:	19 bd       	out	0x29, r17	; 41
     52a:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     52c:	1b bd       	out	0x2b, r17	; 43
     52e:	0a bd       	out	0x2a, r16	; 42
     530:	2f e7       	ldi	r18, 0x7F	; 127
     532:	88 e3       	ldi	r24, 0x38	; 56
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	21 50       	subi	r18, 0x01	; 1
     538:	80 40       	sbci	r24, 0x00	; 0
     53a:	90 40       	sbci	r25, 0x00	; 0
     53c:	e1 f7       	brne	.-8      	; 0x536 <turn_U_destination+0x70>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <turn_U_destination+0x7a>
     540:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     542:	d9 bd       	out	0x29, r29	; 41
     544:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     546:	db bd       	out	0x2b, r29	; 43
     548:	ca bd       	out	0x2a, r28	; 42
	_delay_ms(500);
	go_backward();
	set_speed_RL(speed + 200);
	_delay_ms(50);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
     54a:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     54e:	82 74       	andi	r24, 0x42	; 66
	while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
     550:	21 f0       	breq	.+8      	; 0x55a <turn_U_destination+0x94>
	{
		sensor_data_hold = sensor_data();
     552:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     556:	82 74       	andi	r24, 0x42	; 66
	go_backward();
	set_speed_RL(speed + 200);
	_delay_ms(50);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
	while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
     558:	e1 f7       	brne	.-8      	; 0x552 <turn_U_destination+0x8c>
	{
		sensor_data_hold = sensor_data();
	}
	stay_stop();
     55a:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     55e:	2f e7       	ldi	r18, 0x7F	; 127
     560:	88 e3       	ldi	r24, 0x38	; 56
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	21 50       	subi	r18, 0x01	; 1
     566:	80 40       	sbci	r24, 0x00	; 0
     568:	90 40       	sbci	r25, 0x00	; 0
     56a:	e1 f7       	brne	.-8      	; 0x564 <turn_U_destination+0x9e>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <turn_U_destination+0xa8>
     56e:	00 00       	nop
	_delay_ms(50);
	go_forward();
     570:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
	set_speed_RL(speed + 100);
     574:	ce 01       	movw	r24, r28
     576:	8c 59       	subi	r24, 0x9C	; 156
     578:	9f 4f       	sbci	r25, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     57a:	99 bd       	out	0x29, r25	; 41
     57c:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     57e:	9b bd       	out	0x2b, r25	; 43
     580:	8a bd       	out	0x2a, r24	; 42
     582:	2f e7       	ldi	r18, 0x7F	; 127
     584:	88 e3       	ldi	r24, 0x38	; 56
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	21 50       	subi	r18, 0x01	; 1
     58a:	80 40       	sbci	r24, 0x00	; 0
     58c:	90 40       	sbci	r25, 0x00	; 0
     58e:	e1 f7       	brne	.-8      	; 0x588 <turn_U_destination+0xc2>
     590:	00 c0       	rjmp	.+0      	; 0x592 <turn_U_destination+0xcc>
     592:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     594:	d9 bd       	out	0x29, r29	; 41
     596:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     598:	db bd       	out	0x2b, r29	; 43
     59a:	ca bd       	out	0x2a, r28	; 42
     59c:	2f ef       	ldi	r18, 0xFF	; 255
     59e:	83 ec       	ldi	r24, 0xC3	; 195
     5a0:	99 e0       	ldi	r25, 0x09	; 9
     5a2:	21 50       	subi	r18, 0x01	; 1
     5a4:	80 40       	sbci	r24, 0x00	; 0
     5a6:	90 40       	sbci	r25, 0x00	; 0
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <turn_U_destination+0xdc>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <turn_U_destination+0xe6>
     5ac:	00 00       	nop
	set_speed_RL(speed + 100);
	_delay_ms(50);
	//set_speed_RL(speed);
	set_speed_RL(speed);
	_delay_ms(400);
	go_backward();
     5ae:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     5b2:	19 bd       	out	0x29, r17	; 41
     5b4:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     5b6:	1b bd       	out	0x2b, r17	; 43
     5b8:	0a bd       	out	0x2a, r16	; 42
     5ba:	2f e7       	ldi	r18, 0x7F	; 127
     5bc:	88 e3       	ldi	r24, 0x38	; 56
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	21 50       	subi	r18, 0x01	; 1
     5c2:	80 40       	sbci	r24, 0x00	; 0
     5c4:	90 40       	sbci	r25, 0x00	; 0
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <turn_U_destination+0xfa>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <turn_U_destination+0x104>
     5ca:	00 00       	nop
	set_speed_RL(speed);
	_delay_ms(400);
	go_backward();
	set_speed_RL(speed+200);
	_delay_ms(50);
	stay_stop();
     5cc:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     5d0:	2f e7       	ldi	r18, 0x7F	; 127
     5d2:	88 e3       	ldi	r24, 0x38	; 56
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	21 50       	subi	r18, 0x01	; 1
     5d8:	80 40       	sbci	r24, 0x00	; 0
     5da:	90 40       	sbci	r25, 0x00	; 0
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <turn_U_destination+0x110>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <turn_U_destination+0x11a>
     5e0:	00 00       	nop
	_delay_ms(50);
	left_rotate();
     5e2:	0e 94 5b 00 	call	0xb6	; 0xb6 <left_rotate>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     5e6:	19 bd       	out	0x29, r17	; 41
     5e8:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     5ea:	1b bd       	out	0x2b, r17	; 43
     5ec:	0a bd       	out	0x2a, r16	; 42
     5ee:	2f ef       	ldi	r18, 0xFF	; 255
     5f0:	80 e7       	ldi	r24, 0x70	; 112
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	21 50       	subi	r18, 0x01	; 1
     5f6:	80 40       	sbci	r24, 0x00	; 0
     5f8:	90 40       	sbci	r25, 0x00	; 0
     5fa:	e1 f7       	brne	.-8      	; 0x5f4 <turn_U_destination+0x12e>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <turn_U_destination+0x138>
     5fe:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     600:	d9 bd       	out	0x29, r29	; 41
     602:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     604:	db bd       	out	0x2b, r29	; 43
     606:	ca bd       	out	0x2a, r28	; 42
     608:	2f ef       	ldi	r18, 0xFF	; 255
     60a:	80 e7       	ldi	r24, 0x70	; 112
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	21 50       	subi	r18, 0x01	; 1
     610:	80 40       	sbci	r24, 0x00	; 0
     612:	90 40       	sbci	r25, 0x00	; 0
     614:	e1 f7       	brne	.-8      	; 0x60e <turn_U_destination+0x148>
     616:	00 c0       	rjmp	.+0      	; 0x618 <turn_U_destination+0x152>
     618:	00 00       	nop
	left_rotate();
	set_speed_RL(speed + 200);
	_delay_ms(100); //50
	set_speed_RL(speed); //-50
	_delay_ms(100);
	while((sensor_data() & (3<<5)) != 0x00);
     61a:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     61e:	80 76       	andi	r24, 0x60	; 96
     620:	e1 f7       	brne	.-8      	; 0x61a <turn_U_destination+0x154>
	while((sensor_data() & (3<<5)) != (3<<5));
     622:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     626:	80 76       	andi	r24, 0x60	; 96
     628:	80 36       	cpi	r24, 0x60	; 96
     62a:	d9 f7       	brne	.-10     	; 0x622 <turn_U_destination+0x15c>
	while((sensor_data() & (3<<4)) != (3<<4));
     62c:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     630:	80 73       	andi	r24, 0x30	; 48
     632:	80 33       	cpi	r24, 0x30	; 48
     634:	d9 f7       	brne	.-10     	; 0x62c <turn_U_destination+0x166>
	while((sensor_data() & (3<<3)) != (3<<3));
     636:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     63a:	88 71       	andi	r24, 0x18	; 24
     63c:	88 31       	cpi	r24, 0x18	; 24
     63e:	d9 f7       	brne	.-10     	; 0x636 <turn_U_destination+0x170>
     640:	8f e3       	ldi	r24, 0x3F	; 63
     642:	9c e9       	ldi	r25, 0x9C	; 156
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <turn_U_destination+0x17e>
     648:	00 c0       	rjmp	.+0      	; 0x64a <turn_U_destination+0x184>
     64a:	00 00       	nop
	_delay_ms(20);
	right_rotate();
     64c:	0e 94 55 00 	call	0xaa	; 0xaa <right_rotate>
	set_speed_RL(speed+300);
     650:	ce 01       	movw	r24, r28
     652:	84 5d       	subi	r24, 0xD4	; 212
     654:	9e 4f       	sbci	r25, 0xFE	; 254
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     656:	99 bd       	out	0x29, r25	; 41
     658:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     65a:	9b bd       	out	0x2b, r25	; 43
     65c:	8a bd       	out	0x2a, r24	; 42
     65e:	9f e7       	ldi	r25, 0x7F	; 127
     660:	28 e3       	ldi	r18, 0x38	; 56
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	91 50       	subi	r25, 0x01	; 1
     666:	20 40       	sbci	r18, 0x00	; 0
     668:	80 40       	sbci	r24, 0x00	; 0
     66a:	e1 f7       	brne	.-8      	; 0x664 <turn_U_destination+0x19e>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <turn_U_destination+0x1a8>
     66e:	00 00       	nop
	while((sensor_data() & (3<<3)) != (3<<3));
	_delay_ms(20);
	right_rotate();
	set_speed_RL(speed+300);
	_delay_ms(50);
	stay_stop();
     670:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     674:	9f e7       	ldi	r25, 0x7F	; 127
     676:	28 e3       	ldi	r18, 0x38	; 56
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	91 50       	subi	r25, 0x01	; 1
     67c:	20 40       	sbci	r18, 0x00	; 0
     67e:	80 40       	sbci	r24, 0x00	; 0
     680:	e1 f7       	brne	.-8      	; 0x67a <turn_U_destination+0x1b4>
     682:	00 c0       	rjmp	.+0      	; 0x684 <turn_U_destination+0x1be>
     684:	00 00       	nop
	_delay_ms(50);
	//while(sensor_data() != (3<<3));
	go_forward();
     686:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     68a:	19 bd       	out	0x29, r17	; 41
     68c:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     68e:	1b bd       	out	0x2b, r17	; 43
     690:	0a bd       	out	0x2a, r16	; 42
     692:	9f e7       	ldi	r25, 0x7F	; 127
     694:	28 e3       	ldi	r18, 0x38	; 56
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	91 50       	subi	r25, 0x01	; 1
     69a:	20 40       	sbci	r18, 0x00	; 0
     69c:	80 40       	sbci	r24, 0x00	; 0
     69e:	e1 f7       	brne	.-8      	; 0x698 <turn_U_destination+0x1d2>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <turn_U_destination+0x1dc>
     6a2:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     6a4:	d9 bd       	out	0x29, r29	; 41
     6a6:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     6a8:	db bd       	out	0x2b, r29	; 43
     6aa:	ca bd       	out	0x2a, r28	; 42
	//while(sensor_data() != (3<<3));
	go_forward();
	set_speed_RL(speed + 200);
	_delay_ms(50); //50
	set_speed_RL(speed);
}
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	08 95       	ret

000006b6 <turn_left>:

void turn_left(uint16_t speed)
{
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ec 01       	movw	r28, r24
	go_backward();
     6c4:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
	set_speed_RL(speed + 300);
     6c8:	7e 01       	movw	r14, r28
     6ca:	24 ed       	ldi	r18, 0xD4	; 212
     6cc:	e2 1a       	sub	r14, r18
     6ce:	2e ef       	ldi	r18, 0xFE	; 254
     6d0:	f2 0a       	sbc	r15, r18
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     6d2:	f9 bc       	out	0x29, r15	; 41
     6d4:	e8 bc       	out	0x28, r14	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     6d6:	fb bc       	out	0x2b, r15	; 43
     6d8:	ea bc       	out	0x2a, r14	; 42
     6da:	8f e7       	ldi	r24, 0x7F	; 127
     6dc:	98 e3       	ldi	r25, 0x38	; 56
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	81 50       	subi	r24, 0x01	; 1
     6e2:	90 40       	sbci	r25, 0x00	; 0
     6e4:	20 40       	sbci	r18, 0x00	; 0
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <turn_left+0x2a>
     6e8:	00 c0       	rjmp	.+0      	; 0x6ea <turn_left+0x34>
     6ea:	00 00       	nop
void turn_left(uint16_t speed)
{
	go_backward();
	set_speed_RL(speed + 300);
	_delay_ms(50);
	stay_stop();
     6ec:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     6f0:	8f e7       	ldi	r24, 0x7F	; 127
     6f2:	98 e3       	ldi	r25, 0x38	; 56
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	81 50       	subi	r24, 0x01	; 1
     6f8:	90 40       	sbci	r25, 0x00	; 0
     6fa:	20 40       	sbci	r18, 0x00	; 0
     6fc:	e1 f7       	brne	.-8      	; 0x6f6 <turn_left+0x40>
     6fe:	00 c0       	rjmp	.+0      	; 0x700 <turn_left+0x4a>
     700:	00 00       	nop
	_delay_ms(50);
	left_rotate();
     702:	0e 94 5b 00 	call	0xb6	; 0xb6 <left_rotate>
	set_speed_RL(speed + 200); //can be deleted 100
     706:	8e 01       	movw	r16, r28
     708:	08 53       	subi	r16, 0x38	; 56
     70a:	1f 4f       	sbci	r17, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     70c:	19 bd       	out	0x29, r17	; 41
     70e:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     710:	1b bd       	out	0x2b, r17	; 43
     712:	0a bd       	out	0x2a, r16	; 42
     714:	8f ef       	ldi	r24, 0xFF	; 255
     716:	90 e7       	ldi	r25, 0x70	; 112
     718:	22 e0       	ldi	r18, 0x02	; 2
     71a:	81 50       	subi	r24, 0x01	; 1
     71c:	90 40       	sbci	r25, 0x00	; 0
     71e:	20 40       	sbci	r18, 0x00	; 0
     720:	e1 f7       	brne	.-8      	; 0x71a <turn_left+0x64>
     722:	00 c0       	rjmp	.+0      	; 0x724 <turn_left+0x6e>
     724:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     726:	d9 bd       	out	0x29, r29	; 41
     728:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     72a:	db bd       	out	0x2b, r29	; 43
     72c:	ca bd       	out	0x2a, r28	; 42
	set_speed_RL(speed + 200); //can be deleted 100
	_delay_ms(100); // 50
	set_speed_RL(speed); //-30
	//_delay_ms(100);
	//while((sensor_data() & (1<<7)) != (1<<7));
	while((sensor_data() & (3<<5)) != (3<<5));
     72e:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     732:	80 76       	andi	r24, 0x60	; 96
     734:	80 36       	cpi	r24, 0x60	; 96
     736:	d9 f7       	brne	.-10     	; 0x72e <turn_left+0x78>
	while((sensor_data() & (3<<4)) != (3<<4));
     738:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     73c:	80 73       	andi	r24, 0x30	; 48
     73e:	80 33       	cpi	r24, 0x30	; 48
     740:	d9 f7       	brne	.-10     	; 0x738 <turn_left+0x82>
	while((sensor_data() & (3<<3)) != (3<<3));
     742:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     746:	88 71       	andi	r24, 0x18	; 24
     748:	88 31       	cpi	r24, 0x18	; 24
     74a:	d9 f7       	brne	.-10     	; 0x742 <turn_left+0x8c>
     74c:	8f e3       	ldi	r24, 0x3F	; 63
     74e:	9c e9       	ldi	r25, 0x9C	; 156
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <turn_left+0x9a>
     754:	00 c0       	rjmp	.+0      	; 0x756 <turn_left+0xa0>
     756:	00 00       	nop
	_delay_ms(20);
	//while(sensor_data() != (3<<3));
	right_rotate();
     758:	0e 94 55 00 	call	0xaa	; 0xaa <right_rotate>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     75c:	f9 bc       	out	0x29, r15	; 41
     75e:	e8 bc       	out	0x28, r14	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     760:	fb bc       	out	0x2b, r15	; 43
     762:	ea bc       	out	0x2a, r14	; 42
     764:	9f e7       	ldi	r25, 0x7F	; 127
     766:	28 e3       	ldi	r18, 0x38	; 56
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	91 50       	subi	r25, 0x01	; 1
     76c:	20 40       	sbci	r18, 0x00	; 0
     76e:	80 40       	sbci	r24, 0x00	; 0
     770:	e1 f7       	brne	.-8      	; 0x76a <turn_left+0xb4>
     772:	00 c0       	rjmp	.+0      	; 0x774 <turn_left+0xbe>
     774:	00 00       	nop
	_delay_ms(20);
	//while(sensor_data() != (3<<3));
	right_rotate();
	set_speed_RL(speed+300);
	_delay_ms(50);
	stay_stop();
     776:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     77a:	9f e7       	ldi	r25, 0x7F	; 127
     77c:	28 e3       	ldi	r18, 0x38	; 56
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	91 50       	subi	r25, 0x01	; 1
     782:	20 40       	sbci	r18, 0x00	; 0
     784:	80 40       	sbci	r24, 0x00	; 0
     786:	e1 f7       	brne	.-8      	; 0x780 <turn_left+0xca>
     788:	00 c0       	rjmp	.+0      	; 0x78a <turn_left+0xd4>
     78a:	00 00       	nop
	_delay_ms(50);
	//while(sensor_data() != (3<<3));
	go_forward();
     78c:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     790:	19 bd       	out	0x29, r17	; 41
     792:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     794:	1b bd       	out	0x2b, r17	; 43
     796:	0a bd       	out	0x2a, r16	; 42
     798:	9f e7       	ldi	r25, 0x7F	; 127
     79a:	28 e3       	ldi	r18, 0x38	; 56
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	91 50       	subi	r25, 0x01	; 1
     7a0:	20 40       	sbci	r18, 0x00	; 0
     7a2:	80 40       	sbci	r24, 0x00	; 0
     7a4:	e1 f7       	brne	.-8      	; 0x79e <turn_left+0xe8>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <turn_left+0xf2>
     7a8:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     7aa:	d9 bd       	out	0x29, r29	; 41
     7ac:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     7ae:	db bd       	out	0x2b, r29	; 43
     7b0:	ca bd       	out	0x2a, r28	; 42
	//while(sensor_data() != (3<<3));
	go_forward();
	set_speed_RL(speed + 200);
	_delay_ms(50); //50
	set_speed_RL(speed);
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	08 95       	ret

000007c0 <turn_right>:

void turn_right(uint16_t speed)
{
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	ec 01       	movw	r28, r24
	go_backward();
     7ce:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
	set_speed_RL(speed + 300);
     7d2:	7e 01       	movw	r14, r28
     7d4:	24 ed       	ldi	r18, 0xD4	; 212
     7d6:	e2 1a       	sub	r14, r18
     7d8:	2e ef       	ldi	r18, 0xFE	; 254
     7da:	f2 0a       	sbc	r15, r18
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     7dc:	f9 bc       	out	0x29, r15	; 41
     7de:	e8 bc       	out	0x28, r14	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     7e0:	fb bc       	out	0x2b, r15	; 43
     7e2:	ea bc       	out	0x2a, r14	; 42
     7e4:	8f e7       	ldi	r24, 0x7F	; 127
     7e6:	98 e3       	ldi	r25, 0x38	; 56
     7e8:	21 e0       	ldi	r18, 0x01	; 1
     7ea:	81 50       	subi	r24, 0x01	; 1
     7ec:	90 40       	sbci	r25, 0x00	; 0
     7ee:	20 40       	sbci	r18, 0x00	; 0
     7f0:	e1 f7       	brne	.-8      	; 0x7ea <turn_right+0x2a>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <turn_right+0x34>
     7f4:	00 00       	nop
void turn_right(uint16_t speed)
{
	go_backward();
	set_speed_RL(speed + 300);
	_delay_ms(50);
	stay_stop();
     7f6:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     7fa:	8f e7       	ldi	r24, 0x7F	; 127
     7fc:	98 e3       	ldi	r25, 0x38	; 56
     7fe:	21 e0       	ldi	r18, 0x01	; 1
     800:	81 50       	subi	r24, 0x01	; 1
     802:	90 40       	sbci	r25, 0x00	; 0
     804:	20 40       	sbci	r18, 0x00	; 0
     806:	e1 f7       	brne	.-8      	; 0x800 <turn_right+0x40>
     808:	00 c0       	rjmp	.+0      	; 0x80a <turn_right+0x4a>
     80a:	00 00       	nop
	_delay_ms(50);
	right_rotate();
     80c:	0e 94 55 00 	call	0xaa	; 0xaa <right_rotate>
	set_speed_RL(speed + 200); //can be deleted 100
     810:	8e 01       	movw	r16, r28
     812:	08 53       	subi	r16, 0x38	; 56
     814:	1f 4f       	sbci	r17, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     816:	19 bd       	out	0x29, r17	; 41
     818:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     81a:	1b bd       	out	0x2b, r17	; 43
     81c:	0a bd       	out	0x2a, r16	; 42
     81e:	8f ef       	ldi	r24, 0xFF	; 255
     820:	90 e7       	ldi	r25, 0x70	; 112
     822:	22 e0       	ldi	r18, 0x02	; 2
     824:	81 50       	subi	r24, 0x01	; 1
     826:	90 40       	sbci	r25, 0x00	; 0
     828:	20 40       	sbci	r18, 0x00	; 0
     82a:	e1 f7       	brne	.-8      	; 0x824 <turn_right+0x64>
     82c:	00 c0       	rjmp	.+0      	; 0x82e <turn_right+0x6e>
     82e:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     830:	d9 bd       	out	0x29, r29	; 41
     832:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     834:	db bd       	out	0x2b, r29	; 43
     836:	ca bd       	out	0x2a, r28	; 42
	set_speed_RL(speed + 200); //can be deleted 100
	_delay_ms(100); // 50
	set_speed_RL(speed); //-30
	//_delay_ms(100);
	//while((sensor_data() & (1<<0)) != (1<<0));
	while((sensor_data() & (3<<1)) != (3<<1));
     838:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     83c:	86 70       	andi	r24, 0x06	; 6
     83e:	86 30       	cpi	r24, 0x06	; 6
     840:	d9 f7       	brne	.-10     	; 0x838 <turn_right+0x78>
	while((sensor_data() & (3<<2)) != (3<<2));
     842:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     846:	8c 70       	andi	r24, 0x0C	; 12
     848:	8c 30       	cpi	r24, 0x0C	; 12
     84a:	d9 f7       	brne	.-10     	; 0x842 <turn_right+0x82>
	while((sensor_data() & (3<<3)) != (3<<3));
     84c:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     850:	88 71       	andi	r24, 0x18	; 24
     852:	88 31       	cpi	r24, 0x18	; 24
     854:	d9 f7       	brne	.-10     	; 0x84c <turn_right+0x8c>
     856:	8f e3       	ldi	r24, 0x3F	; 63
     858:	9c e9       	ldi	r25, 0x9C	; 156
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <turn_right+0x9a>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
     860:	00 00       	nop
	_delay_ms(20);
	//while(sensor_data() != (3<<3));
	left_rotate();
     862:	0e 94 5b 00 	call	0xb6	; 0xb6 <left_rotate>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     866:	f9 bc       	out	0x29, r15	; 41
     868:	e8 bc       	out	0x28, r14	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     86a:	fb bc       	out	0x2b, r15	; 43
     86c:	ea bc       	out	0x2a, r14	; 42
     86e:	9f e7       	ldi	r25, 0x7F	; 127
     870:	28 e3       	ldi	r18, 0x38	; 56
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	91 50       	subi	r25, 0x01	; 1
     876:	20 40       	sbci	r18, 0x00	; 0
     878:	80 40       	sbci	r24, 0x00	; 0
     87a:	e1 f7       	brne	.-8      	; 0x874 <__stack+0x15>
     87c:	00 c0       	rjmp	.+0      	; 0x87e <__stack+0x1f>
     87e:	00 00       	nop
	_delay_ms(20);
	//while(sensor_data() != (3<<3));
	left_rotate();
	set_speed_RL(speed+300);
	_delay_ms(50);
	stay_stop();
     880:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     884:	9f e7       	ldi	r25, 0x7F	; 127
     886:	28 e3       	ldi	r18, 0x38	; 56
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	91 50       	subi	r25, 0x01	; 1
     88c:	20 40       	sbci	r18, 0x00	; 0
     88e:	80 40       	sbci	r24, 0x00	; 0
     890:	e1 f7       	brne	.-8      	; 0x88a <__stack+0x2b>
     892:	00 c0       	rjmp	.+0      	; 0x894 <__stack+0x35>
     894:	00 00       	nop
	_delay_ms(50);
	//while(sensor_data() != (3<<3));
	go_forward();
     896:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     89a:	19 bd       	out	0x29, r17	; 41
     89c:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     89e:	1b bd       	out	0x2b, r17	; 43
     8a0:	0a bd       	out	0x2a, r16	; 42
     8a2:	9f e7       	ldi	r25, 0x7F	; 127
     8a4:	28 e3       	ldi	r18, 0x38	; 56
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	91 50       	subi	r25, 0x01	; 1
     8aa:	20 40       	sbci	r18, 0x00	; 0
     8ac:	80 40       	sbci	r24, 0x00	; 0
     8ae:	e1 f7       	brne	.-8      	; 0x8a8 <__stack+0x49>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <__stack+0x53>
     8b2:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     8b4:	d9 bd       	out	0x29, r29	; 41
     8b6:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     8b8:	db bd       	out	0x2b, r29	; 43
     8ba:	ca bd       	out	0x2a, r28	; 42
	//while(sensor_data() != (3<<3));
	go_forward();
	set_speed_RL(speed + 200);
	_delay_ms(50); //50
	set_speed_RL(speed);
}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	08 95       	ret

000008ca <left_operation>:

void left_operation(uint16_t speed)
{

	turn_left(speed);
     8ca:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <turn_left>
	directions_solved[node_number] = 'l';
     8ce:	80 91 16 01 	lds	r24, 0x0116
     8d2:	90 91 17 01 	lds	r25, 0x0117
     8d6:	fc 01       	movw	r30, r24
     8d8:	e8 5e       	subi	r30, 0xE8	; 232
     8da:	fe 4f       	sbci	r31, 0xFE	; 254
     8dc:	2c e6       	ldi	r18, 0x6C	; 108
     8de:	20 83       	st	Z, r18
	node_number = node_number + 1;
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	90 93 17 01 	sts	0x0117, r25
     8e6:	80 93 16 01 	sts	0x0116, r24
     8ea:	08 95       	ret

000008ec <right_operation>:
	//usart_putchar('l');
}

void right_operation(uint16_t speed)
{
	turn_right(speed);
     8ec:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <turn_right>
	directions_solved[node_number] = 'r';
     8f0:	80 91 16 01 	lds	r24, 0x0116
     8f4:	90 91 17 01 	lds	r25, 0x0117
     8f8:	fc 01       	movw	r30, r24
     8fa:	e8 5e       	subi	r30, 0xE8	; 232
     8fc:	fe 4f       	sbci	r31, 0xFE	; 254
     8fe:	22 e7       	ldi	r18, 0x72	; 114
     900:	20 83       	st	Z, r18
	node_number = node_number + 1;
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	90 93 17 01 	sts	0x0117, r25
     908:	80 93 16 01 	sts	0x0116, r24
     90c:	08 95       	ret

0000090e <left_forward_operation>:
	//usart_putchar('r');
}

void left_forward_operation(uint16_t speed)
{
	turn_left(speed);
     90e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <turn_left>
	directions_solved[node_number] = 'l';
     912:	80 91 16 01 	lds	r24, 0x0116
     916:	90 91 17 01 	lds	r25, 0x0117
     91a:	fc 01       	movw	r30, r24
     91c:	e8 5e       	subi	r30, 0xE8	; 232
     91e:	fe 4f       	sbci	r31, 0xFE	; 254
     920:	2c e6       	ldi	r18, 0x6C	; 108
     922:	20 83       	st	Z, r18
	node_number = node_number + 1;
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	90 93 17 01 	sts	0x0117, r25
     92a:	80 93 16 01 	sts	0x0116, r24
     92e:	08 95       	ret

00000930 <right_forward_operation>:
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     930:	99 bd       	out	0x29, r25	; 41
     932:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     934:	9b bd       	out	0x2b, r25	; 43
     936:	8a bd       	out	0x2a, r24	; 42
}

void right_forward_operation(uint16_t speed)
{
	set_speed_RL(speed);
	go_forward();
     938:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
	directions_solved[node_number] = 's';
     93c:	80 91 16 01 	lds	r24, 0x0116
     940:	90 91 17 01 	lds	r25, 0x0117
     944:	fc 01       	movw	r30, r24
     946:	e8 5e       	subi	r30, 0xE8	; 232
     948:	fe 4f       	sbci	r31, 0xFE	; 254
     94a:	23 e7       	ldi	r18, 0x73	; 115
     94c:	20 83       	st	Z, r18
	node_number = node_number + 1;
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	90 93 17 01 	sts	0x0117, r25
     954:	80 93 16 01 	sts	0x0116, r24
     958:	08 95       	ret

0000095a <left_right_operation>:
	//usart_putchar('s');
}

void left_right_operation(uint16_t speed)
{
	turn_left(speed);
     95a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <turn_left>
	directions_solved[node_number] = 'l';
     95e:	80 91 16 01 	lds	r24, 0x0116
     962:	90 91 17 01 	lds	r25, 0x0117
     966:	fc 01       	movw	r30, r24
     968:	e8 5e       	subi	r30, 0xE8	; 232
     96a:	fe 4f       	sbci	r31, 0xFE	; 254
     96c:	2c e6       	ldi	r18, 0x6C	; 108
     96e:	20 83       	st	Z, r18
	node_number = node_number + 1;
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	90 93 17 01 	sts	0x0117, r25
     976:	80 93 16 01 	sts	0x0116, r24
     97a:	08 95       	ret

0000097c <left_right_forward_operation>:
	//usart_putchar('l');
}

void left_right_forward_operation(uint16_t speed)
{
	turn_left(speed);
     97c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <turn_left>
	directions_solved[node_number] = 'l';
     980:	80 91 16 01 	lds	r24, 0x0116
     984:	90 91 17 01 	lds	r25, 0x0117
     988:	fc 01       	movw	r30, r24
     98a:	e8 5e       	subi	r30, 0xE8	; 232
     98c:	fe 4f       	sbci	r31, 0xFE	; 254
     98e:	2c e6       	ldi	r18, 0x6C	; 108
     990:	20 83       	st	Z, r18
	node_number = node_number + 1;
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	90 93 17 01 	sts	0x0117, r25
     998:	80 93 16 01 	sts	0x0116, r24
     99c:	08 95       	ret

0000099e <reverse_operation>:
	//usart_putchar('l');
}

void reverse_operation(uint16_t speed)
{
	turn_U(speed);
     99e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <turn_U>
	directions_solved[node_number] = 'u';
     9a2:	80 91 16 01 	lds	r24, 0x0116
     9a6:	90 91 17 01 	lds	r25, 0x0117
     9aa:	fc 01       	movw	r30, r24
     9ac:	e8 5e       	subi	r30, 0xE8	; 232
     9ae:	fe 4f       	sbci	r31, 0xFE	; 254
     9b0:	25 e7       	ldi	r18, 0x75	; 117
     9b2:	20 83       	st	Z, r18
	node_number = node_number + 1;
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	90 93 17 01 	sts	0x0117, r25
     9ba:	80 93 16 01 	sts	0x0116, r24
     9be:	08 95       	ret

000009c0 <destination_operation>:
	//usart_putchar('u');
}

void destination_operation(uint16_t speed)
{
	directions_solved[node_number] = '\0';
     9c0:	e0 91 16 01 	lds	r30, 0x0116
     9c4:	f0 91 17 01 	lds	r31, 0x0117
     9c8:	e8 5e       	subi	r30, 0xE8	; 232
     9ca:	fe 4f       	sbci	r31, 0xFE	; 254
     9cc:	10 82       	st	Z, r1
	turn_U_destination(speed);
     9ce:	0e 94 63 02 	call	0x4c6	; 0x4c6 <turn_U_destination>
     9d2:	08 95       	ret

000009d4 <evaluate_direction>:
	//usart_putchar('e');
}


void evaluate_direction(char dir,uint16_t speed)
{
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	eb 01       	movw	r28, r22
	//if (Time_x2ms >= min_up_time)
	//{
		char evaluation = 0;
		evaluation = directions_solved[node_number];
     9dc:	20 91 16 01 	lds	r18, 0x0116
     9e0:	30 91 17 01 	lds	r19, 0x0117
     9e4:	f9 01       	movw	r30, r18
     9e6:	e8 5e       	subi	r30, 0xE8	; 232
     9e8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ea:	10 81       	ld	r17, Z
		node_number = node_number + 1;
     9ec:	2f 5f       	subi	r18, 0xFF	; 255
     9ee:	3f 4f       	sbci	r19, 0xFF	; 255
     9f0:	30 93 17 01 	sts	0x0117, r19
     9f4:	20 93 16 01 	sts	0x0116, r18
		
		usart_putchar(evaluation);
     9f8:	81 2f       	mov	r24, r17
     9fa:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
		
		if (evaluation == 's')
     9fe:	13 37       	cpi	r17, 0x73	; 115
     a00:	39 f4       	brne	.+14     	; 0xa10 <evaluate_direction+0x3c>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     a02:	d9 bd       	out	0x29, r29	; 41
     a04:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     a06:	db bd       	out	0x2b, r29	; 43
     a08:	ca bd       	out	0x2a, r28	; 42
		usart_putchar(evaluation);
		
		if (evaluation == 's')
		{
			set_speed_RL(speed);
			go_forward();
     a0a:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
     a0e:	35 c0       	rjmp	.+106    	; 0xa7a <evaluate_direction+0xa6>
		}
		else if (evaluation == 'u')
     a10:	15 37       	cpi	r17, 0x75	; 117
     a12:	21 f4       	brne	.+8      	; 0xa1c <evaluate_direction+0x48>
		{
			turn_U(speed);
     a14:	ce 01       	movw	r24, r28
     a16:	0e 94 d5 01 	call	0x3aa	; 0x3aa <turn_U>
     a1a:	2f c0       	rjmp	.+94     	; 0xa7a <evaluate_direction+0xa6>
		}
		else if (evaluation == 'l')
     a1c:	1c 36       	cpi	r17, 0x6C	; 108
     a1e:	21 f4       	brne	.+8      	; 0xa28 <evaluate_direction+0x54>
		{
			turn_left(speed);
     a20:	ce 01       	movw	r24, r28
     a22:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <turn_left>
     a26:	29 c0       	rjmp	.+82     	; 0xa7a <evaluate_direction+0xa6>
		}
		else if (evaluation == 'r')
     a28:	12 37       	cpi	r17, 0x72	; 114
     a2a:	21 f4       	brne	.+8      	; 0xa34 <evaluate_direction+0x60>
		{
			turn_right(speed);
     a2c:	ce 01       	movw	r24, r28
     a2e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <turn_right>
     a32:	23 c0       	rjmp	.+70     	; 0xa7a <evaluate_direction+0xa6>
		}
		else
		{
			stay_stop();
     a34:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     a38:	2f e7       	ldi	r18, 0x7F	; 127
     a3a:	88 e3       	ldi	r24, 0x38	; 56
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	21 50       	subi	r18, 0x01	; 1
     a40:	80 40       	sbci	r24, 0x00	; 0
     a42:	90 40       	sbci	r25, 0x00	; 0
     a44:	e1 f7       	brne	.-8      	; 0xa3e <evaluate_direction+0x6a>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <evaluate_direction+0x74>
     a48:	00 00       	nop
			_delay_ms(50);
			go_backward();
     a4a:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
			set_speed_RL(speed+200);
     a4e:	c8 53       	subi	r28, 0x38	; 56
     a50:	df 4f       	sbci	r29, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     a52:	d9 bd       	out	0x29, r29	; 41
     a54:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     a56:	db bd       	out	0x2b, r29	; 43
     a58:	ca bd       	out	0x2a, r28	; 42
     a5a:	2f e7       	ldi	r18, 0x7F	; 127
     a5c:	88 e3       	ldi	r24, 0x38	; 56
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	21 50       	subi	r18, 0x01	; 1
     a62:	80 40       	sbci	r24, 0x00	; 0
     a64:	90 40       	sbci	r25, 0x00	; 0
     a66:	e1 f7       	brne	.-8      	; 0xa60 <evaluate_direction+0x8c>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <evaluate_direction+0x96>
     a6a:	00 00       	nop
			stay_stop();
			_delay_ms(50);
			go_backward();
			set_speed_RL(speed+200);
			_delay_ms(50);
			stay_stop();
     a6c:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
			usart_putstr("\r\rEnd Stuck!!!\r\r\r-------------------------------------------------------\r\r\r\r");
     a70:	8c e9       	ldi	r24, 0x9C	; 156
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
     a78:	ff cf       	rjmp	.-2      	; 0xa78 <evaluate_direction+0xa4>
			while(1);
		}
		
		//Time_x2ms = 0x00;
	//}
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	08 95       	ret

00000a82 <main>:
{
	uint16_t speed=310, destination=0;
	uint8_t sensor_data_hold=0, Right_trigged=0, Left_trigged=0, Forward_trigged=0;//, speed_grad_count=0;
	
	//port pin initialization
	PORTA = 03;
     a82:	83 e0       	ldi	r24, 0x03	; 3
     a84:	8b bb       	out	0x1b, r24	; 27
	DDRA = 00;
     a86:	1a ba       	out	0x1a, r1	; 26
	PORTB=0x00;
     a88:	18 ba       	out	0x18, r1	; 24
	DDRB=0x0F;
     a8a:	9f e0       	ldi	r25, 0x0F	; 15
     a8c:	97 bb       	out	0x17, r25	; 23
	PORTC=0xFF;
     a8e:	9f ef       	ldi	r25, 0xFF	; 255
     a90:	95 bb       	out	0x15, r25	; 21
	DDRC=0x00;
     a92:	14 ba       	out	0x14, r1	; 20
	PORTD=0x00;
     a94:	12 ba       	out	0x12, r1	; 18
	DDRD=0x30;
     a96:	90 e3       	ldi	r25, 0x30	; 48
     a98:	91 bb       	out	0x11, r25	; 17
	
	//Timer Counter0 initialization
	TCCR0=0x03; // 125k Hz at normal top 0xFF
     a9a:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
     a9c:	12 be       	out	0x32, r1	; 50
	OCR0=0x00;
     a9e:	1c be       	out	0x3c, r1	; 60
	
	//Timer Counter1 Initialization
	TCCR1A=0xA2;
     aa0:	92 ea       	ldi	r25, 0xA2	; 162
     aa2:	9f bd       	out	0x2f, r25	; 47
	TCCR1B=0x18;
     aa4:	98 e1       	ldi	r25, 0x18	; 24
     aa6:	9e bd       	out	0x2e, r25	; 46
	TCNT1=0x0000;
     aa8:	1d bc       	out	0x2d, r1	; 45
     aaa:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x03;
     aac:	87 bd       	out	0x27, r24	; 39
	ICR1L=0xE8; //03E8=1000 in decimal
     aae:	88 ee       	ldi	r24, 0xE8	; 232
     ab0:	86 bd       	out	0x26, r24	; 38
	OCR1A=speed;
     ab2:	86 e3       	ldi	r24, 0x36	; 54
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9b bd       	out	0x2b, r25	; 43
     ab8:	8a bd       	out	0x2a, r24	; 42
	OCR1B=speed;
     aba:	99 bd       	out	0x29, r25	; 41
     abc:	88 bd       	out	0x28, r24	; 40
	
	
	//USART Initialization
	usart_init(9600); 
     abe:	60 e8       	ldi	r22, 0x80	; 128
     ac0:	75 e2       	ldi	r23, 0x25	; 37
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 66 00 	call	0xcc	; 0xcc <usart_init>
	usart_putstr("\rI am ready!!\r");
     aca:	89 ee       	ldi	r24, 0xE9	; 233
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	
	
	// Timer Interrupt Mask register settings
	TIMSK=0x01;
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	89 bf       	out	0x39, r24	; 57
	sei();//global interrupt enable
     ad6:	78 94       	sei
	
	
	//start_tour:
	while (PINA & (1<<PA0));
     ad8:	c8 99       	sbic	0x19, 0	; 25
     ada:	fe cf       	rjmp	.-4      	; 0xad8 <main+0x56>
	usart_putstr("start tour :)\r\rStuck Data: ");
     adc:	88 ef       	ldi	r24, 0xF8	; 248
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
     ae4:	2f ef       	ldi	r18, 0xFF	; 255
     ae6:	84 e3       	ldi	r24, 0x34	; 52
     ae8:	9c e0       	ldi	r25, 0x0C	; 12
     aea:	21 50       	subi	r18, 0x01	; 1
     aec:	80 40       	sbci	r24, 0x00	; 0
     aee:	90 40       	sbci	r25, 0x00	; 0
     af0:	e1 f7       	brne	.-8      	; 0xaea <main+0x68>
     af2:	00 c0       	rjmp	.+0      	; 0xaf4 <main+0x72>
     af4:	00 00       	nop
	_delay_ms(500);
	go_forward();
     af6:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     afa:	8e ef       	ldi	r24, 0xFE	; 254
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	99 bd       	out	0x29, r25	; 41
     b00:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     b02:	9b bd       	out	0x2b, r25	; 43
     b04:	8a bd       	out	0x2a, r24	; 42
     b06:	2f ef       	ldi	r18, 0xFF	; 255
     b08:	86 e7       	ldi	r24, 0x76	; 118
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	21 50       	subi	r18, 0x01	; 1
     b0e:	80 40       	sbci	r24, 0x00	; 0
     b10:	90 40       	sbci	r25, 0x00	; 0
     b12:	e1 f7       	brne	.-8      	; 0xb0c <main+0x8a>
     b14:	00 c0       	rjmp	.+0      	; 0xb16 <main+0x94>
     b16:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     b18:	86 e3       	ldi	r24, 0x36	; 54
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	99 bd       	out	0x29, r25	; 41
     b1e:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     b20:	9b bd       	out	0x2b, r25	; 43
     b22:	8a bd       	out	0x2a, r24	; 42
	_delay_ms(500);
	go_forward();
	set_speed_RL(speed+200);
	_delay_ms(60);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
     b24:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     b28:	82 74       	andi	r24, 0x42	; 66
	while ((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
     b2a:	21 f0       	breq	.+8      	; 0xb34 <main+0xb2>
	{
		sensor_data_hold = sensor_data();
     b2c:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     b30:	82 74       	andi	r24, 0x42	; 66
	go_forward();
	set_speed_RL(speed+200);
	_delay_ms(60);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
	while ((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
     b32:	e1 f7       	brne	.-8      	; 0xb2c <main+0xaa>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
     b34:	10 e0       	ldi	r17, 0x00	; 0
     b36:	e1 2c       	mov	r14, r1
     b38:	f1 2c       	mov	r15, r1
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
     b3a:	a1 2c       	mov	r10, r1
     b3c:	b1 2c       	mov	r11, r1
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
     b3e:	cc 24       	eor	r12, r12
     b40:	c3 94       	inc	r12
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
     b42:	91 2c       	mov	r9, r1
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
     b44:	dc 2c       	mov	r13, r12
     b46:	03 c0       	rjmp	.+6      	; 0xb4e <main+0xcc>
     b48:	fc 2e       	mov	r15, r28
     b4a:	01 c0       	rjmp	.+2      	; 0xb4e <main+0xcc>
     b4c:	ec 2e       	mov	r14, r28
	// main while loop is started from here **********************************************************************************
	//************************************************************************************************************************	
    while(1)  //while loop 1
    {

		sensor_data_hold = sensor_data();  //normally read
     b4e:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     b52:	08 2f       	mov	r16, r24
		
		follow_line(sensor_data_hold,speed);
     b54:	66 e3       	ldi	r22, 0x36	; 54
     b56:	71 e0       	ldi	r23, 0x01	; 1
     b58:	0e 94 d5 00 	call	0x1aa	; 0x1aa <follow_line>
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
     b5c:	80 2f       	mov	r24, r16
     b5e:	80 7f       	andi	r24, 0xF0	; 240
     b60:	80 3f       	cpi	r24, 0xF0	; 240
     b62:	09 f0       	breq	.+2      	; 0xb66 <main+0xe4>
     b64:	56 c0       	rjmp	.+172    	; 0xc12 <main+0x190>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     b66:	26 e3       	ldi	r18, 0x36	; 54
     b68:	31 e0       	ldi	r19, 0x01	; 1
     b6a:	39 bd       	out	0x29, r19	; 41
     b6c:	28 bd       	out	0x28, r18	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     b6e:	3b bd       	out	0x2b, r19	; 43
     b70:	2a bd       	out	0x2a, r18	; 42
		follow_line(sensor_data_hold,speed);
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
     b72:	ca 2d       	mov	r28, r10
     b74:	db 2d       	mov	r29, r11
     b76:	13 c0       	rjmp	.+38     	; 0xb9e <main+0x11c>
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
     b78:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     b7c:	08 2f       	mov	r16, r24
				if (sensor_data_hold & (1<<1))
     b7e:	81 fd       	sbrc	r24, 1
				{
					Right_trigged=1;
     b80:	fd 2c       	mov	r15, r13
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
     b82:	80 2f       	mov	r24, r16
     b84:	8e 77       	andi	r24, 0x7E	; 126
     b86:	8e 37       	cpi	r24, 0x7E	; 126
     b88:	51 f4       	brne	.+20     	; 0xb9e <main+0x11c>
				{
					destination = destination + 1;
     b8a:	21 96       	adiw	r28, 0x01	; 1
					if (destination > 7000)   // destination triggering
     b8c:	c9 35       	cpi	r28, 0x59	; 89
     b8e:	9b e1       	ldi	r25, 0x1B	; 27
     b90:	d9 07       	cpc	r29, r25
     b92:	28 f0       	brcs	.+10     	; 0xb9e <main+0x11c>
					{
						destination = 0x00;
						destination_operation(speed);
     b94:	86 e3       	ldi	r24, 0x36	; 54
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <destination_operation>
						//while (PINA & (1<<PA0));
						goto solv_maze;
     b9c:	a2 c0       	rjmp	.+324    	; 0xce2 <main+0x260>
     b9e:	80 2f       	mov	r24, r16
     ba0:	82 74       	andi	r24, 0x42	; 66
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
     ba2:	51 f7       	brne	.-44     	; 0xb78 <main+0xf6>
     ba4:	cf 2d       	mov	r28, r15
     ba6:	2f ef       	ldi	r18, 0xFF	; 255
     ba8:	80 e7       	ldi	r24, 0x70	; 112
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	21 50       	subi	r18, 0x01	; 1
     bae:	80 40       	sbci	r24, 0x00	; 0
     bb0:	90 40       	sbci	r25, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <main+0x12a>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <main+0x134>
     bb6:	00 00       	nop
					}
				}
				
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
     bb8:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
     bbc:	8e 77       	andi	r24, 0x7E	; 126
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <main+0x140>
     bc0:	3e c1       	rjmp	.+636    	; 0xe3e <main+0x3bc>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
     bc2:	f1 10       	cpse	r15, r1
     bc4:	11 c0       	rjmp	.+34     	; 0xbe8 <main+0x166>
     bc6:	11 11       	cpse	r17, r1
     bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <main+0x152>
			{
				left_operation(speed);
     bca:	86 e3       	ldi	r24, 0x36	; 54
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0e 94 65 04 	call	0x8ca	; 0x8ca <left_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
     bd2:	bd cf       	rjmp	.-134    	; 0xb4e <main+0xcc>
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
     bd4:	11 30       	cpi	r17, 0x01	; 1
     bd6:	09 f0       	breq	.+2      	; 0xbda <main+0x158>
     bd8:	ba cf       	rjmp	.-140    	; 0xb4e <main+0xcc>
			{
				left_forward_operation(speed);
     bda:	86 e3       	ldi	r24, 0x36	; 54
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	0e 94 87 04 	call	0x90e	; 0x90e <left_forward_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
     be2:	19 2d       	mov	r17, r9
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
			{
				left_forward_operation(speed);
				Right_trigged = 0;
     be4:	f9 2c       	mov	r15, r9
				Forward_trigged = 0;
     be6:	b3 cf       	rjmp	.-154    	; 0xb4e <main+0xcc>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     be8:	c1 30       	cpi	r28, 0x01	; 1
     bea:	09 f0       	breq	.+2      	; 0xbee <main+0x16c>
     bec:	b0 cf       	rjmp	.-160    	; 0xb4e <main+0xcc>
     bee:	11 11       	cpse	r17, r1
     bf0:	06 c0       	rjmp	.+12     	; 0xbfe <main+0x17c>
			{
				left_right_operation(speed);
     bf2:	86 e3       	ldi	r24, 0x36	; 54
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	0e 94 ad 04 	call	0x95a	; 0x95a <left_right_operation>
				Right_trigged = 0;
     bfa:	f9 2c       	mov	r15, r9
				Forward_trigged = 0;
     bfc:	a8 cf       	rjmp	.-176    	; 0xb4e <main+0xcc>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
     bfe:	11 30       	cpi	r17, 0x01	; 1
     c00:	09 f0       	breq	.+2      	; 0xc04 <main+0x182>
     c02:	a2 cf       	rjmp	.-188    	; 0xb48 <main+0xc6>
			{
				left_right_forward_operation(speed);
     c04:	86 e3       	ldi	r24, 0x36	; 54
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	0e 94 be 04 	call	0x97c	; 0x97c <left_right_forward_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
     c0c:	19 2d       	mov	r17, r9
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Right_trigged = 0;
     c0e:	f9 2c       	mov	r15, r9
     c10:	9e cf       	rjmp	.-196    	; 0xb4e <main+0xcc>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
     c12:	80 2f       	mov	r24, r16
     c14:	8f 70       	andi	r24, 0x0F	; 15
     c16:	8f 30       	cpi	r24, 0x0F	; 15
     c18:	09 f0       	breq	.+2      	; 0xc1c <main+0x19a>
     c1a:	56 c0       	rjmp	.+172    	; 0xcc8 <main+0x246>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     c1c:	26 e3       	ldi	r18, 0x36	; 54
     c1e:	31 e0       	ldi	r19, 0x01	; 1
     c20:	39 bd       	out	0x29, r19	; 41
     c22:	28 bd       	out	0x28, r18	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     c24:	3b bd       	out	0x2b, r19	; 43
     c26:	2a bd       	out	0x2a, r18	; 42
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
     c28:	ca 2d       	mov	r28, r10
     c2a:	db 2d       	mov	r29, r11
     c2c:	13 c0       	rjmp	.+38     	; 0xc54 <main+0x1d2>
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
     c2e:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     c32:	08 2f       	mov	r16, r24
				if (sensor_data_hold & (1<<6))  // must change for 8 system
     c34:	86 fd       	sbrc	r24, 6
				{
					Left_trigged=1;
     c36:	ed 2c       	mov	r14, r13
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
     c38:	80 2f       	mov	r24, r16
     c3a:	8e 77       	andi	r24, 0x7E	; 126
     c3c:	8e 37       	cpi	r24, 0x7E	; 126
     c3e:	51 f4       	brne	.+20     	; 0xc54 <main+0x1d2>
				{
					destination = destination + 1;
     c40:	21 96       	adiw	r28, 0x01	; 1
					if (destination > 7000)   // destination triggering
     c42:	c9 35       	cpi	r28, 0x59	; 89
     c44:	9b e1       	ldi	r25, 0x1B	; 27
     c46:	d9 07       	cpc	r29, r25
     c48:	28 f0       	brcs	.+10     	; 0xc54 <main+0x1d2>
					{
						destination = 0x00;
						destination_operation(speed);
     c4a:	86 e3       	ldi	r24, 0x36	; 54
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <destination_operation>
						//while (PINA & (1<<PA0));
						goto solv_maze;
     c52:	47 c0       	rjmp	.+142    	; 0xce2 <main+0x260>
     c54:	80 2f       	mov	r24, r16
     c56:	82 74       	andi	r24, 0x42	; 66
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
     c58:	51 f7       	brne	.-44     	; 0xc2e <main+0x1ac>
     c5a:	ce 2d       	mov	r28, r14
     c5c:	2f ef       	ldi	r18, 0xFF	; 255
     c5e:	80 e7       	ldi	r24, 0x70	; 112
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	21 50       	subi	r18, 0x01	; 1
     c64:	80 40       	sbci	r24, 0x00	; 0
     c66:	90 40       	sbci	r25, 0x00	; 0
     c68:	e1 f7       	brne	.-8      	; 0xc62 <main+0x1e0>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <main+0x1ea>
     c6c:	00 00       	nop
						//goto start_test_operation;
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
     c6e:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
     c72:	8e 77       	andi	r24, 0x7E	; 126
     c74:	09 f0       	breq	.+2      	; 0xc78 <main+0x1f6>
     c76:	e7 c0       	rjmp	.+462    	; 0xe46 <main+0x3c4>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
     c78:	e1 10       	cpse	r14, r1
     c7a:	11 c0       	rjmp	.+34     	; 0xc9e <main+0x21c>
     c7c:	11 11       	cpse	r17, r1
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <main+0x208>
			{
				right_operation(speed);
     c80:	86 e3       	ldi	r24, 0x36	; 54
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	0e 94 76 04 	call	0x8ec	; 0x8ec <right_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
     c88:	62 cf       	rjmp	.-316    	; 0xb4e <main+0xcc>
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
     c8a:	11 30       	cpi	r17, 0x01	; 1
     c8c:	09 f0       	breq	.+2      	; 0xc90 <main+0x20e>
     c8e:	5f cf       	rjmp	.-322    	; 0xb4e <main+0xcc>
			{
				right_forward_operation(speed);
     c90:	86 e3       	ldi	r24, 0x36	; 54
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	0e 94 98 04 	call	0x930	; 0x930 <right_forward_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
     c98:	19 2d       	mov	r17, r9
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
			{
				right_forward_operation(speed);
				Left_trigged = 0;
     c9a:	e9 2c       	mov	r14, r9
				Forward_trigged = 0;
     c9c:	58 cf       	rjmp	.-336    	; 0xb4e <main+0xcc>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     c9e:	c1 30       	cpi	r28, 0x01	; 1
     ca0:	09 f0       	breq	.+2      	; 0xca4 <main+0x222>
     ca2:	55 cf       	rjmp	.-342    	; 0xb4e <main+0xcc>
     ca4:	11 11       	cpse	r17, r1
     ca6:	06 c0       	rjmp	.+12     	; 0xcb4 <main+0x232>
			{
				left_right_operation(speed);
     ca8:	86 e3       	ldi	r24, 0x36	; 54
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	0e 94 ad 04 	call	0x95a	; 0x95a <left_right_operation>
				Left_trigged = 0;
     cb0:	e9 2c       	mov	r14, r9
				Forward_trigged = 0;
     cb2:	4d cf       	rjmp	.-358    	; 0xb4e <main+0xcc>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
     cb4:	11 30       	cpi	r17, 0x01	; 1
     cb6:	09 f0       	breq	.+2      	; 0xcba <main+0x238>
     cb8:	49 cf       	rjmp	.-366    	; 0xb4c <main+0xca>
			{
				left_right_forward_operation(speed);
     cba:	86 e3       	ldi	r24, 0x36	; 54
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	0e 94 be 04 	call	0x97c	; 0x97c <left_right_forward_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
     cc2:	19 2d       	mov	r17, r9
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Left_trigged = 0;
     cc4:	e9 2c       	mov	r14, r9
     cc6:	43 cf       	rjmp	.-378    	; 0xb4e <main+0xcc>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
     cc8:	80 2f       	mov	r24, r16
     cca:	8e 77       	andi	r24, 0x7E	; 126
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <main+0x24e>
     cce:	3f cf       	rjmp	.-386    	; 0xb4e <main+0xcc>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     cd0:	86 e3       	ldi	r24, 0x36	; 54
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	99 bd       	out	0x29, r25	; 41
     cd6:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     cd8:	9b bd       	out	0x2b, r25	; 43
     cda:	8a bd       	out	0x2a, r24	; 42
			}
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
		{
			set_speed_RL(speed);
			reverse_operation(speed);
     cdc:	0e 94 cf 04 	call	0x99e	; 0x99e <reverse_operation>
     ce0:	36 cf       	rjmp	.-404    	; 0xb4e <main+0xcc>
//********* Solving the maze from here *********************************************************************
//**********************************************************************************************************

solv_maze:

	node_number = 0x00;
     ce2:	10 92 17 01 	sts	0x0117, r1
     ce6:	10 92 16 01 	sts	0x0116, r1
			evaluate_direction(1,speed);
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
     cea:	f1 2c       	mov	r15, r1
     cec:	00 e0       	ldi	r16, 0x00	; 0

	node_number = 0x00;
	
	while(1)
	{
		sensor_data_hold = sensor_data();  //normally read
     cee:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     cf2:	18 2f       	mov	r17, r24
		
		follow_line(sensor_data_hold,speed);
     cf4:	66 e3       	ldi	r22, 0x36	; 54
     cf6:	71 e0       	ldi	r23, 0x01	; 1
     cf8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <follow_line>
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
     cfc:	81 2f       	mov	r24, r17
     cfe:	80 7f       	andi	r24, 0xF0	; 240
     d00:	80 3f       	cpi	r24, 0xF0	; 240
     d02:	09 f0       	breq	.+2      	; 0xd06 <main+0x284>
     d04:	44 c0       	rjmp	.+136    	; 0xd8e <main+0x30c>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     d06:	26 e3       	ldi	r18, 0x36	; 54
     d08:	31 e0       	ldi	r19, 0x01	; 1
     d0a:	39 bd       	out	0x29, r19	; 41
     d0c:	28 bd       	out	0x28, r18	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     d0e:	3b bd       	out	0x2b, r19	; 43
     d10:	2a bd       	out	0x2a, r18	; 42
		follow_line(sensor_data_hold,speed);
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
     d12:	cf 2d       	mov	r28, r15
     d14:	d0 2f       	mov	r29, r16
     d16:	2a c0       	rjmp	.+84     	; 0xd6c <main+0x2ea>
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
     d18:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     d1c:	18 2f       	mov	r17, r24
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
     d1e:	8e 77       	andi	r24, 0x7E	; 126
     d20:	8e 37       	cpi	r24, 0x7E	; 126
     d22:	21 f5       	brne	.+72     	; 0xd6c <main+0x2ea>
				{
					destination = destination + 1;
     d24:	21 96       	adiw	r28, 0x01	; 1
					if (destination > 7000)   // destination triggering
     d26:	c9 35       	cpi	r28, 0x59	; 89
     d28:	9b e1       	ldi	r25, 0x1B	; 27
     d2a:	d9 07       	cpc	r29, r25
     d2c:	f8 f0       	brcs	.+62     	; 0xd6c <main+0x2ea>
					{
						destination = 0x00;
						stay_stop();
     d2e:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     d32:	2f e7       	ldi	r18, 0x7F	; 127
     d34:	88 e3       	ldi	r24, 0x38	; 56
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	21 50       	subi	r18, 0x01	; 1
     d3a:	80 40       	sbci	r24, 0x00	; 0
     d3c:	90 40       	sbci	r25, 0x00	; 0
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <main+0x2b6>
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <main+0x2c0>
     d42:	00 00       	nop
						_delay_ms(50);
						go_backward();
     d44:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     d48:	8e ef       	ldi	r24, 0xFE	; 254
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	99 bd       	out	0x29, r25	; 41
     d4e:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     d50:	9b bd       	out	0x2b, r25	; 43
     d52:	8a bd       	out	0x2a, r24	; 42
     d54:	2f e7       	ldi	r18, 0x7F	; 127
     d56:	88 e3       	ldi	r24, 0x38	; 56
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	21 50       	subi	r18, 0x01	; 1
     d5c:	80 40       	sbci	r24, 0x00	; 0
     d5e:	90 40       	sbci	r25, 0x00	; 0
     d60:	e1 f7       	brne	.-8      	; 0xd5a <main+0x2d8>
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <main+0x2e2>
     d64:	00 00       	nop
						stay_stop();
						_delay_ms(50);
						go_backward();
						set_speed_RL(speed+200);
						_delay_ms(50);
						stay_stop();
     d66:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     d6a:	ff cf       	rjmp	.-2      	; 0xd6a <main+0x2e8>
     d6c:	12 74       	andi	r17, 0x42	; 66
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
     d6e:	a1 f6       	brne	.-88     	; 0xd18 <main+0x296>
     d70:	2f ef       	ldi	r18, 0xFF	; 255
     d72:	80 e7       	ldi	r24, 0x70	; 112
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	21 50       	subi	r18, 0x01	; 1
     d78:	80 40       	sbci	r24, 0x00	; 0
     d7a:	90 40       	sbci	r25, 0x00	; 0
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <main+0x2f4>
     d7e:	00 c0       	rjmp	.+0      	; 0xd80 <main+0x2fe>
     d80:	00 00       	nop
						while(1);
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			evaluate_direction(1,speed);
     d82:	66 e3       	ldi	r22, 0x36	; 54
     d84:	71 e0       	ldi	r23, 0x01	; 1
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <evaluate_direction>
     d8c:	b0 cf       	rjmp	.-160    	; 0xcee <main+0x26c>
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
     d8e:	81 2f       	mov	r24, r17
     d90:	8f 70       	andi	r24, 0x0F	; 15
     d92:	8f 30       	cpi	r24, 0x0F	; 15
     d94:	09 f0       	breq	.+2      	; 0xd98 <main+0x316>
     d96:	44 c0       	rjmp	.+136    	; 0xe20 <main+0x39e>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     d98:	26 e3       	ldi	r18, 0x36	; 54
     d9a:	31 e0       	ldi	r19, 0x01	; 1
     d9c:	39 bd       	out	0x29, r19	; 41
     d9e:	28 bd       	out	0x28, r18	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     da0:	3b bd       	out	0x2b, r19	; 43
     da2:	2a bd       	out	0x2a, r18	; 42
			evaluate_direction(1,speed);
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
     da4:	cf 2d       	mov	r28, r15
     da6:	d0 2f       	mov	r29, r16
     da8:	2a c0       	rjmp	.+84     	; 0xdfe <main+0x37c>
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				sensor_data_hold = sensor_data();
     daa:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
     dae:	18 2f       	mov	r17, r24
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
     db0:	8e 77       	andi	r24, 0x7E	; 126
     db2:	8e 37       	cpi	r24, 0x7E	; 126
     db4:	21 f5       	brne	.+72     	; 0xdfe <main+0x37c>
				{
					destination = destination + 1;
     db6:	21 96       	adiw	r28, 0x01	; 1
					if (destination > 7000)   // destination triggering
     db8:	c9 35       	cpi	r28, 0x59	; 89
     dba:	9b e1       	ldi	r25, 0x1B	; 27
     dbc:	d9 07       	cpc	r29, r25
     dbe:	f8 f0       	brcs	.+62     	; 0xdfe <main+0x37c>
					{
						destination = 0x00;
						stay_stop();
     dc0:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     dc4:	2f e7       	ldi	r18, 0x7F	; 127
     dc6:	88 e3       	ldi	r24, 0x38	; 56
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	21 50       	subi	r18, 0x01	; 1
     dcc:	80 40       	sbci	r24, 0x00	; 0
     dce:	90 40       	sbci	r25, 0x00	; 0
     dd0:	e1 f7       	brne	.-8      	; 0xdca <main+0x348>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <main+0x352>
     dd4:	00 00       	nop
						_delay_ms(50);
						go_backward();
     dd6:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     dda:	8e ef       	ldi	r24, 0xFE	; 254
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	99 bd       	out	0x29, r25	; 41
     de0:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     de2:	9b bd       	out	0x2b, r25	; 43
     de4:	8a bd       	out	0x2a, r24	; 42
     de6:	2f e7       	ldi	r18, 0x7F	; 127
     de8:	88 e3       	ldi	r24, 0x38	; 56
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	21 50       	subi	r18, 0x01	; 1
     dee:	80 40       	sbci	r24, 0x00	; 0
     df0:	90 40       	sbci	r25, 0x00	; 0
     df2:	e1 f7       	brne	.-8      	; 0xdec <main+0x36a>
     df4:	00 c0       	rjmp	.+0      	; 0xdf6 <main+0x374>
     df6:	00 00       	nop
						stay_stop();
						_delay_ms(50);
						go_backward();
						set_speed_RL(speed+200);
						_delay_ms(50);
						stay_stop();
     df8:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
     dfc:	ff cf       	rjmp	.-2      	; 0xdfc <main+0x37a>
     dfe:	12 74       	andi	r17, 0x42	; 66
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
     e00:	a1 f6       	brne	.-88     	; 0xdaa <main+0x328>
     e02:	2f ef       	ldi	r18, 0xFF	; 255
     e04:	80 e7       	ldi	r24, 0x70	; 112
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	21 50       	subi	r18, 0x01	; 1
     e0a:	80 40       	sbci	r24, 0x00	; 0
     e0c:	90 40       	sbci	r25, 0x00	; 0
     e0e:	e1 f7       	brne	.-8      	; 0xe08 <main+0x386>
     e10:	00 c0       	rjmp	.+0      	; 0xe12 <main+0x390>
     e12:	00 00       	nop
						while(1);
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			evaluate_direction(2,speed);
     e14:	66 e3       	ldi	r22, 0x36	; 54
     e16:	71 e0       	ldi	r23, 0x01	; 1
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <evaluate_direction>
     e1e:	67 cf       	rjmp	.-306    	; 0xcee <main+0x26c>
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
     e20:	1e 77       	andi	r17, 0x7E	; 126
     e22:	09 f0       	breq	.+2      	; 0xe26 <main+0x3a4>
     e24:	64 cf       	rjmp	.-312    	; 0xcee <main+0x26c>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
     e26:	86 e3       	ldi	r24, 0x36	; 54
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	99 bd       	out	0x29, r25	; 41
     e2c:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
     e2e:	9b bd       	out	0x2b, r25	; 43
     e30:	8a bd       	out	0x2a, r24	; 42
			evaluate_direction(2,speed);
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
		{
			set_speed_RL(speed);
			evaluate_direction(7,speed);
     e32:	66 e3       	ldi	r22, 0x36	; 54
     e34:	71 e0       	ldi	r23, 0x01	; 1
     e36:	87 e0       	ldi	r24, 0x07	; 7
     e38:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <evaluate_direction>
     e3c:	58 cf       	rjmp	.-336    	; 0xcee <main+0x26c>
			{
				left_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
     e3e:	ff 20       	and	r15, r15
     e40:	09 f4       	brne	.+2      	; 0xe44 <main+0x3c2>
     e42:	cb ce       	rjmp	.-618    	; 0xbda <main+0x158>
     e44:	04 c0       	rjmp	.+8      	; 0xe4e <main+0x3cc>
			{
				right_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
     e46:	ee 20       	and	r14, r14
     e48:	09 f4       	brne	.+2      	; 0xe4c <main+0x3ca>
     e4a:	22 cf       	rjmp	.-444    	; 0xc90 <main+0x20e>
     e4c:	05 c0       	rjmp	.+10     	; 0xe58 <main+0x3d6>
			{
				left_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
     e4e:	c1 30       	cpi	r28, 0x01	; 1
     e50:	09 f4       	brne	.+2      	; 0xe54 <main+0x3d2>
     e52:	d8 ce       	rjmp	.-592    	; 0xc04 <main+0x182>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
     e54:	1c 2d       	mov	r17, r12
     e56:	7b ce       	rjmp	.-778    	; 0xb4e <main+0xcc>
			{
				right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
     e58:	c1 30       	cpi	r28, 0x01	; 1
     e5a:	09 f4       	brne	.+2      	; 0xe5e <main+0x3dc>
     e5c:	2e cf       	rjmp	.-420    	; 0xcba <main+0x238>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
     e5e:	1c 2d       	mov	r17, r12
     e60:	76 ce       	rjmp	.-788    	; 0xb4e <main+0xcc>

00000e62 <__floatunsisf>:
     e62:	e8 94       	clt
     e64:	09 c0       	rjmp	.+18     	; 0xe78 <__floatsisf+0x12>

00000e66 <__floatsisf>:
     e66:	97 fb       	bst	r25, 7
     e68:	3e f4       	brtc	.+14     	; 0xe78 <__floatsisf+0x12>
     e6a:	90 95       	com	r25
     e6c:	80 95       	com	r24
     e6e:	70 95       	com	r23
     e70:	61 95       	neg	r22
     e72:	7f 4f       	sbci	r23, 0xFF	; 255
     e74:	8f 4f       	sbci	r24, 0xFF	; 255
     e76:	9f 4f       	sbci	r25, 0xFF	; 255
     e78:	99 23       	and	r25, r25
     e7a:	a9 f0       	breq	.+42     	; 0xea6 <__floatsisf+0x40>
     e7c:	f9 2f       	mov	r31, r25
     e7e:	96 e9       	ldi	r25, 0x96	; 150
     e80:	bb 27       	eor	r27, r27
     e82:	93 95       	inc	r25
     e84:	f6 95       	lsr	r31
     e86:	87 95       	ror	r24
     e88:	77 95       	ror	r23
     e8a:	67 95       	ror	r22
     e8c:	b7 95       	ror	r27
     e8e:	f1 11       	cpse	r31, r1
     e90:	f8 cf       	rjmp	.-16     	; 0xe82 <__floatsisf+0x1c>
     e92:	fa f4       	brpl	.+62     	; 0xed2 <__floatsisf+0x6c>
     e94:	bb 0f       	add	r27, r27
     e96:	11 f4       	brne	.+4      	; 0xe9c <__floatsisf+0x36>
     e98:	60 ff       	sbrs	r22, 0
     e9a:	1b c0       	rjmp	.+54     	; 0xed2 <__floatsisf+0x6c>
     e9c:	6f 5f       	subi	r22, 0xFF	; 255
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	8f 4f       	sbci	r24, 0xFF	; 255
     ea2:	9f 4f       	sbci	r25, 0xFF	; 255
     ea4:	16 c0       	rjmp	.+44     	; 0xed2 <__floatsisf+0x6c>
     ea6:	88 23       	and	r24, r24
     ea8:	11 f0       	breq	.+4      	; 0xeae <__floatsisf+0x48>
     eaa:	96 e9       	ldi	r25, 0x96	; 150
     eac:	11 c0       	rjmp	.+34     	; 0xed0 <__floatsisf+0x6a>
     eae:	77 23       	and	r23, r23
     eb0:	21 f0       	breq	.+8      	; 0xeba <__floatsisf+0x54>
     eb2:	9e e8       	ldi	r25, 0x8E	; 142
     eb4:	87 2f       	mov	r24, r23
     eb6:	76 2f       	mov	r23, r22
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <__floatsisf+0x5e>
     eba:	66 23       	and	r22, r22
     ebc:	71 f0       	breq	.+28     	; 0xeda <__floatsisf+0x74>
     ebe:	96 e8       	ldi	r25, 0x86	; 134
     ec0:	86 2f       	mov	r24, r22
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	2a f0       	brmi	.+10     	; 0xed2 <__floatsisf+0x6c>
     ec8:	9a 95       	dec	r25
     eca:	66 0f       	add	r22, r22
     ecc:	77 1f       	adc	r23, r23
     ece:	88 1f       	adc	r24, r24
     ed0:	da f7       	brpl	.-10     	; 0xec8 <__floatsisf+0x62>
     ed2:	88 0f       	add	r24, r24
     ed4:	96 95       	lsr	r25
     ed6:	87 95       	ror	r24
     ed8:	97 f9       	bld	r25, 7
     eda:	08 95       	ret

00000edc <lrint>:
     edc:	41 d0       	rcall	.+130    	; 0xf60 <__fp_splitA>
     ede:	a8 f1       	brcs	.+106    	; 0xf4a <lrint+0x6e>
     ee0:	9e 57       	subi	r25, 0x7E	; 126
     ee2:	a8 f1       	brcs	.+106    	; 0xf4e <lrint+0x72>
     ee4:	98 51       	subi	r25, 0x18	; 24
     ee6:	60 f0       	brcs	.+24     	; 0xf00 <lrint+0x24>
     ee8:	39 f1       	breq	.+78     	; 0xf38 <lrint+0x5c>
     eea:	98 30       	cpi	r25, 0x08	; 8
     eec:	70 f5       	brcc	.+92     	; 0xf4a <lrint+0x6e>
     eee:	09 2e       	mov	r0, r25
     ef0:	99 27       	eor	r25, r25
     ef2:	66 0f       	add	r22, r22
     ef4:	77 1f       	adc	r23, r23
     ef6:	88 1f       	adc	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	d1 f7       	brne	.-12     	; 0xef2 <lrint+0x16>
     efe:	1c c0       	rjmp	.+56     	; 0xf38 <lrint+0x5c>
     f00:	bb 27       	eor	r27, r27
     f02:	99 3f       	cpi	r25, 0xF9	; 249
     f04:	4c f4       	brge	.+18     	; 0xf18 <lrint+0x3c>
     f06:	b1 11       	cpse	r27, r1
     f08:	b1 e0       	ldi	r27, 0x01	; 1
     f0a:	b6 2b       	or	r27, r22
     f0c:	67 2f       	mov	r22, r23
     f0e:	78 2f       	mov	r23, r24
     f10:	88 27       	eor	r24, r24
     f12:	98 5f       	subi	r25, 0xF8	; 248
     f14:	b1 f7       	brne	.-20     	; 0xf02 <lrint+0x26>
     f16:	08 c0       	rjmp	.+16     	; 0xf28 <lrint+0x4c>
     f18:	86 95       	lsr	r24
     f1a:	77 95       	ror	r23
     f1c:	67 95       	ror	r22
     f1e:	b7 95       	ror	r27
     f20:	08 f4       	brcc	.+2      	; 0xf24 <lrint+0x48>
     f22:	b1 60       	ori	r27, 0x01	; 1
     f24:	93 95       	inc	r25
     f26:	c1 f7       	brne	.-16     	; 0xf18 <lrint+0x3c>
     f28:	bb 0f       	add	r27, r27
     f2a:	30 f4       	brcc	.+12     	; 0xf38 <lrint+0x5c>
     f2c:	11 f4       	brne	.+4      	; 0xf32 <lrint+0x56>
     f2e:	60 ff       	sbrs	r22, 0
     f30:	03 c0       	rjmp	.+6      	; 0xf38 <lrint+0x5c>
     f32:	6f 5f       	subi	r22, 0xFF	; 255
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	8f 4f       	sbci	r24, 0xFF	; 255
     f38:	3e f4       	brtc	.+14     	; 0xf48 <lrint+0x6c>
     f3a:	90 95       	com	r25
     f3c:	80 95       	com	r24
     f3e:	70 95       	com	r23
     f40:	61 95       	neg	r22
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	8f 4f       	sbci	r24, 0xFF	; 255
     f46:	9f 4f       	sbci	r25, 0xFF	; 255
     f48:	08 95       	ret
     f4a:	68 94       	set
     f4c:	24 c0       	rjmp	.+72     	; 0xf96 <__fp_szero>
     f4e:	22 c0       	rjmp	.+68     	; 0xf94 <__fp_zero>

00000f50 <__fp_split3>:
     f50:	57 fd       	sbrc	r21, 7
     f52:	90 58       	subi	r25, 0x80	; 128
     f54:	44 0f       	add	r20, r20
     f56:	55 1f       	adc	r21, r21
     f58:	59 f0       	breq	.+22     	; 0xf70 <__fp_splitA+0x10>
     f5a:	5f 3f       	cpi	r21, 0xFF	; 255
     f5c:	71 f0       	breq	.+28     	; 0xf7a <__fp_splitA+0x1a>
     f5e:	47 95       	ror	r20

00000f60 <__fp_splitA>:
     f60:	88 0f       	add	r24, r24
     f62:	97 fb       	bst	r25, 7
     f64:	99 1f       	adc	r25, r25
     f66:	61 f0       	breq	.+24     	; 0xf80 <__fp_splitA+0x20>
     f68:	9f 3f       	cpi	r25, 0xFF	; 255
     f6a:	79 f0       	breq	.+30     	; 0xf8a <__fp_splitA+0x2a>
     f6c:	87 95       	ror	r24
     f6e:	08 95       	ret
     f70:	12 16       	cp	r1, r18
     f72:	13 06       	cpc	r1, r19
     f74:	14 06       	cpc	r1, r20
     f76:	55 1f       	adc	r21, r21
     f78:	f2 cf       	rjmp	.-28     	; 0xf5e <__fp_split3+0xe>
     f7a:	46 95       	lsr	r20
     f7c:	f1 df       	rcall	.-30     	; 0xf60 <__fp_splitA>
     f7e:	08 c0       	rjmp	.+16     	; 0xf90 <__fp_splitA+0x30>
     f80:	16 16       	cp	r1, r22
     f82:	17 06       	cpc	r1, r23
     f84:	18 06       	cpc	r1, r24
     f86:	99 1f       	adc	r25, r25
     f88:	f1 cf       	rjmp	.-30     	; 0xf6c <__fp_splitA+0xc>
     f8a:	86 95       	lsr	r24
     f8c:	71 05       	cpc	r23, r1
     f8e:	61 05       	cpc	r22, r1
     f90:	08 94       	sec
     f92:	08 95       	ret

00000f94 <__fp_zero>:
     f94:	e8 94       	clt

00000f96 <__fp_szero>:
     f96:	bb 27       	eor	r27, r27
     f98:	66 27       	eor	r22, r22
     f9a:	77 27       	eor	r23, r23
     f9c:	cb 01       	movw	r24, r22
     f9e:	97 f9       	bld	r25, 7
     fa0:	08 95       	ret

00000fa2 <__udivmodsi4>:
     fa2:	a1 e2       	ldi	r26, 0x21	; 33
     fa4:	1a 2e       	mov	r1, r26
     fa6:	aa 1b       	sub	r26, r26
     fa8:	bb 1b       	sub	r27, r27
     faa:	fd 01       	movw	r30, r26
     fac:	0d c0       	rjmp	.+26     	; 0xfc8 <__udivmodsi4_ep>

00000fae <__udivmodsi4_loop>:
     fae:	aa 1f       	adc	r26, r26
     fb0:	bb 1f       	adc	r27, r27
     fb2:	ee 1f       	adc	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	a2 17       	cp	r26, r18
     fb8:	b3 07       	cpc	r27, r19
     fba:	e4 07       	cpc	r30, r20
     fbc:	f5 07       	cpc	r31, r21
     fbe:	20 f0       	brcs	.+8      	; 0xfc8 <__udivmodsi4_ep>
     fc0:	a2 1b       	sub	r26, r18
     fc2:	b3 0b       	sbc	r27, r19
     fc4:	e4 0b       	sbc	r30, r20
     fc6:	f5 0b       	sbc	r31, r21

00000fc8 <__udivmodsi4_ep>:
     fc8:	66 1f       	adc	r22, r22
     fca:	77 1f       	adc	r23, r23
     fcc:	88 1f       	adc	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	1a 94       	dec	r1
     fd2:	69 f7       	brne	.-38     	; 0xfae <__udivmodsi4_loop>
     fd4:	60 95       	com	r22
     fd6:	70 95       	com	r23
     fd8:	80 95       	com	r24
     fda:	90 95       	com	r25
     fdc:	9b 01       	movw	r18, r22
     fde:	ac 01       	movw	r20, r24
     fe0:	bd 01       	movw	r22, r26
     fe2:	cf 01       	movw	r24, r30
     fe4:	08 95       	ret

00000fe6 <strrev>:
     fe6:	dc 01       	movw	r26, r24
     fe8:	fc 01       	movw	r30, r24
     fea:	67 2f       	mov	r22, r23
     fec:	71 91       	ld	r23, Z+
     fee:	77 23       	and	r23, r23
     ff0:	e1 f7       	brne	.-8      	; 0xfea <strrev+0x4>
     ff2:	32 97       	sbiw	r30, 0x02	; 2
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <strrev+0x18>
     ff6:	7c 91       	ld	r23, X
     ff8:	6d 93       	st	X+, r22
     ffa:	70 83       	st	Z, r23
     ffc:	62 91       	ld	r22, -Z
     ffe:	ae 17       	cp	r26, r30
    1000:	bf 07       	cpc	r27, r31
    1002:	c8 f3       	brcs	.-14     	; 0xff6 <strrev+0x10>
    1004:	08 95       	ret

00001006 <_exit>:
    1006:	f8 94       	cli

00001008 <__stop_program>:
    1008:	ff cf       	rjmp	.-2      	; 0x1008 <__stop_program>
