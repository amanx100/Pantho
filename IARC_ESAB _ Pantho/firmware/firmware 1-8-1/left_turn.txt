/*
 * firmware.c
 *
 * Created: 2/13/2015 11:52:53 PM
 *  Author: Aman
 */ 

#define F_CPU 8000000UL
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdlib.h>
#include <stdio.h>
#include "myusart.h"
#include <util/delay.h>
#include "m_dir.h"
//#include <math.h>
uint32_t wheel_feedback_R=0, wheel_feedback_L=0;
uint8_t R=0, L=0;
//char ch_buffer[40];

ISR(INT0_vect)
{
	wheel_feedback_L = wheel_feedback_L + 1;
	//sprintf(ch_buffer,"left data: %d \n\r",(uint16_t)wheel_feedback_L);
	//usart_putstr(ch_buffer);
}

ISR(INT1_vect)
{
	wheel_feedback_R = wheel_feedback_R + 1;
	//sprintf(ch_buffer,"right data: %d \n\r",(uint16_t)wheel_feedback_R);
	//usart_putstr(ch_buffer);
}


void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
}

void set_speed_RL(uint16_t speed_RL)
{
	set_speed_R(speed_RL);
	set_speed_L(speed_RL);
}

uint8_t sensor_data(void)
{
	uint8_t sn_data_1=0, sn_data_2=0;
sn_dt:
	sn_data_1 = PINC;
	_delay_us(100); // changed from 3500
	sn_data_2 = PINC;
	if (sn_data_1 == sn_data_2)
	{
		_delay_us(100); //changed from 3500
		sn_data_2 = PINC;
		if (sn_data_1 == sn_data_2)
		{
			return sn_data_1;
		}
		else goto sn_dt;
	}
	else goto sn_dt;
}


void turn_left(uint16_t speed)
{
	stay_stop();
	set_speed_RL(speed);
	_delay_ms(150);
	left_rotate();
	while((sensor_data() & (3<<5)) != (3<<5));
	while((sensor_data() & (3<<4)) != (3<<4));
	//while((sensor_data() & (3<<3)) != (3<<3));
	stay_stop();
	_delay_ms(100);
	go_forward();
}

void turn_left_WF(uint16_t speed)
{
	stay_stop();
	set_speed_RL(speed);
	_delay_ms(100);
	R=0;
	L=0;
	wheel_feedback_L = 0;
	wheel_feedback_R = 0;
	left_rotate();
	while(1)
	{
		if (wheel_feedback_L > 36)
		{
			set_speed_L(0);
			L = 1;
		}
		if (wheel_feedback_R > 36)
		{
			set_speed_R(0);
			R = 1;
		}
		if (R && L)
		{
			break;
		}
	}
	
	
	//while(!(sensor_data() & (3<<3)));
	//stay_stop();
	_delay_ms(100);
	set_speed_RL(speed);
	go_forward();
}


// ********************************************************************************************************************************
// main function is started from here *********************************************************************************************
// ********************************************************************************************************************************

int main(void)
{

	uint16_t speed=300;//, speed_L=500, speed_R=500;// LS=100, RS=100;
	uint8_t speed_grad_count=0, sensor_data_hold=0, sensor_data_temp=0;
	
	PORTA = 03;
	DDRA = 00;
	
	PORTB=0x00;
	DDRB=0x0F;
	
	PORTC=0xFF;
	DDRC=0x00;
	
	PORTD=0x00;
	DDRD=0x30;
	
	//Timer Counter1 Initialization
	TCCR1A=0xA2;
	TCCR1B=0x18;
	TCNT1=0x0000;
	ICR1H=0x03;
	ICR1L=0xE8; //03E8=1000 in decimal
	OCR1A=speed;
	OCR1B=speed;
	
	usart_init(9600); //USART Initialization
	
	
	//start interrupt settings
	GICR |= (1<<INT0)|(1<<INT1);				// Enable INT0 and INT1
	MCUCSR |= 0x00;
	MCUCR = 0x00;				// Trigger INT2 settings
	MCUCR |= (1<<ISC00)|(1<<ISC10);	//trigger int0 and int1 on any change
	GIFR = (1<<INTF0)|(1<<INTF1);				//Interrupt flag 2 is cleared by writing a logical one into INTF
	sei();							//Global Interrupt enable
	
	
	
	start_tour:
	while (PINA & (1<<PA0));
	_delay_ms(1000);
	go_forward();
	//************************************************************************************************************************
	// main while loop is started from here **********************************************************************************
	//************************************************************************************************************************	
    while(1)
    {
		//speed grad
		if (speed < 1000)
		{
			speed_grad_count = speed_grad_count + 1;
			if (speed_grad_count > 5)
			{
				speed = speed + 1;
				set_speed_RL(speed);
				speed_grad_count = 0;
			}
		}
		// end speed grad
		
		sensor_data_hold = sensor_data();  //normally read
		
		// start line follow
		if ((sensor_data_hold & (3<<3)) != (3<<3))
		{
			sensor_data_hold = sensor_data();  // noise check read
		}
		if ((sensor_data_hold & (3<<3)) != (3<<3))
		{
			if (sensor_data_hold & (1<<3))
			{
				set_speed_R(speed - 200);
			}
			if (sensor_data_hold & (1<<4))  //do not else if*
			{
				set_speed_L(speed - 200);
			}
		}
		else
		{
			set_speed_RL(speed);
		}
		// end line follow
		
		
		if ((sensor_data_hold & (63<<1)) == (63<<1))	// right and left both trig
		{
			speed = 600;
			while(1)
			{
				sensor_data_temp = sensor_data();
				if ((sensor_data_temp & (63<<1)) != (63<<1))
				{
					sensor_data_temp = sensor_data(); //delay can be added
				}
				if ((sensor_data_temp & (63<<1)) != (63<<1))
				{
					if (sensor_data_temp == 0)
					{
						//update path data
						break;
					}
					else if (sensor_data_temp & (15<<2))
					{
						//update path data
						break;
					}
				}
			}
		}
		
		else if ((sensor_data_hold & (7<<4)) == (7<<4))		//left turn trig
		{
			speed = 250;
			while(1)
			{
				sensor_data_temp = sensor_data();
				if ((sensor_data_temp & (7<<4)) != (7<<4))
				{
					sensor_data_temp = sensor_data();  //delay can be added
				}
				if ((sensor_data_temp & (7<<4)) != (7<<4))
				{
					_delay_ms(5);
					sensor_data_temp = sensor_data();
					if (sensor_data_temp == 0)
					{
						//update path data
						turn_left_WF(speed);
						break;
					}
					else if (sensor_data_temp & (15<<2))
					{
						//update path data
						//turn_left(speed);
						break;
					}
				}
			}
		}
		
		else if ((sensor_data_hold & (7<<1)) == (7<<1))		//right turn trig
		{
			speed = 600;
			while(1)
			{
				sensor_data_temp = sensor_data();
				if ((sensor_data_temp & (7<<1)) != (7<<1))
				{
					sensor_data_temp = sensor_data();  //delay can be added
				}
				if ((sensor_data_temp & (7<<1)) != (7<<1))
				{
					if (sensor_data_temp == 0)
					{
						//update path data
						break;
					}
					else if (sensor_data_temp & (15<<2))
					{
						//update path data
						break;
					}
				}
			}
			
		}
		
		else if (sensor_data_hold==0)
		{
			stay_stop();
			speed = 300;
			goto start_tour;
		}
    }
}