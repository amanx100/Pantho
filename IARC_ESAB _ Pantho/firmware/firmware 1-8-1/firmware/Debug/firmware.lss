
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b88  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000198  00800060  00800060  00000bfc  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000d8  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000018b5  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002d4  00000000  00000000  000025b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000071b  00000000  00000000  0000288d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001f0  00000000  00000000  00002fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000389  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000184e  00000000  00000000  00003521  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000128  00000000  00000000  00004d6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	21 e0       	ldi	r18, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 3f       	cpi	r26, 0xF8	; 248
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3c 03 	call	0x678	; 0x678 <main>
  74:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <go_forward>:
#ifndef M_DIR_H_
#define M_DIR_H_

void go_forward(void)
{
	PORTB = 0x05;
  7c:	85 e0       	ldi	r24, 0x05	; 5
  7e:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  80:	8e b5       	in	r24, 0x2e	; 46
  82:	82 60       	ori	r24, 0x02	; 2
  84:	8e bd       	out	0x2e, r24	; 46
  86:	08 95       	ret

00000088 <go_backward>:
}

void go_backward(void)
{
	PORTB = 0x0A;
  88:	8a e0       	ldi	r24, 0x0A	; 10
  8a:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  8c:	8e b5       	in	r24, 0x2e	; 46
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	8e bd       	out	0x2e, r24	; 46
  92:	08 95       	ret

00000094 <right_rotate>:
}

void right_rotate(void)
{
	PORTB = 0x09;
  94:	89 e0       	ldi	r24, 0x09	; 9
  96:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  98:	8e b5       	in	r24, 0x2e	; 46
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	8e bd       	out	0x2e, r24	; 46
  9e:	08 95       	ret

000000a0 <left_rotate>:
}

void left_rotate(void)
{
	PORTB = 0x06;
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  a4:	8e b5       	in	r24, 0x2e	; 46
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	8e bd       	out	0x2e, r24	; 46
  aa:	08 95       	ret

000000ac <stay_stop>:
}

void stay_stop(void)
{
	PORTB = 0x00;
  ac:	18 ba       	out	0x18, r1	; 24
	TCCR1B &= ~(1<<1);
  ae:	8e b5       	in	r24, 0x2e	; 46
  b0:	8d 7f       	andi	r24, 0xFD	; 253
  b2:	8e bd       	out	0x2e, r24	; 46
  b4:	08 95       	ret

000000b6 <sensor_data>:
}

uint8_t sensor_data(void)
{
sn_dt:
	if ((PIND & (1<<PD2)) && (PIND & (1<<PD3)))
  b6:	82 9b       	sbis	0x10, 2	; 16
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <sensor_data>
  ba:	83 9b       	sbis	0x10, 3	; 16
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <sensor_data>
	{
		return PINC;
  be:	83 b3       	in	r24, 0x13	; 19
	}
	else goto sn_dt;
}
  c0:	08 95       	ret

000000c2 <process_array>:

void process_array(void)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	int i;
	strrev(directions_entry);
  c6:	88 e6       	ldi	r24, 0x68	; 104
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 b2 05 	call	0xb64	; 0xb64 <strrev>
	strcpy ( directions_solved, directions_entry );
  ce:	68 e6       	ldi	r22, 0x68	; 104
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	80 e3       	ldi	r24, 0x30	; 48
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	0e 94 ab 05 	call	0xb56	; 0xb56 <strcpy>
  da:	e0 e3       	ldi	r30, 0x30	; 48
  dc:	f1 e0       	ldi	r31, 0x01	; 1
  de:	88 ef       	ldi	r24, 0xF8	; 248
  e0:	91 e0       	ldi	r25, 0x01	; 1
		{
			directions_solved[i] = 'r';
		}
		else if (directions_solved[i] == 'r')
		{
			directions_solved[i] = 'l';
  e2:	4c e6       	ldi	r20, 0x6C	; 108
	
	for (i=0;i<200;i++)
	{
		if (directions_solved[i] == 'l')
		{
			directions_solved[i] = 'r';
  e4:	32 e7       	ldi	r19, 0x72	; 114
	strrev(directions_entry);
	strcpy ( directions_solved, directions_entry );
	
	for (i=0;i<200;i++)
	{
		if (directions_solved[i] == 'l')
  e6:	20 81       	ld	r18, Z
  e8:	2c 36       	cpi	r18, 0x6C	; 108
  ea:	11 f4       	brne	.+4      	; 0xf0 <process_array+0x2e>
		{
			directions_solved[i] = 'r';
  ec:	30 83       	st	Z, r19
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <process_array+0x34>
		}
		else if (directions_solved[i] == 'r')
  f0:	22 37       	cpi	r18, 0x72	; 114
  f2:	09 f4       	brne	.+2      	; 0xf6 <process_array+0x34>
		{
			directions_solved[i] = 'l';
  f4:	40 83       	st	Z, r20
  f6:	31 96       	adiw	r30, 0x01	; 1
{
	int i;
	strrev(directions_entry);
	strcpy ( directions_solved, directions_entry );
	
	for (i=0;i<200;i++)
  f8:	e8 17       	cp	r30, r24
  fa:	f9 07       	cpc	r31, r25
  fc:	a1 f7       	brne	.-24     	; 0xe6 <process_array+0x24>
		{
			directions_solved[i] = 'l';
		}
	}
	
	for (i=0;directions_solved[i];i++)
  fe:	20 91 30 01 	lds	r18, 0x0130
 102:	22 23       	and	r18, r18
 104:	09 f4       	brne	.+2      	; 0x108 <process_array+0x46>
 106:	96 c0       	rjmp	.+300    	; 0x234 <process_array+0x172>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
			{
				directions_solved[i-1] = 's';
 10c:	d3 e7       	ldi	r29, 0x73	; 115
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'r';
 10e:	c2 e7       	ldi	r28, 0x72	; 114
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'u';
 110:	65 e7       	ldi	r22, 0x75	; 117
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
			{
				directions_solved[i-1] = 'l';
 112:	7c e6       	ldi	r23, 0x6C	; 108
			{
				directions_solved[i] = directions_solved[i+2];
				i++;
			}
			directions_solved[i] = '\0';
			i=0;
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	40 e0       	ldi	r20, 0x00	; 0
		}
	}
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'u')
 118:	25 37       	cpi	r18, 0x75	; 117
 11a:	09 f0       	breq	.+2      	; 0x11e <process_array+0x5c>
 11c:	84 c0       	rjmp	.+264    	; 0x226 <process_array+0x164>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
 11e:	9c 01       	movw	r18, r24
 120:	21 50       	subi	r18, 0x01	; 1
 122:	31 09       	sbc	r19, r1
 124:	f9 01       	movw	r30, r18
 126:	e0 5d       	subi	r30, 0xD0	; 208
 128:	fe 4f       	sbci	r31, 0xFE	; 254
 12a:	a0 81       	ld	r26, Z
 12c:	a2 37       	cpi	r26, 0x72	; 114
 12e:	89 f4       	brne	.+34     	; 0x152 <process_array+0x90>
 130:	fc 01       	movw	r30, r24
 132:	e0 5d       	subi	r30, 0xD0	; 208
 134:	fe 4f       	sbci	r31, 0xFE	; 254
 136:	e1 81       	ldd	r30, Z+1	; 0x01
 138:	e3 37       	cpi	r30, 0x73	; 115
 13a:	29 f5       	brne	.+74     	; 0x186 <process_array+0xc4>
			{
				directions_solved[i-1] = 'l';
 13c:	f9 01       	movw	r30, r18
 13e:	e0 5d       	subi	r30, 0xD0	; 208
 140:	fe 4f       	sbci	r31, 0xFE	; 254
 142:	70 83       	st	Z, r23
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'u';
			}
			
			while (directions_solved[i+2])
 144:	fc 01       	movw	r30, r24
 146:	e0 5d       	subi	r30, 0xD0	; 208
 148:	fe 4f       	sbci	r31, 0xFE	; 254
 14a:	22 81       	ldd	r18, Z+2	; 0x02
 14c:	21 11       	cpse	r18, r1
 14e:	5a c0       	rjmp	.+180    	; 0x204 <process_array+0x142>
 150:	64 c0       	rjmp	.+200    	; 0x21a <process_array+0x158>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
 152:	a3 37       	cpi	r26, 0x73	; 115
 154:	59 f4       	brne	.+22     	; 0x16c <process_array+0xaa>
 156:	fc 01       	movw	r30, r24
 158:	e0 5d       	subi	r30, 0xD0	; 208
 15a:	fe 4f       	sbci	r31, 0xFE	; 254
 15c:	e1 81       	ldd	r30, Z+1	; 0x01
 15e:	e2 37       	cpi	r30, 0x72	; 114
 160:	31 f5       	brne	.+76     	; 0x1ae <process_array+0xec>
			{
				directions_solved[i-1] = 'l';
 162:	f9 01       	movw	r30, r18
 164:	e0 5d       	subi	r30, 0xD0	; 208
 166:	fe 4f       	sbci	r31, 0xFE	; 254
 168:	70 83       	st	Z, r23
 16a:	ec cf       	rjmp	.-40     	; 0x144 <process_array+0x82>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'r')
 16c:	ac 36       	cpi	r26, 0x6C	; 108
 16e:	59 f4       	brne	.+22     	; 0x186 <process_array+0xc4>
 170:	fc 01       	movw	r30, r24
 172:	e0 5d       	subi	r30, 0xD0	; 208
 174:	fe 4f       	sbci	r31, 0xFE	; 254
 176:	e1 81       	ldd	r30, Z+1	; 0x01
 178:	e2 37       	cpi	r30, 0x72	; 114
 17a:	d9 f4       	brne	.+54     	; 0x1b2 <process_array+0xf0>
			{
				directions_solved[i-1] = 'u';
 17c:	f9 01       	movw	r30, r18
 17e:	e0 5d       	subi	r30, 0xD0	; 208
 180:	fe 4f       	sbci	r31, 0xFE	; 254
 182:	60 83       	st	Z, r22
 184:	df cf       	rjmp	.-66     	; 0x144 <process_array+0x82>
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'r')
 186:	a2 37       	cpi	r26, 0x72	; 114
 188:	91 f4       	brne	.+36     	; 0x1ae <process_array+0xec>
 18a:	fc 01       	movw	r30, r24
 18c:	e0 5d       	subi	r30, 0xD0	; 208
 18e:	fe 4f       	sbci	r31, 0xFE	; 254
 190:	e1 81       	ldd	r30, Z+1	; 0x01
 192:	e2 37       	cpi	r30, 0x72	; 114
 194:	29 f4       	brne	.+10     	; 0x1a0 <process_array+0xde>
			{
				directions_solved[i-1] = 's';
 196:	f9 01       	movw	r30, r18
 198:	e0 5d       	subi	r30, 0xD0	; 208
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	d0 83       	st	Z, r29
 19e:	d2 cf       	rjmp	.-92     	; 0x144 <process_array+0x82>
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'l')
 1a0:	ec 36       	cpi	r30, 0x6C	; 108
 1a2:	81 f6       	brne	.-96     	; 0x144 <process_array+0x82>
			{
				directions_solved[i-1] = 'u';
 1a4:	f9 01       	movw	r30, r18
 1a6:	e0 5d       	subi	r30, 0xD0	; 208
 1a8:	fe 4f       	sbci	r31, 0xFE	; 254
 1aa:	60 83       	st	Z, r22
 1ac:	cb cf       	rjmp	.-106    	; 0x144 <process_array+0x82>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
 1ae:	ac 36       	cpi	r26, 0x6C	; 108
 1b0:	99 f4       	brne	.+38     	; 0x1d8 <process_array+0x116>
 1b2:	fc 01       	movw	r30, r24
 1b4:	e0 5d       	subi	r30, 0xD0	; 208
 1b6:	fe 4f       	sbci	r31, 0xFE	; 254
 1b8:	e1 81       	ldd	r30, Z+1	; 0x01
 1ba:	e3 37       	cpi	r30, 0x73	; 115
 1bc:	29 f4       	brne	.+10     	; 0x1c8 <process_array+0x106>
			{
				directions_solved[i-1] = 'r';
 1be:	f9 01       	movw	r30, r18
 1c0:	e0 5d       	subi	r30, 0xD0	; 208
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	c0 83       	st	Z, r28
 1c6:	be cf       	rjmp	.-132    	; 0x144 <process_array+0x82>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
 1c8:	ec 36       	cpi	r30, 0x6C	; 108
 1ca:	09 f0       	breq	.+2      	; 0x1ce <process_array+0x10c>
 1cc:	bb cf       	rjmp	.-138    	; 0x144 <process_array+0x82>
			{
				directions_solved[i-1] = 's';
 1ce:	f9 01       	movw	r30, r18
 1d0:	e0 5d       	subi	r30, 0xD0	; 208
 1d2:	fe 4f       	sbci	r31, 0xFE	; 254
 1d4:	d0 83       	st	Z, r29
 1d6:	b6 cf       	rjmp	.-148    	; 0x144 <process_array+0x82>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'l')
 1d8:	a3 37       	cpi	r26, 0x73	; 115
 1da:	09 f0       	breq	.+2      	; 0x1de <process_array+0x11c>
 1dc:	b3 cf       	rjmp	.-154    	; 0x144 <process_array+0x82>
 1de:	fc 01       	movw	r30, r24
 1e0:	e0 5d       	subi	r30, 0xD0	; 208
 1e2:	fe 4f       	sbci	r31, 0xFE	; 254
 1e4:	e1 81       	ldd	r30, Z+1	; 0x01
 1e6:	ec 36       	cpi	r30, 0x6C	; 108
 1e8:	29 f4       	brne	.+10     	; 0x1f4 <process_array+0x132>
			{
				directions_solved[i-1] = 'r';
 1ea:	f9 01       	movw	r30, r18
 1ec:	e0 5d       	subi	r30, 0xD0	; 208
 1ee:	fe 4f       	sbci	r31, 0xFE	; 254
 1f0:	c0 83       	st	Z, r28
 1f2:	a8 cf       	rjmp	.-176    	; 0x144 <process_array+0x82>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
 1f4:	e3 37       	cpi	r30, 0x73	; 115
 1f6:	09 f0       	breq	.+2      	; 0x1fa <process_array+0x138>
 1f8:	a5 cf       	rjmp	.-182    	; 0x144 <process_array+0x82>
			{
				directions_solved[i-1] = 'u';
 1fa:	f9 01       	movw	r30, r18
 1fc:	e0 5d       	subi	r30, 0xD0	; 208
 1fe:	fe 4f       	sbci	r31, 0xFE	; 254
 200:	60 83       	st	Z, r22
 202:	a0 cf       	rjmp	.-192    	; 0x144 <process_array+0x82>
 204:	dc 01       	movw	r26, r24
 206:	a0 5d       	subi	r26, 0xD0	; 208
 208:	be 4f       	sbci	r27, 0xFE	; 254
 20a:	fc 01       	movw	r30, r24
 20c:	ed 5c       	subi	r30, 0xCD	; 205
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
			}
			
			while (directions_solved[i+2])
			{
				directions_solved[i] = directions_solved[i+2];
 210:	2d 93       	st	X+, r18
				i++;
 212:	01 96       	adiw	r24, 0x01	; 1
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'u';
			}
			
			while (directions_solved[i+2])
 214:	21 91       	ld	r18, Z+
 216:	21 11       	cpse	r18, r1
 218:	fb cf       	rjmp	.-10     	; 0x210 <process_array+0x14e>
			{
				directions_solved[i] = directions_solved[i+2];
				i++;
			}
			directions_solved[i] = '\0';
 21a:	fc 01       	movw	r30, r24
 21c:	e0 5d       	subi	r30, 0xD0	; 208
 21e:	fe 4f       	sbci	r31, 0xFE	; 254
 220:	10 82       	st	Z, r1
			i=0;
 222:	85 2f       	mov	r24, r21
 224:	94 2f       	mov	r25, r20
		{
			directions_solved[i] = 'l';
		}
	}
	
	for (i=0;directions_solved[i];i++)
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	fc 01       	movw	r30, r24
 22a:	e0 5d       	subi	r30, 0xD0	; 208
 22c:	fe 4f       	sbci	r31, 0xFE	; 254
 22e:	20 81       	ld	r18, Z
 230:	21 11       	cpse	r18, r1
 232:	72 cf       	rjmp	.-284    	; 0x118 <process_array+0x56>
			}
			directions_solved[i] = '\0';
			i=0;
		}
	}
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <turn_U>:

void turn_U(uint16_t speed)
{
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	2f ef       	ldi	r18, 0xFF	; 255
 246:	82 e5       	ldi	r24, 0x52	; 82
 248:	97 e0       	ldi	r25, 0x07	; 7
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <turn_U+0x10>
 252:	00 c0       	rjmp	.+0      	; 0x254 <turn_U+0x1a>
 254:	00 00       	nop
	_delay_ms(300);
	left_rotate();
 256:	0e 94 50 00 	call	0xa0	; 0xa0 <left_rotate>
	set_speed_L(speed + 300); //70
 25a:	8e 01       	movw	r16, r28
 25c:	04 5d       	subi	r16, 0xD4	; 212
 25e:	1e 4f       	sbci	r17, 0xFE	; 254
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 260:	1b bd       	out	0x2b, r17	; 43
 262:	0a bd       	out	0x2a, r16	; 42
 264:	2f e7       	ldi	r18, 0x7F	; 127
 266:	88 e3       	ldi	r24, 0x38	; 56
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <turn_U+0x30>
 272:	00 c0       	rjmp	.+0      	; 0x274 <turn_U+0x3a>
 274:	00 00       	nop
{
	_delay_ms(300);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
 276:	ce 01       	movw	r24, r28
 278:	c2 97       	sbiw	r24, 0x32	; 50
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 27a:	99 bd       	out	0x29, r25	; 41
 27c:	88 bd       	out	0x28, r24	; 40
	_delay_ms(300);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
 27e:	80 5b       	subi	r24, 0xB0	; 176
 280:	9f 4f       	sbci	r25, 0xFF	; 255
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 282:	9b bd       	out	0x2b, r25	; 43
 284:	8a bd       	out	0x2a, r24	; 42
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
	//_delay_ms(100);
	while((sensor_data() & (3<<5)) != (3<<5));
 286:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 28a:	80 76       	andi	r24, 0x60	; 96
 28c:	80 36       	cpi	r24, 0x60	; 96
 28e:	d9 f7       	brne	.-10     	; 0x286 <turn_U+0x4c>
	while((sensor_data() & (3<<4)) != (3<<4));
 290:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 294:	80 73       	andi	r24, 0x30	; 48
 296:	80 33       	cpi	r24, 0x30	; 48
 298:	d9 f7       	brne	.-10     	; 0x290 <turn_U+0x56>
	while((sensor_data() & (3<<3)) != (3<<3));
 29a:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 29e:	88 71       	andi	r24, 0x18	; 24
 2a0:	88 31       	cpi	r24, 0x18	; 24
 2a2:	d9 f7       	brne	.-10     	; 0x29a <turn_U+0x60>
	//while(sensor_data() != (3<<3));
	go_forward();
 2a4:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 2a8:	d9 bd       	out	0x29, r29	; 41
 2aa:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 2ac:	1b bd       	out	0x2b, r17	; 43
 2ae:	0a bd       	out	0x2a, r16	; 42
 2b0:	2f e7       	ldi	r18, 0x7F	; 127
 2b2:	88 e3       	ldi	r24, 0x38	; 56
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <turn_U+0x7c>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <turn_U+0x86>
 2c0:	00 00       	nop
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 2c2:	d9 bd       	out	0x29, r29	; 41
 2c4:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 2c6:	db bd       	out	0x2b, r29	; 43
 2c8:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_R(speed);
	set_speed_L(speed +300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	08 95       	ret

000002d4 <turn_U_destination>:

void turn_U_destination(uint16_t speed)
{
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	ec 01       	movw	r28, r24
	uint16_t sensor_data_hold;
	stay_stop();
 2de:	0e 94 56 00 	call	0xac	; 0xac <stay_stop>
	process_array();
 2e2:	0e 94 61 00 	call	0xc2	; 0xc2 <process_array>
 2e6:	2f ef       	ldi	r18, 0xFF	; 255
 2e8:	89 e6       	ldi	r24, 0x69	; 105
 2ea:	98 e1       	ldi	r25, 0x18	; 24
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	90 40       	sbci	r25, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <turn_U_destination+0x18>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <turn_U_destination+0x22>
 2f6:	00 00       	nop
	_delay_ms(1000);
	go_backward();
 2f8:	0e 94 44 00 	call	0x88	; 0x88 <go_backward>
	sensor_data_hold = sensor_data();
 2fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 300:	82 74       	andi	r24, 0x42	; 66
	while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 302:	21 f0       	breq	.+8      	; 0x30c <turn_U_destination+0x38>
	{
		sensor_data_hold = sensor_data();
 304:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 308:	82 74       	andi	r24, 0x42	; 66
	stay_stop();
	process_array();
	_delay_ms(1000);
	go_backward();
	sensor_data_hold = sensor_data();
	while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 30a:	e1 f7       	brne	.-8      	; 0x304 <turn_U_destination+0x30>
	{
		sensor_data_hold = sensor_data();
	}
	stay_stop();
 30c:	0e 94 56 00 	call	0xac	; 0xac <stay_stop>
 310:	2f ef       	ldi	r18, 0xFF	; 255
 312:	80 e7       	ldi	r24, 0x70	; 112
 314:	92 e0       	ldi	r25, 0x02	; 2
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <turn_U_destination+0x42>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <turn_U_destination+0x4c>
 320:	00 00       	nop
	_delay_ms(100);
	go_forward();
 322:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
	set_speed_RL(speed+20);
 326:	ce 01       	movw	r24, r28
 328:	44 96       	adiw	r24, 0x14	; 20
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 32a:	99 bd       	out	0x29, r25	; 41
 32c:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 32e:	9b bd       	out	0x2b, r25	; 43
 330:	8a bd       	out	0x2a, r24	; 42
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	83 ec       	ldi	r24, 0xC3	; 195
 336:	99 e0       	ldi	r25, 0x09	; 9
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <turn_U_destination+0x64>
 340:	00 c0       	rjmp	.+0      	; 0x342 <turn_U_destination+0x6e>
 342:	00 00       	nop
	stay_stop();
	_delay_ms(100);
	go_forward();
	set_speed_RL(speed+20);
	_delay_ms(400);
	left_rotate();
 344:	0e 94 50 00 	call	0xa0	; 0xa0 <left_rotate>
	set_speed_L(speed + 300); //70
 348:	8e 01       	movw	r16, r28
 34a:	04 5d       	subi	r16, 0xD4	; 212
 34c:	1e 4f       	sbci	r17, 0xFE	; 254
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 34e:	1b bd       	out	0x2b, r17	; 43
 350:	0a bd       	out	0x2a, r16	; 42
 352:	2f e7       	ldi	r18, 0x7F	; 127
 354:	88 e3       	ldi	r24, 0x38	; 56
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	21 50       	subi	r18, 0x01	; 1
 35a:	80 40       	sbci	r24, 0x00	; 0
 35c:	90 40       	sbci	r25, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <turn_U_destination+0x84>
 360:	00 c0       	rjmp	.+0      	; 0x362 <turn_U_destination+0x8e>
 362:	00 00       	nop
	set_speed_RL(speed+20);
	_delay_ms(400);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
 364:	ce 01       	movw	r24, r28
 366:	c2 97       	sbiw	r24, 0x32	; 50
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 368:	99 bd       	out	0x29, r25	; 41
 36a:	88 bd       	out	0x28, r24	; 40
	_delay_ms(400);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
 36c:	80 5b       	subi	r24, 0xB0	; 176
 36e:	9f 4f       	sbci	r25, 0xFF	; 255
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 370:	9b bd       	out	0x2b, r25	; 43
 372:	8a bd       	out	0x2a, r24	; 42
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	80 e7       	ldi	r24, 0x70	; 112
 378:	92 e0       	ldi	r25, 0x02	; 2
 37a:	21 50       	subi	r18, 0x01	; 1
 37c:	80 40       	sbci	r24, 0x00	; 0
 37e:	90 40       	sbci	r25, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <turn_U_destination+0xa6>
 382:	00 c0       	rjmp	.+0      	; 0x384 <turn_U_destination+0xb0>
 384:	00 00       	nop
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
	_delay_ms(100);
	while((sensor_data() & (3<<5)) != 0x00);
 386:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 38a:	80 76       	andi	r24, 0x60	; 96
 38c:	e1 f7       	brne	.-8      	; 0x386 <turn_U_destination+0xb2>
	while((sensor_data() & (3<<5)) != (3<<5));
 38e:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 392:	80 76       	andi	r24, 0x60	; 96
 394:	80 36       	cpi	r24, 0x60	; 96
 396:	d9 f7       	brne	.-10     	; 0x38e <turn_U_destination+0xba>
	while((sensor_data() & (3<<4)) != (3<<4));
 398:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 39c:	80 73       	andi	r24, 0x30	; 48
 39e:	80 33       	cpi	r24, 0x30	; 48
 3a0:	d9 f7       	brne	.-10     	; 0x398 <turn_U_destination+0xc4>
	while((sensor_data() & (3<<3)) != (3<<3));
 3a2:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 3a6:	88 71       	andi	r24, 0x18	; 24
 3a8:	88 31       	cpi	r24, 0x18	; 24
 3aa:	d9 f7       	brne	.-10     	; 0x3a2 <turn_U_destination+0xce>
	//while(sensor_data() != (3<<3));
	go_forward();
 3ac:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 3b0:	d9 bd       	out	0x29, r29	; 41
 3b2:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 3b4:	1b bd       	out	0x2b, r17	; 43
 3b6:	0a bd       	out	0x2a, r16	; 42
 3b8:	2f e7       	ldi	r18, 0x7F	; 127
 3ba:	88 e3       	ldi	r24, 0x38	; 56
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	21 50       	subi	r18, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <turn_U_destination+0xea>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <turn_U_destination+0xf4>
 3c8:	00 00       	nop
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 3ca:	d9 bd       	out	0x29, r29	; 41
 3cc:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 3ce:	db bd       	out	0x2b, r29	; 43
 3d0:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_R(speed);
	set_speed_L(speed +300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	08 95       	ret

000003dc <turn_left>:

void turn_left(uint16_t speed)
{
 3dc:	0f 93       	push	r16
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	ec 01       	movw	r28, r24
	left_rotate();
 3e6:	0e 94 50 00 	call	0xa0	; 0xa0 <left_rotate>
	set_speed_L(speed + 300); //70
 3ea:	8e 01       	movw	r16, r28
 3ec:	04 5d       	subi	r16, 0xD4	; 212
 3ee:	1e 4f       	sbci	r17, 0xFE	; 254
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 3f0:	1b bd       	out	0x2b, r17	; 43
 3f2:	0a bd       	out	0x2a, r16	; 42
 3f4:	2f e7       	ldi	r18, 0x7F	; 127
 3f6:	88 e3       	ldi	r24, 0x38	; 56
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	21 50       	subi	r18, 0x01	; 1
 3fc:	80 40       	sbci	r24, 0x00	; 0
 3fe:	90 40       	sbci	r25, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <turn_left+0x1e>
 402:	00 c0       	rjmp	.+0      	; 0x404 <turn_left+0x28>
 404:	00 00       	nop
void turn_left(uint16_t speed)
{
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
 406:	ce 01       	movw	r24, r28
 408:	c2 97       	sbiw	r24, 0x32	; 50
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 40a:	99 bd       	out	0x29, r25	; 41
 40c:	88 bd       	out	0x28, r24	; 40
{
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
 40e:	80 5b       	subi	r24, 0xB0	; 176
 410:	9f 4f       	sbci	r25, 0xFF	; 255
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 412:	9b bd       	out	0x2b, r25	; 43
 414:	8a bd       	out	0x2a, r24	; 42
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
	//_delay_ms(100);
	while((sensor_data() & (3<<5)) != (3<<5));
 416:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 41a:	80 76       	andi	r24, 0x60	; 96
 41c:	80 36       	cpi	r24, 0x60	; 96
 41e:	d9 f7       	brne	.-10     	; 0x416 <turn_left+0x3a>
	while((sensor_data() & (3<<4)) != (3<<4));
 420:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 424:	80 73       	andi	r24, 0x30	; 48
 426:	80 33       	cpi	r24, 0x30	; 48
 428:	d9 f7       	brne	.-10     	; 0x420 <turn_left+0x44>
	//while((sensor_data() & (3<<3)) != (3<<3));
	//while(sensor_data() != (3<<3));
	go_forward();
 42a:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 42e:	d9 bd       	out	0x29, r29	; 41
 430:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 432:	1b bd       	out	0x2b, r17	; 43
 434:	0a bd       	out	0x2a, r16	; 42
 436:	2f e7       	ldi	r18, 0x7F	; 127
 438:	88 e3       	ldi	r24, 0x38	; 56
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	80 40       	sbci	r24, 0x00	; 0
 440:	90 40       	sbci	r25, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <turn_left+0x60>
 444:	00 c0       	rjmp	.+0      	; 0x446 <turn_left+0x6a>
 446:	00 00       	nop
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 448:	d9 bd       	out	0x29, r29	; 41
 44a:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 44c:	db bd       	out	0x2b, r29	; 43
 44e:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_R(speed);
	set_speed_L(speed +300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	08 95       	ret

0000045a <turn_right>:

void turn_right(uint16_t speed)
{
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	ec 01       	movw	r28, r24
	right_rotate();
 464:	0e 94 4a 00 	call	0x94	; 0x94 <right_rotate>
	set_speed_R(speed + 300); //40
 468:	8e 01       	movw	r16, r28
 46a:	04 5d       	subi	r16, 0xD4	; 212
 46c:	1e 4f       	sbci	r17, 0xFE	; 254
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 46e:	19 bd       	out	0x29, r17	; 41
 470:	08 bd       	out	0x28, r16	; 40
 472:	2f e7       	ldi	r18, 0x7F	; 127
 474:	88 e3       	ldi	r24, 0x38	; 56
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	21 50       	subi	r18, 0x01	; 1
 47a:	80 40       	sbci	r24, 0x00	; 0
 47c:	90 40       	sbci	r25, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <turn_right+0x1e>
 480:	00 c0       	rjmp	.+0      	; 0x482 <turn_right+0x28>
 482:	00 00       	nop
void turn_right(uint16_t speed)
{
	right_rotate();
	set_speed_R(speed + 300); //40
	_delay_ms(50);
	set_speed_L(speed-50); //-50
 484:	ce 01       	movw	r24, r28
 486:	c2 97       	sbiw	r24, 0x32	; 50
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 488:	9b bd       	out	0x2b, r25	; 43
 48a:	8a bd       	out	0x2a, r24	; 42
{
	right_rotate();
	set_speed_R(speed + 300); //40
	_delay_ms(50);
	set_speed_L(speed-50); //-50
	set_speed_R(speed+30);
 48c:	80 5b       	subi	r24, 0xB0	; 176
 48e:	9f 4f       	sbci	r25, 0xFF	; 255
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 490:	99 bd       	out	0x29, r25	; 41
 492:	88 bd       	out	0x28, r24	; 40
	set_speed_R(speed + 300); //40
	_delay_ms(50);
	set_speed_L(speed-50); //-50
	set_speed_R(speed+30);
	//_delay_ms(100);
	while((sensor_data() & (3<<1)) != (3<<1));
 494:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 498:	86 70       	andi	r24, 0x06	; 6
 49a:	86 30       	cpi	r24, 0x06	; 6
 49c:	d9 f7       	brne	.-10     	; 0x494 <turn_right+0x3a>
	while((sensor_data() & (3<<2)) != (3<<2));
 49e:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 4a2:	8c 70       	andi	r24, 0x0C	; 12
 4a4:	8c 30       	cpi	r24, 0x0C	; 12
 4a6:	d9 f7       	brne	.-10     	; 0x49e <turn_right+0x44>
	//while((sensor_data() & (3<<3)) != (3<<3));
	//while(sensor_data() != (3<<3));
	go_forward();
 4a8:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 4ac:	db bd       	out	0x2b, r29	; 43
 4ae:	ca bd       	out	0x2a, r28	; 42
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 4b0:	19 bd       	out	0x29, r17	; 41
 4b2:	08 bd       	out	0x28, r16	; 40
 4b4:	2f e7       	ldi	r18, 0x7F	; 127
 4b6:	88 e3       	ldi	r24, 0x38	; 56
 4b8:	91 e0       	ldi	r25, 0x01	; 1
 4ba:	21 50       	subi	r18, 0x01	; 1
 4bc:	80 40       	sbci	r24, 0x00	; 0
 4be:	90 40       	sbci	r25, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <turn_right+0x60>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <turn_right+0x6a>
 4c4:	00 00       	nop
 4c6:	d9 bd       	out	0x29, r29	; 41
 4c8:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 4ca:	db bd       	out	0x2b, r29	; 43
 4cc:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_L(speed);
	set_speed_R(speed + 300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	08 95       	ret

000004d8 <left_operation>:

void left_operation(uint16_t speed)
{
	turn_left(speed);
 4d8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <turn_left>
	directions_entry[node_number] = 'l';
 4dc:	80 91 62 00 	lds	r24, 0x0062
 4e0:	90 91 63 00 	lds	r25, 0x0063
 4e4:	fc 01       	movw	r30, r24
 4e6:	e8 59       	subi	r30, 0x98	; 152
 4e8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ea:	2c e6       	ldi	r18, 0x6C	; 108
 4ec:	20 83       	st	Z, r18
	node_number = node_number + 1;
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	90 93 63 00 	sts	0x0063, r25
 4f4:	80 93 62 00 	sts	0x0062, r24
 4f8:	08 95       	ret

000004fa <right_operation>:
}

void right_operation(uint16_t speed)
{
	turn_right(speed);
 4fa:	0e 94 2d 02 	call	0x45a	; 0x45a <turn_right>
	directions_entry[node_number] = 'r';
 4fe:	80 91 62 00 	lds	r24, 0x0062
 502:	90 91 63 00 	lds	r25, 0x0063
 506:	fc 01       	movw	r30, r24
 508:	e8 59       	subi	r30, 0x98	; 152
 50a:	ff 4f       	sbci	r31, 0xFF	; 255
 50c:	22 e7       	ldi	r18, 0x72	; 114
 50e:	20 83       	st	Z, r18
	node_number = node_number + 1;
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	90 93 63 00 	sts	0x0063, r25
 516:	80 93 62 00 	sts	0x0062, r24
 51a:	08 95       	ret

0000051c <left_forward_operation>:
}

void left_forward_operation(uint16_t speed)
{
	turn_left(speed);
 51c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <turn_left>
	directions_entry[node_number] = 'l';
 520:	80 91 62 00 	lds	r24, 0x0062
 524:	90 91 63 00 	lds	r25, 0x0063
 528:	fc 01       	movw	r30, r24
 52a:	e8 59       	subi	r30, 0x98	; 152
 52c:	ff 4f       	sbci	r31, 0xFF	; 255
 52e:	2c e6       	ldi	r18, 0x6C	; 108
 530:	20 83       	st	Z, r18
	node_number = node_number + 1;
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	90 93 63 00 	sts	0x0063, r25
 538:	80 93 62 00 	sts	0x0062, r24
 53c:	08 95       	ret

0000053e <right_forward_operation>:
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 53e:	99 bd       	out	0x29, r25	; 41
 540:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 542:	9b bd       	out	0x2b, r25	; 43
 544:	8a bd       	out	0x2a, r24	; 42
}

void right_forward_operation(uint16_t speed)
{
	set_speed_RL(speed);
	go_forward();
 546:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
	directions_entry[node_number] = 's';
 54a:	80 91 62 00 	lds	r24, 0x0062
 54e:	90 91 63 00 	lds	r25, 0x0063
 552:	fc 01       	movw	r30, r24
 554:	e8 59       	subi	r30, 0x98	; 152
 556:	ff 4f       	sbci	r31, 0xFF	; 255
 558:	23 e7       	ldi	r18, 0x73	; 115
 55a:	20 83       	st	Z, r18
	node_number = node_number + 1;
 55c:	01 96       	adiw	r24, 0x01	; 1
 55e:	90 93 63 00 	sts	0x0063, r25
 562:	80 93 62 00 	sts	0x0062, r24
	loop_count = 0x0000;
 566:	10 92 64 00 	sts	0x0064, r1
 56a:	10 92 65 00 	sts	0x0065, r1
 56e:	10 92 66 00 	sts	0x0066, r1
 572:	10 92 67 00 	sts	0x0067, r1
 576:	08 95       	ret

00000578 <left_right_operation>:
}

void left_right_operation(uint16_t speed)
{
	turn_left(speed);
 578:	0e 94 ee 01 	call	0x3dc	; 0x3dc <turn_left>
	directions_entry[node_number] = 'l';
 57c:	80 91 62 00 	lds	r24, 0x0062
 580:	90 91 63 00 	lds	r25, 0x0063
 584:	fc 01       	movw	r30, r24
 586:	e8 59       	subi	r30, 0x98	; 152
 588:	ff 4f       	sbci	r31, 0xFF	; 255
 58a:	2c e6       	ldi	r18, 0x6C	; 108
 58c:	20 83       	st	Z, r18
	node_number = node_number + 1;
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	90 93 63 00 	sts	0x0063, r25
 594:	80 93 62 00 	sts	0x0062, r24
 598:	08 95       	ret

0000059a <left_right_forward_operation>:
}

void left_right_forward_operation(uint16_t speed)
{
	turn_left(speed);
 59a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <turn_left>
	directions_entry[node_number] = 'l';
 59e:	80 91 62 00 	lds	r24, 0x0062
 5a2:	90 91 63 00 	lds	r25, 0x0063
 5a6:	fc 01       	movw	r30, r24
 5a8:	e8 59       	subi	r30, 0x98	; 152
 5aa:	ff 4f       	sbci	r31, 0xFF	; 255
 5ac:	2c e6       	ldi	r18, 0x6C	; 108
 5ae:	20 83       	st	Z, r18
	node_number = node_number + 1;
 5b0:	01 96       	adiw	r24, 0x01	; 1
 5b2:	90 93 63 00 	sts	0x0063, r25
 5b6:	80 93 62 00 	sts	0x0062, r24
 5ba:	08 95       	ret

000005bc <reverse_operation>:
}

void reverse_operation(uint16_t speed)
{
	turn_U(speed);
 5bc:	0e 94 1d 01 	call	0x23a	; 0x23a <turn_U>
	if (loop_count >= 2000)
 5c0:	80 91 64 00 	lds	r24, 0x0064
 5c4:	90 91 65 00 	lds	r25, 0x0065
 5c8:	a0 91 66 00 	lds	r26, 0x0066
 5cc:	b0 91 67 00 	lds	r27, 0x0067
 5d0:	80 3d       	cpi	r24, 0xD0	; 208
 5d2:	97 40       	sbci	r25, 0x07	; 7
 5d4:	a1 05       	cpc	r26, r1
 5d6:	b1 05       	cpc	r27, r1
 5d8:	78 f0       	brcs	.+30     	; 0x5f8 <reverse_operation+0x3c>
	{
		directions_entry[node_number] = 'u';
 5da:	80 91 62 00 	lds	r24, 0x0062
 5de:	90 91 63 00 	lds	r25, 0x0063
 5e2:	fc 01       	movw	r30, r24
 5e4:	e8 59       	subi	r30, 0x98	; 152
 5e6:	ff 4f       	sbci	r31, 0xFF	; 255
 5e8:	25 e7       	ldi	r18, 0x75	; 117
 5ea:	20 83       	st	Z, r18
		node_number = node_number + 1;
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	90 93 63 00 	sts	0x0063, r25
 5f2:	80 93 62 00 	sts	0x0062, r24
 5f6:	08 95       	ret
	}
	else
	{
		node_number = node_number - 1;
 5f8:	80 91 62 00 	lds	r24, 0x0062
 5fc:	90 91 63 00 	lds	r25, 0x0063
		directions_entry[node_number] = 'l';
 600:	fc 01       	movw	r30, r24
 602:	e9 59       	subi	r30, 0x99	; 153
 604:	ff 4f       	sbci	r31, 0xFF	; 255
 606:	2c e6       	ldi	r18, 0x6C	; 108
 608:	20 83       	st	Z, r18
 60a:	08 95       	ret

0000060c <destination_operation>:
	}
}

void destination_operation(uint16_t speed)
{
	directions_entry[node_number] = '\0';
 60c:	e0 91 62 00 	lds	r30, 0x0062
 610:	f0 91 63 00 	lds	r31, 0x0063
 614:	e8 59       	subi	r30, 0x98	; 152
 616:	ff 4f       	sbci	r31, 0xFF	; 255
 618:	10 82       	st	Z, r1
	turn_U_destination(speed);
 61a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <turn_U_destination>
 61e:	08 95       	ret

00000620 <evaluate_direction>:


void evaluate_direction(char dir,uint16_t speed)
{
	char evaluation = 0;
	evaluation = directions_solved[node_number_solved];
 620:	20 91 60 00 	lds	r18, 0x0060
 624:	30 91 61 00 	lds	r19, 0x0061
 628:	f9 01       	movw	r30, r18
 62a:	e0 5d       	subi	r30, 0xD0	; 208
 62c:	fe 4f       	sbci	r31, 0xFE	; 254
 62e:	80 81       	ld	r24, Z
	node_number_solved = node_number_solved + 1;
 630:	2f 5f       	subi	r18, 0xFF	; 255
 632:	3f 4f       	sbci	r19, 0xFF	; 255
 634:	30 93 61 00 	sts	0x0061, r19
 638:	20 93 60 00 	sts	0x0060, r18
	
	if (evaluation == 's')
 63c:	83 37       	cpi	r24, 0x73	; 115
 63e:	39 f4       	brne	.+14     	; 0x64e <evaluate_direction+0x2e>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 640:	79 bd       	out	0x29, r23	; 41
 642:	68 bd       	out	0x28, r22	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 644:	7b bd       	out	0x2b, r23	; 43
 646:	6a bd       	out	0x2a, r22	; 42
	node_number_solved = node_number_solved + 1;
	
	if (evaluation == 's')
	{
		set_speed_RL(speed);
		go_forward();
 648:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
 64c:	08 95       	ret
	}
	else if (evaluation == 'u')
 64e:	85 37       	cpi	r24, 0x75	; 117
 650:	21 f4       	brne	.+8      	; 0x65a <evaluate_direction+0x3a>
	{
		turn_U(speed);
 652:	cb 01       	movw	r24, r22
 654:	0e 94 1d 01 	call	0x23a	; 0x23a <turn_U>
 658:	08 95       	ret
	}
	else if (evaluation == 'l')
 65a:	8c 36       	cpi	r24, 0x6C	; 108
 65c:	21 f4       	brne	.+8      	; 0x666 <evaluate_direction+0x46>
	{
		turn_left(speed);
 65e:	cb 01       	movw	r24, r22
 660:	0e 94 ee 01 	call	0x3dc	; 0x3dc <turn_left>
 664:	08 95       	ret
	}
	else if (evaluation == 'r')
 666:	82 37       	cpi	r24, 0x72	; 114
 668:	21 f4       	brne	.+8      	; 0x672 <evaluate_direction+0x52>
	{
		turn_right(speed);
 66a:	cb 01       	movw	r24, r22
 66c:	0e 94 2d 02 	call	0x45a	; 0x45a <turn_right>
 670:	08 95       	ret
	}
	else stay_stop();
 672:	0e 94 56 00 	call	0xac	; 0xac <stay_stop>
 676:	08 95       	ret

00000678 <main>:
{
	uint16_t speed=300, destination=0;
	uint8_t sensor_data_hold=0, Right_trigged=0, Left_trigged=0, Forward_trigged=0;//, speed_grad_count=0;
	
	//port pin initialization
	PORTA = 03;
 678:	83 e0       	ldi	r24, 0x03	; 3
 67a:	8b bb       	out	0x1b, r24	; 27
	DDRA = 00;
 67c:	1a ba       	out	0x1a, r1	; 26
	PORTB=0x00;
 67e:	18 ba       	out	0x18, r1	; 24
	DDRB=0x0F;
 680:	9f e0       	ldi	r25, 0x0F	; 15
 682:	97 bb       	out	0x17, r25	; 23
	PORTC=0xFF;
 684:	9f ef       	ldi	r25, 0xFF	; 255
 686:	95 bb       	out	0x15, r25	; 21
	DDRC=0x00;
 688:	14 ba       	out	0x14, r1	; 20
	PORTD=0x00;
 68a:	12 ba       	out	0x12, r1	; 18
	DDRD=0x30;
 68c:	90 e3       	ldi	r25, 0x30	; 48
 68e:	91 bb       	out	0x11, r25	; 17
	
	//Timer Counter1 Initialization
	TCCR1A=0xA2;
 690:	92 ea       	ldi	r25, 0xA2	; 162
 692:	9f bd       	out	0x2f, r25	; 47
	TCCR1B=0x18;
 694:	98 e1       	ldi	r25, 0x18	; 24
 696:	9e bd       	out	0x2e, r25	; 46
	TCNT1=0x0000;
 698:	1d bc       	out	0x2d, r1	; 45
 69a:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x03;
 69c:	87 bd       	out	0x27, r24	; 39
	ICR1L=0xE8; //03E8=1000 in decimal
 69e:	88 ee       	ldi	r24, 0xE8	; 232
 6a0:	86 bd       	out	0x26, r24	; 38
	OCR1A=speed;
 6a2:	8c e2       	ldi	r24, 0x2C	; 44
 6a4:	91 e0       	ldi	r25, 0x01	; 1
 6a6:	9b bd       	out	0x2b, r25	; 43
 6a8:	8a bd       	out	0x2a, r24	; 42
	OCR1B=speed;
 6aa:	99 bd       	out	0x29, r25	; 41
 6ac:	88 bd       	out	0x28, r24	; 40
	
	//usart_init(9600); //USART Initialization
	
	//start_tour:
	while (PINA & (1<<PA0));
 6ae:	c8 99       	sbic	0x19, 0	; 25
 6b0:	fe cf       	rjmp	.-4      	; 0x6ae <main+0x36>
 6b2:	2f ef       	ldi	r18, 0xFF	; 255
 6b4:	89 e6       	ldi	r24, 0x69	; 105
 6b6:	98 e1       	ldi	r25, 0x18	; 24
 6b8:	21 50       	subi	r18, 0x01	; 1
 6ba:	80 40       	sbci	r24, 0x00	; 0
 6bc:	90 40       	sbci	r25, 0x00	; 0
 6be:	e1 f7       	brne	.-8      	; 0x6b8 <main+0x40>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <main+0x4a>
 6c2:	00 00       	nop
	_delay_ms(1000);
	go_forward();
 6c4:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 6c8:	84 ef       	ldi	r24, 0xF4	; 244
 6ca:	91 e0       	ldi	r25, 0x01	; 1
 6cc:	99 bd       	out	0x29, r25	; 41
 6ce:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 6d0:	9b bd       	out	0x2b, r25	; 43
 6d2:	8a bd       	out	0x2a, r24	; 42
 6d4:	2f ef       	ldi	r18, 0xFF	; 255
 6d6:	86 e7       	ldi	r24, 0x76	; 118
 6d8:	91 e0       	ldi	r25, 0x01	; 1
 6da:	21 50       	subi	r18, 0x01	; 1
 6dc:	80 40       	sbci	r24, 0x00	; 0
 6de:	90 40       	sbci	r25, 0x00	; 0
 6e0:	e1 f7       	brne	.-8      	; 0x6da <main+0x62>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <main+0x6c>
 6e4:	00 00       	nop
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 6e6:	8c e2       	ldi	r24, 0x2C	; 44
 6e8:	91 e0       	ldi	r25, 0x01	; 1
 6ea:	99 bd       	out	0x29, r25	; 41
 6ec:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 6ee:	9b bd       	out	0x2b, r25	; 43
 6f0:	8a bd       	out	0x2a, r24	; 42
	_delay_ms(1000);
	go_forward();
	set_speed_RL(speed+200);
	_delay_ms(60);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
 6f2:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 6f6:	82 74       	andi	r24, 0x42	; 66
	while ((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 6f8:	21 f0       	breq	.+8      	; 0x702 <main+0x8a>
	{
		sensor_data_hold = sensor_data();
 6fa:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 6fe:	82 74       	andi	r24, 0x42	; 66
	go_forward();
	set_speed_RL(speed+200);
	_delay_ms(60);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
	while ((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 700:	e1 f7       	brne	.-8      	; 0x6fa <main+0x82>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 702:	81 2c       	mov	r8, r1
 704:	71 2c       	mov	r7, r1
 706:	c1 2c       	mov	r12, r1
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 708:	0f 2e       	mov	r0, r31
 70a:	f6 e9       	ldi	r31, 0x96	; 150
 70c:	ef 2e       	mov	r14, r31
 70e:	f1 2c       	mov	r15, r1
 710:	f0 2d       	mov	r31, r0
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 712:	cc e2       	ldi	r28, 0x2C	; 44
 714:	d1 e0       	ldi	r29, 0x01	; 1
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 716:	61 2c       	mov	r6, r1
 718:	91 2c       	mov	r9, r1
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 71a:	bb 24       	eor	r11, r11
 71c:	b3 94       	inc	r11
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 71e:	d1 2c       	mov	r13, r1
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 720:	ab 2c       	mov	r10, r11
 722:	03 c0       	rjmp	.+6      	; 0x72a <main+0xb2>
 724:	c1 2e       	mov	r12, r17
 726:	01 c0       	rjmp	.+2      	; 0x72a <main+0xb2>
 728:	71 2e       	mov	r7, r17
	//************************************************************************************************************************
	// main while loop is started from here **********************************************************************************
	//************************************************************************************************************************	
    while(1)  //while loop 1
    {
		if (loop_count < 2000)
 72a:	80 91 64 00 	lds	r24, 0x0064
 72e:	90 91 65 00 	lds	r25, 0x0065
 732:	a0 91 66 00 	lds	r26, 0x0066
 736:	b0 91 67 00 	lds	r27, 0x0067
 73a:	80 3d       	cpi	r24, 0xD0	; 208
 73c:	27 e0       	ldi	r18, 0x07	; 7
 73e:	92 07       	cpc	r25, r18
 740:	a1 05       	cpc	r26, r1
 742:	b1 05       	cpc	r27, r1
 744:	58 f4       	brcc	.+22     	; 0x75c <main+0xe4>
		{
			loop_count = loop_count + 1;
 746:	01 96       	adiw	r24, 0x01	; 1
 748:	a1 1d       	adc	r26, r1
 74a:	b1 1d       	adc	r27, r1
 74c:	80 93 64 00 	sts	0x0064, r24
 750:	90 93 65 00 	sts	0x0065, r25
 754:	a0 93 66 00 	sts	0x0066, r26
 758:	b0 93 67 00 	sts	0x0067, r27
		}
//start_over_while_1:

		sensor_data_hold = sensor_data();  //normally read
 75c:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
		
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
 760:	98 2f       	mov	r25, r24
 762:	98 71       	andi	r25, 0x18	; 24
 764:	98 31       	cpi	r25, 0x18	; 24
 766:	29 f4       	brne	.+10     	; 0x772 <main+0xfa>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 768:	d9 bd       	out	0x29, r29	; 41
 76a:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 76c:	db bd       	out	0x2b, r29	; 43
 76e:	ca bd       	out	0x2a, r28	; 42
 770:	09 c0       	rjmp	.+18     	; 0x784 <main+0x10c>
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
		{
			set_speed_RL(speed);
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
 772:	83 ff       	sbrs	r24, 3
 774:	03 c0       	rjmp	.+6      	; 0x77c <main+0x104>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 776:	f9 bc       	out	0x29, r15	; 41
 778:	e8 bc       	out	0x28, r14	; 40
 77a:	04 c0       	rjmp	.+8      	; 0x784 <main+0x10c>
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
		{
			set_speed_R(speed - 150);  //previously 150
		}
		else if ((sensor_data_hold & (1<<4)) == (1<<4))
 77c:	84 ff       	sbrs	r24, 4
 77e:	02 c0       	rjmp	.+4      	; 0x784 <main+0x10c>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 780:	fb bc       	out	0x2b, r15	; 43
 782:	ea bc       	out	0x2a, r14	; 42
			set_speed_L(speed - 150);  //previously 150
		}
		// end line follow
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
 784:	98 2f       	mov	r25, r24
 786:	90 7f       	andi	r25, 0xF0	; 240
 788:	90 3f       	cpi	r25, 0xF0	; 240
 78a:	09 f0       	breq	.+2      	; 0x78e <main+0x116>
 78c:	53 c0       	rjmp	.+166    	; 0x834 <main+0x1bc>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 78e:	d9 bd       	out	0x29, r29	; 41
 790:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 792:	db bd       	out	0x2b, r29	; 43
 794:	ca bd       	out	0x2a, r28	; 42
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
 796:	06 2d       	mov	r16, r6
 798:	19 2d       	mov	r17, r9
 79a:	17 c0       	rjmp	.+46     	; 0x7ca <main+0x152>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 79c:	85 e8       	ldi	r24, 0x85	; 133
 79e:	8a 95       	dec	r24
 7a0:	f1 f7       	brne	.-4      	; 0x79e <main+0x126>
 7a2:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 7a4:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
				if (sensor_data_hold & (1<<1))
 7a8:	81 fd       	sbrc	r24, 1
				{
					Right_trigged=1;
 7aa:	ca 2c       	mov	r12, r10
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 7ac:	98 2f       	mov	r25, r24
 7ae:	9e 77       	andi	r25, 0x7E	; 126
 7b0:	9e 37       	cpi	r25, 0x7E	; 126
 7b2:	59 f4       	brne	.+22     	; 0x7ca <main+0x152>
				{
					destination = destination + 1;
 7b4:	0f 5f       	subi	r16, 0xFF	; 255
 7b6:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 7000)   // destination triggering
 7b8:	09 35       	cpi	r16, 0x59	; 89
 7ba:	9b e1       	ldi	r25, 0x1B	; 27
 7bc:	19 07       	cpc	r17, r25
 7be:	28 f0       	brcs	.+10     	; 0x7ca <main+0x152>
					{
						destination = 0x00;
						destination_operation(speed);
 7c0:	8c e2       	ldi	r24, 0x2C	; 44
 7c2:	91 e0       	ldi	r25, 0x01	; 1
 7c4:	0e 94 06 03 	call	0x60c	; 0x60c <destination_operation>
						//while (PINA & (1<<PA0));
						goto solv_maze;
 7c8:	94 c0       	rjmp	.+296    	; 0x8f2 <__stack+0x93>
 7ca:	82 74       	andi	r24, 0x42	; 66
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 7cc:	39 f7       	brne	.-50     	; 0x79c <main+0x124>
 7ce:	1c 2d       	mov	r17, r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7d0:	2f ef       	ldi	r18, 0xFF	; 255
 7d2:	80 e7       	ldi	r24, 0x70	; 112
 7d4:	92 e0       	ldi	r25, 0x02	; 2
 7d6:	21 50       	subi	r18, 0x01	; 1
 7d8:	80 40       	sbci	r24, 0x00	; 0
 7da:	90 40       	sbci	r25, 0x00	; 0
 7dc:	e1 f7       	brne	.-8      	; 0x7d6 <main+0x15e>
 7de:	00 c0       	rjmp	.+0      	; 0x7e0 <main+0x168>
 7e0:	00 00       	nop
					}
				}
				
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 7e2:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 7e6:	8e 77       	andi	r24, 0x7E	; 126
 7e8:	09 f0       	breq	.+2      	; 0x7ec <main+0x174>
 7ea:	93 c1       	rjmp	.+806    	; 0xb12 <__stack+0x2b3>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
 7ec:	c1 10       	cpse	r12, r1
 7ee:	0f c0       	rjmp	.+30     	; 0x80e <main+0x196>
 7f0:	81 10       	cpse	r8, r1
 7f2:	04 c0       	rjmp	.+8      	; 0x7fc <main+0x184>
			{
				left_operation(speed);
 7f4:	ce 01       	movw	r24, r28
 7f6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <left_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
 7fa:	97 cf       	rjmp	.-210    	; 0x72a <main+0xb2>
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 7fc:	21 e0       	ldi	r18, 0x01	; 1
 7fe:	82 12       	cpse	r8, r18
 800:	94 cf       	rjmp	.-216    	; 0x72a <main+0xb2>
			{
				left_forward_operation(speed);
 802:	ce 01       	movw	r24, r28
 804:	0e 94 8e 02 	call	0x51c	; 0x51c <left_forward_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
 808:	8d 2c       	mov	r8, r13
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
			{
				left_forward_operation(speed);
				Right_trigged = 0;
 80a:	cd 2c       	mov	r12, r13
				Forward_trigged = 0;
 80c:	8e cf       	rjmp	.-228    	; 0x72a <main+0xb2>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 80e:	11 30       	cpi	r17, 0x01	; 1
 810:	09 f0       	breq	.+2      	; 0x814 <main+0x19c>
 812:	8b cf       	rjmp	.-234    	; 0x72a <main+0xb2>
 814:	81 10       	cpse	r8, r1
 816:	05 c0       	rjmp	.+10     	; 0x822 <main+0x1aa>
			{
				left_right_operation(speed);
 818:	ce 01       	movw	r24, r28
 81a:	0e 94 bc 02 	call	0x578	; 0x578 <left_right_operation>
				Right_trigged = 0;
 81e:	cd 2c       	mov	r12, r13
				Forward_trigged = 0;
 820:	84 cf       	rjmp	.-248    	; 0x72a <main+0xb2>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	88 12       	cpse	r8, r24
 826:	7e cf       	rjmp	.-260    	; 0x724 <main+0xac>
			{
				left_right_forward_operation(speed);
 828:	ce 01       	movw	r24, r28
 82a:	0e 94 cd 02 	call	0x59a	; 0x59a <left_right_forward_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
 82e:	8d 2c       	mov	r8, r13
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Right_trigged = 0;
 830:	cd 2c       	mov	r12, r13
 832:	7b cf       	rjmp	.-266    	; 0x72a <main+0xb2>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
 834:	98 2f       	mov	r25, r24
 836:	9f 70       	andi	r25, 0x0F	; 15
 838:	9f 30       	cpi	r25, 0x0F	; 15
 83a:	09 f0       	breq	.+2      	; 0x83e <main+0x1c6>
 83c:	53 c0       	rjmp	.+166    	; 0x8e4 <__stack+0x85>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 83e:	d9 bd       	out	0x29, r29	; 41
 840:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 842:	db bd       	out	0x2b, r29	; 43
 844:	ca bd       	out	0x2a, r28	; 42
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 846:	06 2d       	mov	r16, r6
 848:	19 2d       	mov	r17, r9
 84a:	17 c0       	rjmp	.+46     	; 0x87a <__stack+0x1b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 84c:	95 e8       	ldi	r25, 0x85	; 133
 84e:	9a 95       	dec	r25
 850:	f1 f7       	brne	.-4      	; 0x84e <main+0x1d6>
 852:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 854:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
				if (sensor_data_hold & (1<<6))  // must change for 8 system
 858:	86 fd       	sbrc	r24, 6
				{
					Left_trigged=1;
 85a:	7a 2c       	mov	r7, r10
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 85c:	98 2f       	mov	r25, r24
 85e:	9e 77       	andi	r25, 0x7E	; 126
 860:	9e 37       	cpi	r25, 0x7E	; 126
 862:	59 f4       	brne	.+22     	; 0x87a <__stack+0x1b>
				{
					destination = destination + 1;
 864:	0f 5f       	subi	r16, 0xFF	; 255
 866:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 7000)   // destination triggering
 868:	09 35       	cpi	r16, 0x59	; 89
 86a:	2b e1       	ldi	r18, 0x1B	; 27
 86c:	12 07       	cpc	r17, r18
 86e:	28 f0       	brcs	.+10     	; 0x87a <__stack+0x1b>
					{
						destination = 0x00;
						destination_operation(speed);
 870:	8c e2       	ldi	r24, 0x2C	; 44
 872:	91 e0       	ldi	r25, 0x01	; 1
 874:	0e 94 06 03 	call	0x60c	; 0x60c <destination_operation>
						//while (PINA & (1<<PA0));
						goto solv_maze;
 878:	3c c0       	rjmp	.+120    	; 0x8f2 <__stack+0x93>
 87a:	82 74       	andi	r24, 0x42	; 66
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 87c:	39 f7       	brne	.-50     	; 0x84c <main+0x1d4>
 87e:	17 2d       	mov	r17, r7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 880:	8f ef       	ldi	r24, 0xFF	; 255
 882:	90 e7       	ldi	r25, 0x70	; 112
 884:	22 e0       	ldi	r18, 0x02	; 2
 886:	81 50       	subi	r24, 0x01	; 1
 888:	90 40       	sbci	r25, 0x00	; 0
 88a:	20 40       	sbci	r18, 0x00	; 0
 88c:	e1 f7       	brne	.-8      	; 0x886 <__stack+0x27>
 88e:	00 c0       	rjmp	.+0      	; 0x890 <__stack+0x31>
 890:	00 00       	nop
						//goto start_test_operation;
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 892:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 896:	8e 77       	andi	r24, 0x7E	; 126
 898:	09 f0       	breq	.+2      	; 0x89c <__stack+0x3d>
 89a:	3f c1       	rjmp	.+638    	; 0xb1a <__stack+0x2bb>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
 89c:	71 10       	cpse	r7, r1
 89e:	0f c0       	rjmp	.+30     	; 0x8be <__stack+0x5f>
 8a0:	81 10       	cpse	r8, r1
 8a2:	04 c0       	rjmp	.+8      	; 0x8ac <__stack+0x4d>
			{
				right_operation(speed);
 8a4:	ce 01       	movw	r24, r28
 8a6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <right_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
 8aa:	3f cf       	rjmp	.-386    	; 0x72a <main+0xb2>
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	88 12       	cpse	r8, r24
 8b0:	3c cf       	rjmp	.-392    	; 0x72a <main+0xb2>
			{
				right_forward_operation(speed);
 8b2:	ce 01       	movw	r24, r28
 8b4:	0e 94 9f 02 	call	0x53e	; 0x53e <right_forward_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
 8b8:	8d 2c       	mov	r8, r13
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
			{
				right_forward_operation(speed);
				Left_trigged = 0;
 8ba:	7d 2c       	mov	r7, r13
				Forward_trigged = 0;
 8bc:	36 cf       	rjmp	.-404    	; 0x72a <main+0xb2>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 8be:	11 30       	cpi	r17, 0x01	; 1
 8c0:	09 f0       	breq	.+2      	; 0x8c4 <__stack+0x65>
 8c2:	33 cf       	rjmp	.-410    	; 0x72a <main+0xb2>
 8c4:	81 10       	cpse	r8, r1
 8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <__stack+0x73>
			{
				left_right_operation(speed);
 8c8:	ce 01       	movw	r24, r28
 8ca:	0e 94 bc 02 	call	0x578	; 0x578 <left_right_operation>
				Left_trigged = 0;
 8ce:	7d 2c       	mov	r7, r13
				Forward_trigged = 0;
 8d0:	2c cf       	rjmp	.-424    	; 0x72a <main+0xb2>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
 8d2:	91 e0       	ldi	r25, 0x01	; 1
 8d4:	89 12       	cpse	r8, r25
 8d6:	28 cf       	rjmp	.-432    	; 0x728 <main+0xb0>
			{
				left_right_forward_operation(speed);
 8d8:	ce 01       	movw	r24, r28
 8da:	0e 94 cd 02 	call	0x59a	; 0x59a <left_right_forward_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
 8de:	8d 2c       	mov	r8, r13
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Left_trigged = 0;
 8e0:	7d 2c       	mov	r7, r13
 8e2:	23 cf       	rjmp	.-442    	; 0x72a <main+0xb2>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
 8e4:	8e 77       	andi	r24, 0x7E	; 126
 8e6:	09 f0       	breq	.+2      	; 0x8ea <__stack+0x8b>
 8e8:	20 cf       	rjmp	.-448    	; 0x72a <main+0xb2>
		{
			reverse_operation(speed);
 8ea:	ce 01       	movw	r24, r28
 8ec:	0e 94 de 02 	call	0x5bc	; 0x5bc <reverse_operation>
 8f0:	1c cf       	rjmp	.-456    	; 0x72a <main+0xb2>
//********* Solving the maze from here *********************************************************************
//**********************************************************************************************************

solv_maze:

	sensor_data_hold = sensor_data();  //normally read
 8f2:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>

	// start line follow
	if ((sensor_data_hold & (3<<3)) == (3<<3))
 8f6:	98 2f       	mov	r25, r24
 8f8:	98 71       	andi	r25, 0x18	; 24
 8fa:	98 31       	cpi	r25, 0x18	; 24
 8fc:	39 f4       	brne	.+14     	; 0x90c <__stack+0xad>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 8fe:	8c e2       	ldi	r24, 0x2C	; 44
 900:	91 e0       	ldi	r25, 0x01	; 1
 902:	99 bd       	out	0x29, r25	; 41
 904:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 906:	9b bd       	out	0x2b, r25	; 43
 908:	8a bd       	out	0x2a, r24	; 42
 90a:	0e c0       	rjmp	.+28     	; 0x928 <__stack+0xc9>
	// start line follow
	if ((sensor_data_hold & (3<<3)) == (3<<3))
	{
		set_speed_RL(speed);
	}
	else if (sensor_data_hold & 0b00001111)
 90c:	98 2f       	mov	r25, r24
 90e:	9f 70       	andi	r25, 0x0F	; 15
 910:	29 f0       	breq	.+10     	; 0x91c <__stack+0xbd>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 912:	84 e6       	ldi	r24, 0x64	; 100
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	99 bd       	out	0x29, r25	; 41
 918:	88 bd       	out	0x28, r24	; 40
 91a:	06 c0       	rjmp	.+12     	; 0x928 <__stack+0xc9>
	}
	else if (sensor_data_hold & 0b00001111)
	{
		set_speed_R(speed - 200);  //previously 150
	}
	else if (sensor_data_hold & 0b11110000)
 91c:	80 7f       	andi	r24, 0xF0	; 240
 91e:	21 f0       	breq	.+8      	; 0x928 <__stack+0xc9>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 920:	84 e6       	ldi	r24, 0x64	; 100
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	9b bd       	out	0x2b, r25	; 43
 926:	8a bd       	out	0x2a, r24	; 42
 928:	0f 2e       	mov	r0, r31
 92a:	f6 e9       	ldi	r31, 0x96	; 150
 92c:	ef 2e       	mov	r14, r31
 92e:	f1 2c       	mov	r15, r1
 930:	f0 2d       	mov	r31, r0
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 932:	41 2c       	mov	r4, r1
 934:	51 2c       	mov	r5, r1
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 936:	33 24       	eor	r3, r3
 938:	33 94       	inc	r3
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				evaluate_direction(6,speed);
				//left_right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 93a:	61 2c       	mov	r6, r1
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
				{
					destination = destination + 1;
					if (destination > 7000)   // destination triggering
					{
						destination = 0x00;
 93c:	94 2c       	mov	r9, r4
 93e:	a5 2c       	mov	r10, r5
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 940:	b3 2c       	mov	r11, r3
 942:	03 c0       	rjmp	.+6      	; 0x94a <__stack+0xeb>
 944:	cc 2e       	mov	r12, r28
 946:	01 c0       	rjmp	.+2      	; 0x94a <__stack+0xeb>
 948:	7c 2e       	mov	r7, r28
	}
	// end line follow
	
	while(1)
	{
		sensor_data_hold = sensor_data();  //normally read
 94a:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 94e:	18 2f       	mov	r17, r24
		
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
 950:	88 71       	andi	r24, 0x18	; 24
 952:	88 31       	cpi	r24, 0x18	; 24
 954:	39 f4       	brne	.+14     	; 0x964 <__stack+0x105>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 956:	8c e2       	ldi	r24, 0x2C	; 44
 958:	91 e0       	ldi	r25, 0x01	; 1
 95a:	99 bd       	out	0x29, r25	; 41
 95c:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 95e:	9b bd       	out	0x2b, r25	; 43
 960:	8a bd       	out	0x2a, r24	; 42
 962:	09 c0       	rjmp	.+18     	; 0x976 <__stack+0x117>
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
		{
			set_speed_RL(speed);
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
 964:	13 ff       	sbrs	r17, 3
 966:	03 c0       	rjmp	.+6      	; 0x96e <__stack+0x10f>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 968:	f9 bc       	out	0x29, r15	; 41
 96a:	e8 bc       	out	0x28, r14	; 40
 96c:	04 c0       	rjmp	.+8      	; 0x976 <__stack+0x117>
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
		{
			set_speed_R(speed - 150);  //previously 150
		}
		else if ((sensor_data_hold & (1<<4)) == (1<<4))
 96e:	14 ff       	sbrs	r17, 4
 970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x117>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 972:	fb bc       	out	0x2b, r15	; 43
 974:	ea bc       	out	0x2a, r14	; 42
			set_speed_L(speed - 150);  //previously 150
		}
		// end line follow
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
 976:	81 2f       	mov	r24, r17
 978:	80 7f       	andi	r24, 0xF0	; 240
 97a:	80 3f       	cpi	r24, 0xF0	; 240
 97c:	09 f0       	breq	.+2      	; 0x980 <__stack+0x121>
 97e:	5d c0       	rjmp	.+186    	; 0xa3a <__stack+0x1db>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 980:	8c e2       	ldi	r24, 0x2C	; 44
 982:	91 e0       	ldi	r25, 0x01	; 1
 984:	99 bd       	out	0x29, r25	; 41
 986:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 988:	9b bd       	out	0x2b, r25	; 43
 98a:	8a bd       	out	0x2a, r24	; 42
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
 98c:	c4 2d       	mov	r28, r4
 98e:	d5 2d       	mov	r29, r5
 990:	16 c0       	rjmp	.+44     	; 0x9be <__stack+0x15f>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 992:	85 e8       	ldi	r24, 0x85	; 133
 994:	8a 95       	dec	r24
 996:	f1 f7       	brne	.-4      	; 0x994 <__stack+0x135>
 998:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 99a:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 99e:	18 2f       	mov	r17, r24
				if (sensor_data_hold & (1<<1))
 9a0:	81 fd       	sbrc	r24, 1
				{
					Right_trigged=1;
 9a2:	cb 2c       	mov	r12, r11
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 9a4:	81 2f       	mov	r24, r17
 9a6:	8e 77       	andi	r24, 0x7E	; 126
 9a8:	8e 37       	cpi	r24, 0x7E	; 126
 9aa:	49 f4       	brne	.+18     	; 0x9be <__stack+0x15f>
				{
					destination = destination + 1;
 9ac:	21 96       	adiw	r28, 0x01	; 1
					if (destination > 7000)   // destination triggering
 9ae:	c9 35       	cpi	r28, 0x59	; 89
 9b0:	9b e1       	ldi	r25, 0x1B	; 27
 9b2:	d9 07       	cpc	r29, r25
 9b4:	20 f0       	brcs	.+8      	; 0x9be <__stack+0x15f>
					{
						destination = 0x00;
						stay_stop();
 9b6:	0e 94 56 00 	call	0xac	; 0xac <stay_stop>
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
				{
					destination = destination + 1;
					if (destination > 7000)   // destination triggering
					{
						destination = 0x00;
 9ba:	c9 2d       	mov	r28, r9
 9bc:	da 2d       	mov	r29, r10
 9be:	81 2f       	mov	r24, r17
 9c0:	82 74       	andi	r24, 0x42	; 66
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 9c2:	39 f7       	brne	.-50     	; 0x992 <__stack+0x133>
 9c4:	cc 2d       	mov	r28, r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9c6:	9f ef       	ldi	r25, 0xFF	; 255
 9c8:	20 e7       	ldi	r18, 0x70	; 112
 9ca:	82 e0       	ldi	r24, 0x02	; 2
 9cc:	91 50       	subi	r25, 0x01	; 1
 9ce:	20 40       	sbci	r18, 0x00	; 0
 9d0:	80 40       	sbci	r24, 0x00	; 0
 9d2:	e1 f7       	brne	.-8      	; 0x9cc <__stack+0x16d>
 9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <__stack+0x177>
 9d6:	00 00       	nop
					}
				}
				
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 9d8:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 9dc:	8e 77       	andi	r24, 0x7E	; 126
 9de:	09 f0       	breq	.+2      	; 0x9e2 <__stack+0x183>
 9e0:	a0 c0       	rjmp	.+320    	; 0xb22 <__stack+0x2c3>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
 9e2:	c1 10       	cpse	r12, r1
 9e4:	13 c0       	rjmp	.+38     	; 0xa0c <__stack+0x1ad>
 9e6:	81 10       	cpse	r8, r1
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <__stack+0x197>
			{
				evaluate_direction(1,speed);
 9ea:	6c e2       	ldi	r22, 0x2C	; 44
 9ec:	71 e0       	ldi	r23, 0x01	; 1
 9ee:	83 2d       	mov	r24, r3
 9f0:	0e 94 10 03 	call	0x620	; 0x620 <evaluate_direction>
				//left_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
 9f4:	aa cf       	rjmp	.-172    	; 0x94a <__stack+0xeb>
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 9f6:	91 e0       	ldi	r25, 0x01	; 1
 9f8:	89 12       	cpse	r8, r25
 9fa:	a7 cf       	rjmp	.-178    	; 0x94a <__stack+0xeb>
			{
				evaluate_direction(4,speed);
 9fc:	6c e2       	ldi	r22, 0x2C	; 44
 9fe:	71 e0       	ldi	r23, 0x01	; 1
 a00:	84 e0       	ldi	r24, 0x04	; 4
 a02:	0e 94 10 03 	call	0x620	; 0x620 <evaluate_direction>
				//left_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
 a06:	86 2c       	mov	r8, r6
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
			{
				evaluate_direction(4,speed);
				//left_forward_operation(speed);
				Right_trigged = 0;
 a08:	c6 2c       	mov	r12, r6
				Forward_trigged = 0;
 a0a:	9f cf       	rjmp	.-194    	; 0x94a <__stack+0xeb>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 a0c:	c1 30       	cpi	r28, 0x01	; 1
 a0e:	09 f0       	breq	.+2      	; 0xa12 <__stack+0x1b3>
 a10:	9c cf       	rjmp	.-200    	; 0x94a <__stack+0xeb>
 a12:	81 10       	cpse	r8, r1
 a14:	07 c0       	rjmp	.+14     	; 0xa24 <__stack+0x1c5>
			{
				evaluate_direction(3,speed);
 a16:	6c e2       	ldi	r22, 0x2C	; 44
 a18:	71 e0       	ldi	r23, 0x01	; 1
 a1a:	83 e0       	ldi	r24, 0x03	; 3
 a1c:	0e 94 10 03 	call	0x620	; 0x620 <evaluate_direction>
				//left_right_operation(speed);
				Right_trigged = 0;
 a20:	c6 2c       	mov	r12, r6
				Forward_trigged = 0;
 a22:	93 cf       	rjmp	.-218    	; 0x94a <__stack+0xeb>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
 a24:	21 e0       	ldi	r18, 0x01	; 1
 a26:	82 12       	cpse	r8, r18
 a28:	8d cf       	rjmp	.-230    	; 0x944 <__stack+0xe5>
			{
				evaluate_direction(6,speed);
 a2a:	6c e2       	ldi	r22, 0x2C	; 44
 a2c:	71 e0       	ldi	r23, 0x01	; 1
 a2e:	86 e0       	ldi	r24, 0x06	; 6
 a30:	0e 94 10 03 	call	0x620	; 0x620 <evaluate_direction>
				//left_right_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
 a34:	86 2c       	mov	r8, r6
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
			{
				evaluate_direction(6,speed);
				//left_right_forward_operation(speed);
				Right_trigged = 0;
 a36:	c6 2c       	mov	r12, r6
 a38:	88 cf       	rjmp	.-240    	; 0x94a <__stack+0xeb>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
 a3a:	81 2f       	mov	r24, r17
 a3c:	8f 70       	andi	r24, 0x0F	; 15
 a3e:	8f 30       	cpi	r24, 0x0F	; 15
 a40:	09 f0       	breq	.+2      	; 0xa44 <__stack+0x1e5>
 a42:	5d c0       	rjmp	.+186    	; 0xafe <__stack+0x29f>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 a44:	8c e2       	ldi	r24, 0x2C	; 44
 a46:	91 e0       	ldi	r25, 0x01	; 1
 a48:	99 bd       	out	0x29, r25	; 41
 a4a:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 a4c:	9b bd       	out	0x2b, r25	; 43
 a4e:	8a bd       	out	0x2a, r24	; 42
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 a50:	c4 2d       	mov	r28, r4
 a52:	d5 2d       	mov	r29, r5
 a54:	16 c0       	rjmp	.+44     	; 0xa82 <__stack+0x223>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a56:	85 e8       	ldi	r24, 0x85	; 133
 a58:	8a 95       	dec	r24
 a5a:	f1 f7       	brne	.-4      	; 0xa58 <__stack+0x1f9>
 a5c:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 a5e:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 a62:	18 2f       	mov	r17, r24
				if (sensor_data_hold & (1<<6))  // must change for 8 system
 a64:	86 fd       	sbrc	r24, 6
				{
					Left_trigged=1;
 a66:	7b 2c       	mov	r7, r11
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 a68:	81 2f       	mov	r24, r17
 a6a:	8e 77       	andi	r24, 0x7E	; 126
 a6c:	8e 37       	cpi	r24, 0x7E	; 126
 a6e:	49 f4       	brne	.+18     	; 0xa82 <__stack+0x223>
				{
					destination = destination + 1;
 a70:	21 96       	adiw	r28, 0x01	; 1
					if (destination > 7000)   // destination triggering
 a72:	c9 35       	cpi	r28, 0x59	; 89
 a74:	9b e1       	ldi	r25, 0x1B	; 27
 a76:	d9 07       	cpc	r29, r25
 a78:	20 f0       	brcs	.+8      	; 0xa82 <__stack+0x223>
					{
						destination = 0x00;
						stay_stop();
 a7a:	0e 94 56 00 	call	0xac	; 0xac <stay_stop>
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
				{
					destination = destination + 1;
					if (destination > 7000)   // destination triggering
					{
						destination = 0x00;
 a7e:	c9 2d       	mov	r28, r9
 a80:	da 2d       	mov	r29, r10
 a82:	81 2f       	mov	r24, r17
 a84:	82 74       	andi	r24, 0x42	; 66
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 a86:	39 f7       	brne	.-50     	; 0xa56 <__stack+0x1f7>
 a88:	c7 2d       	mov	r28, r7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a8a:	9f ef       	ldi	r25, 0xFF	; 255
 a8c:	20 e7       	ldi	r18, 0x70	; 112
 a8e:	82 e0       	ldi	r24, 0x02	; 2
 a90:	91 50       	subi	r25, 0x01	; 1
 a92:	20 40       	sbci	r18, 0x00	; 0
 a94:	80 40       	sbci	r24, 0x00	; 0
 a96:	e1 f7       	brne	.-8      	; 0xa90 <__stack+0x231>
 a98:	00 c0       	rjmp	.+0      	; 0xa9a <__stack+0x23b>
 a9a:	00 00       	nop
						stay_stop();
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 a9c:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 aa0:	8e 77       	andi	r24, 0x7E	; 126
 aa2:	09 f0       	breq	.+2      	; 0xaa6 <__stack+0x247>
 aa4:	42 c0       	rjmp	.+132    	; 0xb2a <__stack+0x2cb>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
 aa6:	71 10       	cpse	r7, r1
 aa8:	13 c0       	rjmp	.+38     	; 0xad0 <__stack+0x271>
 aaa:	81 10       	cpse	r8, r1
 aac:	06 c0       	rjmp	.+12     	; 0xaba <__stack+0x25b>
			{
				evaluate_direction(2,speed);
 aae:	6c e2       	ldi	r22, 0x2C	; 44
 ab0:	71 e0       	ldi	r23, 0x01	; 1
 ab2:	82 e0       	ldi	r24, 0x02	; 2
 ab4:	0e 94 10 03 	call	0x620	; 0x620 <evaluate_direction>
				//right_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 ab8:	48 cf       	rjmp	.-368    	; 0x94a <__stack+0xeb>
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))  // this logic is fixed
 aba:	91 e0       	ldi	r25, 0x01	; 1
 abc:	89 12       	cpse	r8, r25
 abe:	45 cf       	rjmp	.-374    	; 0x94a <__stack+0xeb>
			{
				evaluate_direction(5,speed);
 ac0:	6c e2       	ldi	r22, 0x2C	; 44
 ac2:	71 e0       	ldi	r23, 0x01	; 1
 ac4:	85 e0       	ldi	r24, 0x05	; 5
 ac6:	0e 94 10 03 	call	0x620	; 0x620 <evaluate_direction>
				//right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 aca:	86 2c       	mov	r8, r6
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))  // this logic is fixed
			{
				evaluate_direction(5,speed);
				//right_forward_operation(speed);
				Left_trigged = 0;
 acc:	76 2c       	mov	r7, r6
				Forward_trigged = 0;
 ace:	3d cf       	rjmp	.-390    	; 0x94a <__stack+0xeb>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 ad0:	c1 30       	cpi	r28, 0x01	; 1
 ad2:	09 f0       	breq	.+2      	; 0xad6 <__stack+0x277>
 ad4:	3a cf       	rjmp	.-396    	; 0x94a <__stack+0xeb>
 ad6:	81 10       	cpse	r8, r1
 ad8:	07 c0       	rjmp	.+14     	; 0xae8 <__stack+0x289>
			{
				evaluate_direction(3,speed);
 ada:	6c e2       	ldi	r22, 0x2C	; 44
 adc:	71 e0       	ldi	r23, 0x01	; 1
 ade:	83 e0       	ldi	r24, 0x03	; 3
 ae0:	0e 94 10 03 	call	0x620	; 0x620 <evaluate_direction>
				//left_right_operation(speed);
				Left_trigged = 0;
 ae4:	76 2c       	mov	r7, r6
				Forward_trigged = 0;
 ae6:	31 cf       	rjmp	.-414    	; 0x94a <__stack+0xeb>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
 ae8:	21 e0       	ldi	r18, 0x01	; 1
 aea:	82 12       	cpse	r8, r18
 aec:	2d cf       	rjmp	.-422    	; 0x948 <__stack+0xe9>
			{
				evaluate_direction(6,speed);
 aee:	6c e2       	ldi	r22, 0x2C	; 44
 af0:	71 e0       	ldi	r23, 0x01	; 1
 af2:	86 e0       	ldi	r24, 0x06	; 6
 af4:	0e 94 10 03 	call	0x620	; 0x620 <evaluate_direction>
				//left_right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 af8:	86 2c       	mov	r8, r6
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				evaluate_direction(6,speed);
				//left_right_forward_operation(speed);
				Left_trigged = 0;
 afa:	76 2c       	mov	r7, r6
 afc:	26 cf       	rjmp	.-436    	; 0x94a <__stack+0xeb>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
 afe:	81 2f       	mov	r24, r17
 b00:	8e 77       	andi	r24, 0x7E	; 126
 b02:	09 f0       	breq	.+2      	; 0xb06 <__stack+0x2a7>
 b04:	22 cf       	rjmp	.-444    	; 0x94a <__stack+0xeb>
		{
			evaluate_direction(7,speed);
 b06:	6c e2       	ldi	r22, 0x2C	; 44
 b08:	71 e0       	ldi	r23, 0x01	; 1
 b0a:	87 e0       	ldi	r24, 0x07	; 7
 b0c:	0e 94 10 03 	call	0x620	; 0x620 <evaluate_direction>
 b10:	1c cf       	rjmp	.-456    	; 0x94a <__stack+0xeb>
			{
				left_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 b12:	cc 20       	and	r12, r12
 b14:	09 f4       	brne	.+2      	; 0xb18 <__stack+0x2b9>
 b16:	75 ce       	rjmp	.-790    	; 0x802 <main+0x18a>
 b18:	0b c0       	rjmp	.+22     	; 0xb30 <__stack+0x2d1>
			{
				right_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
 b1a:	77 20       	and	r7, r7
 b1c:	09 f4       	brne	.+2      	; 0xb20 <__stack+0x2c1>
 b1e:	c9 ce       	rjmp	.-622    	; 0x8b2 <__stack+0x53>
 b20:	0c c0       	rjmp	.+24     	; 0xb3a <__stack+0x2db>
				evaluate_direction(1,speed);
				//left_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 b22:	cc 20       	and	r12, r12
 b24:	09 f4       	brne	.+2      	; 0xb28 <__stack+0x2c9>
 b26:	6a cf       	rjmp	.-300    	; 0x9fc <__stack+0x19d>
 b28:	0d c0       	rjmp	.+26     	; 0xb44 <__stack+0x2e5>
				evaluate_direction(2,speed);
				//right_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))  // this logic is fixed
 b2a:	77 20       	and	r7, r7
 b2c:	49 f2       	breq	.-110    	; 0xac0 <__stack+0x261>
 b2e:	0f c0       	rjmp	.+30     	; 0xb4e <__stack+0x2ef>
			{
				left_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 b30:	11 30       	cpi	r17, 0x01	; 1
 b32:	09 f4       	brne	.+2      	; 0xb36 <__stack+0x2d7>
 b34:	79 ce       	rjmp	.-782    	; 0x828 <main+0x1b0>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 b36:	8b 2c       	mov	r8, r11
 b38:	f8 cd       	rjmp	.-1040   	; 0x72a <main+0xb2>
			{
				right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 b3a:	11 30       	cpi	r17, 0x01	; 1
 b3c:	09 f4       	brne	.+2      	; 0xb40 <__stack+0x2e1>
 b3e:	cc ce       	rjmp	.-616    	; 0x8d8 <__stack+0x79>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 b40:	8b 2c       	mov	r8, r11
 b42:	f3 cd       	rjmp	.-1050   	; 0x72a <main+0xb2>
				evaluate_direction(4,speed);
				//left_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 b44:	c1 30       	cpi	r28, 0x01	; 1
 b46:	09 f4       	brne	.+2      	; 0xb4a <__stack+0x2eb>
 b48:	70 cf       	rjmp	.-288    	; 0xa2a <__stack+0x1cb>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 b4a:	83 2c       	mov	r8, r3
 b4c:	fe ce       	rjmp	.-516    	; 0x94a <__stack+0xeb>
				evaluate_direction(5,speed);
				//right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 b4e:	c1 30       	cpi	r28, 0x01	; 1
 b50:	71 f2       	breq	.-100    	; 0xaee <__stack+0x28f>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 b52:	83 2c       	mov	r8, r3
 b54:	fa ce       	rjmp	.-524    	; 0x94a <__stack+0xeb>

00000b56 <strcpy>:
 b56:	fb 01       	movw	r30, r22
 b58:	dc 01       	movw	r26, r24
 b5a:	01 90       	ld	r0, Z+
 b5c:	0d 92       	st	X+, r0
 b5e:	00 20       	and	r0, r0
 b60:	e1 f7       	brne	.-8      	; 0xb5a <strcpy+0x4>
 b62:	08 95       	ret

00000b64 <strrev>:
 b64:	dc 01       	movw	r26, r24
 b66:	fc 01       	movw	r30, r24
 b68:	67 2f       	mov	r22, r23
 b6a:	71 91       	ld	r23, Z+
 b6c:	77 23       	and	r23, r23
 b6e:	e1 f7       	brne	.-8      	; 0xb68 <strrev+0x4>
 b70:	32 97       	sbiw	r30, 0x02	; 2
 b72:	04 c0       	rjmp	.+8      	; 0xb7c <strrev+0x18>
 b74:	7c 91       	ld	r23, X
 b76:	6d 93       	st	X+, r22
 b78:	70 83       	st	Z, r23
 b7a:	62 91       	ld	r22, -Z
 b7c:	ae 17       	cp	r26, r30
 b7e:	bf 07       	cpc	r27, r31
 b80:	c8 f3       	brcs	.-14     	; 0xb74 <strrev+0x10>
 b82:	08 95       	ret

00000b84 <_exit>:
 b84:	f8 94       	cli

00000b86 <__stop_program>:
 b86:	ff cf       	rjmp	.-2      	; 0xb86 <__stop_program>
