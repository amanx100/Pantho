
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000432  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  000004a6  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a0  00000000  00000000  000004d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005c0  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000028d  00000000  00000000  00000b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000323  00000000  00000000  00000dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000017c  00000000  00000000  000010e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002c8  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000022f  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c0  00000000  00000000  0000175b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_1>
   8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  74:	0c 94 17 02 	jmp	0x42e	; 0x42e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <usart_init>:
#include <string.h>

void usart_init(uint32_t baud)
{
	// Calculation for baud rate value into ubrr value
	uint16_t ubrr = lrint(( F_CPU / (16L * baud) ) - 1);
  7c:	dc 01       	movw	r26, r24
  7e:	cb 01       	movw	r24, r22
  80:	88 0f       	add	r24, r24
  82:	99 1f       	adc	r25, r25
  84:	aa 1f       	adc	r26, r26
  86:	bb 1f       	adc	r27, r27
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	aa 1f       	adc	r26, r26
  8e:	bb 1f       	adc	r27, r27
  90:	9c 01       	movw	r18, r24
  92:	ad 01       	movw	r20, r26
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	44 1f       	adc	r20, r20
  9a:	55 1f       	adc	r21, r21
  9c:	22 0f       	add	r18, r18
  9e:	33 1f       	adc	r19, r19
  a0:	44 1f       	adc	r20, r20
  a2:	55 1f       	adc	r21, r21
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	72 e1       	ldi	r23, 0x12	; 18
  a8:	8a e7       	ldi	r24, 0x7A	; 122
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__udivmodsi4>
  b0:	ca 01       	movw	r24, r20
  b2:	b9 01       	movw	r22, r18
  b4:	61 50       	subi	r22, 0x01	; 1
  b6:	71 09       	sbc	r23, r1
  b8:	81 09       	sbc	r24, r1
  ba:	91 09       	sbc	r25, r1
  bc:	0e 94 55 01 	call	0x2aa	; 0x2aa <__floatunsisf>
  c0:	0e 94 92 01 	call	0x324	; 0x324 <lrint>
	// Set baud rate
	UBRRH = (uint8_t)(ubrr>>8);
  c4:	27 2f       	mov	r18, r23
  c6:	33 27       	eor	r19, r19
  c8:	20 bd       	out	0x20, r18	; 32
	UBRRL = (uint8_t)ubrr;
  ca:	69 b9       	out	0x09, r22	; 9
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 1stop bit
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  d0:	86 e8       	ldi	r24, 0x86	; 134
  d2:	80 bd       	out	0x20, r24	; 32
  d4:	08 95       	ret

000000d6 <go_forward>:
#define M_DIR_H_


void go_forward(void)
{
	PORTB |= (1<<PD0);
  d6:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= ~(1<<PD1);
  d8:	c1 98       	cbi	0x18, 1	; 24
	PORTB |= (1<<PD2);
  da:	c2 9a       	sbi	0x18, 2	; 24
	PORTB &= ~(1<<PD3);
  dc:	c3 98       	cbi	0x18, 3	; 24
	
	TCCR1B |= (1<<1);
  de:	8e b5       	in	r24, 0x2e	; 46
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	8e bd       	out	0x2e, r24	; 46
  e4:	08 95       	ret

000000e6 <stay_stop>:
	TCCR1B |= (1<<1);
}

void stay_stop(void)
{
	PORTB &= ~(1<<PD0);
  e6:	c0 98       	cbi	0x18, 0	; 24
	PORTB &= ~(1<<PD1);
  e8:	c1 98       	cbi	0x18, 1	; 24
	PORTB &= ~(1<<PD2);
  ea:	c2 98       	cbi	0x18, 2	; 24
	PORTB &= ~(1<<PD3);
  ec:	c3 98       	cbi	0x18, 3	; 24
	
	TCCR1B &= ~(1<<1);
  ee:	8e b5       	in	r24, 0x2e	; 46
  f0:	8d 7f       	andi	r24, 0xFD	; 253
  f2:	8e bd       	out	0x2e, r24	; 46
  f4:	08 95       	ret

000000f6 <__vector_1>:
//#include <math.h>
uint32_t wheel_feedback_R=0, wheel_feedback_L=0;
char ch_buffer[40];

ISR(INT0_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
	wheel_feedback_L = wheel_feedback_L + 1;
 108:	80 91 60 00 	lds	r24, 0x0060
 10c:	90 91 61 00 	lds	r25, 0x0061
 110:	a0 91 62 00 	lds	r26, 0x0062
 114:	b0 91 63 00 	lds	r27, 0x0063
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	a1 1d       	adc	r26, r1
 11c:	b1 1d       	adc	r27, r1
 11e:	80 93 60 00 	sts	0x0060, r24
 122:	90 93 61 00 	sts	0x0061, r25
 126:	a0 93 62 00 	sts	0x0062, r26
 12a:	b0 93 63 00 	sts	0x0063, r27
	//sprintf(ch_buffer,"left data: %d \n\r",(uint16_t)wheel_feedback_L);
	//usart_putstr(ch_buffer);
}
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_2>:

ISR(INT1_vect)
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
	wheel_feedback_R = wheel_feedback_R + 1;
 152:	80 91 64 00 	lds	r24, 0x0064
 156:	90 91 65 00 	lds	r25, 0x0065
 15a:	a0 91 66 00 	lds	r26, 0x0066
 15e:	b0 91 67 00 	lds	r27, 0x0067
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	a1 1d       	adc	r26, r1
 166:	b1 1d       	adc	r27, r1
 168:	80 93 64 00 	sts	0x0064, r24
 16c:	90 93 65 00 	sts	0x0065, r25
 170:	a0 93 66 00 	sts	0x0066, r26
 174:	b0 93 67 00 	sts	0x0067, r27
	//sprintf(ch_buffer,"right data: %d \n\r",(uint16_t)wheel_feedback_R);
	//usart_putstr(ch_buffer);
}
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <sensor_data>:

uint8_t sensor_data(void)
{
	uint8_t sn_data_1=0, sn_data_2=0;
sn_dt:
	sn_data_1 = PINC;
 18a:	93 b3       	in	r25, 0x13	; 19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	e7 e5       	ldi	r30, 0x57	; 87
 18e:	fb e1       	ldi	r31, 0x1B	; 27
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <sensor_data+0x6>
 194:	00 c0       	rjmp	.+0      	; 0x196 <sensor_data+0xc>
 196:	00 00       	nop
	_delay_us(3500);
	sn_data_2 = PINC;
 198:	83 b3       	in	r24, 0x13	; 19
	if (sn_data_1 == sn_data_2)
 19a:	98 13       	cpse	r25, r24
 19c:	f6 cf       	rjmp	.-20     	; 0x18a <sensor_data>
 19e:	e7 e5       	ldi	r30, 0x57	; 87
 1a0:	fb e1       	ldi	r31, 0x1B	; 27
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <sensor_data+0x18>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <sensor_data+0x1e>
 1a8:	00 00       	nop
	{
		_delay_us(3500);
		sn_data_2 = PINC;
 1aa:	83 b3       	in	r24, 0x13	; 19
		if (sn_data_1 == sn_data_2)
 1ac:	98 13       	cpse	r25, r24
 1ae:	ed cf       	rjmp	.-38     	; 0x18a <sensor_data>
			return sn_data_1;
		}
		else goto sn_dt;
	}
	else goto sn_dt;
}
 1b0:	08 95       	ret

000001b2 <main>:
int main(void)
{

	uint16_t speed=1000;// LS=100, RS=100;
	
	PORTA = 03;
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	8b bb       	out	0x1b, r24	; 27
	DDRA = 00;
 1b6:	1a ba       	out	0x1a, r1	; 26
	
	PORTB=0x00;
 1b8:	18 ba       	out	0x18, r1	; 24
	DDRB=0x0F;
 1ba:	9f e0       	ldi	r25, 0x0F	; 15
 1bc:	97 bb       	out	0x17, r25	; 23
	
	PORTC=0xFF;
 1be:	9f ef       	ldi	r25, 0xFF	; 255
 1c0:	95 bb       	out	0x15, r25	; 21
	DDRC=0x00;
 1c2:	14 ba       	out	0x14, r1	; 20
	
	PORTD=0x00;
 1c4:	12 ba       	out	0x12, r1	; 18
	DDRD=0x30;
 1c6:	90 e3       	ldi	r25, 0x30	; 48
 1c8:	91 bb       	out	0x11, r25	; 17
	
	//Timer Counter1 Initialization
	TCCR1A=0xA2;
 1ca:	92 ea       	ldi	r25, 0xA2	; 162
 1cc:	9f bd       	out	0x2f, r25	; 47
	TCCR1B=0x18;
 1ce:	98 e1       	ldi	r25, 0x18	; 24
 1d0:	9e bd       	out	0x2e, r25	; 46
	TCNT1=0x0000;
 1d2:	1d bc       	out	0x2d, r1	; 45
 1d4:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x03;
 1d6:	87 bd       	out	0x27, r24	; 39
	ICR1L=0xE8; //03E8=1000 in decimal
 1d8:	88 ee       	ldi	r24, 0xE8	; 232
 1da:	86 bd       	out	0x26, r24	; 38
	OCR1A=speed;
 1dc:	88 ee       	ldi	r24, 0xE8	; 232
 1de:	93 e0       	ldi	r25, 0x03	; 3
 1e0:	9b bd       	out	0x2b, r25	; 43
 1e2:	8a bd       	out	0x2a, r24	; 42
	OCR1B=speed;
 1e4:	99 bd       	out	0x29, r25	; 41
 1e6:	88 bd       	out	0x28, r24	; 40
	
	usart_init(9600); //USART Initialization
 1e8:	60 e8       	ldi	r22, 0x80	; 128
 1ea:	75 e2       	ldi	r23, 0x25	; 37
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 3e 00 	call	0x7c	; 0x7c <usart_init>
	
	
	//start interrupt settings
	GICR |= (1<<INT0)|(1<<INT1);				// Enable INT0 and INT1
 1f4:	8b b7       	in	r24, 0x3b	; 59
 1f6:	80 6c       	ori	r24, 0xC0	; 192
 1f8:	8b bf       	out	0x3b, r24	; 59
	MCUCSR |= 0x00;
 1fa:	84 b7       	in	r24, 0x34	; 52
 1fc:	84 bf       	out	0x34, r24	; 52
	MCUCR = 0x00;				// Trigger INT2 settings
 1fe:	15 be       	out	0x35, r1	; 53
	MCUCR |= (1<<ISC00)|(1<<ISC10);	//trigger int0 and int1 on any change
 200:	85 b7       	in	r24, 0x35	; 53
 202:	85 60       	ori	r24, 0x05	; 5
 204:	85 bf       	out	0x35, r24	; 53
	GIFR = (1<<INTF0)|(1<<INTF1);				//Interrupt flag 2 is cleared by writing a logical one into INTF
 206:	80 ec       	ldi	r24, 0xC0	; 192
 208:	8a bf       	out	0x3a, r24	; 58
	sei();							//Global Interrupt enable
 20a:	78 94       	sei
	OCR1B = speed_b;
}

void set_speed_L(uint16_t speed_a)
{
	OCR1A = speed_a;
 20c:	00 e2       	ldi	r16, 0x20	; 32
 20e:	13 e0       	ldi	r17, 0x03	; 3
 210:	c8 ee       	ldi	r28, 0xE8	; 232
 212:	d3 e0       	ldi	r29, 0x03	; 3
	sei();							//Global Interrupt enable
	
	
	
	start_tour:
	while (PINA & (1<<PA0));
 214:	c8 99       	sbic	0x19, 0	; 25
 216:	fe cf       	rjmp	.-4      	; 0x214 <main+0x62>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	2f ef       	ldi	r18, 0xFF	; 255
 21a:	83 ed       	ldi	r24, 0xD3	; 211
 21c:	90 e3       	ldi	r25, 0x30	; 48
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0x6c>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x76>
 228:	00 00       	nop
	_delay_ms(2000);
	go_forward();
 22a:	0e 94 6b 00 	call	0xd6	; 0xd6 <go_forward>
	
    while(1)
    {

		if (!((sensor_data()&(1<<3)) && (sensor_data()&(1<<4))))
 22e:	0e 94 c5 00 	call	0x18a	; 0x18a <sensor_data>
 232:	83 ff       	sbrs	r24, 3
 234:	04 c0       	rjmp	.+8      	; 0x23e <main+0x8c>
 236:	0e 94 c5 00 	call	0x18a	; 0x18a <sensor_data>
 23a:	84 fd       	sbrc	r24, 4
 23c:	2b c0       	rjmp	.+86     	; 0x294 <main+0xe2>
		{
			if (sensor_data() & (1<<3))
 23e:	0e 94 c5 00 	call	0x18a	; 0x18a <sensor_data>
 242:	83 ff       	sbrs	r24, 3
 244:	12 c0       	rjmp	.+36     	; 0x26a <main+0xb8>
}


void set_speed_R(uint16_t speed_b)
{
	OCR1B = speed_b;
 246:	19 bd       	out	0x29, r17	; 41
 248:	08 bd       	out	0x28, r16	; 40
 24a:	04 c0       	rjmp	.+8      	; 0x254 <main+0xa2>
			if (sensor_data() & (1<<3))
			{
				set_speed_R(800);
				while(!((sensor_data()&(1<<3)) && (sensor_data()&(1<<4))))
				{
					if (sensor_data() == 0x00)
 24c:	0e 94 c5 00 	call	0x18a	; 0x18a <sensor_data>
 250:	88 23       	and	r24, r24
 252:	41 f0       	breq	.+16     	; 0x264 <main+0xb2>
		if (!((sensor_data()&(1<<3)) && (sensor_data()&(1<<4))))
		{
			if (sensor_data() & (1<<3))
			{
				set_speed_R(800);
				while(!((sensor_data()&(1<<3)) && (sensor_data()&(1<<4))))
 254:	0e 94 c5 00 	call	0x18a	; 0x18a <sensor_data>
 258:	83 ff       	sbrs	r24, 3
 25a:	f8 cf       	rjmp	.-16     	; 0x24c <main+0x9a>
 25c:	0e 94 c5 00 	call	0x18a	; 0x18a <sensor_data>
 260:	84 ff       	sbrs	r24, 4
 262:	f4 cf       	rjmp	.-24     	; 0x24c <main+0x9a>
}


void set_speed_R(uint16_t speed_b)
{
	OCR1B = speed_b;
 264:	d9 bd       	out	0x29, r29	; 41
 266:	c8 bd       	out	0x28, r28	; 40
 268:	15 c0       	rjmp	.+42     	; 0x294 <main+0xe2>
						break;
					}
				}
				set_speed_R(speed);
			}
			else if (sensor_data() & (1<<4))
 26a:	0e 94 c5 00 	call	0x18a	; 0x18a <sensor_data>
 26e:	84 ff       	sbrs	r24, 4
 270:	11 c0       	rjmp	.+34     	; 0x294 <main+0xe2>
	OCR1B = speed_b;
}

void set_speed_L(uint16_t speed_a)
{
	OCR1A = speed_a;
 272:	1b bd       	out	0x2b, r17	; 43
 274:	0a bd       	out	0x2a, r16	; 42
 276:	04 c0       	rjmp	.+8      	; 0x280 <main+0xce>
			else if (sensor_data() & (1<<4))
			{
				set_speed_L(800);
				while(!((sensor_data()&(1<<3)) && (sensor_data()&(1<<4))))
				{
					if (sensor_data() == 0x00)
 278:	0e 94 c5 00 	call	0x18a	; 0x18a <sensor_data>
 27c:	88 23       	and	r24, r24
 27e:	41 f0       	breq	.+16     	; 0x290 <main+0xde>
				set_speed_R(speed);
			}
			else if (sensor_data() & (1<<4))
			{
				set_speed_L(800);
				while(!((sensor_data()&(1<<3)) && (sensor_data()&(1<<4))))
 280:	0e 94 c5 00 	call	0x18a	; 0x18a <sensor_data>
 284:	83 ff       	sbrs	r24, 3
 286:	f8 cf       	rjmp	.-16     	; 0x278 <main+0xc6>
 288:	0e 94 c5 00 	call	0x18a	; 0x18a <sensor_data>
 28c:	84 ff       	sbrs	r24, 4
 28e:	f4 cf       	rjmp	.-24     	; 0x278 <main+0xc6>
	OCR1B = speed_b;
}

void set_speed_L(uint16_t speed_a)
{
	OCR1A = speed_a;
 290:	db bd       	out	0x2b, r29	; 43
 292:	ca bd       	out	0x2a, r28	; 42
				set_speed_L(speed);
			}
			
		}
		
		if (sensor_data() == 0x00)
 294:	0e 94 c5 00 	call	0x18a	; 0x18a <sensor_data>
 298:	81 11       	cpse	r24, r1
 29a:	c9 cf       	rjmp	.-110    	; 0x22e <main+0x7c>
		{
			break;
		}
    }
	
	stay_stop();
 29c:	0e 94 73 00 	call	0xe6	; 0xe6 <stay_stop>
	
	while(1)
	{
		if (sensor_data() == 24)
 2a0:	0e 94 c5 00 	call	0x18a	; 0x18a <sensor_data>
 2a4:	88 31       	cpi	r24, 0x18	; 24
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <main+0xee>
 2a8:	b5 cf       	rjmp	.-150    	; 0x214 <main+0x62>

000002aa <__floatunsisf>:
 2aa:	e8 94       	clt
 2ac:	09 c0       	rjmp	.+18     	; 0x2c0 <__floatsisf+0x12>

000002ae <__floatsisf>:
 2ae:	97 fb       	bst	r25, 7
 2b0:	3e f4       	brtc	.+14     	; 0x2c0 <__floatsisf+0x12>
 2b2:	90 95       	com	r25
 2b4:	80 95       	com	r24
 2b6:	70 95       	com	r23
 2b8:	61 95       	neg	r22
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	8f 4f       	sbci	r24, 0xFF	; 255
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	99 23       	and	r25, r25
 2c2:	a9 f0       	breq	.+42     	; 0x2ee <__floatsisf+0x40>
 2c4:	f9 2f       	mov	r31, r25
 2c6:	96 e9       	ldi	r25, 0x96	; 150
 2c8:	bb 27       	eor	r27, r27
 2ca:	93 95       	inc	r25
 2cc:	f6 95       	lsr	r31
 2ce:	87 95       	ror	r24
 2d0:	77 95       	ror	r23
 2d2:	67 95       	ror	r22
 2d4:	b7 95       	ror	r27
 2d6:	f1 11       	cpse	r31, r1
 2d8:	f8 cf       	rjmp	.-16     	; 0x2ca <__floatsisf+0x1c>
 2da:	fa f4       	brpl	.+62     	; 0x31a <__floatsisf+0x6c>
 2dc:	bb 0f       	add	r27, r27
 2de:	11 f4       	brne	.+4      	; 0x2e4 <__floatsisf+0x36>
 2e0:	60 ff       	sbrs	r22, 0
 2e2:	1b c0       	rjmp	.+54     	; 0x31a <__floatsisf+0x6c>
 2e4:	6f 5f       	subi	r22, 0xFF	; 255
 2e6:	7f 4f       	sbci	r23, 0xFF	; 255
 2e8:	8f 4f       	sbci	r24, 0xFF	; 255
 2ea:	9f 4f       	sbci	r25, 0xFF	; 255
 2ec:	16 c0       	rjmp	.+44     	; 0x31a <__floatsisf+0x6c>
 2ee:	88 23       	and	r24, r24
 2f0:	11 f0       	breq	.+4      	; 0x2f6 <__floatsisf+0x48>
 2f2:	96 e9       	ldi	r25, 0x96	; 150
 2f4:	11 c0       	rjmp	.+34     	; 0x318 <__floatsisf+0x6a>
 2f6:	77 23       	and	r23, r23
 2f8:	21 f0       	breq	.+8      	; 0x302 <__floatsisf+0x54>
 2fa:	9e e8       	ldi	r25, 0x8E	; 142
 2fc:	87 2f       	mov	r24, r23
 2fe:	76 2f       	mov	r23, r22
 300:	05 c0       	rjmp	.+10     	; 0x30c <__floatsisf+0x5e>
 302:	66 23       	and	r22, r22
 304:	71 f0       	breq	.+28     	; 0x322 <__floatsisf+0x74>
 306:	96 e8       	ldi	r25, 0x86	; 134
 308:	86 2f       	mov	r24, r22
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	2a f0       	brmi	.+10     	; 0x31a <__floatsisf+0x6c>
 310:	9a 95       	dec	r25
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	88 1f       	adc	r24, r24
 318:	da f7       	brpl	.-10     	; 0x310 <__floatsisf+0x62>
 31a:	88 0f       	add	r24, r24
 31c:	96 95       	lsr	r25
 31e:	87 95       	ror	r24
 320:	97 f9       	bld	r25, 7
 322:	08 95       	ret

00000324 <lrint>:
 324:	41 d0       	rcall	.+130    	; 0x3a8 <__fp_splitA>
 326:	a8 f1       	brcs	.+106    	; 0x392 <lrint+0x6e>
 328:	9e 57       	subi	r25, 0x7E	; 126
 32a:	a8 f1       	brcs	.+106    	; 0x396 <lrint+0x72>
 32c:	98 51       	subi	r25, 0x18	; 24
 32e:	60 f0       	brcs	.+24     	; 0x348 <lrint+0x24>
 330:	39 f1       	breq	.+78     	; 0x380 <lrint+0x5c>
 332:	98 30       	cpi	r25, 0x08	; 8
 334:	70 f5       	brcc	.+92     	; 0x392 <lrint+0x6e>
 336:	09 2e       	mov	r0, r25
 338:	99 27       	eor	r25, r25
 33a:	66 0f       	add	r22, r22
 33c:	77 1f       	adc	r23, r23
 33e:	88 1f       	adc	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	0a 94       	dec	r0
 344:	d1 f7       	brne	.-12     	; 0x33a <lrint+0x16>
 346:	1c c0       	rjmp	.+56     	; 0x380 <lrint+0x5c>
 348:	bb 27       	eor	r27, r27
 34a:	99 3f       	cpi	r25, 0xF9	; 249
 34c:	4c f4       	brge	.+18     	; 0x360 <lrint+0x3c>
 34e:	b1 11       	cpse	r27, r1
 350:	b1 e0       	ldi	r27, 0x01	; 1
 352:	b6 2b       	or	r27, r22
 354:	67 2f       	mov	r22, r23
 356:	78 2f       	mov	r23, r24
 358:	88 27       	eor	r24, r24
 35a:	98 5f       	subi	r25, 0xF8	; 248
 35c:	b1 f7       	brne	.-20     	; 0x34a <lrint+0x26>
 35e:	08 c0       	rjmp	.+16     	; 0x370 <lrint+0x4c>
 360:	86 95       	lsr	r24
 362:	77 95       	ror	r23
 364:	67 95       	ror	r22
 366:	b7 95       	ror	r27
 368:	08 f4       	brcc	.+2      	; 0x36c <lrint+0x48>
 36a:	b1 60       	ori	r27, 0x01	; 1
 36c:	93 95       	inc	r25
 36e:	c1 f7       	brne	.-16     	; 0x360 <lrint+0x3c>
 370:	bb 0f       	add	r27, r27
 372:	30 f4       	brcc	.+12     	; 0x380 <lrint+0x5c>
 374:	11 f4       	brne	.+4      	; 0x37a <lrint+0x56>
 376:	60 ff       	sbrs	r22, 0
 378:	03 c0       	rjmp	.+6      	; 0x380 <lrint+0x5c>
 37a:	6f 5f       	subi	r22, 0xFF	; 255
 37c:	7f 4f       	sbci	r23, 0xFF	; 255
 37e:	8f 4f       	sbci	r24, 0xFF	; 255
 380:	3e f4       	brtc	.+14     	; 0x390 <lrint+0x6c>
 382:	90 95       	com	r25
 384:	80 95       	com	r24
 386:	70 95       	com	r23
 388:	61 95       	neg	r22
 38a:	7f 4f       	sbci	r23, 0xFF	; 255
 38c:	8f 4f       	sbci	r24, 0xFF	; 255
 38e:	9f 4f       	sbci	r25, 0xFF	; 255
 390:	08 95       	ret
 392:	68 94       	set
 394:	24 c0       	rjmp	.+72     	; 0x3de <__fp_szero>
 396:	22 c0       	rjmp	.+68     	; 0x3dc <__fp_zero>

00000398 <__fp_split3>:
 398:	57 fd       	sbrc	r21, 7
 39a:	90 58       	subi	r25, 0x80	; 128
 39c:	44 0f       	add	r20, r20
 39e:	55 1f       	adc	r21, r21
 3a0:	59 f0       	breq	.+22     	; 0x3b8 <__fp_splitA+0x10>
 3a2:	5f 3f       	cpi	r21, 0xFF	; 255
 3a4:	71 f0       	breq	.+28     	; 0x3c2 <__fp_splitA+0x1a>
 3a6:	47 95       	ror	r20

000003a8 <__fp_splitA>:
 3a8:	88 0f       	add	r24, r24
 3aa:	97 fb       	bst	r25, 7
 3ac:	99 1f       	adc	r25, r25
 3ae:	61 f0       	breq	.+24     	; 0x3c8 <__fp_splitA+0x20>
 3b0:	9f 3f       	cpi	r25, 0xFF	; 255
 3b2:	79 f0       	breq	.+30     	; 0x3d2 <__fp_splitA+0x2a>
 3b4:	87 95       	ror	r24
 3b6:	08 95       	ret
 3b8:	12 16       	cp	r1, r18
 3ba:	13 06       	cpc	r1, r19
 3bc:	14 06       	cpc	r1, r20
 3be:	55 1f       	adc	r21, r21
 3c0:	f2 cf       	rjmp	.-28     	; 0x3a6 <__fp_split3+0xe>
 3c2:	46 95       	lsr	r20
 3c4:	f1 df       	rcall	.-30     	; 0x3a8 <__fp_splitA>
 3c6:	08 c0       	rjmp	.+16     	; 0x3d8 <__fp_splitA+0x30>
 3c8:	16 16       	cp	r1, r22
 3ca:	17 06       	cpc	r1, r23
 3cc:	18 06       	cpc	r1, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	f1 cf       	rjmp	.-30     	; 0x3b4 <__fp_splitA+0xc>
 3d2:	86 95       	lsr	r24
 3d4:	71 05       	cpc	r23, r1
 3d6:	61 05       	cpc	r22, r1
 3d8:	08 94       	sec
 3da:	08 95       	ret

000003dc <__fp_zero>:
 3dc:	e8 94       	clt

000003de <__fp_szero>:
 3de:	bb 27       	eor	r27, r27
 3e0:	66 27       	eor	r22, r22
 3e2:	77 27       	eor	r23, r23
 3e4:	cb 01       	movw	r24, r22
 3e6:	97 f9       	bld	r25, 7
 3e8:	08 95       	ret

000003ea <__udivmodsi4>:
 3ea:	a1 e2       	ldi	r26, 0x21	; 33
 3ec:	1a 2e       	mov	r1, r26
 3ee:	aa 1b       	sub	r26, r26
 3f0:	bb 1b       	sub	r27, r27
 3f2:	fd 01       	movw	r30, r26
 3f4:	0d c0       	rjmp	.+26     	; 0x410 <__udivmodsi4_ep>

000003f6 <__udivmodsi4_loop>:
 3f6:	aa 1f       	adc	r26, r26
 3f8:	bb 1f       	adc	r27, r27
 3fa:	ee 1f       	adc	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	a2 17       	cp	r26, r18
 400:	b3 07       	cpc	r27, r19
 402:	e4 07       	cpc	r30, r20
 404:	f5 07       	cpc	r31, r21
 406:	20 f0       	brcs	.+8      	; 0x410 <__udivmodsi4_ep>
 408:	a2 1b       	sub	r26, r18
 40a:	b3 0b       	sbc	r27, r19
 40c:	e4 0b       	sbc	r30, r20
 40e:	f5 0b       	sbc	r31, r21

00000410 <__udivmodsi4_ep>:
 410:	66 1f       	adc	r22, r22
 412:	77 1f       	adc	r23, r23
 414:	88 1f       	adc	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	1a 94       	dec	r1
 41a:	69 f7       	brne	.-38     	; 0x3f6 <__udivmodsi4_loop>
 41c:	60 95       	com	r22
 41e:	70 95       	com	r23
 420:	80 95       	com	r24
 422:	90 95       	com	r25
 424:	9b 01       	movw	r18, r22
 426:	ac 01       	movw	r20, r24
 428:	bd 01       	movw	r22, r26
 42a:	cf 01       	movw	r24, r30
 42c:	08 95       	ret

0000042e <_exit>:
 42e:	f8 94       	cli

00000430 <__stop_program>:
 430:	ff cf       	rjmp	.-2      	; 0x430 <__stop_program>
