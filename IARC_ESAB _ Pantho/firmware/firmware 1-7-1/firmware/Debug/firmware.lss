
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a26  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000198  00800060  00800060  00000a9a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000a9a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000d8  00000000  00000000  00000aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000189c  00000000  00000000  00000ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000280  00000000  00000000  0000243e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006a3  00000000  00000000  000026be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001e4  00000000  00000000  00002d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000389  00000000  00000000  00002f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000179a  00000000  00000000  000032d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000128  00000000  00000000  00004a6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	21 e0       	ldi	r18, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 3f       	cpi	r26, 0xF8	; 248
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8b 02 	call	0x516	; 0x516 <main>
  74:	0c 94 11 05 	jmp	0xa22	; 0xa22 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <go_forward>:
#ifndef M_DIR_H_
#define M_DIR_H_

void go_forward(void)
{
	PORTB = 0x05;
  7c:	85 e0       	ldi	r24, 0x05	; 5
  7e:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  80:	8e b5       	in	r24, 0x2e	; 46
  82:	82 60       	ori	r24, 0x02	; 2
  84:	8e bd       	out	0x2e, r24	; 46
  86:	08 95       	ret

00000088 <go_backward>:
}

void go_backward(void)
{
	PORTB = 0x0A;
  88:	8a e0       	ldi	r24, 0x0A	; 10
  8a:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  8c:	8e b5       	in	r24, 0x2e	; 46
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	8e bd       	out	0x2e, r24	; 46
  92:	08 95       	ret

00000094 <right_rotate>:
}

void right_rotate(void)
{
	PORTB = 0x09;
  94:	89 e0       	ldi	r24, 0x09	; 9
  96:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  98:	8e b5       	in	r24, 0x2e	; 46
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	8e bd       	out	0x2e, r24	; 46
  9e:	08 95       	ret

000000a0 <left_rotate>:
}

void left_rotate(void)
{
	PORTB = 0x06;
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  a4:	8e b5       	in	r24, 0x2e	; 46
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	8e bd       	out	0x2e, r24	; 46
  aa:	08 95       	ret

000000ac <stay_stop>:
}

void stay_stop(void)
{
	PORTB = 0x00;
  ac:	18 ba       	out	0x18, r1	; 24
	TCCR1B &= ~(1<<1);
  ae:	8e b5       	in	r24, 0x2e	; 46
  b0:	8d 7f       	andi	r24, 0xFD	; 253
  b2:	8e bd       	out	0x2e, r24	; 46
  b4:	08 95       	ret

000000b6 <sensor_data>:
}

uint8_t sensor_data(void)
{
sn_dt:
	if ((PIND & (1<<PD2)) && (PIND & (1<<PD3)))
  b6:	82 9b       	sbis	0x10, 2	; 16
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <sensor_data>
  ba:	83 9b       	sbis	0x10, 3	; 16
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <sensor_data>
	{
		return PINC;
  be:	83 b3       	in	r24, 0x13	; 19
	}
	else goto sn_dt;
}
  c0:	08 95       	ret

000000c2 <process_array>:

void process_array(void)
{
	strrev(directions_entry);
  c2:	88 e6       	ldi	r24, 0x68	; 104
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 01 05 	call	0xa02	; 0xa02 <strrev>
	strcpy ( directions_solved, directions_entry ) ;
  ca:	68 e6       	ldi	r22, 0x68	; 104
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	80 e3       	ldi	r24, 0x30	; 48
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <strcpy>
  d6:	08 95       	ret

000000d8 <turn_U>:
}

void turn_U(uint16_t speed)
{
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	82 e5       	ldi	r24, 0x52	; 82
  e6:	97 e0       	ldi	r25, 0x07	; 7
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <turn_U+0x10>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <turn_U+0x1a>
  f2:	00 00       	nop
	_delay_ms(300);
	left_rotate();
  f4:	0e 94 50 00 	call	0xa0	; 0xa0 <left_rotate>
	set_speed_L(speed + 300); //70
  f8:	8e 01       	movw	r16, r28
  fa:	04 5d       	subi	r16, 0xD4	; 212
  fc:	1e 4f       	sbci	r17, 0xFE	; 254
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
  fe:	1b bd       	out	0x2b, r17	; 43
 100:	0a bd       	out	0x2a, r16	; 42
 102:	2f e7       	ldi	r18, 0x7F	; 127
 104:	88 e3       	ldi	r24, 0x38	; 56
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <turn_U+0x30>
 110:	00 c0       	rjmp	.+0      	; 0x112 <turn_U+0x3a>
 112:	00 00       	nop
{
	_delay_ms(300);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
 114:	ce 01       	movw	r24, r28
 116:	c2 97       	sbiw	r24, 0x32	; 50
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 118:	99 bd       	out	0x29, r25	; 41
 11a:	88 bd       	out	0x28, r24	; 40
	_delay_ms(300);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
 11c:	80 5b       	subi	r24, 0xB0	; 176
 11e:	9f 4f       	sbci	r25, 0xFF	; 255
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 120:	9b bd       	out	0x2b, r25	; 43
 122:	8a bd       	out	0x2a, r24	; 42
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
	//_delay_ms(100);
	while((sensor_data() & (3<<5)) != (3<<5));
 124:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 128:	80 76       	andi	r24, 0x60	; 96
 12a:	80 36       	cpi	r24, 0x60	; 96
 12c:	d9 f7       	brne	.-10     	; 0x124 <turn_U+0x4c>
	while((sensor_data() & (3<<4)) != (3<<4));
 12e:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 132:	80 73       	andi	r24, 0x30	; 48
 134:	80 33       	cpi	r24, 0x30	; 48
 136:	d9 f7       	brne	.-10     	; 0x12e <turn_U+0x56>
	while((sensor_data() & (3<<3)) != (3<<3));
 138:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 13c:	88 71       	andi	r24, 0x18	; 24
 13e:	88 31       	cpi	r24, 0x18	; 24
 140:	d9 f7       	brne	.-10     	; 0x138 <turn_U+0x60>
	//while(sensor_data() != (3<<3));
	go_forward();
 142:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 146:	d9 bd       	out	0x29, r29	; 41
 148:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 14a:	1b bd       	out	0x2b, r17	; 43
 14c:	0a bd       	out	0x2a, r16	; 42
 14e:	2f e7       	ldi	r18, 0x7F	; 127
 150:	88 e3       	ldi	r24, 0x38	; 56
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <turn_U+0x7c>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <turn_U+0x86>
 15e:	00 00       	nop
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 160:	d9 bd       	out	0x29, r29	; 41
 162:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 164:	db bd       	out	0x2b, r29	; 43
 166:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_R(speed);
	set_speed_L(speed +300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <turn_U_destination>:

void turn_U_destination(uint16_t speed)
{
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
	uint16_t sensor_data_hold;
	stay_stop();
 17c:	0e 94 56 00 	call	0xac	; 0xac <stay_stop>
	process_array();
 180:	0e 94 61 00 	call	0xc2	; 0xc2 <process_array>
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	89 e6       	ldi	r24, 0x69	; 105
 188:	98 e1       	ldi	r25, 0x18	; 24
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <turn_U_destination+0x18>
 192:	00 c0       	rjmp	.+0      	; 0x194 <turn_U_destination+0x22>
 194:	00 00       	nop
	_delay_ms(1000);
	go_backward();
 196:	0e 94 44 00 	call	0x88	; 0x88 <go_backward>
	sensor_data_hold = sensor_data();
 19a:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 19e:	82 74       	andi	r24, 0x42	; 66
	while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 1a0:	21 f0       	breq	.+8      	; 0x1aa <turn_U_destination+0x38>
	{
		sensor_data_hold = sensor_data();
 1a2:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 1a6:	82 74       	andi	r24, 0x42	; 66
	stay_stop();
	process_array();
	_delay_ms(1000);
	go_backward();
	sensor_data_hold = sensor_data();
	while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <turn_U_destination+0x30>
	{
		sensor_data_hold = sensor_data();
	}
	stay_stop();
 1aa:	0e 94 56 00 	call	0xac	; 0xac <stay_stop>
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	80 e7       	ldi	r24, 0x70	; 112
 1b2:	92 e0       	ldi	r25, 0x02	; 2
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <turn_U_destination+0x42>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <turn_U_destination+0x4c>
 1be:	00 00       	nop
	_delay_ms(100);
	go_forward();
 1c0:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
	set_speed_RL(speed+20);
 1c4:	ce 01       	movw	r24, r28
 1c6:	44 96       	adiw	r24, 0x14	; 20
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 1c8:	99 bd       	out	0x29, r25	; 41
 1ca:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 1cc:	9b bd       	out	0x2b, r25	; 43
 1ce:	8a bd       	out	0x2a, r24	; 42
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	83 ec       	ldi	r24, 0xC3	; 195
 1d4:	99 e0       	ldi	r25, 0x09	; 9
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <turn_U_destination+0x64>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <turn_U_destination+0x6e>
 1e0:	00 00       	nop
	stay_stop();
	_delay_ms(100);
	go_forward();
	set_speed_RL(speed+20);
	_delay_ms(400);
	left_rotate();
 1e2:	0e 94 50 00 	call	0xa0	; 0xa0 <left_rotate>
	set_speed_L(speed + 300); //70
 1e6:	8e 01       	movw	r16, r28
 1e8:	04 5d       	subi	r16, 0xD4	; 212
 1ea:	1e 4f       	sbci	r17, 0xFE	; 254
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 1ec:	1b bd       	out	0x2b, r17	; 43
 1ee:	0a bd       	out	0x2a, r16	; 42
 1f0:	2f e7       	ldi	r18, 0x7F	; 127
 1f2:	88 e3       	ldi	r24, 0x38	; 56
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <turn_U_destination+0x84>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <turn_U_destination+0x8e>
 200:	00 00       	nop
	set_speed_RL(speed+20);
	_delay_ms(400);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
 202:	ce 01       	movw	r24, r28
 204:	c2 97       	sbiw	r24, 0x32	; 50
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 206:	99 bd       	out	0x29, r25	; 41
 208:	88 bd       	out	0x28, r24	; 40
	_delay_ms(400);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
 20a:	80 5b       	subi	r24, 0xB0	; 176
 20c:	9f 4f       	sbci	r25, 0xFF	; 255
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 20e:	9b bd       	out	0x2b, r25	; 43
 210:	8a bd       	out	0x2a, r24	; 42
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	80 e7       	ldi	r24, 0x70	; 112
 216:	92 e0       	ldi	r25, 0x02	; 2
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <turn_U_destination+0xa6>
 220:	00 c0       	rjmp	.+0      	; 0x222 <turn_U_destination+0xb0>
 222:	00 00       	nop
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
	_delay_ms(100);
	while((sensor_data() & (3<<5)) != 0x00);
 224:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 228:	80 76       	andi	r24, 0x60	; 96
 22a:	e1 f7       	brne	.-8      	; 0x224 <turn_U_destination+0xb2>
	while((sensor_data() & (3<<5)) != (3<<5));
 22c:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 230:	80 76       	andi	r24, 0x60	; 96
 232:	80 36       	cpi	r24, 0x60	; 96
 234:	d9 f7       	brne	.-10     	; 0x22c <turn_U_destination+0xba>
	while((sensor_data() & (3<<4)) != (3<<4));
 236:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 23a:	80 73       	andi	r24, 0x30	; 48
 23c:	80 33       	cpi	r24, 0x30	; 48
 23e:	d9 f7       	brne	.-10     	; 0x236 <turn_U_destination+0xc4>
	while((sensor_data() & (3<<3)) != (3<<3));
 240:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 244:	88 71       	andi	r24, 0x18	; 24
 246:	88 31       	cpi	r24, 0x18	; 24
 248:	d9 f7       	brne	.-10     	; 0x240 <turn_U_destination+0xce>
	//while(sensor_data() != (3<<3));
	go_forward();
 24a:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 24e:	d9 bd       	out	0x29, r29	; 41
 250:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 252:	1b bd       	out	0x2b, r17	; 43
 254:	0a bd       	out	0x2a, r16	; 42
 256:	2f e7       	ldi	r18, 0x7F	; 127
 258:	88 e3       	ldi	r24, 0x38	; 56
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <turn_U_destination+0xea>
 264:	00 c0       	rjmp	.+0      	; 0x266 <turn_U_destination+0xf4>
 266:	00 00       	nop
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 268:	d9 bd       	out	0x29, r29	; 41
 26a:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 26c:	db bd       	out	0x2b, r29	; 43
 26e:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_R(speed);
	set_speed_L(speed +300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	08 95       	ret

0000027a <turn_left>:

void turn_left(uint16_t speed)
{
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	ec 01       	movw	r28, r24
	left_rotate();
 284:	0e 94 50 00 	call	0xa0	; 0xa0 <left_rotate>
	set_speed_L(speed + 300); //70
 288:	8e 01       	movw	r16, r28
 28a:	04 5d       	subi	r16, 0xD4	; 212
 28c:	1e 4f       	sbci	r17, 0xFE	; 254
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 28e:	1b bd       	out	0x2b, r17	; 43
 290:	0a bd       	out	0x2a, r16	; 42
 292:	2f e7       	ldi	r18, 0x7F	; 127
 294:	88 e3       	ldi	r24, 0x38	; 56
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <turn_left+0x1e>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <turn_left+0x28>
 2a2:	00 00       	nop
void turn_left(uint16_t speed)
{
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
 2a4:	ce 01       	movw	r24, r28
 2a6:	c2 97       	sbiw	r24, 0x32	; 50
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 2a8:	99 bd       	out	0x29, r25	; 41
 2aa:	88 bd       	out	0x28, r24	; 40
{
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
 2ac:	80 5b       	subi	r24, 0xB0	; 176
 2ae:	9f 4f       	sbci	r25, 0xFF	; 255
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 2b0:	9b bd       	out	0x2b, r25	; 43
 2b2:	8a bd       	out	0x2a, r24	; 42
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
	//_delay_ms(100);
	while((sensor_data() & (3<<5)) != (3<<5));
 2b4:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 2b8:	80 76       	andi	r24, 0x60	; 96
 2ba:	80 36       	cpi	r24, 0x60	; 96
 2bc:	d9 f7       	brne	.-10     	; 0x2b4 <turn_left+0x3a>
	while((sensor_data() & (3<<4)) != (3<<4));
 2be:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 2c2:	80 73       	andi	r24, 0x30	; 48
 2c4:	80 33       	cpi	r24, 0x30	; 48
 2c6:	d9 f7       	brne	.-10     	; 0x2be <turn_left+0x44>
	//while((sensor_data() & (3<<3)) != (3<<3));
	//while(sensor_data() != (3<<3));
	go_forward();
 2c8:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 2cc:	d9 bd       	out	0x29, r29	; 41
 2ce:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 2d0:	1b bd       	out	0x2b, r17	; 43
 2d2:	0a bd       	out	0x2a, r16	; 42
 2d4:	2f e7       	ldi	r18, 0x7F	; 127
 2d6:	88 e3       	ldi	r24, 0x38	; 56
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <turn_left+0x60>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <turn_left+0x6a>
 2e4:	00 00       	nop
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 2e6:	d9 bd       	out	0x29, r29	; 41
 2e8:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 2ea:	db bd       	out	0x2b, r29	; 43
 2ec:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_R(speed);
	set_speed_L(speed +300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <turn_right>:

void turn_right(uint16_t speed)
{
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ec 01       	movw	r28, r24
	right_rotate();
 302:	0e 94 4a 00 	call	0x94	; 0x94 <right_rotate>
	set_speed_R(speed + 300); //40
 306:	8e 01       	movw	r16, r28
 308:	04 5d       	subi	r16, 0xD4	; 212
 30a:	1e 4f       	sbci	r17, 0xFE	; 254
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 30c:	19 bd       	out	0x29, r17	; 41
 30e:	08 bd       	out	0x28, r16	; 40
 310:	2f e7       	ldi	r18, 0x7F	; 127
 312:	88 e3       	ldi	r24, 0x38	; 56
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <turn_right+0x1e>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <turn_right+0x28>
 320:	00 00       	nop
void turn_right(uint16_t speed)
{
	right_rotate();
	set_speed_R(speed + 300); //40
	_delay_ms(50);
	set_speed_L(speed-50); //-50
 322:	ce 01       	movw	r24, r28
 324:	c2 97       	sbiw	r24, 0x32	; 50
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 326:	9b bd       	out	0x2b, r25	; 43
 328:	8a bd       	out	0x2a, r24	; 42
{
	right_rotate();
	set_speed_R(speed + 300); //40
	_delay_ms(50);
	set_speed_L(speed-50); //-50
	set_speed_R(speed+30);
 32a:	80 5b       	subi	r24, 0xB0	; 176
 32c:	9f 4f       	sbci	r25, 0xFF	; 255
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 32e:	99 bd       	out	0x29, r25	; 41
 330:	88 bd       	out	0x28, r24	; 40
	set_speed_R(speed + 300); //40
	_delay_ms(50);
	set_speed_L(speed-50); //-50
	set_speed_R(speed+30);
	//_delay_ms(100);
	while((sensor_data() & (3<<1)) != (3<<1));
 332:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 336:	86 70       	andi	r24, 0x06	; 6
 338:	86 30       	cpi	r24, 0x06	; 6
 33a:	d9 f7       	brne	.-10     	; 0x332 <turn_right+0x3a>
	while((sensor_data() & (3<<2)) != (3<<2));
 33c:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 340:	8c 70       	andi	r24, 0x0C	; 12
 342:	8c 30       	cpi	r24, 0x0C	; 12
 344:	d9 f7       	brne	.-10     	; 0x33c <turn_right+0x44>
	//while((sensor_data() & (3<<3)) != (3<<3));
	//while(sensor_data() != (3<<3));
	go_forward();
 346:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 34a:	db bd       	out	0x2b, r29	; 43
 34c:	ca bd       	out	0x2a, r28	; 42
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 34e:	19 bd       	out	0x29, r17	; 41
 350:	08 bd       	out	0x28, r16	; 40
 352:	2f e7       	ldi	r18, 0x7F	; 127
 354:	88 e3       	ldi	r24, 0x38	; 56
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	21 50       	subi	r18, 0x01	; 1
 35a:	80 40       	sbci	r24, 0x00	; 0
 35c:	90 40       	sbci	r25, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <turn_right+0x60>
 360:	00 c0       	rjmp	.+0      	; 0x362 <turn_right+0x6a>
 362:	00 00       	nop
 364:	d9 bd       	out	0x29, r29	; 41
 366:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 368:	db bd       	out	0x2b, r29	; 43
 36a:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_L(speed);
	set_speed_R(speed + 300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	08 95       	ret

00000376 <left_operation>:

void left_operation(uint16_t speed)
{
	turn_left(speed);
 376:	0e 94 3d 01 	call	0x27a	; 0x27a <turn_left>
	directions_entry[node_number] = 'l';
 37a:	80 91 62 00 	lds	r24, 0x0062
 37e:	90 91 63 00 	lds	r25, 0x0063
 382:	fc 01       	movw	r30, r24
 384:	e8 59       	subi	r30, 0x98	; 152
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	2c e6       	ldi	r18, 0x6C	; 108
 38a:	20 83       	st	Z, r18
	node_number = node_number + 1;
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	90 93 63 00 	sts	0x0063, r25
 392:	80 93 62 00 	sts	0x0062, r24
 396:	08 95       	ret

00000398 <right_operation>:
}

void right_operation(uint16_t speed)
{
	turn_right(speed);
 398:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <turn_right>
	directions_entry[node_number] = 'r';
 39c:	80 91 62 00 	lds	r24, 0x0062
 3a0:	90 91 63 00 	lds	r25, 0x0063
 3a4:	fc 01       	movw	r30, r24
 3a6:	e8 59       	subi	r30, 0x98	; 152
 3a8:	ff 4f       	sbci	r31, 0xFF	; 255
 3aa:	22 e7       	ldi	r18, 0x72	; 114
 3ac:	20 83       	st	Z, r18
	node_number = node_number + 1;
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	90 93 63 00 	sts	0x0063, r25
 3b4:	80 93 62 00 	sts	0x0062, r24
 3b8:	08 95       	ret

000003ba <left_forward_operation>:
}

void left_forward_operation(uint16_t speed)
{
	turn_left(speed);
 3ba:	0e 94 3d 01 	call	0x27a	; 0x27a <turn_left>
	directions_entry[node_number] = 'l';
 3be:	80 91 62 00 	lds	r24, 0x0062
 3c2:	90 91 63 00 	lds	r25, 0x0063
 3c6:	fc 01       	movw	r30, r24
 3c8:	e8 59       	subi	r30, 0x98	; 152
 3ca:	ff 4f       	sbci	r31, 0xFF	; 255
 3cc:	2c e6       	ldi	r18, 0x6C	; 108
 3ce:	20 83       	st	Z, r18
	node_number = node_number + 1;
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	90 93 63 00 	sts	0x0063, r25
 3d6:	80 93 62 00 	sts	0x0062, r24
 3da:	08 95       	ret

000003dc <right_forward_operation>:
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 3dc:	99 bd       	out	0x29, r25	; 41
 3de:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 3e0:	9b bd       	out	0x2b, r25	; 43
 3e2:	8a bd       	out	0x2a, r24	; 42
}

void right_forward_operation(uint16_t speed)
{
	set_speed_RL(speed);
	go_forward();
 3e4:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
	directions_entry[node_number] = 's';
 3e8:	80 91 62 00 	lds	r24, 0x0062
 3ec:	90 91 63 00 	lds	r25, 0x0063
 3f0:	fc 01       	movw	r30, r24
 3f2:	e8 59       	subi	r30, 0x98	; 152
 3f4:	ff 4f       	sbci	r31, 0xFF	; 255
 3f6:	23 e7       	ldi	r18, 0x73	; 115
 3f8:	20 83       	st	Z, r18
	node_number = node_number + 1;
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	90 93 63 00 	sts	0x0063, r25
 400:	80 93 62 00 	sts	0x0062, r24
	loop_count = 0x0000;
 404:	10 92 64 00 	sts	0x0064, r1
 408:	10 92 65 00 	sts	0x0065, r1
 40c:	10 92 66 00 	sts	0x0066, r1
 410:	10 92 67 00 	sts	0x0067, r1
 414:	08 95       	ret

00000416 <left_right_operation>:
}

void left_right_operation(uint16_t speed)
{
	turn_left(speed);
 416:	0e 94 3d 01 	call	0x27a	; 0x27a <turn_left>
	directions_entry[node_number] = 'l';
 41a:	80 91 62 00 	lds	r24, 0x0062
 41e:	90 91 63 00 	lds	r25, 0x0063
 422:	fc 01       	movw	r30, r24
 424:	e8 59       	subi	r30, 0x98	; 152
 426:	ff 4f       	sbci	r31, 0xFF	; 255
 428:	2c e6       	ldi	r18, 0x6C	; 108
 42a:	20 83       	st	Z, r18
	node_number = node_number + 1;
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	90 93 63 00 	sts	0x0063, r25
 432:	80 93 62 00 	sts	0x0062, r24
 436:	08 95       	ret

00000438 <left_right_forward_operation>:
}

void left_right_forward_operation(uint16_t speed)
{
	turn_left(speed);
 438:	0e 94 3d 01 	call	0x27a	; 0x27a <turn_left>
	directions_entry[node_number] = 'l';
 43c:	80 91 62 00 	lds	r24, 0x0062
 440:	90 91 63 00 	lds	r25, 0x0063
 444:	fc 01       	movw	r30, r24
 446:	e8 59       	subi	r30, 0x98	; 152
 448:	ff 4f       	sbci	r31, 0xFF	; 255
 44a:	2c e6       	ldi	r18, 0x6C	; 108
 44c:	20 83       	st	Z, r18
	node_number = node_number + 1;
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	90 93 63 00 	sts	0x0063, r25
 454:	80 93 62 00 	sts	0x0062, r24
 458:	08 95       	ret

0000045a <reverse_operation>:
}

void reverse_operation(uint16_t speed)
{
	turn_U(speed);
 45a:	0e 94 6c 00 	call	0xd8	; 0xd8 <turn_U>
	if (loop_count >= 2000)
 45e:	80 91 64 00 	lds	r24, 0x0064
 462:	90 91 65 00 	lds	r25, 0x0065
 466:	a0 91 66 00 	lds	r26, 0x0066
 46a:	b0 91 67 00 	lds	r27, 0x0067
 46e:	80 3d       	cpi	r24, 0xD0	; 208
 470:	97 40       	sbci	r25, 0x07	; 7
 472:	a1 05       	cpc	r26, r1
 474:	b1 05       	cpc	r27, r1
 476:	78 f0       	brcs	.+30     	; 0x496 <reverse_operation+0x3c>
	{
		directions_entry[node_number] = 'u';
 478:	80 91 62 00 	lds	r24, 0x0062
 47c:	90 91 63 00 	lds	r25, 0x0063
 480:	fc 01       	movw	r30, r24
 482:	e8 59       	subi	r30, 0x98	; 152
 484:	ff 4f       	sbci	r31, 0xFF	; 255
 486:	25 e7       	ldi	r18, 0x75	; 117
 488:	20 83       	st	Z, r18
		node_number = node_number + 1;
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	90 93 63 00 	sts	0x0063, r25
 490:	80 93 62 00 	sts	0x0062, r24
 494:	08 95       	ret
	}
	else
	{
		node_number = node_number - 1;
 496:	80 91 62 00 	lds	r24, 0x0062
 49a:	90 91 63 00 	lds	r25, 0x0063
		directions_entry[node_number] = 'l';
 49e:	fc 01       	movw	r30, r24
 4a0:	e9 59       	subi	r30, 0x99	; 153
 4a2:	ff 4f       	sbci	r31, 0xFF	; 255
 4a4:	2c e6       	ldi	r18, 0x6C	; 108
 4a6:	20 83       	st	Z, r18
 4a8:	08 95       	ret

000004aa <destination_operation>:
	}
}

void destination_operation(uint16_t speed)
{
	directions_entry[node_number] = '\0';
 4aa:	e0 91 62 00 	lds	r30, 0x0062
 4ae:	f0 91 63 00 	lds	r31, 0x0063
 4b2:	e8 59       	subi	r30, 0x98	; 152
 4b4:	ff 4f       	sbci	r31, 0xFF	; 255
 4b6:	10 82       	st	Z, r1
	turn_U_destination(speed);
 4b8:	0e 94 b9 00 	call	0x172	; 0x172 <turn_U_destination>
 4bc:	08 95       	ret

000004be <evaluate_direction>:


void evaluate_direction(char dir,uint16_t speed)
{
	char evaluation = 0;
	evaluation = directions_solved[node_number_solved];
 4be:	20 91 60 00 	lds	r18, 0x0060
 4c2:	30 91 61 00 	lds	r19, 0x0061
 4c6:	f9 01       	movw	r30, r18
 4c8:	e0 5d       	subi	r30, 0xD0	; 208
 4ca:	fe 4f       	sbci	r31, 0xFE	; 254
 4cc:	80 81       	ld	r24, Z
	node_number_solved = node_number_solved + 1;
 4ce:	2f 5f       	subi	r18, 0xFF	; 255
 4d0:	3f 4f       	sbci	r19, 0xFF	; 255
 4d2:	30 93 61 00 	sts	0x0061, r19
 4d6:	20 93 60 00 	sts	0x0060, r18
	
	if (evaluation == 's')
 4da:	83 37       	cpi	r24, 0x73	; 115
 4dc:	39 f4       	brne	.+14     	; 0x4ec <evaluate_direction+0x2e>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 4de:	79 bd       	out	0x29, r23	; 41
 4e0:	68 bd       	out	0x28, r22	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 4e2:	7b bd       	out	0x2b, r23	; 43
 4e4:	6a bd       	out	0x2a, r22	; 42
	node_number_solved = node_number_solved + 1;
	
	if (evaluation == 's')
	{
		set_speed_RL(speed);
		go_forward();
 4e6:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
 4ea:	08 95       	ret
	}
	else if (evaluation == 'u')
 4ec:	85 37       	cpi	r24, 0x75	; 117
 4ee:	21 f4       	brne	.+8      	; 0x4f8 <evaluate_direction+0x3a>
	{
		turn_U(speed);
 4f0:	cb 01       	movw	r24, r22
 4f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <turn_U>
 4f6:	08 95       	ret
	}
	else if (evaluation == 'r')
 4f8:	82 37       	cpi	r24, 0x72	; 114
 4fa:	21 f4       	brne	.+8      	; 0x504 <evaluate_direction+0x46>
	{
		turn_left(speed);
 4fc:	cb 01       	movw	r24, r22
 4fe:	0e 94 3d 01 	call	0x27a	; 0x27a <turn_left>
 502:	08 95       	ret
	}
	else if (evaluation == 'l')
 504:	8c 36       	cpi	r24, 0x6C	; 108
 506:	21 f4       	brne	.+8      	; 0x510 <evaluate_direction+0x52>
	{
		turn_right(speed);
 508:	cb 01       	movw	r24, r22
 50a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <turn_right>
 50e:	08 95       	ret
	}
	else stay_stop();
 510:	0e 94 56 00 	call	0xac	; 0xac <stay_stop>
 514:	08 95       	ret

00000516 <main>:
{
	uint16_t speed=300, destination=0;
	uint8_t sensor_data_hold=0, Right_trigged=0, Left_trigged=0, Forward_trigged=0;//, speed_grad_count=0;
	
	//port pin initialization
	PORTA = 03;
 516:	83 e0       	ldi	r24, 0x03	; 3
 518:	8b bb       	out	0x1b, r24	; 27
	DDRA = 00;
 51a:	1a ba       	out	0x1a, r1	; 26
	PORTB=0x00;
 51c:	18 ba       	out	0x18, r1	; 24
	DDRB=0x0F;
 51e:	9f e0       	ldi	r25, 0x0F	; 15
 520:	97 bb       	out	0x17, r25	; 23
	PORTC=0xFF;
 522:	9f ef       	ldi	r25, 0xFF	; 255
 524:	95 bb       	out	0x15, r25	; 21
	DDRC=0x00;
 526:	14 ba       	out	0x14, r1	; 20
	PORTD=0x00;
 528:	12 ba       	out	0x12, r1	; 18
	DDRD=0x30;
 52a:	90 e3       	ldi	r25, 0x30	; 48
 52c:	91 bb       	out	0x11, r25	; 17
	
	//Timer Counter1 Initialization
	TCCR1A=0xA2;
 52e:	92 ea       	ldi	r25, 0xA2	; 162
 530:	9f bd       	out	0x2f, r25	; 47
	TCCR1B=0x18;
 532:	98 e1       	ldi	r25, 0x18	; 24
 534:	9e bd       	out	0x2e, r25	; 46
	TCNT1=0x0000;
 536:	1d bc       	out	0x2d, r1	; 45
 538:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x03;
 53a:	87 bd       	out	0x27, r24	; 39
	ICR1L=0xE8; //03E8=1000 in decimal
 53c:	88 ee       	ldi	r24, 0xE8	; 232
 53e:	86 bd       	out	0x26, r24	; 38
	OCR1A=speed;
 540:	8c e2       	ldi	r24, 0x2C	; 44
 542:	91 e0       	ldi	r25, 0x01	; 1
 544:	9b bd       	out	0x2b, r25	; 43
 546:	8a bd       	out	0x2a, r24	; 42
	OCR1B=speed;
 548:	99 bd       	out	0x29, r25	; 41
 54a:	88 bd       	out	0x28, r24	; 40
	
	//usart_init(9600); //USART Initialization
	
	//start_tour:
	while (PINA & (1<<PA0));
 54c:	c8 99       	sbic	0x19, 0	; 25
 54e:	fe cf       	rjmp	.-4      	; 0x54c <main+0x36>
 550:	2f ef       	ldi	r18, 0xFF	; 255
 552:	89 e6       	ldi	r24, 0x69	; 105
 554:	98 e1       	ldi	r25, 0x18	; 24
 556:	21 50       	subi	r18, 0x01	; 1
 558:	80 40       	sbci	r24, 0x00	; 0
 55a:	90 40       	sbci	r25, 0x00	; 0
 55c:	e1 f7       	brne	.-8      	; 0x556 <main+0x40>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <main+0x4a>
 560:	00 00       	nop
	_delay_ms(1000);
	go_forward();
 562:	0e 94 3e 00 	call	0x7c	; 0x7c <go_forward>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 566:	84 ef       	ldi	r24, 0xF4	; 244
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	99 bd       	out	0x29, r25	; 41
 56c:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 56e:	9b bd       	out	0x2b, r25	; 43
 570:	8a bd       	out	0x2a, r24	; 42
 572:	2f ef       	ldi	r18, 0xFF	; 255
 574:	86 e7       	ldi	r24, 0x76	; 118
 576:	91 e0       	ldi	r25, 0x01	; 1
 578:	21 50       	subi	r18, 0x01	; 1
 57a:	80 40       	sbci	r24, 0x00	; 0
 57c:	90 40       	sbci	r25, 0x00	; 0
 57e:	e1 f7       	brne	.-8      	; 0x578 <main+0x62>
 580:	00 c0       	rjmp	.+0      	; 0x582 <main+0x6c>
 582:	00 00       	nop
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 584:	8c e2       	ldi	r24, 0x2C	; 44
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	99 bd       	out	0x29, r25	; 41
 58a:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 58c:	9b bd       	out	0x2b, r25	; 43
 58e:	8a bd       	out	0x2a, r24	; 42
	_delay_ms(1000);
	go_forward();
	set_speed_RL(speed+200);
	_delay_ms(60);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
 590:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 594:	82 74       	andi	r24, 0x42	; 66
	while ((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 596:	21 f0       	breq	.+8      	; 0x5a0 <main+0x8a>
	{
		sensor_data_hold = sensor_data();
 598:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 59c:	82 74       	andi	r24, 0x42	; 66
	go_forward();
	set_speed_RL(speed+200);
	_delay_ms(60);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
	while ((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 59e:	e1 f7       	brne	.-8      	; 0x598 <main+0x82>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 5a0:	81 2c       	mov	r8, r1
 5a2:	71 2c       	mov	r7, r1
 5a4:	c1 2c       	mov	r12, r1
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 5a6:	0f 2e       	mov	r0, r31
 5a8:	f6 e9       	ldi	r31, 0x96	; 150
 5aa:	ef 2e       	mov	r14, r31
 5ac:	f1 2c       	mov	r15, r1
 5ae:	f0 2d       	mov	r31, r0
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 5b0:	cc e2       	ldi	r28, 0x2C	; 44
 5b2:	d1 e0       	ldi	r29, 0x01	; 1
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 5b4:	61 2c       	mov	r6, r1
 5b6:	91 2c       	mov	r9, r1
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 5b8:	bb 24       	eor	r11, r11
 5ba:	b3 94       	inc	r11
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 5bc:	d1 2c       	mov	r13, r1
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 5be:	ab 2c       	mov	r10, r11
 5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <main+0xb2>
 5c2:	c1 2e       	mov	r12, r17
 5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <main+0xb2>
 5c6:	71 2e       	mov	r7, r17
	//************************************************************************************************************************
	// main while loop is started from here **********************************************************************************
	//************************************************************************************************************************	
    while(1)  //while loop 1
    {
		if (loop_count < 2000)
 5c8:	80 91 64 00 	lds	r24, 0x0064
 5cc:	90 91 65 00 	lds	r25, 0x0065
 5d0:	a0 91 66 00 	lds	r26, 0x0066
 5d4:	b0 91 67 00 	lds	r27, 0x0067
 5d8:	80 3d       	cpi	r24, 0xD0	; 208
 5da:	27 e0       	ldi	r18, 0x07	; 7
 5dc:	92 07       	cpc	r25, r18
 5de:	a1 05       	cpc	r26, r1
 5e0:	b1 05       	cpc	r27, r1
 5e2:	58 f4       	brcc	.+22     	; 0x5fa <main+0xe4>
		{
			loop_count = loop_count + 1;
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	a1 1d       	adc	r26, r1
 5e8:	b1 1d       	adc	r27, r1
 5ea:	80 93 64 00 	sts	0x0064, r24
 5ee:	90 93 65 00 	sts	0x0065, r25
 5f2:	a0 93 66 00 	sts	0x0066, r26
 5f6:	b0 93 67 00 	sts	0x0067, r27
		}
//start_over_while_1:

		sensor_data_hold = sensor_data();  //normally read
 5fa:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
		
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
 5fe:	98 2f       	mov	r25, r24
 600:	98 71       	andi	r25, 0x18	; 24
 602:	98 31       	cpi	r25, 0x18	; 24
 604:	29 f4       	brne	.+10     	; 0x610 <main+0xfa>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 606:	d9 bd       	out	0x29, r29	; 41
 608:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 60a:	db bd       	out	0x2b, r29	; 43
 60c:	ca bd       	out	0x2a, r28	; 42
 60e:	09 c0       	rjmp	.+18     	; 0x622 <main+0x10c>
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
		{
			set_speed_RL(speed);
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
 610:	83 ff       	sbrs	r24, 3
 612:	03 c0       	rjmp	.+6      	; 0x61a <main+0x104>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 614:	f9 bc       	out	0x29, r15	; 41
 616:	e8 bc       	out	0x28, r14	; 40
 618:	04 c0       	rjmp	.+8      	; 0x622 <main+0x10c>
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
		{
			set_speed_R(speed - 150);  //previously 150
		}
		else if ((sensor_data_hold & (1<<4)) == (1<<4))
 61a:	84 ff       	sbrs	r24, 4
 61c:	02 c0       	rjmp	.+4      	; 0x622 <main+0x10c>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 61e:	fb bc       	out	0x2b, r15	; 43
 620:	ea bc       	out	0x2a, r14	; 42
			set_speed_L(speed - 150);  //previously 150
		}
		// end line follow
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
 622:	98 2f       	mov	r25, r24
 624:	90 7f       	andi	r25, 0xF0	; 240
 626:	90 3f       	cpi	r25, 0xF0	; 240
 628:	09 f0       	breq	.+2      	; 0x62c <main+0x116>
 62a:	53 c0       	rjmp	.+166    	; 0x6d2 <main+0x1bc>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 62c:	d9 bd       	out	0x29, r29	; 41
 62e:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 630:	db bd       	out	0x2b, r29	; 43
 632:	ca bd       	out	0x2a, r28	; 42
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
 634:	06 2d       	mov	r16, r6
 636:	19 2d       	mov	r17, r9
 638:	17 c0       	rjmp	.+46     	; 0x668 <main+0x152>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 63a:	85 e8       	ldi	r24, 0x85	; 133
 63c:	8a 95       	dec	r24
 63e:	f1 f7       	brne	.-4      	; 0x63c <main+0x126>
 640:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 642:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
				if (sensor_data_hold & (1<<1))
 646:	81 fd       	sbrc	r24, 1
				{
					Right_trigged=1;
 648:	ca 2c       	mov	r12, r10
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 64a:	98 2f       	mov	r25, r24
 64c:	9e 77       	andi	r25, 0x7E	; 126
 64e:	9e 37       	cpi	r25, 0x7E	; 126
 650:	59 f4       	brne	.+22     	; 0x668 <main+0x152>
				{
					destination = destination + 1;
 652:	0f 5f       	subi	r16, 0xFF	; 255
 654:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 7000)   // destination triggering
 656:	09 35       	cpi	r16, 0x59	; 89
 658:	9b e1       	ldi	r25, 0x1B	; 27
 65a:	19 07       	cpc	r17, r25
 65c:	28 f0       	brcs	.+10     	; 0x668 <main+0x152>
					{
						destination = 0x00;
						destination_operation(speed);
 65e:	8c e2       	ldi	r24, 0x2C	; 44
 660:	91 e0       	ldi	r25, 0x01	; 1
 662:	0e 94 55 02 	call	0x4aa	; 0x4aa <destination_operation>
						//while (PINA & (1<<PA0));
						goto solv_maze;
 666:	94 c0       	rjmp	.+296    	; 0x790 <main+0x27a>
 668:	82 74       	andi	r24, 0x42	; 66
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 66a:	39 f7       	brne	.-50     	; 0x63a <main+0x124>
 66c:	1c 2d       	mov	r17, r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 66e:	2f ef       	ldi	r18, 0xFF	; 255
 670:	80 e7       	ldi	r24, 0x70	; 112
 672:	92 e0       	ldi	r25, 0x02	; 2
 674:	21 50       	subi	r18, 0x01	; 1
 676:	80 40       	sbci	r24, 0x00	; 0
 678:	90 40       	sbci	r25, 0x00	; 0
 67a:	e1 f7       	brne	.-8      	; 0x674 <main+0x15e>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <main+0x168>
 67e:	00 00       	nop
					}
				}
				
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 680:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 684:	8e 77       	andi	r24, 0x7E	; 126
 686:	09 f0       	breq	.+2      	; 0x68a <main+0x174>
 688:	93 c1       	rjmp	.+806    	; 0x9b0 <__stack+0x151>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
 68a:	c1 10       	cpse	r12, r1
 68c:	0f c0       	rjmp	.+30     	; 0x6ac <main+0x196>
 68e:	81 10       	cpse	r8, r1
 690:	04 c0       	rjmp	.+8      	; 0x69a <main+0x184>
			{
				left_operation(speed);
 692:	ce 01       	movw	r24, r28
 694:	0e 94 bb 01 	call	0x376	; 0x376 <left_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
 698:	97 cf       	rjmp	.-210    	; 0x5c8 <main+0xb2>
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 69a:	21 e0       	ldi	r18, 0x01	; 1
 69c:	82 12       	cpse	r8, r18
 69e:	94 cf       	rjmp	.-216    	; 0x5c8 <main+0xb2>
			{
				left_forward_operation(speed);
 6a0:	ce 01       	movw	r24, r28
 6a2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <left_forward_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
 6a6:	8d 2c       	mov	r8, r13
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
			{
				left_forward_operation(speed);
				Right_trigged = 0;
 6a8:	cd 2c       	mov	r12, r13
				Forward_trigged = 0;
 6aa:	8e cf       	rjmp	.-228    	; 0x5c8 <main+0xb2>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 6ac:	11 30       	cpi	r17, 0x01	; 1
 6ae:	09 f0       	breq	.+2      	; 0x6b2 <main+0x19c>
 6b0:	8b cf       	rjmp	.-234    	; 0x5c8 <main+0xb2>
 6b2:	81 10       	cpse	r8, r1
 6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <main+0x1aa>
			{
				left_right_operation(speed);
 6b6:	ce 01       	movw	r24, r28
 6b8:	0e 94 0b 02 	call	0x416	; 0x416 <left_right_operation>
				Right_trigged = 0;
 6bc:	cd 2c       	mov	r12, r13
				Forward_trigged = 0;
 6be:	84 cf       	rjmp	.-248    	; 0x5c8 <main+0xb2>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	88 12       	cpse	r8, r24
 6c4:	7e cf       	rjmp	.-260    	; 0x5c2 <main+0xac>
			{
				left_right_forward_operation(speed);
 6c6:	ce 01       	movw	r24, r28
 6c8:	0e 94 1c 02 	call	0x438	; 0x438 <left_right_forward_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
 6cc:	8d 2c       	mov	r8, r13
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Right_trigged = 0;
 6ce:	cd 2c       	mov	r12, r13
 6d0:	7b cf       	rjmp	.-266    	; 0x5c8 <main+0xb2>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
 6d2:	98 2f       	mov	r25, r24
 6d4:	9f 70       	andi	r25, 0x0F	; 15
 6d6:	9f 30       	cpi	r25, 0x0F	; 15
 6d8:	09 f0       	breq	.+2      	; 0x6dc <main+0x1c6>
 6da:	53 c0       	rjmp	.+166    	; 0x782 <main+0x26c>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 6dc:	d9 bd       	out	0x29, r29	; 41
 6de:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 6e0:	db bd       	out	0x2b, r29	; 43
 6e2:	ca bd       	out	0x2a, r28	; 42
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 6e4:	06 2d       	mov	r16, r6
 6e6:	19 2d       	mov	r17, r9
 6e8:	17 c0       	rjmp	.+46     	; 0x718 <main+0x202>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ea:	95 e8       	ldi	r25, 0x85	; 133
 6ec:	9a 95       	dec	r25
 6ee:	f1 f7       	brne	.-4      	; 0x6ec <main+0x1d6>
 6f0:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 6f2:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
				if (sensor_data_hold & (1<<6))  // must change for 8 system
 6f6:	86 fd       	sbrc	r24, 6
				{
					Left_trigged=1;
 6f8:	7a 2c       	mov	r7, r10
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 6fa:	98 2f       	mov	r25, r24
 6fc:	9e 77       	andi	r25, 0x7E	; 126
 6fe:	9e 37       	cpi	r25, 0x7E	; 126
 700:	59 f4       	brne	.+22     	; 0x718 <main+0x202>
				{
					destination = destination + 1;
 702:	0f 5f       	subi	r16, 0xFF	; 255
 704:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 7000)   // destination triggering
 706:	09 35       	cpi	r16, 0x59	; 89
 708:	2b e1       	ldi	r18, 0x1B	; 27
 70a:	12 07       	cpc	r17, r18
 70c:	28 f0       	brcs	.+10     	; 0x718 <main+0x202>
					{
						destination = 0x00;
						destination_operation(speed);
 70e:	8c e2       	ldi	r24, 0x2C	; 44
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	0e 94 55 02 	call	0x4aa	; 0x4aa <destination_operation>
						//while (PINA & (1<<PA0));
						goto solv_maze;
 716:	3c c0       	rjmp	.+120    	; 0x790 <main+0x27a>
 718:	82 74       	andi	r24, 0x42	; 66
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 71a:	39 f7       	brne	.-50     	; 0x6ea <main+0x1d4>
 71c:	17 2d       	mov	r17, r7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 71e:	8f ef       	ldi	r24, 0xFF	; 255
 720:	90 e7       	ldi	r25, 0x70	; 112
 722:	22 e0       	ldi	r18, 0x02	; 2
 724:	81 50       	subi	r24, 0x01	; 1
 726:	90 40       	sbci	r25, 0x00	; 0
 728:	20 40       	sbci	r18, 0x00	; 0
 72a:	e1 f7       	brne	.-8      	; 0x724 <main+0x20e>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <main+0x218>
 72e:	00 00       	nop
						//goto start_test_operation;
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 730:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 734:	8e 77       	andi	r24, 0x7E	; 126
 736:	09 f0       	breq	.+2      	; 0x73a <main+0x224>
 738:	3f c1       	rjmp	.+638    	; 0x9b8 <__stack+0x159>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
 73a:	71 10       	cpse	r7, r1
 73c:	0f c0       	rjmp	.+30     	; 0x75c <main+0x246>
 73e:	81 10       	cpse	r8, r1
 740:	04 c0       	rjmp	.+8      	; 0x74a <main+0x234>
			{
				right_operation(speed);
 742:	ce 01       	movw	r24, r28
 744:	0e 94 cc 01 	call	0x398	; 0x398 <right_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
 748:	3f cf       	rjmp	.-386    	; 0x5c8 <main+0xb2>
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	88 12       	cpse	r8, r24
 74e:	3c cf       	rjmp	.-392    	; 0x5c8 <main+0xb2>
			{
				right_forward_operation(speed);
 750:	ce 01       	movw	r24, r28
 752:	0e 94 ee 01 	call	0x3dc	; 0x3dc <right_forward_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
 756:	8d 2c       	mov	r8, r13
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
			{
				right_forward_operation(speed);
				Left_trigged = 0;
 758:	7d 2c       	mov	r7, r13
				Forward_trigged = 0;
 75a:	36 cf       	rjmp	.-404    	; 0x5c8 <main+0xb2>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 75c:	11 30       	cpi	r17, 0x01	; 1
 75e:	09 f0       	breq	.+2      	; 0x762 <main+0x24c>
 760:	33 cf       	rjmp	.-410    	; 0x5c8 <main+0xb2>
 762:	81 10       	cpse	r8, r1
 764:	05 c0       	rjmp	.+10     	; 0x770 <main+0x25a>
			{
				left_right_operation(speed);
 766:	ce 01       	movw	r24, r28
 768:	0e 94 0b 02 	call	0x416	; 0x416 <left_right_operation>
				Left_trigged = 0;
 76c:	7d 2c       	mov	r7, r13
				Forward_trigged = 0;
 76e:	2c cf       	rjmp	.-424    	; 0x5c8 <main+0xb2>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
 770:	91 e0       	ldi	r25, 0x01	; 1
 772:	89 12       	cpse	r8, r25
 774:	28 cf       	rjmp	.-432    	; 0x5c6 <main+0xb0>
			{
				left_right_forward_operation(speed);
 776:	ce 01       	movw	r24, r28
 778:	0e 94 1c 02 	call	0x438	; 0x438 <left_right_forward_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
 77c:	8d 2c       	mov	r8, r13
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Left_trigged = 0;
 77e:	7d 2c       	mov	r7, r13
 780:	23 cf       	rjmp	.-442    	; 0x5c8 <main+0xb2>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
 782:	8e 77       	andi	r24, 0x7E	; 126
 784:	09 f0       	breq	.+2      	; 0x788 <main+0x272>
 786:	20 cf       	rjmp	.-448    	; 0x5c8 <main+0xb2>
		{
			reverse_operation(speed);
 788:	ce 01       	movw	r24, r28
 78a:	0e 94 2d 02 	call	0x45a	; 0x45a <reverse_operation>
 78e:	1c cf       	rjmp	.-456    	; 0x5c8 <main+0xb2>
//********* Solving the maze from here *********************************************************************
//**********************************************************************************************************

solv_maze:

	sensor_data_hold = sensor_data();  //normally read
 790:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>

	// start line follow
	if ((sensor_data_hold & (3<<3)) == (3<<3))
 794:	98 2f       	mov	r25, r24
 796:	98 71       	andi	r25, 0x18	; 24
 798:	98 31       	cpi	r25, 0x18	; 24
 79a:	39 f4       	brne	.+14     	; 0x7aa <main+0x294>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 79c:	8c e2       	ldi	r24, 0x2C	; 44
 79e:	91 e0       	ldi	r25, 0x01	; 1
 7a0:	99 bd       	out	0x29, r25	; 41
 7a2:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 7a4:	9b bd       	out	0x2b, r25	; 43
 7a6:	8a bd       	out	0x2a, r24	; 42
 7a8:	0e c0       	rjmp	.+28     	; 0x7c6 <main+0x2b0>
	// start line follow
	if ((sensor_data_hold & (3<<3)) == (3<<3))
	{
		set_speed_RL(speed);
	}
	else if (sensor_data_hold & 0b00001111)
 7aa:	98 2f       	mov	r25, r24
 7ac:	9f 70       	andi	r25, 0x0F	; 15
 7ae:	29 f0       	breq	.+10     	; 0x7ba <main+0x2a4>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 7b0:	84 e6       	ldi	r24, 0x64	; 100
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	99 bd       	out	0x29, r25	; 41
 7b6:	88 bd       	out	0x28, r24	; 40
 7b8:	06 c0       	rjmp	.+12     	; 0x7c6 <main+0x2b0>
	}
	else if (sensor_data_hold & 0b00001111)
	{
		set_speed_R(speed - 200);  //previously 150
	}
	else if (sensor_data_hold & 0b11110000)
 7ba:	80 7f       	andi	r24, 0xF0	; 240
 7bc:	21 f0       	breq	.+8      	; 0x7c6 <main+0x2b0>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 7be:	84 e6       	ldi	r24, 0x64	; 100
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	9b bd       	out	0x2b, r25	; 43
 7c4:	8a bd       	out	0x2a, r24	; 42
 7c6:	0f 2e       	mov	r0, r31
 7c8:	f6 e9       	ldi	r31, 0x96	; 150
 7ca:	ef 2e       	mov	r14, r31
 7cc:	f1 2c       	mov	r15, r1
 7ce:	f0 2d       	mov	r31, r0
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 7d0:	41 2c       	mov	r4, r1
 7d2:	51 2c       	mov	r5, r1
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 7d4:	33 24       	eor	r3, r3
 7d6:	33 94       	inc	r3
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				evaluate_direction(6,speed);
				//left_right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 7d8:	61 2c       	mov	r6, r1
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
				{
					destination = destination + 1;
					if (destination > 7000)   // destination triggering
					{
						destination = 0x00;
 7da:	94 2c       	mov	r9, r4
 7dc:	a5 2c       	mov	r10, r5
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 7de:	b3 2c       	mov	r11, r3
 7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <main+0x2d2>
 7e2:	cc 2e       	mov	r12, r28
 7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <main+0x2d2>
 7e6:	7c 2e       	mov	r7, r28
	}
	// end line follow
	
	while(1)
	{
		sensor_data_hold = sensor_data();  //normally read
 7e8:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 7ec:	18 2f       	mov	r17, r24
		
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
 7ee:	88 71       	andi	r24, 0x18	; 24
 7f0:	88 31       	cpi	r24, 0x18	; 24
 7f2:	39 f4       	brne	.+14     	; 0x802 <main+0x2ec>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 7f4:	8c e2       	ldi	r24, 0x2C	; 44
 7f6:	91 e0       	ldi	r25, 0x01	; 1
 7f8:	99 bd       	out	0x29, r25	; 41
 7fa:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 7fc:	9b bd       	out	0x2b, r25	; 43
 7fe:	8a bd       	out	0x2a, r24	; 42
 800:	09 c0       	rjmp	.+18     	; 0x814 <main+0x2fe>
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
		{
			set_speed_RL(speed);
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
 802:	13 ff       	sbrs	r17, 3
 804:	03 c0       	rjmp	.+6      	; 0x80c <main+0x2f6>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 806:	f9 bc       	out	0x29, r15	; 41
 808:	e8 bc       	out	0x28, r14	; 40
 80a:	04 c0       	rjmp	.+8      	; 0x814 <main+0x2fe>
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
		{
			set_speed_R(speed - 150);  //previously 150
		}
		else if ((sensor_data_hold & (1<<4)) == (1<<4))
 80c:	14 ff       	sbrs	r17, 4
 80e:	02 c0       	rjmp	.+4      	; 0x814 <main+0x2fe>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 810:	fb bc       	out	0x2b, r15	; 43
 812:	ea bc       	out	0x2a, r14	; 42
			set_speed_L(speed - 150);  //previously 150
		}
		// end line follow
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
 814:	81 2f       	mov	r24, r17
 816:	80 7f       	andi	r24, 0xF0	; 240
 818:	80 3f       	cpi	r24, 0xF0	; 240
 81a:	09 f0       	breq	.+2      	; 0x81e <main+0x308>
 81c:	5d c0       	rjmp	.+186    	; 0x8d8 <__stack+0x79>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 81e:	8c e2       	ldi	r24, 0x2C	; 44
 820:	91 e0       	ldi	r25, 0x01	; 1
 822:	99 bd       	out	0x29, r25	; 41
 824:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 826:	9b bd       	out	0x2b, r25	; 43
 828:	8a bd       	out	0x2a, r24	; 42
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
 82a:	c4 2d       	mov	r28, r4
 82c:	d5 2d       	mov	r29, r5
 82e:	16 c0       	rjmp	.+44     	; 0x85c <main+0x346>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 830:	85 e8       	ldi	r24, 0x85	; 133
 832:	8a 95       	dec	r24
 834:	f1 f7       	brne	.-4      	; 0x832 <main+0x31c>
 836:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 838:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 83c:	18 2f       	mov	r17, r24
				if (sensor_data_hold & (1<<1))
 83e:	81 fd       	sbrc	r24, 1
				{
					Right_trigged=1;
 840:	cb 2c       	mov	r12, r11
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 842:	81 2f       	mov	r24, r17
 844:	8e 77       	andi	r24, 0x7E	; 126
 846:	8e 37       	cpi	r24, 0x7E	; 126
 848:	49 f4       	brne	.+18     	; 0x85c <main+0x346>
				{
					destination = destination + 1;
 84a:	21 96       	adiw	r28, 0x01	; 1
					if (destination > 7000)   // destination triggering
 84c:	c9 35       	cpi	r28, 0x59	; 89
 84e:	9b e1       	ldi	r25, 0x1B	; 27
 850:	d9 07       	cpc	r29, r25
 852:	20 f0       	brcs	.+8      	; 0x85c <main+0x346>
					{
						destination = 0x00;
						stay_stop();
 854:	0e 94 56 00 	call	0xac	; 0xac <stay_stop>
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
				{
					destination = destination + 1;
					if (destination > 7000)   // destination triggering
					{
						destination = 0x00;
 858:	c9 2d       	mov	r28, r9
 85a:	da 2d       	mov	r29, r10
 85c:	81 2f       	mov	r24, r17
 85e:	82 74       	andi	r24, 0x42	; 66
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 860:	39 f7       	brne	.-50     	; 0x830 <main+0x31a>
 862:	cc 2d       	mov	r28, r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 864:	9f ef       	ldi	r25, 0xFF	; 255
 866:	20 e7       	ldi	r18, 0x70	; 112
 868:	82 e0       	ldi	r24, 0x02	; 2
 86a:	91 50       	subi	r25, 0x01	; 1
 86c:	20 40       	sbci	r18, 0x00	; 0
 86e:	80 40       	sbci	r24, 0x00	; 0
 870:	e1 f7       	brne	.-8      	; 0x86a <__stack+0xb>
 872:	00 c0       	rjmp	.+0      	; 0x874 <__stack+0x15>
 874:	00 00       	nop
					}
				}
				
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 876:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 87a:	8e 77       	andi	r24, 0x7E	; 126
 87c:	09 f0       	breq	.+2      	; 0x880 <__stack+0x21>
 87e:	a0 c0       	rjmp	.+320    	; 0x9c0 <__stack+0x161>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
 880:	c1 10       	cpse	r12, r1
 882:	13 c0       	rjmp	.+38     	; 0x8aa <__stack+0x4b>
 884:	81 10       	cpse	r8, r1
 886:	06 c0       	rjmp	.+12     	; 0x894 <__stack+0x35>
			{
				evaluate_direction(1,speed);
 888:	6c e2       	ldi	r22, 0x2C	; 44
 88a:	71 e0       	ldi	r23, 0x01	; 1
 88c:	83 2d       	mov	r24, r3
 88e:	0e 94 5f 02 	call	0x4be	; 0x4be <evaluate_direction>
				//left_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
 892:	aa cf       	rjmp	.-172    	; 0x7e8 <main+0x2d2>
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 894:	91 e0       	ldi	r25, 0x01	; 1
 896:	89 12       	cpse	r8, r25
 898:	a7 cf       	rjmp	.-178    	; 0x7e8 <main+0x2d2>
			{
				evaluate_direction(4,speed);
 89a:	6c e2       	ldi	r22, 0x2C	; 44
 89c:	71 e0       	ldi	r23, 0x01	; 1
 89e:	84 e0       	ldi	r24, 0x04	; 4
 8a0:	0e 94 5f 02 	call	0x4be	; 0x4be <evaluate_direction>
				//left_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
 8a4:	86 2c       	mov	r8, r6
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
			{
				evaluate_direction(4,speed);
				//left_forward_operation(speed);
				Right_trigged = 0;
 8a6:	c6 2c       	mov	r12, r6
				Forward_trigged = 0;
 8a8:	9f cf       	rjmp	.-194    	; 0x7e8 <main+0x2d2>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 8aa:	c1 30       	cpi	r28, 0x01	; 1
 8ac:	09 f0       	breq	.+2      	; 0x8b0 <__stack+0x51>
 8ae:	9c cf       	rjmp	.-200    	; 0x7e8 <main+0x2d2>
 8b0:	81 10       	cpse	r8, r1
 8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <__stack+0x63>
			{
				evaluate_direction(3,speed);
 8b4:	6c e2       	ldi	r22, 0x2C	; 44
 8b6:	71 e0       	ldi	r23, 0x01	; 1
 8b8:	83 e0       	ldi	r24, 0x03	; 3
 8ba:	0e 94 5f 02 	call	0x4be	; 0x4be <evaluate_direction>
				//left_right_operation(speed);
				Right_trigged = 0;
 8be:	c6 2c       	mov	r12, r6
				Forward_trigged = 0;
 8c0:	93 cf       	rjmp	.-218    	; 0x7e8 <main+0x2d2>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
 8c2:	21 e0       	ldi	r18, 0x01	; 1
 8c4:	82 12       	cpse	r8, r18
 8c6:	8d cf       	rjmp	.-230    	; 0x7e2 <main+0x2cc>
			{
				evaluate_direction(6,speed);
 8c8:	6c e2       	ldi	r22, 0x2C	; 44
 8ca:	71 e0       	ldi	r23, 0x01	; 1
 8cc:	86 e0       	ldi	r24, 0x06	; 6
 8ce:	0e 94 5f 02 	call	0x4be	; 0x4be <evaluate_direction>
				//left_right_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
 8d2:	86 2c       	mov	r8, r6
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
			{
				evaluate_direction(6,speed);
				//left_right_forward_operation(speed);
				Right_trigged = 0;
 8d4:	c6 2c       	mov	r12, r6
 8d6:	88 cf       	rjmp	.-240    	; 0x7e8 <main+0x2d2>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
 8d8:	81 2f       	mov	r24, r17
 8da:	8f 70       	andi	r24, 0x0F	; 15
 8dc:	8f 30       	cpi	r24, 0x0F	; 15
 8de:	09 f0       	breq	.+2      	; 0x8e2 <__stack+0x83>
 8e0:	5d c0       	rjmp	.+186    	; 0x99c <__stack+0x13d>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 8e2:	8c e2       	ldi	r24, 0x2C	; 44
 8e4:	91 e0       	ldi	r25, 0x01	; 1
 8e6:	99 bd       	out	0x29, r25	; 41
 8e8:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 8ea:	9b bd       	out	0x2b, r25	; 43
 8ec:	8a bd       	out	0x2a, r24	; 42
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 8ee:	c4 2d       	mov	r28, r4
 8f0:	d5 2d       	mov	r29, r5
 8f2:	16 c0       	rjmp	.+44     	; 0x920 <__stack+0xc1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8f4:	85 e8       	ldi	r24, 0x85	; 133
 8f6:	8a 95       	dec	r24
 8f8:	f1 f7       	brne	.-4      	; 0x8f6 <__stack+0x97>
 8fa:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 8fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
 900:	18 2f       	mov	r17, r24
				if (sensor_data_hold & (1<<6))  // must change for 8 system
 902:	86 fd       	sbrc	r24, 6
				{
					Left_trigged=1;
 904:	7b 2c       	mov	r7, r11
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 906:	81 2f       	mov	r24, r17
 908:	8e 77       	andi	r24, 0x7E	; 126
 90a:	8e 37       	cpi	r24, 0x7E	; 126
 90c:	49 f4       	brne	.+18     	; 0x920 <__stack+0xc1>
				{
					destination = destination + 1;
 90e:	21 96       	adiw	r28, 0x01	; 1
					if (destination > 7000)   // destination triggering
 910:	c9 35       	cpi	r28, 0x59	; 89
 912:	9b e1       	ldi	r25, 0x1B	; 27
 914:	d9 07       	cpc	r29, r25
 916:	20 f0       	brcs	.+8      	; 0x920 <__stack+0xc1>
					{
						destination = 0x00;
						stay_stop();
 918:	0e 94 56 00 	call	0xac	; 0xac <stay_stop>
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
				{
					destination = destination + 1;
					if (destination > 7000)   // destination triggering
					{
						destination = 0x00;
 91c:	c9 2d       	mov	r28, r9
 91e:	da 2d       	mov	r29, r10
 920:	81 2f       	mov	r24, r17
 922:	82 74       	andi	r24, 0x42	; 66
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 924:	39 f7       	brne	.-50     	; 0x8f4 <__stack+0x95>
 926:	c7 2d       	mov	r28, r7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 928:	9f ef       	ldi	r25, 0xFF	; 255
 92a:	20 e7       	ldi	r18, 0x70	; 112
 92c:	82 e0       	ldi	r24, 0x02	; 2
 92e:	91 50       	subi	r25, 0x01	; 1
 930:	20 40       	sbci	r18, 0x00	; 0
 932:	80 40       	sbci	r24, 0x00	; 0
 934:	e1 f7       	brne	.-8      	; 0x92e <__stack+0xcf>
 936:	00 c0       	rjmp	.+0      	; 0x938 <__stack+0xd9>
 938:	00 00       	nop
						stay_stop();
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 93a:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 93e:	8e 77       	andi	r24, 0x7E	; 126
 940:	09 f0       	breq	.+2      	; 0x944 <__stack+0xe5>
 942:	42 c0       	rjmp	.+132    	; 0x9c8 <__stack+0x169>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
 944:	71 10       	cpse	r7, r1
 946:	13 c0       	rjmp	.+38     	; 0x96e <__stack+0x10f>
 948:	81 10       	cpse	r8, r1
 94a:	06 c0       	rjmp	.+12     	; 0x958 <__stack+0xf9>
			{
				evaluate_direction(2,speed);
 94c:	6c e2       	ldi	r22, 0x2C	; 44
 94e:	71 e0       	ldi	r23, 0x01	; 1
 950:	82 e0       	ldi	r24, 0x02	; 2
 952:	0e 94 5f 02 	call	0x4be	; 0x4be <evaluate_direction>
				//right_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 956:	48 cf       	rjmp	.-368    	; 0x7e8 <main+0x2d2>
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))  // this logic is fixed
 958:	91 e0       	ldi	r25, 0x01	; 1
 95a:	89 12       	cpse	r8, r25
 95c:	45 cf       	rjmp	.-374    	; 0x7e8 <main+0x2d2>
			{
				evaluate_direction(5,speed);
 95e:	6c e2       	ldi	r22, 0x2C	; 44
 960:	71 e0       	ldi	r23, 0x01	; 1
 962:	85 e0       	ldi	r24, 0x05	; 5
 964:	0e 94 5f 02 	call	0x4be	; 0x4be <evaluate_direction>
				//right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 968:	86 2c       	mov	r8, r6
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))  // this logic is fixed
			{
				evaluate_direction(5,speed);
				//right_forward_operation(speed);
				Left_trigged = 0;
 96a:	76 2c       	mov	r7, r6
				Forward_trigged = 0;
 96c:	3d cf       	rjmp	.-390    	; 0x7e8 <main+0x2d2>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 96e:	c1 30       	cpi	r28, 0x01	; 1
 970:	09 f0       	breq	.+2      	; 0x974 <__stack+0x115>
 972:	3a cf       	rjmp	.-396    	; 0x7e8 <main+0x2d2>
 974:	81 10       	cpse	r8, r1
 976:	07 c0       	rjmp	.+14     	; 0x986 <__stack+0x127>
			{
				evaluate_direction(3,speed);
 978:	6c e2       	ldi	r22, 0x2C	; 44
 97a:	71 e0       	ldi	r23, 0x01	; 1
 97c:	83 e0       	ldi	r24, 0x03	; 3
 97e:	0e 94 5f 02 	call	0x4be	; 0x4be <evaluate_direction>
				//left_right_operation(speed);
				Left_trigged = 0;
 982:	76 2c       	mov	r7, r6
				Forward_trigged = 0;
 984:	31 cf       	rjmp	.-414    	; 0x7e8 <main+0x2d2>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
 986:	21 e0       	ldi	r18, 0x01	; 1
 988:	82 12       	cpse	r8, r18
 98a:	2d cf       	rjmp	.-422    	; 0x7e6 <main+0x2d0>
			{
				evaluate_direction(6,speed);
 98c:	6c e2       	ldi	r22, 0x2C	; 44
 98e:	71 e0       	ldi	r23, 0x01	; 1
 990:	86 e0       	ldi	r24, 0x06	; 6
 992:	0e 94 5f 02 	call	0x4be	; 0x4be <evaluate_direction>
				//left_right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 996:	86 2c       	mov	r8, r6
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				evaluate_direction(6,speed);
				//left_right_forward_operation(speed);
				Left_trigged = 0;
 998:	76 2c       	mov	r7, r6
 99a:	26 cf       	rjmp	.-436    	; 0x7e8 <main+0x2d2>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
 99c:	81 2f       	mov	r24, r17
 99e:	8e 77       	andi	r24, 0x7E	; 126
 9a0:	09 f0       	breq	.+2      	; 0x9a4 <__stack+0x145>
 9a2:	22 cf       	rjmp	.-444    	; 0x7e8 <main+0x2d2>
		{
			evaluate_direction(7,speed);
 9a4:	6c e2       	ldi	r22, 0x2C	; 44
 9a6:	71 e0       	ldi	r23, 0x01	; 1
 9a8:	87 e0       	ldi	r24, 0x07	; 7
 9aa:	0e 94 5f 02 	call	0x4be	; 0x4be <evaluate_direction>
 9ae:	1c cf       	rjmp	.-456    	; 0x7e8 <main+0x2d2>
			{
				left_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 9b0:	cc 20       	and	r12, r12
 9b2:	09 f4       	brne	.+2      	; 0x9b6 <__stack+0x157>
 9b4:	75 ce       	rjmp	.-790    	; 0x6a0 <main+0x18a>
 9b6:	0b c0       	rjmp	.+22     	; 0x9ce <__stack+0x16f>
			{
				right_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
 9b8:	77 20       	and	r7, r7
 9ba:	09 f4       	brne	.+2      	; 0x9be <__stack+0x15f>
 9bc:	c9 ce       	rjmp	.-622    	; 0x750 <main+0x23a>
 9be:	0c c0       	rjmp	.+24     	; 0x9d8 <__stack+0x179>
				evaluate_direction(1,speed);
				//left_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 9c0:	cc 20       	and	r12, r12
 9c2:	09 f4       	brne	.+2      	; 0x9c6 <__stack+0x167>
 9c4:	6a cf       	rjmp	.-300    	; 0x89a <__stack+0x3b>
 9c6:	0d c0       	rjmp	.+26     	; 0x9e2 <__stack+0x183>
				evaluate_direction(2,speed);
				//right_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))  // this logic is fixed
 9c8:	77 20       	and	r7, r7
 9ca:	49 f2       	breq	.-110    	; 0x95e <__stack+0xff>
 9cc:	0f c0       	rjmp	.+30     	; 0x9ec <__stack+0x18d>
			{
				left_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 9ce:	11 30       	cpi	r17, 0x01	; 1
 9d0:	09 f4       	brne	.+2      	; 0x9d4 <__stack+0x175>
 9d2:	79 ce       	rjmp	.-782    	; 0x6c6 <main+0x1b0>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 9d4:	8b 2c       	mov	r8, r11
 9d6:	f8 cd       	rjmp	.-1040   	; 0x5c8 <main+0xb2>
			{
				right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 9d8:	11 30       	cpi	r17, 0x01	; 1
 9da:	09 f4       	brne	.+2      	; 0x9de <__stack+0x17f>
 9dc:	cc ce       	rjmp	.-616    	; 0x776 <main+0x260>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 9de:	8b 2c       	mov	r8, r11
 9e0:	f3 cd       	rjmp	.-1050   	; 0x5c8 <main+0xb2>
				evaluate_direction(4,speed);
				//left_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 9e2:	c1 30       	cpi	r28, 0x01	; 1
 9e4:	09 f4       	brne	.+2      	; 0x9e8 <__stack+0x189>
 9e6:	70 cf       	rjmp	.-288    	; 0x8c8 <__stack+0x69>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 9e8:	83 2c       	mov	r8, r3
 9ea:	fe ce       	rjmp	.-516    	; 0x7e8 <main+0x2d2>
				evaluate_direction(5,speed);
				//right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 9ec:	c1 30       	cpi	r28, 0x01	; 1
 9ee:	71 f2       	breq	.-100    	; 0x98c <__stack+0x12d>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 9f0:	83 2c       	mov	r8, r3
 9f2:	fa ce       	rjmp	.-524    	; 0x7e8 <main+0x2d2>

000009f4 <strcpy>:
 9f4:	fb 01       	movw	r30, r22
 9f6:	dc 01       	movw	r26, r24
 9f8:	01 90       	ld	r0, Z+
 9fa:	0d 92       	st	X+, r0
 9fc:	00 20       	and	r0, r0
 9fe:	e1 f7       	brne	.-8      	; 0x9f8 <strcpy+0x4>
 a00:	08 95       	ret

00000a02 <strrev>:
 a02:	dc 01       	movw	r26, r24
 a04:	fc 01       	movw	r30, r24
 a06:	67 2f       	mov	r22, r23
 a08:	71 91       	ld	r23, Z+
 a0a:	77 23       	and	r23, r23
 a0c:	e1 f7       	brne	.-8      	; 0xa06 <strrev+0x4>
 a0e:	32 97       	sbiw	r30, 0x02	; 2
 a10:	04 c0       	rjmp	.+8      	; 0xa1a <strrev+0x18>
 a12:	7c 91       	ld	r23, X
 a14:	6d 93       	st	X+, r22
 a16:	70 83       	st	Z, r23
 a18:	62 91       	ld	r22, -Z
 a1a:	ae 17       	cp	r26, r30
 a1c:	bf 07       	cpc	r27, r31
 a1e:	c8 f3       	brcs	.-14     	; 0xa12 <strrev+0x10>
 a20:	08 95       	ret

00000a22 <_exit>:
 a22:	f8 94       	cli

00000a24 <__stop_program>:
 a24:	ff cf       	rjmp	.-2      	; 0xa24 <__stop_program>
