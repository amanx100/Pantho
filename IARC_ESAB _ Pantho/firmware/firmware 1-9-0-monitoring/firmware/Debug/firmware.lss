
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  00000e5c  00000ef0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001f8  00800116  00800116  00000fa6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ca7  00000000  00000000  000010e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000382  00000000  00000000  00002d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000803  00000000  00000000  0000310f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a4  00000000  00000000  00003914  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003db  00000000  00000000  00003bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a9b  00000000  00000000  00003f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  00005a2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 31       	cpi	r26, 0x16	; 22
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a6 e1       	ldi	r26, 0x16	; 22
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 30       	cpi	r26, 0x0E	; 14
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <main>
  8a:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <go_forward>:
#ifndef M_DIR_H_
#define M_DIR_H_

void go_forward(void)
{
	PORTB = 0x05;
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  96:	8e b5       	in	r24, 0x2e	; 46
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	8e bd       	out	0x2e, r24	; 46
  9c:	08 95       	ret

0000009e <go_backward>:
}

void go_backward(void)
{
	PORTB = 0x0A;
  9e:	8a e0       	ldi	r24, 0x0A	; 10
  a0:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  a2:	8e b5       	in	r24, 0x2e	; 46
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	8e bd       	out	0x2e, r24	; 46
  a8:	08 95       	ret

000000aa <right_rotate>:
}

void right_rotate(void)
{
	PORTB = 0x09;
  aa:	89 e0       	ldi	r24, 0x09	; 9
  ac:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  ae:	8e b5       	in	r24, 0x2e	; 46
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	8e bd       	out	0x2e, r24	; 46
  b4:	08 95       	ret

000000b6 <left_rotate>:
}

void left_rotate(void)
{
	PORTB = 0x06;
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  ba:	8e b5       	in	r24, 0x2e	; 46
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	8e bd       	out	0x2e, r24	; 46
  c0:	08 95       	ret

000000c2 <stay_stop>:
}

void stay_stop(void)
{
	PORTB = 0x00;
  c2:	18 ba       	out	0x18, r1	; 24
	TCCR1B &= ~(1<<1);
  c4:	8e b5       	in	r24, 0x2e	; 46
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	8e bd       	out	0x2e, r24	; 46
  ca:	08 95       	ret

000000cc <usart_init>:
#include <string.h>

void usart_init(uint32_t baud)
{
	// Calculation for baud rate value into ubrr value
	uint16_t ubrr = lrint(( F_CPU / (16L * baud) ) - 1);
  cc:	dc 01       	movw	r26, r24
  ce:	cb 01       	movw	r24, r22
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	aa 1f       	adc	r26, r26
  d6:	bb 1f       	adc	r27, r27
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	aa 1f       	adc	r26, r26
  de:	bb 1f       	adc	r27, r27
  e0:	9c 01       	movw	r18, r24
  e2:	ad 01       	movw	r20, r26
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	44 1f       	adc	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	44 1f       	adc	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	72 e1       	ldi	r23, 0x12	; 18
  f8:	8a e7       	ldi	r24, 0x7A	; 122
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__udivmodsi4>
 100:	ca 01       	movw	r24, r20
 102:	b9 01       	movw	r22, r18
 104:	61 50       	subi	r22, 0x01	; 1
 106:	71 09       	sbc	r23, r1
 108:	81 09       	sbc	r24, r1
 10a:	91 09       	sbc	r25, r1
 10c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__floatunsisf>
 110:	0e 94 97 06 	call	0xd2e	; 0xd2e <lrint>
	// Set baud rate
	UBRRH = (uint8_t)(ubrr>>8);
 114:	27 2f       	mov	r18, r23
 116:	33 27       	eor	r19, r19
 118:	20 bd       	out	0x20, r18	; 32
	UBRRL = (uint8_t)ubrr;
 11a:	69 b9       	out	0x09, r22	; 9
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
 11c:	88 e1       	ldi	r24, 0x18	; 24
 11e:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 1stop bit
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
 120:	86 e8       	ldi	r24, 0x86	; 134
 122:	80 bd       	out	0x20, r24	; 32
 124:	08 95       	ret

00000126 <usart_putchar>:
}

void usart_putchar(char data)
{
	// Wait for empty transmit buffer
	while ( !(UCSRA & (_BV(UDRE))) );
 126:	5d 9b       	sbis	0x0b, 5	; 11
 128:	fe cf       	rjmp	.-4      	; 0x126 <usart_putchar>
	// Start transmission
	UDR = data;
 12a:	8c b9       	out	0x0c, r24	; 12
 12c:	08 95       	ret

0000012e <usart_putstr>:
	// Return the data
	return UDR;
}

void usart_putstr(char *s)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
	// loop through entire string
	while (*s != '\0') {
 134:	88 81       	ld	r24, Y
 136:	88 23       	and	r24, r24
 138:	31 f0       	breq	.+12     	; 0x146 <usart_putstr+0x18>
 13a:	21 96       	adiw	r28, 0x01	; 1
		usart_putchar(*s);
 13c:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
}

void usart_putstr(char *s)
{
	// loop through entire string
	while (*s != '\0') {
 140:	89 91       	ld	r24, Y+
 142:	81 11       	cpse	r24, r1
 144:	fb cf       	rjmp	.-10     	; 0x13c <usart_putstr+0xe>
		usart_putchar(*s);
		s++;
	}
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <__vector_11>:
//**********************************************************************************************************
//  Interrupt Sub rutine  **********************************************************************************
//**********************************************************************************************************

ISR(TIMER0_OVF_vect)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
	if (Time_x2ms < 500)
 15c:	80 91 16 01 	lds	r24, 0x0116
 160:	90 91 17 01 	lds	r25, 0x0117
 164:	84 3f       	cpi	r24, 0xF4	; 244
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	92 07       	cpc	r25, r18
 16a:	28 f4       	brcc	.+10     	; 0x176 <__vector_11+0x2a>
	{
		Time_x2ms = Time_x2ms + 1;
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	90 93 17 01 	sts	0x0117, r25
 172:	80 93 16 01 	sts	0x0116, r24
	}
}
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <sensor_data>:
}

uint8_t sensor_data(void)
{
sn_dt:
	if ((PIND & (1<<PD2)) && (PIND & (1<<PD3)))
 186:	82 9b       	sbis	0x10, 2	; 16
 188:	fe cf       	rjmp	.-4      	; 0x186 <sensor_data>
 18a:	83 9b       	sbis	0x10, 3	; 16
 18c:	fc cf       	rjmp	.-8      	; 0x186 <sensor_data>
	{
		return PINC;
 18e:	83 b3       	in	r24, 0x13	; 19
	}
	else goto sn_dt;
}
 190:	08 95       	ret

00000192 <process_array>:

void process_array(void)
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
	int i;
	strrev(directions_solved);
 196:	8a e1       	ldi	r24, 0x1A	; 26
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 1c 07 	call	0xe38	; 0xe38 <strrev>
	
	for (i=0;directions_solved[i];i++)
 19e:	80 91 1a 01 	lds	r24, 0x011A
 1a2:	88 23       	and	r24, r24
 1a4:	89 f0       	breq	.+34     	; 0x1c8 <process_array+0x36>
 1a6:	ab e1       	ldi	r26, 0x1B	; 27
 1a8:	b1 e0       	ldi	r27, 0x01	; 1
 1aa:	ea e1       	ldi	r30, 0x1A	; 26
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
		{
			directions_solved[i] = 'r';
		}
		else if (directions_solved[i] == 'r')
		{
			directions_solved[i] = 'l';
 1ae:	2c e6       	ldi	r18, 0x6C	; 108
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'l')
		{
			directions_solved[i] = 'r';
 1b0:	92 e7       	ldi	r25, 0x72	; 114
	int i;
	strrev(directions_solved);
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'l')
 1b2:	8c 36       	cpi	r24, 0x6C	; 108
 1b4:	11 f4       	brne	.+4      	; 0x1ba <process_array+0x28>
		{
			directions_solved[i] = 'r';
 1b6:	90 83       	st	Z, r25
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <process_array+0x2e>
		}
		else if (directions_solved[i] == 'r')
 1ba:	82 37       	cpi	r24, 0x72	; 114
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <process_array+0x2e>
		{
			directions_solved[i] = 'l';
 1be:	20 83       	st	Z, r18
void process_array(void)
{
	int i;
	strrev(directions_solved);
	
	for (i=0;directions_solved[i];i++)
 1c0:	8d 91       	ld	r24, X+
 1c2:	31 96       	adiw	r30, 0x01	; 1
 1c4:	81 11       	cpse	r24, r1
 1c6:	f5 cf       	rjmp	.-22     	; 0x1b2 <process_array+0x20>
		{
			directions_solved[i] = 'l';
		}
	}
	
	usart_putstr("\r\rReversed Data: ");
 1c8:	82 e6       	ldi	r24, 0x62	; 98
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	usart_putstr(directions_solved);
 1d0:	8a e1       	ldi	r24, 0x1A	; 26
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	
	for (i=0;directions_solved[i];i++)
 1d8:	20 91 1a 01 	lds	r18, 0x011A
 1dc:	22 23       	and	r18, r18
 1de:	09 f4       	brne	.+2      	; 0x1e2 <process_array+0x50>
 1e0:	96 c0       	rjmp	.+300    	; 0x30e <process_array+0x17c>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
			{
				directions_solved[i-1] = 's';
 1e6:	d3 e7       	ldi	r29, 0x73	; 115
			{
				directions_solved[i-1] = 'u';
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'r';
 1e8:	c2 e7       	ldi	r28, 0x72	; 114
			{
				directions_solved[i-1] = 'r';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'u';
 1ea:	65 e7       	ldi	r22, 0x75	; 117
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
			{
				directions_solved[i-1] = 'l';
 1ec:	7c e6       	ldi	r23, 0x6C	; 108
			{
				directions_solved[i] = directions_solved[i+2];
				i++;
			}
			directions_solved[i] = '\0';
			i=0;
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	40 e0       	ldi	r20, 0x00	; 0
	usart_putstr("\r\rReversed Data: ");
	usart_putstr(directions_solved);
	
	for (i=0;directions_solved[i];i++)
	{
		if (directions_solved[i] == 'u')
 1f2:	25 37       	cpi	r18, 0x75	; 117
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <process_array+0x66>
 1f6:	84 c0       	rjmp	.+264    	; 0x300 <process_array+0x16e>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
 1f8:	9c 01       	movw	r18, r24
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	31 09       	sbc	r19, r1
 1fe:	f9 01       	movw	r30, r18
 200:	e6 5e       	subi	r30, 0xE6	; 230
 202:	fe 4f       	sbci	r31, 0xFE	; 254
 204:	a0 81       	ld	r26, Z
 206:	a2 37       	cpi	r26, 0x72	; 114
 208:	89 f4       	brne	.+34     	; 0x22c <process_array+0x9a>
 20a:	fc 01       	movw	r30, r24
 20c:	e6 5e       	subi	r30, 0xE6	; 230
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
 210:	e1 81       	ldd	r30, Z+1	; 0x01
 212:	e3 37       	cpi	r30, 0x73	; 115
 214:	29 f5       	brne	.+74     	; 0x260 <process_array+0xce>
			{
				directions_solved[i-1] = 'l';
 216:	f9 01       	movw	r30, r18
 218:	e6 5e       	subi	r30, 0xE6	; 230
 21a:	fe 4f       	sbci	r31, 0xFE	; 254
 21c:	70 83       	st	Z, r23
			{
				directions_solved[i-1] = 'u';
			}

			
			while (directions_solved[i+2])
 21e:	fc 01       	movw	r30, r24
 220:	e6 5e       	subi	r30, 0xE6	; 230
 222:	fe 4f       	sbci	r31, 0xFE	; 254
 224:	22 81       	ldd	r18, Z+2	; 0x02
 226:	21 11       	cpse	r18, r1
 228:	5a c0       	rjmp	.+180    	; 0x2de <process_array+0x14c>
 22a:	64 c0       	rjmp	.+200    	; 0x2f4 <process_array+0x162>
		{
			if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 's')
			{
				directions_solved[i-1] = 'l';
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'r')
 22c:	a3 37       	cpi	r26, 0x73	; 115
 22e:	59 f4       	brne	.+22     	; 0x246 <process_array+0xb4>
 230:	fc 01       	movw	r30, r24
 232:	e6 5e       	subi	r30, 0xE6	; 230
 234:	fe 4f       	sbci	r31, 0xFE	; 254
 236:	e1 81       	ldd	r30, Z+1	; 0x01
 238:	e2 37       	cpi	r30, 0x72	; 114
 23a:	31 f5       	brne	.+76     	; 0x288 <process_array+0xf6>
			{
				directions_solved[i-1] = 'l';
 23c:	f9 01       	movw	r30, r18
 23e:	e6 5e       	subi	r30, 0xE6	; 230
 240:	fe 4f       	sbci	r31, 0xFE	; 254
 242:	70 83       	st	Z, r23
 244:	ec cf       	rjmp	.-40     	; 0x21e <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'r')
 246:	ac 36       	cpi	r26, 0x6C	; 108
 248:	59 f4       	brne	.+22     	; 0x260 <process_array+0xce>
 24a:	fc 01       	movw	r30, r24
 24c:	e6 5e       	subi	r30, 0xE6	; 230
 24e:	fe 4f       	sbci	r31, 0xFE	; 254
 250:	e1 81       	ldd	r30, Z+1	; 0x01
 252:	e2 37       	cpi	r30, 0x72	; 114
 254:	d9 f4       	brne	.+54     	; 0x28c <process_array+0xfa>
			{
				directions_solved[i-1] = 'u';
 256:	f9 01       	movw	r30, r18
 258:	e6 5e       	subi	r30, 0xE6	; 230
 25a:	fe 4f       	sbci	r31, 0xFE	; 254
 25c:	60 83       	st	Z, r22
 25e:	df cf       	rjmp	.-66     	; 0x21e <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'r')
 260:	a2 37       	cpi	r26, 0x72	; 114
 262:	91 f4       	brne	.+36     	; 0x288 <process_array+0xf6>
 264:	fc 01       	movw	r30, r24
 266:	e6 5e       	subi	r30, 0xE6	; 230
 268:	fe 4f       	sbci	r31, 0xFE	; 254
 26a:	e1 81       	ldd	r30, Z+1	; 0x01
 26c:	e2 37       	cpi	r30, 0x72	; 114
 26e:	29 f4       	brne	.+10     	; 0x27a <process_array+0xe8>
			{
				directions_solved[i-1] = 's';
 270:	f9 01       	movw	r30, r18
 272:	e6 5e       	subi	r30, 0xE6	; 230
 274:	fe 4f       	sbci	r31, 0xFE	; 254
 276:	d0 83       	st	Z, r29
 278:	d2 cf       	rjmp	.-92     	; 0x21e <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 'r' && directions_solved[i+1] == 'l')
 27a:	ec 36       	cpi	r30, 0x6C	; 108
 27c:	81 f6       	brne	.-96     	; 0x21e <process_array+0x8c>
			{
				directions_solved[i-1] = 'u';
 27e:	f9 01       	movw	r30, r18
 280:	e6 5e       	subi	r30, 0xE6	; 230
 282:	fe 4f       	sbci	r31, 0xFE	; 254
 284:	60 83       	st	Z, r22
 286:	cb cf       	rjmp	.-106    	; 0x21e <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 's')
 288:	ac 36       	cpi	r26, 0x6C	; 108
 28a:	99 f4       	brne	.+38     	; 0x2b2 <process_array+0x120>
 28c:	fc 01       	movw	r30, r24
 28e:	e6 5e       	subi	r30, 0xE6	; 230
 290:	fe 4f       	sbci	r31, 0xFE	; 254
 292:	e1 81       	ldd	r30, Z+1	; 0x01
 294:	e3 37       	cpi	r30, 0x73	; 115
 296:	29 f4       	brne	.+10     	; 0x2a2 <process_array+0x110>
			{
				directions_solved[i-1] = 'r';
 298:	f9 01       	movw	r30, r18
 29a:	e6 5e       	subi	r30, 0xE6	; 230
 29c:	fe 4f       	sbci	r31, 0xFE	; 254
 29e:	c0 83       	st	Z, r28
 2a0:	be cf       	rjmp	.-132    	; 0x21e <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 'l' && directions_solved[i+1] == 'l')
 2a2:	ec 36       	cpi	r30, 0x6C	; 108
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <process_array+0x116>
 2a6:	bb cf       	rjmp	.-138    	; 0x21e <process_array+0x8c>
			{
				directions_solved[i-1] = 's';
 2a8:	f9 01       	movw	r30, r18
 2aa:	e6 5e       	subi	r30, 0xE6	; 230
 2ac:	fe 4f       	sbci	r31, 0xFE	; 254
 2ae:	d0 83       	st	Z, r29
 2b0:	b6 cf       	rjmp	.-148    	; 0x21e <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 'l')
 2b2:	a3 37       	cpi	r26, 0x73	; 115
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <process_array+0x126>
 2b6:	b3 cf       	rjmp	.-154    	; 0x21e <process_array+0x8c>
 2b8:	fc 01       	movw	r30, r24
 2ba:	e6 5e       	subi	r30, 0xE6	; 230
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	e1 81       	ldd	r30, Z+1	; 0x01
 2c0:	ec 36       	cpi	r30, 0x6C	; 108
 2c2:	29 f4       	brne	.+10     	; 0x2ce <process_array+0x13c>
			{
				directions_solved[i-1] = 'r';
 2c4:	f9 01       	movw	r30, r18
 2c6:	e6 5e       	subi	r30, 0xE6	; 230
 2c8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ca:	c0 83       	st	Z, r28
 2cc:	a8 cf       	rjmp	.-176    	; 0x21e <process_array+0x8c>
			}
			else if (directions_solved[i-1] == 's' && directions_solved[i+1] == 's')
 2ce:	e3 37       	cpi	r30, 0x73	; 115
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <process_array+0x142>
 2d2:	a5 cf       	rjmp	.-182    	; 0x21e <process_array+0x8c>
			{
				directions_solved[i-1] = 'u';
 2d4:	f9 01       	movw	r30, r18
 2d6:	e6 5e       	subi	r30, 0xE6	; 230
 2d8:	fe 4f       	sbci	r31, 0xFE	; 254
 2da:	60 83       	st	Z, r22
 2dc:	a0 cf       	rjmp	.-192    	; 0x21e <process_array+0x8c>
 2de:	dc 01       	movw	r26, r24
 2e0:	a6 5e       	subi	r26, 0xE6	; 230
 2e2:	be 4f       	sbci	r27, 0xFE	; 254
 2e4:	fc 01       	movw	r30, r24
 2e6:	e3 5e       	subi	r30, 0xE3	; 227
 2e8:	fe 4f       	sbci	r31, 0xFE	; 254
			}

			
			while (directions_solved[i+2])
			{
				directions_solved[i] = directions_solved[i+2];
 2ea:	2d 93       	st	X+, r18
				i++;
 2ec:	01 96       	adiw	r24, 0x01	; 1
			{
				directions_solved[i-1] = 'u';
			}

			
			while (directions_solved[i+2])
 2ee:	21 91       	ld	r18, Z+
 2f0:	21 11       	cpse	r18, r1
 2f2:	fb cf       	rjmp	.-10     	; 0x2ea <process_array+0x158>
			{
				directions_solved[i] = directions_solved[i+2];
				i++;
			}
			directions_solved[i] = '\0';
 2f4:	fc 01       	movw	r30, r24
 2f6:	e6 5e       	subi	r30, 0xE6	; 230
 2f8:	fe 4f       	sbci	r31, 0xFE	; 254
 2fa:	10 82       	st	Z, r1
			i=0;
 2fc:	85 2f       	mov	r24, r21
 2fe:	94 2f       	mov	r25, r20
	}
	
	usart_putstr("\r\rReversed Data: ");
	usart_putstr(directions_solved);
	
	for (i=0;directions_solved[i];i++)
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	fc 01       	movw	r30, r24
 304:	e6 5e       	subi	r30, 0xE6	; 230
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	20 81       	ld	r18, Z
 30a:	21 11       	cpse	r18, r1
 30c:	72 cf       	rjmp	.-284    	; 0x1f2 <process_array+0x60>
			directions_solved[i] = '\0';
			i=0;
		}
	}
	
	usart_putstr("\r\rSolved Data: ");
 30e:	84 e7       	ldi	r24, 0x74	; 116
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	usart_putstr(directions_solved);
 316:	8a e1       	ldi	r24, 0x1A	; 26
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	usart_putstr("\r\rSolved Data Practical: ");
 31e:	84 e8       	ldi	r24, 0x84	; 132
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
}
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <turn_U>:

void turn_U(uint16_t speed)
{
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	82 e5       	ldi	r24, 0x52	; 82
 33a:	97 e0       	ldi	r25, 0x07	; 7
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <turn_U+0x10>
 344:	00 c0       	rjmp	.+0      	; 0x346 <turn_U+0x1a>
 346:	00 00       	nop
	_delay_ms(300);
	left_rotate();
 348:	0e 94 5b 00 	call	0xb6	; 0xb6 <left_rotate>
	set_speed_L(speed + 300); //70
 34c:	8e 01       	movw	r16, r28
 34e:	04 5d       	subi	r16, 0xD4	; 212
 350:	1e 4f       	sbci	r17, 0xFE	; 254
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 352:	1b bd       	out	0x2b, r17	; 43
 354:	0a bd       	out	0x2a, r16	; 42
 356:	2f e7       	ldi	r18, 0x7F	; 127
 358:	88 e3       	ldi	r24, 0x38	; 56
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <turn_U+0x30>
 364:	00 c0       	rjmp	.+0      	; 0x366 <turn_U+0x3a>
 366:	00 00       	nop
{
	_delay_ms(300);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
 368:	ce 01       	movw	r24, r28
 36a:	c2 97       	sbiw	r24, 0x32	; 50
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 36c:	99 bd       	out	0x29, r25	; 41
 36e:	88 bd       	out	0x28, r24	; 40
	_delay_ms(300);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
 370:	80 5b       	subi	r24, 0xB0	; 176
 372:	9f 4f       	sbci	r25, 0xFF	; 255
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 374:	9b bd       	out	0x2b, r25	; 43
 376:	8a bd       	out	0x2a, r24	; 42
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
	//_delay_ms(100);
	while((sensor_data() & (3<<5)) != (3<<5));
 378:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 37c:	80 76       	andi	r24, 0x60	; 96
 37e:	80 36       	cpi	r24, 0x60	; 96
 380:	d9 f7       	brne	.-10     	; 0x378 <turn_U+0x4c>
	while((sensor_data() & (3<<4)) != (3<<4));
 382:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 386:	80 73       	andi	r24, 0x30	; 48
 388:	80 33       	cpi	r24, 0x30	; 48
 38a:	d9 f7       	brne	.-10     	; 0x382 <turn_U+0x56>
	while((sensor_data() & (3<<3)) != (3<<3));
 38c:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 390:	88 71       	andi	r24, 0x18	; 24
 392:	88 31       	cpi	r24, 0x18	; 24
 394:	d9 f7       	brne	.-10     	; 0x38c <turn_U+0x60>
	//while(sensor_data() != (3<<3));
	go_forward();
 396:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 39a:	d9 bd       	out	0x29, r29	; 41
 39c:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 39e:	1b bd       	out	0x2b, r17	; 43
 3a0:	0a bd       	out	0x2a, r16	; 42
 3a2:	2f e7       	ldi	r18, 0x7F	; 127
 3a4:	88 e3       	ldi	r24, 0x38	; 56
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	80 40       	sbci	r24, 0x00	; 0
 3ac:	90 40       	sbci	r25, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <turn_U+0x7c>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <turn_U+0x86>
 3b2:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 3b4:	d9 bd       	out	0x29, r29	; 41
 3b6:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 3b8:	db bd       	out	0x2b, r29	; 43
 3ba:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_R(speed);
	set_speed_L(speed +300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	08 95       	ret

000003c6 <turn_U_destination>:

void turn_U_destination(uint16_t speed)
{
 3c6:	0f 93       	push	r16
 3c8:	1f 93       	push	r17
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	ec 01       	movw	r28, r24
	uint16_t sensor_data_hold;
	stay_stop();
 3d0:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
	process_array();
 3d4:	0e 94 c9 00 	call	0x192	; 0x192 <process_array>
 3d8:	2f ef       	ldi	r18, 0xFF	; 255
 3da:	89 e6       	ldi	r24, 0x69	; 105
 3dc:	98 e1       	ldi	r25, 0x18	; 24
 3de:	21 50       	subi	r18, 0x01	; 1
 3e0:	80 40       	sbci	r24, 0x00	; 0
 3e2:	90 40       	sbci	r25, 0x00	; 0
 3e4:	e1 f7       	brne	.-8      	; 0x3de <turn_U_destination+0x18>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <turn_U_destination+0x22>
 3e8:	00 00       	nop
	_delay_ms(1000);
	go_backward();
 3ea:	0e 94 4f 00 	call	0x9e	; 0x9e <go_backward>
	set_speed_RL(speed + 200);
 3ee:	8e 01       	movw	r16, r28
 3f0:	08 53       	subi	r16, 0x38	; 56
 3f2:	1f 4f       	sbci	r17, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 3f4:	19 bd       	out	0x29, r17	; 41
 3f6:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 3f8:	1b bd       	out	0x2b, r17	; 43
 3fa:	0a bd       	out	0x2a, r16	; 42
 3fc:	2f e7       	ldi	r18, 0x7F	; 127
 3fe:	88 e3       	ldi	r24, 0x38	; 56
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <turn_U_destination+0x3c>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <turn_U_destination+0x46>
 40c:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 40e:	d9 bd       	out	0x29, r29	; 41
 410:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 412:	db bd       	out	0x2b, r29	; 43
 414:	ca bd       	out	0x2a, r28	; 42
	_delay_ms(1000);
	go_backward();
	set_speed_RL(speed + 200);
	_delay_ms(50);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
 416:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 41a:	82 74       	andi	r24, 0x42	; 66
	while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 41c:	21 f0       	breq	.+8      	; 0x426 <turn_U_destination+0x60>
	{
		sensor_data_hold = sensor_data();
 41e:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 422:	82 74       	andi	r24, 0x42	; 66
	go_backward();
	set_speed_RL(speed + 200);
	_delay_ms(50);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
	while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 424:	e1 f7       	brne	.-8      	; 0x41e <turn_U_destination+0x58>
	{
		sensor_data_hold = sensor_data();
	}
	stay_stop();
 426:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
 42a:	2f ef       	ldi	r18, 0xFF	; 255
 42c:	80 e7       	ldi	r24, 0x70	; 112
 42e:	92 e0       	ldi	r25, 0x02	; 2
 430:	21 50       	subi	r18, 0x01	; 1
 432:	80 40       	sbci	r24, 0x00	; 0
 434:	90 40       	sbci	r25, 0x00	; 0
 436:	e1 f7       	brne	.-8      	; 0x430 <turn_U_destination+0x6a>
 438:	00 c0       	rjmp	.+0      	; 0x43a <turn_U_destination+0x74>
 43a:	00 00       	nop
	_delay_ms(100);
	go_forward();
 43c:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 440:	19 bd       	out	0x29, r17	; 41
 442:	08 bd       	out	0x28, r16	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 444:	1b bd       	out	0x2b, r17	; 43
 446:	0a bd       	out	0x2a, r16	; 42
 448:	2f e7       	ldi	r18, 0x7F	; 127
 44a:	88 e3       	ldi	r24, 0x38	; 56
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	21 50       	subi	r18, 0x01	; 1
 450:	80 40       	sbci	r24, 0x00	; 0
 452:	90 40       	sbci	r25, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <turn_U_destination+0x88>
 456:	00 c0       	rjmp	.+0      	; 0x458 <turn_U_destination+0x92>
 458:	00 00       	nop
	_delay_ms(100);
	go_forward();
	set_speed_RL(speed + 200);
	_delay_ms(50);
	//set_speed_RL(speed);
	set_speed_RL(speed+20);
 45a:	ce 01       	movw	r24, r28
 45c:	44 96       	adiw	r24, 0x14	; 20
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 45e:	99 bd       	out	0x29, r25	; 41
 460:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 462:	9b bd       	out	0x2b, r25	; 43
 464:	8a bd       	out	0x2a, r24	; 42
 466:	2f ef       	ldi	r18, 0xFF	; 255
 468:	83 ec       	ldi	r24, 0xC3	; 195
 46a:	99 e0       	ldi	r25, 0x09	; 9
 46c:	21 50       	subi	r18, 0x01	; 1
 46e:	80 40       	sbci	r24, 0x00	; 0
 470:	90 40       	sbci	r25, 0x00	; 0
 472:	e1 f7       	brne	.-8      	; 0x46c <turn_U_destination+0xa6>
 474:	00 c0       	rjmp	.+0      	; 0x476 <turn_U_destination+0xb0>
 476:	00 00       	nop
	set_speed_RL(speed + 200);
	_delay_ms(50);
	//set_speed_RL(speed);
	set_speed_RL(speed+20);
	_delay_ms(400);
	left_rotate();
 478:	0e 94 5b 00 	call	0xb6	; 0xb6 <left_rotate>
	set_speed_L(speed + 300); //70
 47c:	8e 01       	movw	r16, r28
 47e:	04 5d       	subi	r16, 0xD4	; 212
 480:	1e 4f       	sbci	r17, 0xFE	; 254
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 482:	1b bd       	out	0x2b, r17	; 43
 484:	0a bd       	out	0x2a, r16	; 42
 486:	2f e7       	ldi	r18, 0x7F	; 127
 488:	88 e3       	ldi	r24, 0x38	; 56
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	21 50       	subi	r18, 0x01	; 1
 48e:	80 40       	sbci	r24, 0x00	; 0
 490:	90 40       	sbci	r25, 0x00	; 0
 492:	e1 f7       	brne	.-8      	; 0x48c <turn_U_destination+0xc6>
 494:	00 c0       	rjmp	.+0      	; 0x496 <turn_U_destination+0xd0>
 496:	00 00       	nop
	set_speed_RL(speed+20);
	_delay_ms(400);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
 498:	ce 01       	movw	r24, r28
 49a:	c2 97       	sbiw	r24, 0x32	; 50
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 49c:	99 bd       	out	0x29, r25	; 41
 49e:	88 bd       	out	0x28, r24	; 40
	_delay_ms(400);
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
 4a0:	80 5b       	subi	r24, 0xB0	; 176
 4a2:	9f 4f       	sbci	r25, 0xFF	; 255
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 4a4:	9b bd       	out	0x2b, r25	; 43
 4a6:	8a bd       	out	0x2a, r24	; 42
 4a8:	2f ef       	ldi	r18, 0xFF	; 255
 4aa:	80 e7       	ldi	r24, 0x70	; 112
 4ac:	92 e0       	ldi	r25, 0x02	; 2
 4ae:	21 50       	subi	r18, 0x01	; 1
 4b0:	80 40       	sbci	r24, 0x00	; 0
 4b2:	90 40       	sbci	r25, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <turn_U_destination+0xe8>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <turn_U_destination+0xf2>
 4b8:	00 00       	nop
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
	_delay_ms(100);
	while((sensor_data() & (3<<5)) != 0x00);
 4ba:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 4be:	80 76       	andi	r24, 0x60	; 96
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <turn_U_destination+0xf4>
	while((sensor_data() & (3<<5)) != (3<<5));
 4c2:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 4c6:	80 76       	andi	r24, 0x60	; 96
 4c8:	80 36       	cpi	r24, 0x60	; 96
 4ca:	d9 f7       	brne	.-10     	; 0x4c2 <turn_U_destination+0xfc>
	while((sensor_data() & (3<<4)) != (3<<4));
 4cc:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 4d0:	80 73       	andi	r24, 0x30	; 48
 4d2:	80 33       	cpi	r24, 0x30	; 48
 4d4:	d9 f7       	brne	.-10     	; 0x4cc <turn_U_destination+0x106>
	while((sensor_data() & (3<<3)) != (3<<3));
 4d6:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 4da:	88 71       	andi	r24, 0x18	; 24
 4dc:	88 31       	cpi	r24, 0x18	; 24
 4de:	d9 f7       	brne	.-10     	; 0x4d6 <turn_U_destination+0x110>
	//while(sensor_data() != (3<<3));
	go_forward();
 4e0:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 4e4:	d9 bd       	out	0x29, r29	; 41
 4e6:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 4e8:	1b bd       	out	0x2b, r17	; 43
 4ea:	0a bd       	out	0x2a, r16	; 42
 4ec:	2f e7       	ldi	r18, 0x7F	; 127
 4ee:	88 e3       	ldi	r24, 0x38	; 56
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	21 50       	subi	r18, 0x01	; 1
 4f4:	80 40       	sbci	r24, 0x00	; 0
 4f6:	90 40       	sbci	r25, 0x00	; 0
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <turn_U_destination+0x12c>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <turn_U_destination+0x136>
 4fc:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 4fe:	d9 bd       	out	0x29, r29	; 41
 500:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 502:	db bd       	out	0x2b, r29	; 43
 504:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_R(speed);
	set_speed_L(speed +300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	08 95       	ret

00000510 <turn_left>:

void turn_left(uint16_t speed)
{
 510:	0f 93       	push	r16
 512:	1f 93       	push	r17
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	ec 01       	movw	r28, r24
	left_rotate();
 51a:	0e 94 5b 00 	call	0xb6	; 0xb6 <left_rotate>
	set_speed_L(speed + 300); //70
 51e:	8e 01       	movw	r16, r28
 520:	04 5d       	subi	r16, 0xD4	; 212
 522:	1e 4f       	sbci	r17, 0xFE	; 254
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 524:	1b bd       	out	0x2b, r17	; 43
 526:	0a bd       	out	0x2a, r16	; 42
 528:	2f e7       	ldi	r18, 0x7F	; 127
 52a:	88 e3       	ldi	r24, 0x38	; 56
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	21 50       	subi	r18, 0x01	; 1
 530:	80 40       	sbci	r24, 0x00	; 0
 532:	90 40       	sbci	r25, 0x00	; 0
 534:	e1 f7       	brne	.-8      	; 0x52e <turn_left+0x1e>
 536:	00 c0       	rjmp	.+0      	; 0x538 <turn_left+0x28>
 538:	00 00       	nop
void turn_left(uint16_t speed)
{
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
 53a:	ce 01       	movw	r24, r28
 53c:	c2 97       	sbiw	r24, 0x32	; 50
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 53e:	99 bd       	out	0x29, r25	; 41
 540:	88 bd       	out	0x28, r24	; 40
{
	left_rotate();
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
 542:	80 5b       	subi	r24, 0xB0	; 176
 544:	9f 4f       	sbci	r25, 0xFF	; 255
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 546:	9b bd       	out	0x2b, r25	; 43
 548:	8a bd       	out	0x2a, r24	; 42
	set_speed_L(speed + 300); //70
	_delay_ms(50);
	set_speed_R(speed-50); //-50
	set_speed_L(speed+30);
	//_delay_ms(100);
	while((sensor_data() & (3<<5)) != (3<<5));
 54a:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 54e:	80 76       	andi	r24, 0x60	; 96
 550:	80 36       	cpi	r24, 0x60	; 96
 552:	d9 f7       	brne	.-10     	; 0x54a <turn_left+0x3a>
	while((sensor_data() & (3<<4)) != (3<<4));
 554:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 558:	80 73       	andi	r24, 0x30	; 48
 55a:	80 33       	cpi	r24, 0x30	; 48
 55c:	d9 f7       	brne	.-10     	; 0x554 <turn_left+0x44>
	//while((sensor_data() & (3<<3)) != (3<<3));
	//while(sensor_data() != (3<<3));
	go_forward();
 55e:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 562:	d9 bd       	out	0x29, r29	; 41
 564:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 566:	1b bd       	out	0x2b, r17	; 43
 568:	0a bd       	out	0x2a, r16	; 42
 56a:	2f e7       	ldi	r18, 0x7F	; 127
 56c:	88 e3       	ldi	r24, 0x38	; 56
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	21 50       	subi	r18, 0x01	; 1
 572:	80 40       	sbci	r24, 0x00	; 0
 574:	90 40       	sbci	r25, 0x00	; 0
 576:	e1 f7       	brne	.-8      	; 0x570 <turn_left+0x60>
 578:	00 c0       	rjmp	.+0      	; 0x57a <turn_left+0x6a>
 57a:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 57c:	d9 bd       	out	0x29, r29	; 41
 57e:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 580:	db bd       	out	0x2b, r29	; 43
 582:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_R(speed);
	set_speed_L(speed + 300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	08 95       	ret

0000058e <turn_right>:

void turn_right(uint16_t speed)
{
 58e:	0f 93       	push	r16
 590:	1f 93       	push	r17
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	ec 01       	movw	r28, r24
	right_rotate();
 598:	0e 94 55 00 	call	0xaa	; 0xaa <right_rotate>
	set_speed_R(speed + 300); //40
 59c:	8e 01       	movw	r16, r28
 59e:	04 5d       	subi	r16, 0xD4	; 212
 5a0:	1e 4f       	sbci	r17, 0xFE	; 254
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 5a2:	19 bd       	out	0x29, r17	; 41
 5a4:	08 bd       	out	0x28, r16	; 40
 5a6:	2f e7       	ldi	r18, 0x7F	; 127
 5a8:	88 e3       	ldi	r24, 0x38	; 56
 5aa:	91 e0       	ldi	r25, 0x01	; 1
 5ac:	21 50       	subi	r18, 0x01	; 1
 5ae:	80 40       	sbci	r24, 0x00	; 0
 5b0:	90 40       	sbci	r25, 0x00	; 0
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <turn_right+0x1e>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <turn_right+0x28>
 5b6:	00 00       	nop
void turn_right(uint16_t speed)
{
	right_rotate();
	set_speed_R(speed + 300); //40
	_delay_ms(50);
	set_speed_L(speed-50); //-50
 5b8:	ce 01       	movw	r24, r28
 5ba:	c2 97       	sbiw	r24, 0x32	; 50
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 5bc:	9b bd       	out	0x2b, r25	; 43
 5be:	8a bd       	out	0x2a, r24	; 42
{
	right_rotate();
	set_speed_R(speed + 300); //40
	_delay_ms(50);
	set_speed_L(speed-50); //-50
	set_speed_R(speed+30);
 5c0:	80 5b       	subi	r24, 0xB0	; 176
 5c2:	9f 4f       	sbci	r25, 0xFF	; 255
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 5c4:	99 bd       	out	0x29, r25	; 41
 5c6:	88 bd       	out	0x28, r24	; 40
	set_speed_R(speed + 300); //40
	_delay_ms(50);
	set_speed_L(speed-50); //-50
	set_speed_R(speed+30);
	//_delay_ms(100);
	while((sensor_data() & (3<<1)) != (3<<1));
 5c8:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 5cc:	86 70       	andi	r24, 0x06	; 6
 5ce:	86 30       	cpi	r24, 0x06	; 6
 5d0:	d9 f7       	brne	.-10     	; 0x5c8 <turn_right+0x3a>
	while((sensor_data() & (3<<2)) != (3<<2));
 5d2:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 5d6:	8c 70       	andi	r24, 0x0C	; 12
 5d8:	8c 30       	cpi	r24, 0x0C	; 12
 5da:	d9 f7       	brne	.-10     	; 0x5d2 <turn_right+0x44>
	//while((sensor_data() & (3<<3)) != (3<<3));
	//while(sensor_data() != (3<<3));
	go_forward();
 5dc:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 5e0:	db bd       	out	0x2b, r29	; 43
 5e2:	ca bd       	out	0x2a, r28	; 42
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 5e4:	19 bd       	out	0x29, r17	; 41
 5e6:	08 bd       	out	0x28, r16	; 40
 5e8:	2f e7       	ldi	r18, 0x7F	; 127
 5ea:	88 e3       	ldi	r24, 0x38	; 56
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	21 50       	subi	r18, 0x01	; 1
 5f0:	80 40       	sbci	r24, 0x00	; 0
 5f2:	90 40       	sbci	r25, 0x00	; 0
 5f4:	e1 f7       	brne	.-8      	; 0x5ee <turn_right+0x60>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <turn_right+0x6a>
 5f8:	00 00       	nop
 5fa:	d9 bd       	out	0x29, r29	; 41
 5fc:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 5fe:	db bd       	out	0x2b, r29	; 43
 600:	ca bd       	out	0x2a, r28	; 42
	go_forward();
	set_speed_L(speed);
	set_speed_R(speed + 300);
	_delay_ms(50);
	set_speed_RL(speed);
}
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	1f 91       	pop	r17
 608:	0f 91       	pop	r16
 60a:	08 95       	ret

0000060c <left_operation>:

void left_operation(uint16_t speed)
{

	turn_left(speed);
 60c:	0e 94 88 02 	call	0x510	; 0x510 <turn_left>
	directions_solved[node_number] = 'l';
 610:	80 91 18 01 	lds	r24, 0x0118
 614:	90 91 19 01 	lds	r25, 0x0119
 618:	fc 01       	movw	r30, r24
 61a:	e6 5e       	subi	r30, 0xE6	; 230
 61c:	fe 4f       	sbci	r31, 0xFE	; 254
 61e:	2c e6       	ldi	r18, 0x6C	; 108
 620:	20 83       	st	Z, r18
	node_number = node_number + 1;
 622:	01 96       	adiw	r24, 0x01	; 1
 624:	90 93 19 01 	sts	0x0119, r25
 628:	80 93 18 01 	sts	0x0118, r24
	usart_putchar('l');
 62c:	8c e6       	ldi	r24, 0x6C	; 108
 62e:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
 632:	08 95       	ret

00000634 <right_operation>:
}

void right_operation(uint16_t speed)
{
	turn_right(speed);
 634:	0e 94 c7 02 	call	0x58e	; 0x58e <turn_right>
	directions_solved[node_number] = 'r';
 638:	80 91 18 01 	lds	r24, 0x0118
 63c:	90 91 19 01 	lds	r25, 0x0119
 640:	fc 01       	movw	r30, r24
 642:	e6 5e       	subi	r30, 0xE6	; 230
 644:	fe 4f       	sbci	r31, 0xFE	; 254
 646:	22 e7       	ldi	r18, 0x72	; 114
 648:	20 83       	st	Z, r18
	node_number = node_number + 1;
 64a:	01 96       	adiw	r24, 0x01	; 1
 64c:	90 93 19 01 	sts	0x0119, r25
 650:	80 93 18 01 	sts	0x0118, r24
	usart_putchar('r');
 654:	82 e7       	ldi	r24, 0x72	; 114
 656:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
 65a:	08 95       	ret

0000065c <left_forward_operation>:
}

void left_forward_operation(uint16_t speed)
{
	turn_left(speed);
 65c:	0e 94 88 02 	call	0x510	; 0x510 <turn_left>
	directions_solved[node_number] = 'l';
 660:	80 91 18 01 	lds	r24, 0x0118
 664:	90 91 19 01 	lds	r25, 0x0119
 668:	fc 01       	movw	r30, r24
 66a:	e6 5e       	subi	r30, 0xE6	; 230
 66c:	fe 4f       	sbci	r31, 0xFE	; 254
 66e:	2c e6       	ldi	r18, 0x6C	; 108
 670:	20 83       	st	Z, r18
	node_number = node_number + 1;
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	90 93 19 01 	sts	0x0119, r25
 678:	80 93 18 01 	sts	0x0118, r24
	usart_putchar('l');
 67c:	8c e6       	ldi	r24, 0x6C	; 108
 67e:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
 682:	08 95       	ret

00000684 <right_forward_operation>:
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 684:	99 bd       	out	0x29, r25	; 41
 686:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 688:	9b bd       	out	0x2b, r25	; 43
 68a:	8a bd       	out	0x2a, r24	; 42
}

void right_forward_operation(uint16_t speed)
{
	set_speed_RL(speed);
	go_forward();
 68c:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
	directions_solved[node_number] = 's';
 690:	80 91 18 01 	lds	r24, 0x0118
 694:	90 91 19 01 	lds	r25, 0x0119
 698:	fc 01       	movw	r30, r24
 69a:	e6 5e       	subi	r30, 0xE6	; 230
 69c:	fe 4f       	sbci	r31, 0xFE	; 254
 69e:	23 e7       	ldi	r18, 0x73	; 115
 6a0:	20 83       	st	Z, r18
	node_number = node_number + 1;
 6a2:	01 96       	adiw	r24, 0x01	; 1
 6a4:	90 93 19 01 	sts	0x0119, r25
 6a8:	80 93 18 01 	sts	0x0118, r24
	usart_putchar('s');
 6ac:	83 e7       	ldi	r24, 0x73	; 115
 6ae:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
 6b2:	08 95       	ret

000006b4 <left_right_operation>:
}

void left_right_operation(uint16_t speed)
{
	turn_left(speed);
 6b4:	0e 94 88 02 	call	0x510	; 0x510 <turn_left>
	directions_solved[node_number] = 'l';
 6b8:	80 91 18 01 	lds	r24, 0x0118
 6bc:	90 91 19 01 	lds	r25, 0x0119
 6c0:	fc 01       	movw	r30, r24
 6c2:	e6 5e       	subi	r30, 0xE6	; 230
 6c4:	fe 4f       	sbci	r31, 0xFE	; 254
 6c6:	2c e6       	ldi	r18, 0x6C	; 108
 6c8:	20 83       	st	Z, r18
	node_number = node_number + 1;
 6ca:	01 96       	adiw	r24, 0x01	; 1
 6cc:	90 93 19 01 	sts	0x0119, r25
 6d0:	80 93 18 01 	sts	0x0118, r24
	usart_putchar('l');
 6d4:	8c e6       	ldi	r24, 0x6C	; 108
 6d6:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
 6da:	08 95       	ret

000006dc <left_right_forward_operation>:
}

void left_right_forward_operation(uint16_t speed)
{
	turn_left(speed);
 6dc:	0e 94 88 02 	call	0x510	; 0x510 <turn_left>
	directions_solved[node_number] = 'l';
 6e0:	80 91 18 01 	lds	r24, 0x0118
 6e4:	90 91 19 01 	lds	r25, 0x0119
 6e8:	fc 01       	movw	r30, r24
 6ea:	e6 5e       	subi	r30, 0xE6	; 230
 6ec:	fe 4f       	sbci	r31, 0xFE	; 254
 6ee:	2c e6       	ldi	r18, 0x6C	; 108
 6f0:	20 83       	st	Z, r18
	node_number = node_number + 1;
 6f2:	01 96       	adiw	r24, 0x01	; 1
 6f4:	90 93 19 01 	sts	0x0119, r25
 6f8:	80 93 18 01 	sts	0x0118, r24
	usart_putchar('l');
 6fc:	8c e6       	ldi	r24, 0x6C	; 108
 6fe:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
 702:	08 95       	ret

00000704 <reverse_operation>:
}

void reverse_operation(uint16_t speed)
{
	turn_U(speed);
 704:	0e 94 96 01 	call	0x32c	; 0x32c <turn_U>
	directions_solved[node_number] = 'u';
 708:	80 91 18 01 	lds	r24, 0x0118
 70c:	90 91 19 01 	lds	r25, 0x0119
 710:	fc 01       	movw	r30, r24
 712:	e6 5e       	subi	r30, 0xE6	; 230
 714:	fe 4f       	sbci	r31, 0xFE	; 254
 716:	25 e7       	ldi	r18, 0x75	; 117
 718:	20 83       	st	Z, r18
	node_number = node_number + 1;
 71a:	01 96       	adiw	r24, 0x01	; 1
 71c:	90 93 19 01 	sts	0x0119, r25
 720:	80 93 18 01 	sts	0x0118, r24
	usart_putchar('u');
 724:	85 e7       	ldi	r24, 0x75	; 117
 726:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
 72a:	08 95       	ret

0000072c <destination_operation>:
}

void destination_operation(uint16_t speed)
{
	directions_solved[node_number] = '\0';
 72c:	e0 91 18 01 	lds	r30, 0x0118
 730:	f0 91 19 01 	lds	r31, 0x0119
 734:	e6 5e       	subi	r30, 0xE6	; 230
 736:	fe 4f       	sbci	r31, 0xFE	; 254
 738:	10 82       	st	Z, r1
	turn_U_destination(speed);
 73a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <turn_U_destination>
	usart_putchar('e');
 73e:	85 e6       	ldi	r24, 0x65	; 101
 740:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
 744:	08 95       	ret

00000746 <evaluate_direction>:
}


void evaluate_direction(char dir,uint16_t speed)
{
 746:	1f 93       	push	r17
 748:	cf 93       	push	r28
 74a:	df 93       	push	r29
 74c:	eb 01       	movw	r28, r22
	if (Time_x2ms >= min_up_time)
 74e:	40 91 16 01 	lds	r20, 0x0116
 752:	50 91 17 01 	lds	r21, 0x0117
 756:	20 91 60 00 	lds	r18, 0x0060
 75a:	30 91 61 00 	lds	r19, 0x0061
 75e:	42 17       	cp	r20, r18
 760:	53 07       	cpc	r21, r19
 762:	b0 f1       	brcs	.+108    	; 0x7d0 <evaluate_direction+0x8a>
	{
		char evaluation = 0;
		evaluation = directions_solved[node_number];
 764:	20 91 18 01 	lds	r18, 0x0118
 768:	30 91 19 01 	lds	r19, 0x0119
 76c:	f9 01       	movw	r30, r18
 76e:	e6 5e       	subi	r30, 0xE6	; 230
 770:	fe 4f       	sbci	r31, 0xFE	; 254
 772:	10 81       	ld	r17, Z
		node_number = node_number + 1;
 774:	2f 5f       	subi	r18, 0xFF	; 255
 776:	3f 4f       	sbci	r19, 0xFF	; 255
 778:	30 93 19 01 	sts	0x0119, r19
 77c:	20 93 18 01 	sts	0x0118, r18
		
		usart_putchar(evaluation);
 780:	81 2f       	mov	r24, r17
 782:	0e 94 93 00 	call	0x126	; 0x126 <usart_putchar>
		
		if (evaluation == 's')
 786:	13 37       	cpi	r17, 0x73	; 115
 788:	39 f4       	brne	.+14     	; 0x798 <evaluate_direction+0x52>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 78a:	d9 bd       	out	0x29, r29	; 41
 78c:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 78e:	db bd       	out	0x2b, r29	; 43
 790:	ca bd       	out	0x2a, r28	; 42
		usart_putchar(evaluation);
		
		if (evaluation == 's')
		{
			set_speed_RL(speed);
			go_forward();
 792:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
 796:	18 c0       	rjmp	.+48     	; 0x7c8 <evaluate_direction+0x82>
		}
		else if (evaluation == 'u')
 798:	15 37       	cpi	r17, 0x75	; 117
 79a:	21 f4       	brne	.+8      	; 0x7a4 <evaluate_direction+0x5e>
		{
			turn_U(speed);
 79c:	ce 01       	movw	r24, r28
 79e:	0e 94 96 01 	call	0x32c	; 0x32c <turn_U>
 7a2:	12 c0       	rjmp	.+36     	; 0x7c8 <evaluate_direction+0x82>
		}
		else if (evaluation == 'l')
 7a4:	1c 36       	cpi	r17, 0x6C	; 108
 7a6:	21 f4       	brne	.+8      	; 0x7b0 <evaluate_direction+0x6a>
		{
			turn_left(speed);
 7a8:	ce 01       	movw	r24, r28
 7aa:	0e 94 88 02 	call	0x510	; 0x510 <turn_left>
 7ae:	0c c0       	rjmp	.+24     	; 0x7c8 <evaluate_direction+0x82>
		}
		else if (evaluation == 'r')
 7b0:	12 37       	cpi	r17, 0x72	; 114
 7b2:	21 f4       	brne	.+8      	; 0x7bc <evaluate_direction+0x76>
		{
			turn_right(speed);
 7b4:	ce 01       	movw	r24, r28
 7b6:	0e 94 c7 02 	call	0x58e	; 0x58e <turn_right>
 7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <evaluate_direction+0x82>
		}
		else
		{
			stay_stop();
 7bc:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
			usart_putstr("\r\rEnd Stuck!!!\r\r\r-------------------------------------------------------\r\r\r\r");
 7c0:	8e e9       	ldi	r24, 0x9E	; 158
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
		}
		
		Time_x2ms = 0x00;
 7c8:	10 92 17 01 	sts	0x0117, r1
 7cc:	10 92 16 01 	sts	0x0116, r1
	}
}
 7d0:	df 91       	pop	r29
 7d2:	cf 91       	pop	r28
 7d4:	1f 91       	pop	r17
 7d6:	08 95       	ret

000007d8 <main>:
{
	uint16_t speed=300, destination=0;
	uint8_t sensor_data_hold=0, Right_trigged=0, Left_trigged=0, Forward_trigged=0;//, speed_grad_count=0;
	
	//port pin initialization
	PORTA = 03;
 7d8:	83 e0       	ldi	r24, 0x03	; 3
 7da:	8b bb       	out	0x1b, r24	; 27
	DDRA = 00;
 7dc:	1a ba       	out	0x1a, r1	; 26
	PORTB=0x00;
 7de:	18 ba       	out	0x18, r1	; 24
	DDRB=0x0F;
 7e0:	9f e0       	ldi	r25, 0x0F	; 15
 7e2:	97 bb       	out	0x17, r25	; 23
	PORTC=0xFF;
 7e4:	9f ef       	ldi	r25, 0xFF	; 255
 7e6:	95 bb       	out	0x15, r25	; 21
	DDRC=0x00;
 7e8:	14 ba       	out	0x14, r1	; 20
	PORTD=0x00;
 7ea:	12 ba       	out	0x12, r1	; 18
	DDRD=0x30;
 7ec:	90 e3       	ldi	r25, 0x30	; 48
 7ee:	91 bb       	out	0x11, r25	; 17
	
	//Timer Counter0 initialization
	TCCR0=0x03; // 125k Hz at normal top 0xFF
 7f0:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
 7f2:	12 be       	out	0x32, r1	; 50
	OCR0=0x00;
 7f4:	1c be       	out	0x3c, r1	; 60
	
	//Timer Counter1 Initialization
	TCCR1A=0xA2;
 7f6:	92 ea       	ldi	r25, 0xA2	; 162
 7f8:	9f bd       	out	0x2f, r25	; 47
	TCCR1B=0x18;
 7fa:	98 e1       	ldi	r25, 0x18	; 24
 7fc:	9e bd       	out	0x2e, r25	; 46
	TCNT1=0x0000;
 7fe:	1d bc       	out	0x2d, r1	; 45
 800:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x03;
 802:	87 bd       	out	0x27, r24	; 39
	ICR1L=0xE8; //03E8=1000 in decimal
 804:	88 ee       	ldi	r24, 0xE8	; 232
 806:	86 bd       	out	0x26, r24	; 38
	OCR1A=speed;
 808:	8c e2       	ldi	r24, 0x2C	; 44
 80a:	91 e0       	ldi	r25, 0x01	; 1
 80c:	9b bd       	out	0x2b, r25	; 43
 80e:	8a bd       	out	0x2a, r24	; 42
	OCR1B=speed;
 810:	99 bd       	out	0x29, r25	; 41
 812:	88 bd       	out	0x28, r24	; 40
	
	
	//USART Initialization
	usart_init(9600); 
 814:	60 e8       	ldi	r22, 0x80	; 128
 816:	75 e2       	ldi	r23, 0x25	; 37
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 94 66 00 	call	0xcc	; 0xcc <usart_init>
	usart_putstr("\rI am ready!!\r");
 820:	8b ee       	ldi	r24, 0xEB	; 235
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
	
	
	// Timer Interrupt Mask register settings
	TIMSK=0x01;
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	89 bf       	out	0x39, r24	; 57
	sei();//global interrupt enable
 82c:	78 94       	sei
	
	
	//start_tour:
	while (PINA & (1<<PA0));
 82e:	c8 99       	sbic	0x19, 0	; 25
 830:	fe cf       	rjmp	.-4      	; 0x82e <main+0x56>
	usart_putstr("start tour :)\r\rStuck Data: ");
 832:	8a ef       	ldi	r24, 0xFA	; 250
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	0e 94 97 00 	call	0x12e	; 0x12e <usart_putstr>
 83a:	2f ef       	ldi	r18, 0xFF	; 255
 83c:	84 e3       	ldi	r24, 0x34	; 52
 83e:	9c e0       	ldi	r25, 0x0C	; 12
 840:	21 50       	subi	r18, 0x01	; 1
 842:	80 40       	sbci	r24, 0x00	; 0
 844:	90 40       	sbci	r25, 0x00	; 0
 846:	e1 f7       	brne	.-8      	; 0x840 <main+0x68>
 848:	00 c0       	rjmp	.+0      	; 0x84a <main+0x72>
 84a:	00 00       	nop
	_delay_ms(500);
	go_forward();
 84c:	0e 94 49 00 	call	0x92	; 0x92 <go_forward>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 850:	84 ef       	ldi	r24, 0xF4	; 244
 852:	91 e0       	ldi	r25, 0x01	; 1
 854:	99 bd       	out	0x29, r25	; 41
 856:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 858:	9b bd       	out	0x2b, r25	; 43
 85a:	8a bd       	out	0x2a, r24	; 42
 85c:	2f ef       	ldi	r18, 0xFF	; 255
 85e:	86 e7       	ldi	r24, 0x76	; 118
 860:	91 e0       	ldi	r25, 0x01	; 1
 862:	21 50       	subi	r18, 0x01	; 1
 864:	80 40       	sbci	r24, 0x00	; 0
 866:	90 40       	sbci	r25, 0x00	; 0
 868:	e1 f7       	brne	.-8      	; 0x862 <__stack+0x3>
 86a:	00 c0       	rjmp	.+0      	; 0x86c <__stack+0xd>
 86c:	00 00       	nop
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 86e:	8c e2       	ldi	r24, 0x2C	; 44
 870:	91 e0       	ldi	r25, 0x01	; 1
 872:	99 bd       	out	0x29, r25	; 41
 874:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 876:	9b bd       	out	0x2b, r25	; 43
 878:	8a bd       	out	0x2a, r24	; 42
	_delay_ms(500);
	go_forward();
	set_speed_RL(speed+200);
	_delay_ms(60);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
 87a:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 87e:	82 74       	andi	r24, 0x42	; 66
	while ((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 880:	21 f0       	breq	.+8      	; 0x88a <__stack+0x2b>
	{
		sensor_data_hold = sensor_data();
 882:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 886:	82 74       	andi	r24, 0x42	; 66
	go_forward();
	set_speed_RL(speed+200);
	_delay_ms(60);
	set_speed_RL(speed);
	sensor_data_hold = sensor_data();
	while ((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1)))
 888:	e1 f7       	brne	.-8      	; 0x882 <__stack+0x23>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 88a:	81 2c       	mov	r8, r1
 88c:	71 2c       	mov	r7, r1
 88e:	c1 2c       	mov	r12, r1
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 890:	0f 2e       	mov	r0, r31
 892:	f6 e9       	ldi	r31, 0x96	; 150
 894:	ef 2e       	mov	r14, r31
 896:	f1 2c       	mov	r15, r1
 898:	f0 2d       	mov	r31, r0
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 89a:	cc e2       	ldi	r28, 0x2C	; 44
 89c:	d1 e0       	ldi	r29, 0x01	; 1
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 89e:	61 2c       	mov	r6, r1
 8a0:	91 2c       	mov	r9, r1
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 8a2:	bb 24       	eor	r11, r11
 8a4:	b3 94       	inc	r11
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 8a6:	d1 2c       	mov	r13, r1
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 8a8:	ab 2c       	mov	r10, r11
 8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <__stack+0x53>
 8ac:	c1 2e       	mov	r12, r17
 8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <__stack+0x53>
 8b0:	71 2e       	mov	r7, r17
	// main while loop is started from here **********************************************************************************
	//************************************************************************************************************************	
    while(1)  //while loop 1
    {

		sensor_data_hold = sensor_data();  //normally read
 8b2:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
		
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
 8b6:	98 2f       	mov	r25, r24
 8b8:	98 71       	andi	r25, 0x18	; 24
 8ba:	98 31       	cpi	r25, 0x18	; 24
 8bc:	29 f4       	brne	.+10     	; 0x8c8 <__stack+0x69>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 8be:	d9 bd       	out	0x29, r29	; 41
 8c0:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 8c2:	db bd       	out	0x2b, r29	; 43
 8c4:	ca bd       	out	0x2a, r28	; 42
 8c6:	09 c0       	rjmp	.+18     	; 0x8da <__stack+0x7b>
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
		{
			set_speed_RL(speed);
		}
		else if (sensor_data_hold & 0b00001000)
 8c8:	83 ff       	sbrs	r24, 3
 8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <__stack+0x73>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 8cc:	f9 bc       	out	0x29, r15	; 41
 8ce:	e8 bc       	out	0x28, r14	; 40
 8d0:	04 c0       	rjmp	.+8      	; 0x8da <__stack+0x7b>
		}
		else if (sensor_data_hold & 0b00001000)
		{
			set_speed_R(speed - 150);  //previously 150
		}
		else if (sensor_data_hold & 0b00010000)
 8d2:	84 ff       	sbrs	r24, 4
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <__stack+0x7b>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 8d6:	fb bc       	out	0x2b, r15	; 43
 8d8:	ea bc       	out	0x2a, r14	; 42
			set_speed_L(speed - 150);  //previously 150
		}
		// end line follow
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
 8da:	98 2f       	mov	r25, r24
 8dc:	90 7f       	andi	r25, 0xF0	; 240
 8de:	90 3f       	cpi	r25, 0xF0	; 240
 8e0:	09 f0       	breq	.+2      	; 0x8e4 <__stack+0x85>
 8e2:	53 c0       	rjmp	.+166    	; 0x98a <__stack+0x12b>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 8e4:	d9 bd       	out	0x29, r29	; 41
 8e6:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 8e8:	db bd       	out	0x2b, r29	; 43
 8ea:	ca bd       	out	0x2a, r28	; 42
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
 8ec:	06 2d       	mov	r16, r6
 8ee:	19 2d       	mov	r17, r9
 8f0:	17 c0       	rjmp	.+46     	; 0x920 <__stack+0xc1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8f2:	25 e8       	ldi	r18, 0x85	; 133
 8f4:	2a 95       	dec	r18
 8f6:	f1 f7       	brne	.-4      	; 0x8f4 <__stack+0x95>
 8f8:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 8fa:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
				if (sensor_data_hold & (1<<1))
 8fe:	81 fd       	sbrc	r24, 1
				{
					Right_trigged=1;
 900:	ca 2c       	mov	r12, r10
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 902:	98 2f       	mov	r25, r24
 904:	9e 77       	andi	r25, 0x7E	; 126
 906:	9e 37       	cpi	r25, 0x7E	; 126
 908:	59 f4       	brne	.+22     	; 0x920 <__stack+0xc1>
				{
					destination = destination + 1;
 90a:	0f 5f       	subi	r16, 0xFF	; 255
 90c:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 7000)   // destination triggering
 90e:	09 35       	cpi	r16, 0x59	; 89
 910:	9b e1       	ldi	r25, 0x1B	; 27
 912:	19 07       	cpc	r17, r25
 914:	28 f0       	brcs	.+10     	; 0x920 <__stack+0xc1>
					{
						destination = 0x00;
						destination_operation(speed);
 916:	8c e2       	ldi	r24, 0x2C	; 44
 918:	91 e0       	ldi	r25, 0x01	; 1
 91a:	0e 94 96 03 	call	0x72c	; 0x72c <destination_operation>
						//while (PINA & (1<<PA0));
						goto solv_maze;
 91e:	94 c0       	rjmp	.+296    	; 0xa48 <__stack+0x1e9>
 920:	82 74       	andi	r24, 0x42	; 66
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 922:	39 f7       	brne	.-50     	; 0x8f2 <__stack+0x93>
 924:	1c 2d       	mov	r17, r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 926:	2f ef       	ldi	r18, 0xFF	; 255
 928:	80 e7       	ldi	r24, 0x70	; 112
 92a:	92 e0       	ldi	r25, 0x02	; 2
 92c:	21 50       	subi	r18, 0x01	; 1
 92e:	80 40       	sbci	r24, 0x00	; 0
 930:	90 40       	sbci	r25, 0x00	; 0
 932:	e1 f7       	brne	.-8      	; 0x92c <__stack+0xcd>
 934:	00 c0       	rjmp	.+0      	; 0x936 <__stack+0xd7>
 936:	00 00       	nop
					}
				}
				
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 938:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 93c:	8e 77       	andi	r24, 0x7E	; 126
 93e:	09 f0       	breq	.+2      	; 0x942 <__stack+0xe3>
 940:	97 c1       	rjmp	.+814    	; 0xc70 <__stack+0x411>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
 942:	c1 10       	cpse	r12, r1
 944:	0f c0       	rjmp	.+30     	; 0x964 <__stack+0x105>
 946:	81 10       	cpse	r8, r1
 948:	04 c0       	rjmp	.+8      	; 0x952 <__stack+0xf3>
			{
				left_operation(speed);
 94a:	ce 01       	movw	r24, r28
 94c:	0e 94 06 03 	call	0x60c	; 0x60c <left_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
 950:	b0 cf       	rjmp	.-160    	; 0x8b2 <__stack+0x53>
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 952:	21 e0       	ldi	r18, 0x01	; 1
 954:	82 12       	cpse	r8, r18
 956:	ad cf       	rjmp	.-166    	; 0x8b2 <__stack+0x53>
			{
				left_forward_operation(speed);
 958:	ce 01       	movw	r24, r28
 95a:	0e 94 2e 03 	call	0x65c	; 0x65c <left_forward_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
 95e:	8d 2c       	mov	r8, r13
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
			{
				left_forward_operation(speed);
				Right_trigged = 0;
 960:	cd 2c       	mov	r12, r13
				Forward_trigged = 0;
 962:	a7 cf       	rjmp	.-178    	; 0x8b2 <__stack+0x53>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 964:	11 30       	cpi	r17, 0x01	; 1
 966:	09 f0       	breq	.+2      	; 0x96a <__stack+0x10b>
 968:	a4 cf       	rjmp	.-184    	; 0x8b2 <__stack+0x53>
 96a:	81 10       	cpse	r8, r1
 96c:	05 c0       	rjmp	.+10     	; 0x978 <__stack+0x119>
			{
				left_right_operation(speed);
 96e:	ce 01       	movw	r24, r28
 970:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <left_right_operation>
				Right_trigged = 0;
 974:	cd 2c       	mov	r12, r13
				Forward_trigged = 0;
 976:	9d cf       	rjmp	.-198    	; 0x8b2 <__stack+0x53>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	88 12       	cpse	r8, r24
 97c:	97 cf       	rjmp	.-210    	; 0x8ac <__stack+0x4d>
			{
				left_right_forward_operation(speed);
 97e:	ce 01       	movw	r24, r28
 980:	0e 94 6e 03 	call	0x6dc	; 0x6dc <left_right_forward_operation>
				Right_trigged = 0;
				Forward_trigged = 0;
 984:	8d 2c       	mov	r8, r13
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Right_trigged = 0;
 986:	cd 2c       	mov	r12, r13
 988:	94 cf       	rjmp	.-216    	; 0x8b2 <__stack+0x53>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
 98a:	98 2f       	mov	r25, r24
 98c:	9f 70       	andi	r25, 0x0F	; 15
 98e:	9f 30       	cpi	r25, 0x0F	; 15
 990:	09 f0       	breq	.+2      	; 0x994 <__stack+0x135>
 992:	53 c0       	rjmp	.+166    	; 0xa3a <__stack+0x1db>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 994:	d9 bd       	out	0x29, r29	; 41
 996:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 998:	db bd       	out	0x2b, r29	; 43
 99a:	ca bd       	out	0x2a, r28	; 42
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 99c:	06 2d       	mov	r16, r6
 99e:	19 2d       	mov	r17, r9
 9a0:	17 c0       	rjmp	.+46     	; 0x9d0 <__stack+0x171>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9a2:	95 e8       	ldi	r25, 0x85	; 133
 9a4:	9a 95       	dec	r25
 9a6:	f1 f7       	brne	.-4      	; 0x9a4 <__stack+0x145>
 9a8:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 9aa:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
				if (sensor_data_hold & (1<<6))  // must change for 8 system
 9ae:	86 fd       	sbrc	r24, 6
				{
					Left_trigged=1;
 9b0:	7a 2c       	mov	r7, r10
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 9b2:	98 2f       	mov	r25, r24
 9b4:	9e 77       	andi	r25, 0x7E	; 126
 9b6:	9e 37       	cpi	r25, 0x7E	; 126
 9b8:	59 f4       	brne	.+22     	; 0x9d0 <__stack+0x171>
				{
					destination = destination + 1;
 9ba:	0f 5f       	subi	r16, 0xFF	; 255
 9bc:	1f 4f       	sbci	r17, 0xFF	; 255
					if (destination > 7000)   // destination triggering
 9be:	09 35       	cpi	r16, 0x59	; 89
 9c0:	2b e1       	ldi	r18, 0x1B	; 27
 9c2:	12 07       	cpc	r17, r18
 9c4:	28 f0       	brcs	.+10     	; 0x9d0 <__stack+0x171>
					{
						destination = 0x00;
						destination_operation(speed);
 9c6:	8c e2       	ldi	r24, 0x2C	; 44
 9c8:	91 e0       	ldi	r25, 0x01	; 1
 9ca:	0e 94 96 03 	call	0x72c	; 0x72c <destination_operation>
						//while (PINA & (1<<PA0));
						goto solv_maze;
 9ce:	3c c0       	rjmp	.+120    	; 0xa48 <__stack+0x1e9>
 9d0:	82 74       	andi	r24, 0x42	; 66
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 9d2:	39 f7       	brne	.-50     	; 0x9a2 <__stack+0x143>
 9d4:	17 2d       	mov	r17, r7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9d6:	8f ef       	ldi	r24, 0xFF	; 255
 9d8:	90 e7       	ldi	r25, 0x70	; 112
 9da:	22 e0       	ldi	r18, 0x02	; 2
 9dc:	81 50       	subi	r24, 0x01	; 1
 9de:	90 40       	sbci	r25, 0x00	; 0
 9e0:	20 40       	sbci	r18, 0x00	; 0
 9e2:	e1 f7       	brne	.-8      	; 0x9dc <__stack+0x17d>
 9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <__stack+0x187>
 9e6:	00 00       	nop
						//goto start_test_operation;
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 9e8:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 9ec:	8e 77       	andi	r24, 0x7E	; 126
 9ee:	09 f0       	breq	.+2      	; 0x9f2 <__stack+0x193>
 9f0:	43 c1       	rjmp	.+646    	; 0xc78 <__stack+0x419>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
 9f2:	71 10       	cpse	r7, r1
 9f4:	0f c0       	rjmp	.+30     	; 0xa14 <__stack+0x1b5>
 9f6:	81 10       	cpse	r8, r1
 9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__stack+0x1a3>
			{
				right_operation(speed);
 9fa:	ce 01       	movw	r24, r28
 9fc:	0e 94 1a 03 	call	0x634	; 0x634 <right_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
 a00:	58 cf       	rjmp	.-336    	; 0x8b2 <__stack+0x53>
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	88 12       	cpse	r8, r24
 a06:	55 cf       	rjmp	.-342    	; 0x8b2 <__stack+0x53>
			{
				right_forward_operation(speed);
 a08:	ce 01       	movw	r24, r28
 a0a:	0e 94 42 03 	call	0x684	; 0x684 <right_forward_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
 a0e:	8d 2c       	mov	r8, r13
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
			{
				right_forward_operation(speed);
				Left_trigged = 0;
 a10:	7d 2c       	mov	r7, r13
				Forward_trigged = 0;
 a12:	4f cf       	rjmp	.-354    	; 0x8b2 <__stack+0x53>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 a14:	11 30       	cpi	r17, 0x01	; 1
 a16:	09 f0       	breq	.+2      	; 0xa1a <__stack+0x1bb>
 a18:	4c cf       	rjmp	.-360    	; 0x8b2 <__stack+0x53>
 a1a:	81 10       	cpse	r8, r1
 a1c:	05 c0       	rjmp	.+10     	; 0xa28 <__stack+0x1c9>
			{
				left_right_operation(speed);
 a1e:	ce 01       	movw	r24, r28
 a20:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <left_right_operation>
				Left_trigged = 0;
 a24:	7d 2c       	mov	r7, r13
				Forward_trigged = 0;
 a26:	45 cf       	rjmp	.-374    	; 0x8b2 <__stack+0x53>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
 a28:	91 e0       	ldi	r25, 0x01	; 1
 a2a:	89 12       	cpse	r8, r25
 a2c:	41 cf       	rjmp	.-382    	; 0x8b0 <__stack+0x51>
			{
				left_right_forward_operation(speed);
 a2e:	ce 01       	movw	r24, r28
 a30:	0e 94 6e 03 	call	0x6dc	; 0x6dc <left_right_forward_operation>
				Left_trigged = 0;
				Forward_trigged = 0;
 a34:	8d 2c       	mov	r8, r13
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				left_right_forward_operation(speed);
				Left_trigged = 0;
 a36:	7d 2c       	mov	r7, r13
 a38:	3c cf       	rjmp	.-392    	; 0x8b2 <__stack+0x53>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
 a3a:	8e 77       	andi	r24, 0x7E	; 126
 a3c:	09 f0       	breq	.+2      	; 0xa40 <__stack+0x1e1>
 a3e:	39 cf       	rjmp	.-398    	; 0x8b2 <__stack+0x53>
		{
			reverse_operation(speed);
 a40:	ce 01       	movw	r24, r28
 a42:	0e 94 82 03 	call	0x704	; 0x704 <reverse_operation>
 a46:	35 cf       	rjmp	.-406    	; 0x8b2 <__stack+0x53>
//********* Solving the maze from here *********************************************************************
//**********************************************************************************************************

solv_maze:

	node_number = 0x00;
 a48:	10 92 19 01 	sts	0x0119, r1
 a4c:	10 92 18 01 	sts	0x0118, r1

	sensor_data_hold = sensor_data();  //normally read
 a50:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>

	// start line follow
	if ((sensor_data_hold & (3<<3)) == (3<<3))
 a54:	98 2f       	mov	r25, r24
 a56:	98 71       	andi	r25, 0x18	; 24
 a58:	98 31       	cpi	r25, 0x18	; 24
 a5a:	39 f4       	brne	.+14     	; 0xa6a <__stack+0x20b>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 a5c:	8c e2       	ldi	r24, 0x2C	; 44
 a5e:	91 e0       	ldi	r25, 0x01	; 1
 a60:	99 bd       	out	0x29, r25	; 41
 a62:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 a64:	9b bd       	out	0x2b, r25	; 43
 a66:	8a bd       	out	0x2a, r24	; 42
 a68:	0e c0       	rjmp	.+28     	; 0xa86 <__stack+0x227>
	// start line follow
	if ((sensor_data_hold & (3<<3)) == (3<<3))
	{
		set_speed_RL(speed);
	}
	else if (sensor_data_hold & 0b00001111)
 a6a:	98 2f       	mov	r25, r24
 a6c:	9f 70       	andi	r25, 0x0F	; 15
 a6e:	29 f0       	breq	.+10     	; 0xa7a <__stack+0x21b>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 a70:	84 e6       	ldi	r24, 0x64	; 100
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	99 bd       	out	0x29, r25	; 41
 a76:	88 bd       	out	0x28, r24	; 40
 a78:	06 c0       	rjmp	.+12     	; 0xa86 <__stack+0x227>
	}
	else if (sensor_data_hold & 0b00001111)
	{
		set_speed_R(speed - 200);  //previously 150
	}
	else if (sensor_data_hold & 0b11110000)
 a7a:	80 7f       	andi	r24, 0xF0	; 240
 a7c:	21 f0       	breq	.+8      	; 0xa86 <__stack+0x227>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 a7e:	84 e6       	ldi	r24, 0x64	; 100
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	9b bd       	out	0x2b, r25	; 43
 a84:	8a bd       	out	0x2a, r24	; 42
 a86:	0f 2e       	mov	r0, r31
 a88:	f6 e9       	ldi	r31, 0x96	; 150
 a8a:	ef 2e       	mov	r14, r31
 a8c:	f1 2c       	mov	r15, r1
 a8e:	f0 2d       	mov	r31, r0
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 a90:	41 2c       	mov	r4, r1
 a92:	51 2c       	mov	r5, r1
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 a94:	33 24       	eor	r3, r3
 a96:	33 94       	inc	r3
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				evaluate_direction(6,speed);
				//left_right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 a98:	61 2c       	mov	r6, r1
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
				{
					destination = destination + 1;
					if (destination > 7000)   // destination triggering
					{
						destination = 0x00;
 a9a:	94 2c       	mov	r9, r4
 a9c:	a5 2c       	mov	r10, r5
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
				if (sensor_data_hold & (1<<6))  // must change for 8 system
				{
					Left_trigged=1;
 a9e:	b3 2c       	mov	r11, r3
 aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <__stack+0x249>
 aa2:	cc 2e       	mov	r12, r28
 aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <__stack+0x249>
 aa6:	7c 2e       	mov	r7, r28
	}
	// end line follow
	
	while(1)
	{
		sensor_data_hold = sensor_data();  //normally read
 aa8:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 aac:	18 2f       	mov	r17, r24
		
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
 aae:	88 71       	andi	r24, 0x18	; 24
 ab0:	88 31       	cpi	r24, 0x18	; 24
 ab2:	39 f4       	brne	.+14     	; 0xac2 <__stack+0x263>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 ab4:	8c e2       	ldi	r24, 0x2C	; 44
 ab6:	91 e0       	ldi	r25, 0x01	; 1
 ab8:	99 bd       	out	0x29, r25	; 41
 aba:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 abc:	9b bd       	out	0x2b, r25	; 43
 abe:	8a bd       	out	0x2a, r24	; 42
 ac0:	09 c0       	rjmp	.+18     	; 0xad4 <__stack+0x275>
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
		{
			set_speed_RL(speed);
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
 ac2:	13 ff       	sbrs	r17, 3
 ac4:	03 c0       	rjmp	.+6      	; 0xacc <__stack+0x26d>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 ac6:	f9 bc       	out	0x29, r15	; 41
 ac8:	e8 bc       	out	0x28, r14	; 40
 aca:	04 c0       	rjmp	.+8      	; 0xad4 <__stack+0x275>
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
		{
			set_speed_R(speed - 150);  //previously 150
		}
		else if ((sensor_data_hold & (1<<4)) == (1<<4))
 acc:	14 ff       	sbrs	r17, 4
 ace:	02 c0       	rjmp	.+4      	; 0xad4 <__stack+0x275>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 ad0:	fb bc       	out	0x2b, r15	; 43
 ad2:	ea bc       	out	0x2a, r14	; 42
			set_speed_L(speed - 150);  //previously 150
		}
		// end line follow
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
 ad4:	81 2f       	mov	r24, r17
 ad6:	80 7f       	andi	r24, 0xF0	; 240
 ad8:	80 3f       	cpi	r24, 0xF0	; 240
 ada:	09 f0       	breq	.+2      	; 0xade <__stack+0x27f>
 adc:	5d c0       	rjmp	.+186    	; 0xb98 <__stack+0x339>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 ade:	8c e2       	ldi	r24, 0x2C	; 44
 ae0:	91 e0       	ldi	r25, 0x01	; 1
 ae2:	99 bd       	out	0x29, r25	; 41
 ae4:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 ae6:	9b bd       	out	0x2b, r25	; 43
 ae8:	8a bd       	out	0x2a, r24	; 42
		
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
 aea:	c4 2d       	mov	r28, r4
 aec:	d5 2d       	mov	r29, r5
 aee:	16 c0       	rjmp	.+44     	; 0xb1c <__stack+0x2bd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 af0:	85 e8       	ldi	r24, 0x85	; 133
 af2:	8a 95       	dec	r24
 af4:	f1 f7       	brne	.-4      	; 0xaf2 <__stack+0x293>
 af6:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 af8:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 afc:	18 2f       	mov	r17, r24
				if (sensor_data_hold & (1<<1))
 afe:	81 fd       	sbrc	r24, 1
				{
					Right_trigged=1;
 b00:	cb 2c       	mov	r12, r11
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 b02:	81 2f       	mov	r24, r17
 b04:	8e 77       	andi	r24, 0x7E	; 126
 b06:	8e 37       	cpi	r24, 0x7E	; 126
 b08:	49 f4       	brne	.+18     	; 0xb1c <__stack+0x2bd>
				{
					destination = destination + 1;
 b0a:	21 96       	adiw	r28, 0x01	; 1
					if (destination > 7000)   // destination triggering
 b0c:	c9 35       	cpi	r28, 0x59	; 89
 b0e:	9b e1       	ldi	r25, 0x1B	; 27
 b10:	d9 07       	cpc	r29, r25
 b12:	20 f0       	brcs	.+8      	; 0xb1c <__stack+0x2bd>
					{
						destination = 0x00;
						stay_stop();
 b14:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
				{
					destination = destination + 1;
					if (destination > 7000)   // destination triggering
					{
						destination = 0x00;
 b18:	c9 2d       	mov	r28, r9
 b1a:	da 2d       	mov	r29, r10
 b1c:	81 2f       	mov	r24, r17
 b1e:	82 74       	andi	r24, 0x42	; 66
		
		if ((sensor_data_hold & 0b11110000) == 0b11110000)
		{
			set_speed_RL(speed);
			destination=0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 b20:	39 f7       	brne	.-50     	; 0xaf0 <__stack+0x291>
 b22:	cc 2d       	mov	r28, r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b24:	9f ef       	ldi	r25, 0xFF	; 255
 b26:	20 e7       	ldi	r18, 0x70	; 112
 b28:	82 e0       	ldi	r24, 0x02	; 2
 b2a:	91 50       	subi	r25, 0x01	; 1
 b2c:	20 40       	sbci	r18, 0x00	; 0
 b2e:	80 40       	sbci	r24, 0x00	; 0
 b30:	e1 f7       	brne	.-8      	; 0xb2a <__stack+0x2cb>
 b32:	00 c0       	rjmp	.+0      	; 0xb34 <__stack+0x2d5>
 b34:	00 00       	nop
					}
				}
				
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 b36:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 b3a:	8e 77       	andi	r24, 0x7E	; 126
 b3c:	09 f0       	breq	.+2      	; 0xb40 <__stack+0x2e1>
 b3e:	a0 c0       	rjmp	.+320    	; 0xc80 <__stack+0x421>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Right_trigged == 0) && (Forward_trigged == 0))
 b40:	c1 10       	cpse	r12, r1
 b42:	13 c0       	rjmp	.+38     	; 0xb6a <__stack+0x30b>
 b44:	81 10       	cpse	r8, r1
 b46:	06 c0       	rjmp	.+12     	; 0xb54 <__stack+0x2f5>
			{
				evaluate_direction(1,speed);
 b48:	6c e2       	ldi	r22, 0x2C	; 44
 b4a:	71 e0       	ldi	r23, 0x01	; 1
 b4c:	83 2d       	mov	r24, r3
 b4e:	0e 94 a3 03 	call	0x746	; 0x746 <evaluate_direction>
				//left_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
 b52:	aa cf       	rjmp	.-172    	; 0xaa8 <__stack+0x249>
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 b54:	91 e0       	ldi	r25, 0x01	; 1
 b56:	89 12       	cpse	r8, r25
 b58:	a7 cf       	rjmp	.-178    	; 0xaa8 <__stack+0x249>
			{
				evaluate_direction(4,speed);
 b5a:	6c e2       	ldi	r22, 0x2C	; 44
 b5c:	71 e0       	ldi	r23, 0x01	; 1
 b5e:	84 e0       	ldi	r24, 0x04	; 4
 b60:	0e 94 a3 03 	call	0x746	; 0x746 <evaluate_direction>
				//left_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
 b64:	86 2c       	mov	r8, r6
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
			{
				evaluate_direction(4,speed);
				//left_forward_operation(speed);
				Right_trigged = 0;
 b66:	c6 2c       	mov	r12, r6
				Forward_trigged = 0;
 b68:	9f cf       	rjmp	.-194    	; 0xaa8 <__stack+0x249>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 b6a:	c1 30       	cpi	r28, 0x01	; 1
 b6c:	09 f0       	breq	.+2      	; 0xb70 <__stack+0x311>
 b6e:	9c cf       	rjmp	.-200    	; 0xaa8 <__stack+0x249>
 b70:	81 10       	cpse	r8, r1
 b72:	07 c0       	rjmp	.+14     	; 0xb82 <__stack+0x323>
			{
				evaluate_direction(3,speed);
 b74:	6c e2       	ldi	r22, 0x2C	; 44
 b76:	71 e0       	ldi	r23, 0x01	; 1
 b78:	83 e0       	ldi	r24, 0x03	; 3
 b7a:	0e 94 a3 03 	call	0x746	; 0x746 <evaluate_direction>
				//left_right_operation(speed);
				Right_trigged = 0;
 b7e:	c6 2c       	mov	r12, r6
				Forward_trigged = 0;
 b80:	93 cf       	rjmp	.-218    	; 0xaa8 <__stack+0x249>
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
 b82:	21 e0       	ldi	r18, 0x01	; 1
 b84:	82 12       	cpse	r8, r18
 b86:	8d cf       	rjmp	.-230    	; 0xaa2 <__stack+0x243>
			{
				evaluate_direction(6,speed);
 b88:	6c e2       	ldi	r22, 0x2C	; 44
 b8a:	71 e0       	ldi	r23, 0x01	; 1
 b8c:	86 e0       	ldi	r24, 0x06	; 6
 b8e:	0e 94 a3 03 	call	0x746	; 0x746 <evaluate_direction>
				//left_right_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
 b92:	86 2c       	mov	r8, r6
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 1))
			{
				evaluate_direction(6,speed);
				//left_right_forward_operation(speed);
				Right_trigged = 0;
 b94:	c6 2c       	mov	r12, r6
 b96:	88 cf       	rjmp	.-240    	; 0xaa8 <__stack+0x249>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
 b98:	81 2f       	mov	r24, r17
 b9a:	8f 70       	andi	r24, 0x0F	; 15
 b9c:	8f 30       	cpi	r24, 0x0F	; 15
 b9e:	09 f0       	breq	.+2      	; 0xba2 <__stack+0x343>
 ba0:	5d c0       	rjmp	.+186    	; 0xc5c <__stack+0x3fd>
//   General functions are started from here  **************************************************************
//**********************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 ba2:	8c e2       	ldi	r24, 0x2C	; 44
 ba4:	91 e0       	ldi	r25, 0x01	; 1
 ba6:	99 bd       	out	0x29, r25	; 41
 ba8:	88 bd       	out	0x28, r24	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 baa:	9b bd       	out	0x2b, r25	; 43
 bac:	8a bd       	out	0x2a, r24	; 42
			}
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
 bae:	c4 2d       	mov	r28, r4
 bb0:	d5 2d       	mov	r29, r5
 bb2:	16 c0       	rjmp	.+44     	; 0xbe0 <__stack+0x381>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 bb4:	85 e8       	ldi	r24, 0x85	; 133
 bb6:	8a 95       	dec	r24
 bb8:	f1 f7       	brne	.-4      	; 0xbb6 <__stack+0x357>
 bba:	00 00       	nop
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
			{
				_delay_us(50);
				sensor_data_hold = sensor_data();
 bbc:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
 bc0:	18 2f       	mov	r17, r24
				if (sensor_data_hold & (1<<6))  // must change for 8 system
 bc2:	86 fd       	sbrc	r24, 6
				{
					Left_trigged=1;
 bc4:	7b 2c       	mov	r7, r11
				}
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
 bc6:	81 2f       	mov	r24, r17
 bc8:	8e 77       	andi	r24, 0x7E	; 126
 bca:	8e 37       	cpi	r24, 0x7E	; 126
 bcc:	49 f4       	brne	.+18     	; 0xbe0 <__stack+0x381>
				{
					destination = destination + 1;
 bce:	21 96       	adiw	r28, 0x01	; 1
					if (destination > 7000)   // destination triggering
 bd0:	c9 35       	cpi	r28, 0x59	; 89
 bd2:	9b e1       	ldi	r25, 0x1B	; 27
 bd4:	d9 07       	cpc	r29, r25
 bd6:	20 f0       	brcs	.+8      	; 0xbe0 <__stack+0x381>
					{
						destination = 0x00;
						stay_stop();
 bd8:	0e 94 61 00 	call	0xc2	; 0xc2 <stay_stop>
				if ((sensor_data_hold & 0b01111110) == 0b01111110)
				{
					destination = destination + 1;
					if (destination > 7000)   // destination triggering
					{
						destination = 0x00;
 bdc:	c9 2d       	mov	r28, r9
 bde:	da 2d       	mov	r29, r10
 be0:	81 2f       	mov	r24, r17
 be2:	82 74       	andi	r24, 0x42	; 66
		}
		else if ((sensor_data_hold & 0b00001111) == 0b00001111)
		{
			set_speed_RL(speed);
			destination = 0x00;
			while((sensor_data_hold & (1<<6)) || (sensor_data_hold & (1<<1))) // can be changed to 8 sensor system
 be4:	39 f7       	brne	.-50     	; 0xbb4 <__stack+0x355>
 be6:	c7 2d       	mov	r28, r7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 be8:	9f ef       	ldi	r25, 0xFF	; 255
 bea:	20 e7       	ldi	r18, 0x70	; 112
 bec:	82 e0       	ldi	r24, 0x02	; 2
 bee:	91 50       	subi	r25, 0x01	; 1
 bf0:	20 40       	sbci	r18, 0x00	; 0
 bf2:	80 40       	sbci	r24, 0x00	; 0
 bf4:	e1 f7       	brne	.-8      	; 0xbee <__stack+0x38f>
 bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <__stack+0x399>
 bf8:	00 00       	nop
						stay_stop();
					}
				}
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
 bfa:	0e 94 c3 00 	call	0x186	; 0x186 <sensor_data>
			if ((sensor_data_hold & 0b01111110))
 bfe:	8e 77       	andi	r24, 0x7E	; 126
 c00:	09 f0       	breq	.+2      	; 0xc04 <__stack+0x3a5>
 c02:	42 c0       	rjmp	.+132    	; 0xc88 <__stack+0x429>
			{
				Forward_trigged = 1;
			}
			//decide from probable 4 way
			if ((Left_trigged == 0) && (Forward_trigged == 0))
 c04:	71 10       	cpse	r7, r1
 c06:	13 c0       	rjmp	.+38     	; 0xc2e <__stack+0x3cf>
 c08:	81 10       	cpse	r8, r1
 c0a:	06 c0       	rjmp	.+12     	; 0xc18 <__stack+0x3b9>
			{
				evaluate_direction(2,speed);
 c0c:	6c e2       	ldi	r22, 0x2C	; 44
 c0e:	71 e0       	ldi	r23, 0x01	; 1
 c10:	82 e0       	ldi	r24, 0x02	; 2
 c12:	0e 94 a3 03 	call	0x746	; 0x746 <evaluate_direction>
				//right_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 c16:	48 cf       	rjmp	.-368    	; 0xaa8 <__stack+0x249>
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))  // this logic is fixed
 c18:	91 e0       	ldi	r25, 0x01	; 1
 c1a:	89 12       	cpse	r8, r25
 c1c:	45 cf       	rjmp	.-374    	; 0xaa8 <__stack+0x249>
			{
				evaluate_direction(5,speed);
 c1e:	6c e2       	ldi	r22, 0x2C	; 44
 c20:	71 e0       	ldi	r23, 0x01	; 1
 c22:	85 e0       	ldi	r24, 0x05	; 5
 c24:	0e 94 a3 03 	call	0x746	; 0x746 <evaluate_direction>
				//right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 c28:	86 2c       	mov	r8, r6
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))  // this logic is fixed
			{
				evaluate_direction(5,speed);
				//right_forward_operation(speed);
				Left_trigged = 0;
 c2a:	76 2c       	mov	r7, r6
				Forward_trigged = 0;
 c2c:	3d cf       	rjmp	.-390    	; 0xaa8 <__stack+0x249>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 c2e:	c1 30       	cpi	r28, 0x01	; 1
 c30:	09 f0       	breq	.+2      	; 0xc34 <__stack+0x3d5>
 c32:	3a cf       	rjmp	.-396    	; 0xaa8 <__stack+0x249>
 c34:	81 10       	cpse	r8, r1
 c36:	07 c0       	rjmp	.+14     	; 0xc46 <__stack+0x3e7>
			{
				evaluate_direction(3,speed);
 c38:	6c e2       	ldi	r22, 0x2C	; 44
 c3a:	71 e0       	ldi	r23, 0x01	; 1
 c3c:	83 e0       	ldi	r24, 0x03	; 3
 c3e:	0e 94 a3 03 	call	0x746	; 0x746 <evaluate_direction>
				//left_right_operation(speed);
				Left_trigged = 0;
 c42:	76 2c       	mov	r7, r6
				Forward_trigged = 0;
 c44:	31 cf       	rjmp	.-414    	; 0xaa8 <__stack+0x249>
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
 c46:	21 e0       	ldi	r18, 0x01	; 1
 c48:	82 12       	cpse	r8, r18
 c4a:	2d cf       	rjmp	.-422    	; 0xaa6 <__stack+0x247>
			{
				evaluate_direction(6,speed);
 c4c:	6c e2       	ldi	r22, 0x2C	; 44
 c4e:	71 e0       	ldi	r23, 0x01	; 1
 c50:	86 e0       	ldi	r24, 0x06	; 6
 c52:	0e 94 a3 03 	call	0x746	; 0x746 <evaluate_direction>
				//left_right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
 c56:	86 2c       	mov	r8, r6
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 1))
			{
				evaluate_direction(6,speed);
				//left_right_forward_operation(speed);
				Left_trigged = 0;
 c58:	76 2c       	mov	r7, r6
 c5a:	26 cf       	rjmp	.-436    	; 0xaa8 <__stack+0x249>
				Forward_trigged = 0;
			}
		}
		else if ((sensor_data_hold & 0b01111110) == 0x00)
 c5c:	81 2f       	mov	r24, r17
 c5e:	8e 77       	andi	r24, 0x7E	; 126
 c60:	09 f0       	breq	.+2      	; 0xc64 <__stack+0x405>
 c62:	22 cf       	rjmp	.-444    	; 0xaa8 <__stack+0x249>
		{
			evaluate_direction(7,speed);
 c64:	6c e2       	ldi	r22, 0x2C	; 44
 c66:	71 e0       	ldi	r23, 0x01	; 1
 c68:	87 e0       	ldi	r24, 0x07	; 7
 c6a:	0e 94 a3 03 	call	0x746	; 0x746 <evaluate_direction>
 c6e:	1c cf       	rjmp	.-456    	; 0xaa8 <__stack+0x249>
			{
				left_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 c70:	cc 20       	and	r12, r12
 c72:	09 f4       	brne	.+2      	; 0xc76 <__stack+0x417>
 c74:	71 ce       	rjmp	.-798    	; 0x958 <__stack+0xf9>
 c76:	0b c0       	rjmp	.+22     	; 0xc8e <__stack+0x42f>
			{
				right_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))
 c78:	77 20       	and	r7, r7
 c7a:	09 f4       	brne	.+2      	; 0xc7e <__stack+0x41f>
 c7c:	c5 ce       	rjmp	.-630    	; 0xa08 <__stack+0x1a9>
 c7e:	0c c0       	rjmp	.+24     	; 0xc98 <__stack+0x439>
				evaluate_direction(1,speed);
				//left_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 0) && (Forward_trigged == 1))
 c80:	cc 20       	and	r12, r12
 c82:	09 f4       	brne	.+2      	; 0xc86 <__stack+0x427>
 c84:	6a cf       	rjmp	.-300    	; 0xb5a <__stack+0x2fb>
 c86:	0d c0       	rjmp	.+26     	; 0xca2 <__stack+0x443>
				evaluate_direction(2,speed);
				//right_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 0) && (Forward_trigged == 1))  // this logic is fixed
 c88:	77 20       	and	r7, r7
 c8a:	49 f2       	breq	.-110    	; 0xc1e <__stack+0x3bf>
 c8c:	0f c0       	rjmp	.+30     	; 0xcac <__stack+0x44d>
			{
				left_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 c8e:	11 30       	cpi	r17, 0x01	; 1
 c90:	09 f4       	brne	.+2      	; 0xc94 <__stack+0x435>
 c92:	75 ce       	rjmp	.-790    	; 0x97e <__stack+0x11f>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 c94:	8b 2c       	mov	r8, r11
 c96:	0d ce       	rjmp	.-998    	; 0x8b2 <__stack+0x53>
			{
				right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 c98:	11 30       	cpi	r17, 0x01	; 1
 c9a:	09 f4       	brne	.+2      	; 0xc9e <__stack+0x43f>
 c9c:	c8 ce       	rjmp	.-624    	; 0xa2e <__stack+0x1cf>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 c9e:	8b 2c       	mov	r8, r11
 ca0:	08 ce       	rjmp	.-1008   	; 0x8b2 <__stack+0x53>
				evaluate_direction(4,speed);
				//left_forward_operation(speed);
				Right_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Right_trigged == 1) && (Forward_trigged == 0))
 ca2:	c1 30       	cpi	r28, 0x01	; 1
 ca4:	09 f4       	brne	.+2      	; 0xca8 <__stack+0x449>
 ca6:	70 cf       	rjmp	.-288    	; 0xb88 <__stack+0x329>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 ca8:	83 2c       	mov	r8, r3
 caa:	fe ce       	rjmp	.-516    	; 0xaa8 <__stack+0x249>
				evaluate_direction(5,speed);
				//right_forward_operation(speed);
				Left_trigged = 0;
				Forward_trigged = 0;
			}
			else if ((Left_trigged == 1) && (Forward_trigged == 0))
 cac:	c1 30       	cpi	r28, 0x01	; 1
 cae:	71 f2       	breq	.-100    	; 0xc4c <__stack+0x3ed>
			}
			_delay_ms(100);  //delay can be changed
			sensor_data_hold = sensor_data();
			if ((sensor_data_hold & 0b01111110))
			{
				Forward_trigged = 1;
 cb0:	83 2c       	mov	r8, r3
 cb2:	fa ce       	rjmp	.-524    	; 0xaa8 <__stack+0x249>

00000cb4 <__floatunsisf>:
 cb4:	e8 94       	clt
 cb6:	09 c0       	rjmp	.+18     	; 0xcca <__floatsisf+0x12>

00000cb8 <__floatsisf>:
 cb8:	97 fb       	bst	r25, 7
 cba:	3e f4       	brtc	.+14     	; 0xcca <__floatsisf+0x12>
 cbc:	90 95       	com	r25
 cbe:	80 95       	com	r24
 cc0:	70 95       	com	r23
 cc2:	61 95       	neg	r22
 cc4:	7f 4f       	sbci	r23, 0xFF	; 255
 cc6:	8f 4f       	sbci	r24, 0xFF	; 255
 cc8:	9f 4f       	sbci	r25, 0xFF	; 255
 cca:	99 23       	and	r25, r25
 ccc:	a9 f0       	breq	.+42     	; 0xcf8 <__floatsisf+0x40>
 cce:	f9 2f       	mov	r31, r25
 cd0:	96 e9       	ldi	r25, 0x96	; 150
 cd2:	bb 27       	eor	r27, r27
 cd4:	93 95       	inc	r25
 cd6:	f6 95       	lsr	r31
 cd8:	87 95       	ror	r24
 cda:	77 95       	ror	r23
 cdc:	67 95       	ror	r22
 cde:	b7 95       	ror	r27
 ce0:	f1 11       	cpse	r31, r1
 ce2:	f8 cf       	rjmp	.-16     	; 0xcd4 <__floatsisf+0x1c>
 ce4:	fa f4       	brpl	.+62     	; 0xd24 <__floatsisf+0x6c>
 ce6:	bb 0f       	add	r27, r27
 ce8:	11 f4       	brne	.+4      	; 0xcee <__floatsisf+0x36>
 cea:	60 ff       	sbrs	r22, 0
 cec:	1b c0       	rjmp	.+54     	; 0xd24 <__floatsisf+0x6c>
 cee:	6f 5f       	subi	r22, 0xFF	; 255
 cf0:	7f 4f       	sbci	r23, 0xFF	; 255
 cf2:	8f 4f       	sbci	r24, 0xFF	; 255
 cf4:	9f 4f       	sbci	r25, 0xFF	; 255
 cf6:	16 c0       	rjmp	.+44     	; 0xd24 <__floatsisf+0x6c>
 cf8:	88 23       	and	r24, r24
 cfa:	11 f0       	breq	.+4      	; 0xd00 <__floatsisf+0x48>
 cfc:	96 e9       	ldi	r25, 0x96	; 150
 cfe:	11 c0       	rjmp	.+34     	; 0xd22 <__floatsisf+0x6a>
 d00:	77 23       	and	r23, r23
 d02:	21 f0       	breq	.+8      	; 0xd0c <__floatsisf+0x54>
 d04:	9e e8       	ldi	r25, 0x8E	; 142
 d06:	87 2f       	mov	r24, r23
 d08:	76 2f       	mov	r23, r22
 d0a:	05 c0       	rjmp	.+10     	; 0xd16 <__floatsisf+0x5e>
 d0c:	66 23       	and	r22, r22
 d0e:	71 f0       	breq	.+28     	; 0xd2c <__floatsisf+0x74>
 d10:	96 e8       	ldi	r25, 0x86	; 134
 d12:	86 2f       	mov	r24, r22
 d14:	70 e0       	ldi	r23, 0x00	; 0
 d16:	60 e0       	ldi	r22, 0x00	; 0
 d18:	2a f0       	brmi	.+10     	; 0xd24 <__floatsisf+0x6c>
 d1a:	9a 95       	dec	r25
 d1c:	66 0f       	add	r22, r22
 d1e:	77 1f       	adc	r23, r23
 d20:	88 1f       	adc	r24, r24
 d22:	da f7       	brpl	.-10     	; 0xd1a <__floatsisf+0x62>
 d24:	88 0f       	add	r24, r24
 d26:	96 95       	lsr	r25
 d28:	87 95       	ror	r24
 d2a:	97 f9       	bld	r25, 7
 d2c:	08 95       	ret

00000d2e <lrint>:
 d2e:	41 d0       	rcall	.+130    	; 0xdb2 <__fp_splitA>
 d30:	a8 f1       	brcs	.+106    	; 0xd9c <lrint+0x6e>
 d32:	9e 57       	subi	r25, 0x7E	; 126
 d34:	a8 f1       	brcs	.+106    	; 0xda0 <lrint+0x72>
 d36:	98 51       	subi	r25, 0x18	; 24
 d38:	60 f0       	brcs	.+24     	; 0xd52 <lrint+0x24>
 d3a:	39 f1       	breq	.+78     	; 0xd8a <lrint+0x5c>
 d3c:	98 30       	cpi	r25, 0x08	; 8
 d3e:	70 f5       	brcc	.+92     	; 0xd9c <lrint+0x6e>
 d40:	09 2e       	mov	r0, r25
 d42:	99 27       	eor	r25, r25
 d44:	66 0f       	add	r22, r22
 d46:	77 1f       	adc	r23, r23
 d48:	88 1f       	adc	r24, r24
 d4a:	99 1f       	adc	r25, r25
 d4c:	0a 94       	dec	r0
 d4e:	d1 f7       	brne	.-12     	; 0xd44 <lrint+0x16>
 d50:	1c c0       	rjmp	.+56     	; 0xd8a <lrint+0x5c>
 d52:	bb 27       	eor	r27, r27
 d54:	99 3f       	cpi	r25, 0xF9	; 249
 d56:	4c f4       	brge	.+18     	; 0xd6a <lrint+0x3c>
 d58:	b1 11       	cpse	r27, r1
 d5a:	b1 e0       	ldi	r27, 0x01	; 1
 d5c:	b6 2b       	or	r27, r22
 d5e:	67 2f       	mov	r22, r23
 d60:	78 2f       	mov	r23, r24
 d62:	88 27       	eor	r24, r24
 d64:	98 5f       	subi	r25, 0xF8	; 248
 d66:	b1 f7       	brne	.-20     	; 0xd54 <lrint+0x26>
 d68:	08 c0       	rjmp	.+16     	; 0xd7a <lrint+0x4c>
 d6a:	86 95       	lsr	r24
 d6c:	77 95       	ror	r23
 d6e:	67 95       	ror	r22
 d70:	b7 95       	ror	r27
 d72:	08 f4       	brcc	.+2      	; 0xd76 <lrint+0x48>
 d74:	b1 60       	ori	r27, 0x01	; 1
 d76:	93 95       	inc	r25
 d78:	c1 f7       	brne	.-16     	; 0xd6a <lrint+0x3c>
 d7a:	bb 0f       	add	r27, r27
 d7c:	30 f4       	brcc	.+12     	; 0xd8a <lrint+0x5c>
 d7e:	11 f4       	brne	.+4      	; 0xd84 <lrint+0x56>
 d80:	60 ff       	sbrs	r22, 0
 d82:	03 c0       	rjmp	.+6      	; 0xd8a <lrint+0x5c>
 d84:	6f 5f       	subi	r22, 0xFF	; 255
 d86:	7f 4f       	sbci	r23, 0xFF	; 255
 d88:	8f 4f       	sbci	r24, 0xFF	; 255
 d8a:	3e f4       	brtc	.+14     	; 0xd9a <lrint+0x6c>
 d8c:	90 95       	com	r25
 d8e:	80 95       	com	r24
 d90:	70 95       	com	r23
 d92:	61 95       	neg	r22
 d94:	7f 4f       	sbci	r23, 0xFF	; 255
 d96:	8f 4f       	sbci	r24, 0xFF	; 255
 d98:	9f 4f       	sbci	r25, 0xFF	; 255
 d9a:	08 95       	ret
 d9c:	68 94       	set
 d9e:	24 c0       	rjmp	.+72     	; 0xde8 <__fp_szero>
 da0:	22 c0       	rjmp	.+68     	; 0xde6 <__fp_zero>

00000da2 <__fp_split3>:
 da2:	57 fd       	sbrc	r21, 7
 da4:	90 58       	subi	r25, 0x80	; 128
 da6:	44 0f       	add	r20, r20
 da8:	55 1f       	adc	r21, r21
 daa:	59 f0       	breq	.+22     	; 0xdc2 <__fp_splitA+0x10>
 dac:	5f 3f       	cpi	r21, 0xFF	; 255
 dae:	71 f0       	breq	.+28     	; 0xdcc <__fp_splitA+0x1a>
 db0:	47 95       	ror	r20

00000db2 <__fp_splitA>:
 db2:	88 0f       	add	r24, r24
 db4:	97 fb       	bst	r25, 7
 db6:	99 1f       	adc	r25, r25
 db8:	61 f0       	breq	.+24     	; 0xdd2 <__fp_splitA+0x20>
 dba:	9f 3f       	cpi	r25, 0xFF	; 255
 dbc:	79 f0       	breq	.+30     	; 0xddc <__fp_splitA+0x2a>
 dbe:	87 95       	ror	r24
 dc0:	08 95       	ret
 dc2:	12 16       	cp	r1, r18
 dc4:	13 06       	cpc	r1, r19
 dc6:	14 06       	cpc	r1, r20
 dc8:	55 1f       	adc	r21, r21
 dca:	f2 cf       	rjmp	.-28     	; 0xdb0 <__fp_split3+0xe>
 dcc:	46 95       	lsr	r20
 dce:	f1 df       	rcall	.-30     	; 0xdb2 <__fp_splitA>
 dd0:	08 c0       	rjmp	.+16     	; 0xde2 <__fp_splitA+0x30>
 dd2:	16 16       	cp	r1, r22
 dd4:	17 06       	cpc	r1, r23
 dd6:	18 06       	cpc	r1, r24
 dd8:	99 1f       	adc	r25, r25
 dda:	f1 cf       	rjmp	.-30     	; 0xdbe <__fp_splitA+0xc>
 ddc:	86 95       	lsr	r24
 dde:	71 05       	cpc	r23, r1
 de0:	61 05       	cpc	r22, r1
 de2:	08 94       	sec
 de4:	08 95       	ret

00000de6 <__fp_zero>:
 de6:	e8 94       	clt

00000de8 <__fp_szero>:
 de8:	bb 27       	eor	r27, r27
 dea:	66 27       	eor	r22, r22
 dec:	77 27       	eor	r23, r23
 dee:	cb 01       	movw	r24, r22
 df0:	97 f9       	bld	r25, 7
 df2:	08 95       	ret

00000df4 <__udivmodsi4>:
 df4:	a1 e2       	ldi	r26, 0x21	; 33
 df6:	1a 2e       	mov	r1, r26
 df8:	aa 1b       	sub	r26, r26
 dfa:	bb 1b       	sub	r27, r27
 dfc:	fd 01       	movw	r30, r26
 dfe:	0d c0       	rjmp	.+26     	; 0xe1a <__udivmodsi4_ep>

00000e00 <__udivmodsi4_loop>:
 e00:	aa 1f       	adc	r26, r26
 e02:	bb 1f       	adc	r27, r27
 e04:	ee 1f       	adc	r30, r30
 e06:	ff 1f       	adc	r31, r31
 e08:	a2 17       	cp	r26, r18
 e0a:	b3 07       	cpc	r27, r19
 e0c:	e4 07       	cpc	r30, r20
 e0e:	f5 07       	cpc	r31, r21
 e10:	20 f0       	brcs	.+8      	; 0xe1a <__udivmodsi4_ep>
 e12:	a2 1b       	sub	r26, r18
 e14:	b3 0b       	sbc	r27, r19
 e16:	e4 0b       	sbc	r30, r20
 e18:	f5 0b       	sbc	r31, r21

00000e1a <__udivmodsi4_ep>:
 e1a:	66 1f       	adc	r22, r22
 e1c:	77 1f       	adc	r23, r23
 e1e:	88 1f       	adc	r24, r24
 e20:	99 1f       	adc	r25, r25
 e22:	1a 94       	dec	r1
 e24:	69 f7       	brne	.-38     	; 0xe00 <__udivmodsi4_loop>
 e26:	60 95       	com	r22
 e28:	70 95       	com	r23
 e2a:	80 95       	com	r24
 e2c:	90 95       	com	r25
 e2e:	9b 01       	movw	r18, r22
 e30:	ac 01       	movw	r20, r24
 e32:	bd 01       	movw	r22, r26
 e34:	cf 01       	movw	r24, r30
 e36:	08 95       	ret

00000e38 <strrev>:
 e38:	dc 01       	movw	r26, r24
 e3a:	fc 01       	movw	r30, r24
 e3c:	67 2f       	mov	r22, r23
 e3e:	71 91       	ld	r23, Z+
 e40:	77 23       	and	r23, r23
 e42:	e1 f7       	brne	.-8      	; 0xe3c <strrev+0x4>
 e44:	32 97       	sbiw	r30, 0x02	; 2
 e46:	04 c0       	rjmp	.+8      	; 0xe50 <strrev+0x18>
 e48:	7c 91       	ld	r23, X
 e4a:	6d 93       	st	X+, r22
 e4c:	70 83       	st	Z, r23
 e4e:	62 91       	ld	r22, -Z
 e50:	ae 17       	cp	r26, r30
 e52:	bf 07       	cpc	r27, r31
 e54:	c8 f3       	brcs	.-14     	; 0xe48 <strrev+0x10>
 e56:	08 95       	ret

00000e58 <_exit>:
 e58:	f8 94       	cli

00000e5a <__stop_program>:
 e5a:	ff cf       	rjmp	.-2      	; 0xe5a <__stop_program>
