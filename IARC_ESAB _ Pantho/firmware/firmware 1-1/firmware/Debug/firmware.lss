
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000358  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000080  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000a29  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001e6  00000000  00000000  00000e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000372  00000000  00000000  0000106b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000108  00000000  00000000  000013e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000024e  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000602  00000000  00000000  00001736  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000b8  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  64:	0c 94 aa 01 	jmp	0x354	; 0x354 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <go_forward>:
#ifndef M_DIR_H_
#define M_DIR_H_

void go_forward(void)
{
	PORTB = 0x05;
  6c:	85 e0       	ldi	r24, 0x05	; 5
  6e:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  70:	8e b5       	in	r24, 0x2e	; 46
  72:	82 60       	ori	r24, 0x02	; 2
  74:	8e bd       	out	0x2e, r24	; 46
  76:	08 95       	ret

00000078 <right_rotate>:
	TCCR1B |= (1<<1);
}

void right_rotate(void)
{
	PORTB = 0x09;
  78:	89 e0       	ldi	r24, 0x09	; 9
  7a:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  7c:	8e b5       	in	r24, 0x2e	; 46
  7e:	82 60       	ori	r24, 0x02	; 2
  80:	8e bd       	out	0x2e, r24	; 46
  82:	08 95       	ret

00000084 <left_rotate>:
}

void left_rotate(void)
{
	PORTB = 0x06;
  84:	86 e0       	ldi	r24, 0x06	; 6
  86:	88 bb       	out	0x18, r24	; 24
	TCCR1B |= (1<<1);
  88:	8e b5       	in	r24, 0x2e	; 46
  8a:	82 60       	ori	r24, 0x02	; 2
  8c:	8e bd       	out	0x2e, r24	; 46
  8e:	08 95       	ret

00000090 <stay_stop>:
}

void stay_stop(void)
{
	PORTB = 0x00;
  90:	18 ba       	out	0x18, r1	; 24
	TCCR1B &= ~(1<<1);
  92:	8e b5       	in	r24, 0x2e	; 46
  94:	8d 7f       	andi	r24, 0xFD	; 253
  96:	8e bd       	out	0x2e, r24	; 46
  98:	08 95       	ret

0000009a <sensor_data>:

uint8_t sensor_data(void)
{
	uint8_t sn_data_1=0;
sn_dt:
	sn_data_1 = PINC;
  9a:	83 b3       	in	r24, 0x13	; 19

		if ( !(sn_data_1 & (1<<7)) || !(sn_data_1 & (1<<0)) || sn_data_1 == 0x00 )
  9c:	80 ff       	sbrs	r24, 0
  9e:	fd cf       	rjmp	.-6      	; 0x9a <sensor_data>
  a0:	88 23       	and	r24, r24
  a2:	dc f7       	brge	.-10     	; 0x9a <sensor_data>
		}
		else
		{
			return (sn_data_1 & (0b01111110));
		}
}
  a4:	8e 77       	andi	r24, 0x7E	; 126
  a6:	08 95       	ret

000000a8 <turn_U>:

void turn_U(uint16_t speed)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	87 ee       	ldi	r24, 0xE7	; 231
  b2:	93 e0       	ldi	r25, 0x03	; 3
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <turn_U+0xc>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <turn_U+0x16>
  be:	00 00       	nop
	_delay_ms(160);
	stay_stop();
  c0:	0e 94 48 00 	call	0x90	; 0x90 <stay_stop>
  c4:	2f e7       	ldi	r18, 0x7F	; 127
  c6:	88 e3       	ldi	r24, 0x38	; 56
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <turn_U+0x22>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <turn_U+0x2c>
  d4:	00 00       	nop
	_delay_ms(50);
	set_speed_R(speed + 50); //40
  d6:	ce 01       	movw	r24, r28
  d8:	c2 96       	adiw	r24, 0x32	; 50
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
  da:	99 bd       	out	0x29, r25	; 41
  dc:	88 bd       	out	0x28, r24	; 40
{
	_delay_ms(160);
	stay_stop();
	_delay_ms(50);
	set_speed_R(speed + 50); //40
	set_speed_L(speed + 60); //70
  de:	0a 96       	adiw	r24, 0x0a	; 10
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
  e0:	9b bd       	out	0x2b, r25	; 43
  e2:	8a bd       	out	0x2a, r24	; 42
	_delay_ms(160);
	stay_stop();
	_delay_ms(50);
	set_speed_R(speed + 50); //40
	set_speed_L(speed + 60); //70
	left_rotate();
  e4:	0e 94 42 00 	call	0x84	; 0x84 <left_rotate>
	while((sensor_data() & (3<<5)) != (3<<5));
  e8:	0e 94 4d 00 	call	0x9a	; 0x9a <sensor_data>
  ec:	80 76       	andi	r24, 0x60	; 96
  ee:	80 36       	cpi	r24, 0x60	; 96
  f0:	d9 f7       	brne	.-10     	; 0xe8 <turn_U+0x40>
	while((sensor_data() & (3<<4)) != (3<<4));
  f2:	0e 94 4d 00 	call	0x9a	; 0x9a <sensor_data>
  f6:	80 73       	andi	r24, 0x30	; 48
  f8:	80 33       	cpi	r24, 0x30	; 48
  fa:	d9 f7       	brne	.-10     	; 0xf2 <turn_U+0x4a>
	//while(sensor_data() != (3<<3));
	stay_stop();
  fc:	0e 94 48 00 	call	0x90	; 0x90 <stay_stop>
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	80 e7       	ldi	r24, 0x70	; 112
 104:	92 e0       	ldi	r25, 0x02	; 2
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <turn_U+0x5e>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <turn_U+0x68>
 110:	00 00       	nop
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 112:	d9 bd       	out	0x29, r29	; 41
 114:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 116:	db bd       	out	0x2b, r29	; 43
 118:	ca bd       	out	0x2a, r28	; 42
	while((sensor_data() & (3<<4)) != (3<<4));
	//while(sensor_data() != (3<<3));
	stay_stop();
	_delay_ms(100);
	set_speed_RL(speed);
	go_forward();
 11a:	0e 94 36 00 	call	0x6c	; 0x6c <go_forward>
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <turn_left>:

void turn_left(uint16_t speed)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	ec 01       	movw	r28, r24
	stay_stop();
 12a:	0e 94 48 00 	call	0x90	; 0x90 <stay_stop>
 12e:	2f e7       	ldi	r18, 0x7F	; 127
 130:	88 e3       	ldi	r24, 0x38	; 56
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <turn_left+0x10>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <turn_left+0x1a>
 13e:	00 00       	nop
	_delay_ms(50);
	set_speed_R(speed + 20); //40
 140:	ce 01       	movw	r24, r28
 142:	44 96       	adiw	r24, 0x14	; 20
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 144:	99 bd       	out	0x29, r25	; 41
 146:	88 bd       	out	0x28, r24	; 40
void turn_left(uint16_t speed)
{
	stay_stop();
	_delay_ms(50);
	set_speed_R(speed + 20); //40
	set_speed_L(speed + 30); //70
 148:	0a 96       	adiw	r24, 0x0a	; 10
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 14a:	9b bd       	out	0x2b, r25	; 43
 14c:	8a bd       	out	0x2a, r24	; 42
{
	stay_stop();
	_delay_ms(50);
	set_speed_R(speed + 20); //40
	set_speed_L(speed + 30); //70
	left_rotate();
 14e:	0e 94 42 00 	call	0x84	; 0x84 <left_rotate>
	while((sensor_data() & (3<<5)) != (3<<5));
 152:	0e 94 4d 00 	call	0x9a	; 0x9a <sensor_data>
 156:	80 76       	andi	r24, 0x60	; 96
 158:	80 36       	cpi	r24, 0x60	; 96
 15a:	d9 f7       	brne	.-10     	; 0x152 <turn_left+0x2e>
	while((sensor_data() & (3<<4)) != (3<<4));
 15c:	0e 94 4d 00 	call	0x9a	; 0x9a <sensor_data>
 160:	80 73       	andi	r24, 0x30	; 48
 162:	80 33       	cpi	r24, 0x30	; 48
 164:	d9 f7       	brne	.-10     	; 0x15c <turn_left+0x38>
	//while(sensor_data() != (3<<3));
	stay_stop();
 166:	0e 94 48 00 	call	0x90	; 0x90 <stay_stop>
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	80 e7       	ldi	r24, 0x70	; 112
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <turn_left+0x4c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <turn_left+0x56>
 17a:	00 00       	nop
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 17c:	d9 bd       	out	0x29, r29	; 41
 17e:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 180:	db bd       	out	0x2b, r29	; 43
 182:	ca bd       	out	0x2a, r28	; 42
	while((sensor_data() & (3<<4)) != (3<<4));
	//while(sensor_data() != (3<<3));
	stay_stop();
	_delay_ms(100);
	set_speed_RL(speed);
	go_forward();
 184:	0e 94 36 00 	call	0x6c	; 0x6c <go_forward>
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <turn_right>:

void turn_right(uint16_t speed)
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	ec 01       	movw	r28, r24
	stay_stop();
 194:	0e 94 48 00 	call	0x90	; 0x90 <stay_stop>
 198:	2f e7       	ldi	r18, 0x7F	; 127
 19a:	88 e3       	ldi	r24, 0x38	; 56
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <turn_right+0x10>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <turn_right+0x1a>
 1a8:	00 00       	nop
	_delay_ms(50);
	set_speed_R(speed + 30); //40
 1aa:	ce 01       	movw	r24, r28
 1ac:	4e 96       	adiw	r24, 0x1e	; 30
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 1ae:	99 bd       	out	0x29, r25	; 41
 1b0:	88 bd       	out	0x28, r24	; 40
void turn_right(uint16_t speed)
{
	stay_stop();
	_delay_ms(50);
	set_speed_R(speed + 30); //40
	set_speed_L(speed + 20); //70
 1b2:	0a 97       	sbiw	r24, 0x0a	; 10
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 1b4:	9b bd       	out	0x2b, r25	; 43
 1b6:	8a bd       	out	0x2a, r24	; 42
{
	stay_stop();
	_delay_ms(50);
	set_speed_R(speed + 30); //40
	set_speed_L(speed + 20); //70
	right_rotate();
 1b8:	0e 94 3c 00 	call	0x78	; 0x78 <right_rotate>
	while((sensor_data() & (3<<1)) != (3<<1));
 1bc:	0e 94 4d 00 	call	0x9a	; 0x9a <sensor_data>
 1c0:	86 70       	andi	r24, 0x06	; 6
 1c2:	86 30       	cpi	r24, 0x06	; 6
 1c4:	d9 f7       	brne	.-10     	; 0x1bc <turn_right+0x2e>
	while((sensor_data() & (3<<2)) != (3<<2));
 1c6:	0e 94 4d 00 	call	0x9a	; 0x9a <sensor_data>
 1ca:	8c 70       	andi	r24, 0x0C	; 12
 1cc:	8c 30       	cpi	r24, 0x0C	; 12
 1ce:	d9 f7       	brne	.-10     	; 0x1c6 <turn_right+0x38>
	//while(sensor_data() != (3<<3));
	stay_stop();
 1d0:	0e 94 48 00 	call	0x90	; 0x90 <stay_stop>
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	80 e7       	ldi	r24, 0x70	; 112
 1d8:	92 e0       	ldi	r25, 0x02	; 2
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <turn_right+0x4c>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <turn_right+0x56>
 1e4:	00 00       	nop
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 1e6:	d9 bd       	out	0x29, r29	; 41
 1e8:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 1ea:	db bd       	out	0x2b, r29	; 43
 1ec:	ca bd       	out	0x2a, r28	; 42
	while((sensor_data() & (3<<2)) != (3<<2));
	//while(sensor_data() != (3<<3));
	stay_stop();
	_delay_ms(100);
	set_speed_RL(speed);
	go_forward();
 1ee:	0e 94 36 00 	call	0x6c	; 0x6c <go_forward>
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <main>:
{
	uint16_t speed=350;
	uint8_t sensor_data_hold=0, sensor_data_temp=0;//, speed_grad_count=0;
	
	//port pin initialization
	PORTA = 03;
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	8b bb       	out	0x1b, r24	; 27
	DDRA = 00;
 1fc:	1a ba       	out	0x1a, r1	; 26
	PORTB=0x00;
 1fe:	18 ba       	out	0x18, r1	; 24
	DDRB=0x0F;
 200:	9f e0       	ldi	r25, 0x0F	; 15
 202:	97 bb       	out	0x17, r25	; 23
	PORTC=0xFF;
 204:	9f ef       	ldi	r25, 0xFF	; 255
 206:	95 bb       	out	0x15, r25	; 21
	DDRC=0x00;
 208:	14 ba       	out	0x14, r1	; 20
	PORTD=0x00;
 20a:	12 ba       	out	0x12, r1	; 18
	DDRD=0x30;
 20c:	90 e3       	ldi	r25, 0x30	; 48
 20e:	91 bb       	out	0x11, r25	; 17
	
	//Timer Counter1 Initialization
	TCCR1A=0xA2;
 210:	92 ea       	ldi	r25, 0xA2	; 162
 212:	9f bd       	out	0x2f, r25	; 47
	TCCR1B=0x18;
 214:	98 e1       	ldi	r25, 0x18	; 24
 216:	9e bd       	out	0x2e, r25	; 46
	TCNT1=0x0000;
 218:	1d bc       	out	0x2d, r1	; 45
 21a:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x03;
 21c:	87 bd       	out	0x27, r24	; 39
	ICR1L=0xE8; //03E8=1000 in decimal
 21e:	88 ee       	ldi	r24, 0xE8	; 232
 220:	86 bd       	out	0x26, r24	; 38
	OCR1A=speed;
 222:	8e e5       	ldi	r24, 0x5E	; 94
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	9b bd       	out	0x2b, r25	; 43
 228:	8a bd       	out	0x2a, r24	; 42
	OCR1B=speed;
 22a:	99 bd       	out	0x29, r25	; 41
 22c:	88 bd       	out	0x28, r24	; 40
	
	//usart_init(9600); //USART Initialization
	
	//start_tour:
	while (PINA & (1<<PA0));
 22e:	c8 99       	sbic	0x19, 0	; 25
 230:	fe cf       	rjmp	.-4      	; 0x22e <main+0x36>
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	89 e6       	ldi	r24, 0x69	; 105
 236:	98 e1       	ldi	r25, 0x18	; 24
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0x40>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x4a>
 242:	00 00       	nop
	_delay_ms(1000);
	go_forward();
 244:	0e 94 36 00 	call	0x6c	; 0x6c <go_forward>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 248:	0f ea       	ldi	r16, 0xAF	; 175
 24a:	10 e0       	ldi	r17, 0x00	; 0
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 24c:	ce e5       	ldi	r28, 0x5E	; 94
 24e:	d1 e0       	ldi	r29, 0x01	; 1
	//************************************************************************************************************************	
    while(1)  //while loop 1
    {
start_over_while_1:

		sensor_data_hold = sensor_data();  //normally read
 250:	0e 94 4d 00 	call	0x9a	; 0x9a <sensor_data>
		
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
 254:	98 2f       	mov	r25, r24
 256:	98 71       	andi	r25, 0x18	; 24
 258:	98 31       	cpi	r25, 0x18	; 24
 25a:	29 f4       	brne	.+10     	; 0x266 <main+0x6e>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 25c:	d9 bd       	out	0x29, r29	; 41
 25e:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 260:	db bd       	out	0x2b, r29	; 43
 262:	ca bd       	out	0x2a, r28	; 42
 264:	09 c0       	rjmp	.+18     	; 0x278 <main+0x80>
		// start line follow
		if ((sensor_data_hold & (3<<3)) == (3<<3))
		{
			set_speed_RL(speed);
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
 266:	83 ff       	sbrs	r24, 3
 268:	03 c0       	rjmp	.+6      	; 0x270 <main+0x78>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 26a:	19 bd       	out	0x29, r17	; 41
 26c:	08 bd       	out	0x28, r16	; 40
 26e:	04 c0       	rjmp	.+8      	; 0x278 <main+0x80>
		}
		else if ((sensor_data_hold & (1<<3)) == (1<<3))
		{
			set_speed_R(speed - 175);  //previously 150
		}
		else if ((sensor_data_hold & (1<<4)) == (1<<4))
 270:	84 ff       	sbrs	r24, 4
 272:	02 c0       	rjmp	.+4      	; 0x278 <main+0x80>
	OCR1B = speed_R;
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 274:	1b bd       	out	0x2b, r17	; 43
 276:	0a bd       	out	0x2a, r16	; 42
			set_speed_L(speed - 175);  //previously 150
		}
		// end line follow
		
		
		if (sensor_data_hold == (63<<1))	// right and left both trig // T shape trig
 278:	8e 37       	cpi	r24, 0x7E	; 126
 27a:	61 f4       	brne	.+24     	; 0x294 <main+0x9c>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 27c:	d9 bd       	out	0x29, r29	; 41
 27e:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 280:	db bd       	out	0x2b, r29	; 43
 282:	ca bd       	out	0x2a, r28	; 42
		if (sensor_data_hold == (63<<1))	// right and left both trig // T shape trig
		{
			set_speed_RL(speed);
			while(1)
			{
				sensor_data_temp = sensor_data();
 284:	0e 94 4d 00 	call	0x9a	; 0x9a <sensor_data>

					if (sensor_data_temp != (63<<1)) // previously (sensor_data_temp == 0x00)
 288:	8e 37       	cpi	r24, 0x7E	; 126
 28a:	e1 f3       	breq	.-8      	; 0x284 <main+0x8c>
					{
						//update path data
						turn_left(speed);
 28c:	ce 01       	movw	r24, r28
 28e:	0e 94 92 00 	call	0x124	; 0x124 <turn_left>
 292:	de cf       	rjmp	.-68     	; 0x250 <main+0x58>
						break;
					}*/				
			}
		}
		
		else if ((sensor_data_hold == (7<<4)) || (sensor_data_hold == (15<<3)) || (sensor_data_hold == (31<<2)))	//left turn trig  //can be use else if later
 294:	98 2f       	mov	r25, r24
 296:	97 7f       	andi	r25, 0xF7	; 247
 298:	90 37       	cpi	r25, 0x70	; 112
 29a:	11 f0       	breq	.+4      	; 0x2a0 <main+0xa8>
 29c:	8c 37       	cpi	r24, 0x7C	; 124
 29e:	e9 f4       	brne	.+58     	; 0x2da <main+0xe2>
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	86 e7       	ldi	r24, 0x76	; 118
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0xae>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0xb8>
 2b0:	00 00       	nop
		{
			_delay_ms(60);
			sensor_data_hold = sensor_data();
 2b2:	0e 94 4d 00 	call	0x9a	; 0x9a <sensor_data>
			if (((sensor_data_hold == (7<<4)) || (sensor_data_hold == (15<<3)) || (sensor_data_hold == (31<<2))))
 2b6:	98 2f       	mov	r25, r24
 2b8:	97 7f       	andi	r25, 0xF7	; 247
 2ba:	90 37       	cpi	r25, 0x70	; 112
 2bc:	11 f0       	breq	.+4      	; 0x2c2 <main+0xca>
 2be:	8c 37       	cpi	r24, 0x7C	; 124
 2c0:	39 f6       	brne	.-114    	; 0x250 <main+0x58>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 2c2:	d9 bd       	out	0x29, r29	; 41
 2c4:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 2c6:	db bd       	out	0x2b, r29	; 43
 2c8:	ca bd       	out	0x2a, r28	; 42
			{
				//speed = 300;
				set_speed_RL(speed);  // this line is mandatory do not forget it
				while(1)
				{
					sensor_data_temp = sensor_data();
 2ca:	0e 94 4d 00 	call	0x9a	; 0x9a <sensor_data>
					
					if (!(sensor_data_temp & (1<<6)))
 2ce:	86 fd       	sbrc	r24, 6
 2d0:	fc cf       	rjmp	.-8      	; 0x2ca <main+0xd2>
					{
						//update path data
						turn_left(speed);
 2d2:	ce 01       	movw	r24, r28
 2d4:	0e 94 92 00 	call	0x124	; 0x124 <turn_left>
		
		else if ((sensor_data_hold == (7<<4)) || (sensor_data_hold == (15<<3)) || (sensor_data_hold == (31<<2)))	//left turn trig  //can be use else if later
		{
			_delay_ms(60);
			sensor_data_hold = sensor_data();
			if (((sensor_data_hold == (7<<4)) || (sensor_data_hold == (15<<3)) || (sensor_data_hold == (31<<2))))
 2d8:	bb cf       	rjmp	.-138    	; 0x250 <main+0x58>
			{
				goto start_over_while_1;
			}
		}
		
		else if ((sensor_data_hold == (7<<1)) || (sensor_data_hold == (15<<1)) || (sensor_data_hold == (31<<1)))	//right turn trig //else if later
 2da:	98 2f       	mov	r25, r24
 2dc:	9f 7e       	andi	r25, 0xEF	; 239
 2de:	9e 30       	cpi	r25, 0x0E	; 14
 2e0:	11 f0       	breq	.+4      	; 0x2e6 <main+0xee>
 2e2:	8e 33       	cpi	r24, 0x3E	; 62
 2e4:	89 f5       	brne	.+98     	; 0x348 <main+0x150>
 2e6:	2f ef       	ldi	r18, 0xFF	; 255
 2e8:	86 e7       	ldi	r24, 0x76	; 118
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	90 40       	sbci	r25, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0xf4>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0xfe>
 2f6:	00 00       	nop
		{
			_delay_ms(60);
			sensor_data_hold = sensor_data();
 2f8:	0e 94 4d 00 	call	0x9a	; 0x9a <sensor_data>
			if ((sensor_data_hold == (7<<1)) || (sensor_data_hold == (15<<1)) || (sensor_data_hold == (31<<1)))
 2fc:	98 2f       	mov	r25, r24
 2fe:	9f 7e       	andi	r25, 0xEF	; 239
 300:	9e 30       	cpi	r25, 0x0E	; 14
 302:	19 f0       	breq	.+6      	; 0x30a <main+0x112>
 304:	8e 33       	cpi	r24, 0x3E	; 62
 306:	09 f0       	breq	.+2      	; 0x30a <main+0x112>
 308:	a3 cf       	rjmp	.-186    	; 0x250 <main+0x58>
//  Functions are started from here  ***************************************************************************
//**************************************************************************************************************

void set_speed_R(uint16_t speed_R)
{
	OCR1B = speed_R;
 30a:	d9 bd       	out	0x29, r29	; 41
 30c:	c8 bd       	out	0x28, r28	; 40
}

void set_speed_L(uint16_t speed_L)
{
	OCR1A = speed_L;
 30e:	db bd       	out	0x2b, r29	; 43
 310:	ca bd       	out	0x2a, r28	; 42
			if ((sensor_data_hold == (7<<1)) || (sensor_data_hold == (15<<1)) || (sensor_data_hold == (31<<1)))
			{
				set_speed_RL(speed);  // this line is mandatory do not forget it
				while(1)
				{
					sensor_data_temp = sensor_data();
 312:	0e 94 4d 00 	call	0x9a	; 0x9a <sensor_data>
					
					if (!(sensor_data_temp & (1<<1)))
 316:	81 fd       	sbrc	r24, 1
 318:	fc cf       	rjmp	.-8      	; 0x312 <main+0x11a>
 31a:	8f e5       	ldi	r24, 0x5F	; 95
 31c:	9a ee       	ldi	r25, 0xEA	; 234
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <main+0x126>
 322:	00 c0       	rjmp	.+0      	; 0x324 <main+0x12c>
 324:	00 00       	nop
					{
						//update path data
						_delay_ms(30); // 35 is not bad
						sensor_data_temp = sensor_data();
 326:	0e 94 4d 00 	call	0x9a	; 0x9a <sensor_data>
						if (sensor_data_temp == 0x00)
 32a:	81 11       	cpse	r24, r1
 32c:	04 c0       	rjmp	.+8      	; 0x336 <main+0x13e>
						{
							//update path data
							turn_right(speed);
 32e:	ce 01       	movw	r24, r28
 330:	0e 94 c7 00 	call	0x18e	; 0x18e <turn_right>
							break;
 334:	8d cf       	rjmp	.-230    	; 0x250 <main+0x58>
						}
						else if ((sensor_data_temp == (3<<2)) || (sensor_data_temp == (3<<3)) || (sensor_data_temp == (3<<4)))
 336:	8c 30       	cpi	r24, 0x0C	; 12
 338:	09 f4       	brne	.+2      	; 0x33c <main+0x144>
 33a:	8a cf       	rjmp	.-236    	; 0x250 <main+0x58>
 33c:	88 31       	cpi	r24, 0x18	; 24
 33e:	09 f4       	brne	.+2      	; 0x342 <main+0x14a>
 340:	87 cf       	rjmp	.-242    	; 0x250 <main+0x58>
 342:	80 33       	cpi	r24, 0x30	; 48
 344:	31 f7       	brne	.-52     	; 0x312 <main+0x11a>
 346:	84 cf       	rjmp	.-248    	; 0x250 <main+0x58>
			{
				goto start_over_while_1;
			}		
		}
		
		else if (sensor_data_hold == 0x00)
 348:	81 11       	cpse	r24, r1
 34a:	82 cf       	rjmp	.-252    	; 0x250 <main+0x58>
		{
			// update data
			turn_U(speed);
 34c:	ce 01       	movw	r24, r28
 34e:	0e 94 54 00 	call	0xa8	; 0xa8 <turn_U>
 352:	7e cf       	rjmp	.-260    	; 0x250 <main+0x58>

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
